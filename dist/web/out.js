/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((module) => {

"use strict";
module.exports = require("vscode");

/***/ }),
/* 2 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/** 
 * @author github.com/tintinweb
 * @license MIT
 * 
 * 
 * */

const vscode = __webpack_require__(1);

function extensionConfig() {
    return vscode.workspace.getConfiguration('solidity-metrics');
}

function extension() {
    return vscode.extensions.getExtension('tintinweb.solidity-metrics');
}

module.exports = {
    extensionConfig: extensionConfig,
    extension: extension,
};

/***/ }),
/* 3 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/** 
 * @author github.com/tintinweb
 * @license MIT
 * 
 * 
 * */

/** imports */
const vscode = __webpack_require__(1);
const path =  __webpack_require__(4);
const fs = __webpack_require__(5);

/** global vars */


/** classdecs */

class InteractiveWebviewGenerator {

    constructor(context, content_folder) {
        this.context = context;
        this.webviewPanels = new Map();
        this.timeout = null;
        this.content_folder = content_folder;
    }

    setNeedsRebuild(uri, needsRebuild) {
        let panel = this.webviewPanels.get(uri);

        if (panel) {
            panel.setNeedsRebuild(needsRebuild);
            this.rebuild();
        }
    }

    getPanel(uri){
        return this.webviewPanels.get(uri);
    }

    getActivePanels(){
        let panels = [];

        this.webviewPanels.forEach(v => {
            if(v.getPanel().active){
                panels.push(v);
            }
        });
        return panels;
    }

    dispose() {
        vscode.commands.executeCommand('setContext', 'metricsReportActiveContext', !!this.getActivePanels().length);
    }

    rebuild() {
        let atLeastOneActive = false;
        this.webviewPanels.forEach(panel => {
            atLeastOneActive |= panel.getPanel().active;
            if(panel.getNeedsRebuild() && panel.getPanel().visible) {
                this.updateContent(panel, vscode.workspace.textDocuments.find(doc => doc.uri == panel.uri));
            }
        });
        vscode.commands.executeCommand('setContext', 'metricsReportActiveContext', atLeastOneActive);
    }

    async revealOrCreatePreview(displayColumn, doc) {
        let that = this;
        return new Promise(function(resolve, reject) {
            let previewPanel = that.webviewPanels.get(doc.uri);

            if (previewPanel) {
                previewPanel.reveal(displayColumn);
            }
            else {
                previewPanel = that.createPreviewPanel(doc, displayColumn);
                that.webviewPanels.set(doc.uri, previewPanel);
                // when the user closes the tab, remove the panel
                previewPanel.getPanel().onDidDispose(() => that.webviewPanels.delete(doc.uri) && that.dispose(previewPanel), undefined, that.context.subscriptions);
                // when the pane becomes visible again, refresh it
                previewPanel.getPanel().onDidChangeViewState(_ => that.rebuild());

                previewPanel.getPanel().webview.onDidReceiveMessage(e => that.handleMessage(previewPanel, e), undefined, that.context.subscriptions);
            }

            that.updateContent(previewPanel, doc)
                .then(previewPanel => {
                    resolve(previewPanel);
                });
        });
    }

    handleMessage(previewPanel, message) {
        console.log(`Message received from the webview: ${message.command}`);

        switch(message.command){
            case 'onRenderFinished':
                previewPanel.onRenderFinished(message);
                break;
            case 'onPageLoaded':
                previewPanel.onPageLoaded(message);
                break;
            case 'onClick':
                previewPanel.onClick(message);
                break;
            case 'onDblClick':
                console.log("dblclick --> navigate to code location");
                break;
            default:
                previewPanel.handleMessage(message);
                //forward unhandled messages to previewpanel
        }
    }

    createPreviewPanel(doc, displayColumn ) {
        let previewTitle = `Solidity Metrics: '${path.basename(doc.fileName)}'`;

        let webViewPanel = vscode.window.createWebviewPanel('metricsView', previewTitle, displayColumn, {
            enableFindWidget: false,
            enableScripts: true,
            retainContextWhenHidden: true,
            localResourceRoots: [vscode.Uri.file(path.join(this.context.extensionPath, "content"))]
        });

        webViewPanel.iconPath = vscode.Uri.file(this.context.asAbsolutePath(path.join("content","icon.png")));

        return new PreviewPanel(this, doc.uri, webViewPanel);
    }

    async updateContent(previewPanel, doc) {
        return new Promise(async (resolve, reject) => {
            if(!previewPanel.getPanel().webview.html) {
                previewPanel.getPanel().webview.html = "Please wait...";
            }
            previewPanel.setNeedsRebuild(false);
            previewPanel.getPanel().webview.html = await this.getPreviewHtml(previewPanel, doc);
            return resolve(previewPanel);
        });
    }

    async getPreviewTemplate(context, templateName){
        let previewPath = context.asAbsolutePath(path.join(this.content_folder, templateName));
    
        return new Promise((resolve, reject) => {
            fs.readFile(previewPath, "utf8", function (err, data) {
                if (err) reject(err);
                else resolve(data);
            });
        });
    }

    async getPreviewHtml(previewPanel, doc){
        let templateHtml = await this.getPreviewTemplate(this.context, "index.html");

        templateHtml = templateHtml.replace(/<script .*?src="(.+)">/g, (scriptTag, srcPath) => {
            let resource=vscode.Uri.file(
                path.join(this.context.extensionPath, this.content_folder, ...(srcPath.split("/"))));
            return `<script src="${previewPanel.getPanel().webview.asWebviewUri(resource)}">`;
        }).replace(/<link rel="stylesheet" type="text\/css" href="(.+)"\/>/g, (scriptTag, srcPath) => {
            let resource=vscode.Uri.file(
                path.join(this.context.extensionPath, this.content_folder, ...(srcPath.split("/"))));
            return `<link rel="stylesheet" href="${previewPanel.getPanel().webview.asWebviewUri(resource)}"/>`;
        });
        return templateHtml;
    }
}

class PreviewPanel {

    constructor( parent, uri,  panel) {
        this.parent = parent;
        this.needsRebuild = false;
        this.uri = uri;
        this.panel = panel;

        this.contextData = null;

        this.lastRender = null;
    }

    reveal(displayColumn) {
        this.panel.reveal(displayColumn);
    }

    setNeedsRebuild(needsRebuild) {
        this.needsRebuild = needsRebuild;
    }

    getNeedsRebuild() {
        return this.needsRebuild;
    }

    getPanel() {
        return this.panel;
    }

    getWebView() {
        return this.panel.webview;
    }

    getContextData() {
        return this.contextData;
    }

    setContextData(contextData){
        this.contextData = contextData;
    }

    renderDot(dotSrc) {
        if(this.lastRender && Date.now() - this.lastRender <= 5000) return;  //naive approach: do not call render if it is already rendering (onDidSave fires a lot of events)
        this.lastRender = Date.now();
        this.panel.webview.postMessage({ command: 'renderDot', value: dotSrc });
    }

    handleMessage(message){
        console.warn('Unexpected command: ' + message.command);
    }

    onRenderFinished(message){
        this.lockRender = false;
    }

    onPageLoaded(message){
    }

    onClick(message){
        console.debug(message);
    }
}


module.exports = {
    InteractiveWebviewGenerator:InteractiveWebviewGenerator
};


/***/ }),
/* 4 */
/***/ ((module) => {

module.exports = BrowserFS.BFSRequire('path');


/***/ }),
/* 5 */
/***/ ((module) => {

module.exports = BrowserFS.BFSRequire('fs');


/***/ }),
/* 6 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/** 
 * @author github.com/tintinweb
 * @license MIT
 * 
 * 
 * */

/*
Example:

const {SolidityMetricsContainer} = require('solidity-metrics');

let metrics = new SolidityMetricsContainer("containerName", {
        basePath:"",
        inputFileGlobExclusions:undefined,
        inputFileGlob: undefined,
        inputFileGlobLimit: undefined,
        debug:false,
        repoInfo: {
            branch: undefined,
            commit: undefined,
            remote: undefined
        }
    });

    // analyze files
    metrics.analyze(path_to_solidity_file);
    // ...
    metrics.analyze(path_to_solidity_file_N);

    // output
    console.log(metrics.totals());
    console.log(metrics.generateReportMarkdown());
 */

const {SolidityMetricsContainer} = __webpack_require__(7);

module.exports = {
    SolidityMetricsContainer
};

/***/ }),
/* 7 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/** 
 * @author github.com/tintinweb
 * @license MIT
 * 
 * 
 * */
const parser = __webpack_require__(8);
const parserHelpers = __webpack_require__(62);

const fs = __webpack_require__(5);
const crypto = __webpack_require__(63);
const sloc = __webpack_require__(264);

const surya = __webpack_require__(265);

const TSHIRT_HR = Object.freeze({"SMALL":"Small", "MEDIUM":"Medium", "LARGE":"Large", "X_LARGE":"X-Large", "XX_LARGE":"XX-Large", "XXXXXX_LARGE":"XXX-Huge!"});
const TSHIRT = Object.freeze({"SMALL":1, "MEDIUM":2, "LARGE":3, "X_LARGE":4, "XX_LARGE":5, "XXXXXX_LARGE":6});

const tshirtSizes = {
    nsloc: function(val) {
        if(val <= 200) return TSHIRT.SMALL;
        else if(val <= 1000) return TSHIRT.MEDIUM;
        else if(val <= 2000) return TSHIRT.LARGE;
        else if(val <= 4500) return TSHIRT.X_LARGE;
        else if(val <= 10000) return TSHIRT.XX_LARGE;
        else return TSHIRT.XXXXXX_LARGE;
    },
    files: function(val){
        if(val <= 4) return TSHIRT.SMALL;
        else if(val <= 20) return TSHIRT.MEDIUM;
        else if(val <= 30) return TSHIRT.LARGE;
        else if(val <= 60) return TSHIRT.X_LARGE;
        else if(val <= 150) return TSHIRT.XX_LARGE;
        else return TSHIRT.XXXXXX_LARGE;
    },
    perceivedComplexity: function(val) {
        if(val <= 50) return TSHIRT.SMALL;
        else if(val <= 100) return TSHIRT.MEDIUM;
        else if(val <= 200) return TSHIRT.LARGE;
        else if(val <= 400) return TSHIRT.X_LARGE;
        else if(val <= 600) return TSHIRT.XX_LARGE;
        else return TSHIRT.XXXXXX_LARGE;
    },
    commentRatio: function(val) {
        if(val <= 0.2) return TSHIRT.XXXXXX_LARGE;  // lessEq than 20% of source is comments
        else if(val <= 0.3) return TSHIRT.XX_LARGE;
        else if(val <= 0.4) return TSHIRT.X_LARGE;
        else if(val <= 0.5) return TSHIRT.LARGE;
        else if(val <= 0.6) return TSHIRT.MEDIUM;  // lessEq than 60% of source is comments
        else return TSHIRT.SMALL;  // > 60% of source is comments; good 
    },
    experimentalFeatures: function(arr){
        if(!arr) return TSHIRT.SMALL;
        else if(arr.length<=1) return TSHIRT.MEDIUM;
        else if(arr.length<=2) return TSHIRT.LARGE;
        return TSHIRT.SMALL;
    },
    compilerVersion: function(arr){
        if(!arr) return TSHIRT.SMALL;

        if(arr.some(x=>x.startsWith("0.4.") || x.startsWith("^0.4."))) return TSHIRT.MEDIUM;  //todo: rely on semver? we dont detect <0.4 atm
        return TSHIRT.SMALL;
    }
};

const scores = {
    IfStatement:1,
    ModifierInvocation:1,
    FunctionCall:1,
    "FunctionDefinition:Public":2,
    "FunctionDefinition:External":2,
    "FunctionDefinition:Payable":3,
    NewExpression:10,
    ForStatement:5,
    WhileStatement:1,
    DoWhileStatement:1,
    InlineAssemblyStatement:2,
    AssemblyIf:2,
    AssemblyFor:2,
    AssemblyCase:2,
    AssemblyCall:2,
    Conditional:1,
    SubAssembly:2,
    StateVariableDeclaration:1,
    "ContractDefinition:BaseContracts":2,
    ContractDefinition:1,
};

function capitalFirst(string) 
{
    if(!string.length) {
        return "";
    } else if(string.length==1){
        return string.toUpperCase();
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
}

class SolidityMetricsContainer {
    
    constructor(name, args){
        this.name = name;

        this.basePath = args.basePath || "";
        this.basePathRegex = new RegExp(this.basePath, "g");
        this.inputFileGlobExclusions = args.inputFileGlobExclusions || "";
        this.inputFileGlob = args.inputFileGlob || "";
        this.inputFileGlobLimit = args.inputFileGlobLimit;
        this.excludeFileGlobLimit = args.inputFileGlobLimit;
        this.debug = args.debug;
        this.repoInfo = args.repoInfo;

        this.seenFiles = [];
        this.seenDuplicates = [];
        this.seenHashes = [];
        this.metrics = [];
        this.errors = [];

        this.truffleProjectLocations = [];
        this.excludedFiles = [];
        
    }

    addTruffleProjectLocation(truffleJsPath){
        this.truffleProjectLocations = Array.from(new Set([truffleJsPath, ...this.truffleProjectLocations]));
    }

    addExcludedFile(exfile){
        this.excludedFiles = Array.from(new Set([exfile, ...this.excludedFiles]));
    }

    analyze(inputFileGlobs){

        return this.analyzeFile(inputFileGlobs);
    }

    analyzeFile(filepath){
        let content = fs.readFileSync(filepath).toString('utf-8');
        let hash = crypto.createHash('sha1').update(content).digest('base64');
        
        try {
            var metrics = new SolidityFileMetrics(filepath, content);

            this.seenFiles.push(filepath);
            if (this.seenHashes.indexOf(hash)>=0){
                //DUP
                this.seenDuplicates.push(filepath);
            } else {
                //NEW
                this.seenHashes.push(hash);
            }
            this.metrics.push(metrics);
        } catch (e) {
            console.error(e);
            this.errors.push(filepath);
            if (e instanceof parser.ParserError) {
                console.log(e.errors);
            }
            return;
        }
    }

    getDotGraphs(){
        return {
            '#surya-inheritance':surya.inheritance(this.seenFiles,{draggable:false}),  //key must match the div-id in the markdown template!
            '#surya-callgraph':surya.graph(this.seenFiles)
        };
    }

    totals(){
        let total = {
            totals : new Metric(),
            avg: new Metric(),
            num: {
                sourceUnits: this.seenFiles.length,
                metrics: this.metrics.length,
                duplicates: this.seenDuplicates.length,
                errors: this.errors.length,
            } 
        };

        total.totals = total.totals.sumCreateNewMetric(...this.metrics);
        total.totals.sloc.commentToSourceRatio = total.totals.sloc.comment/total.totals.sloc.source;
        total.avg = total.avg.sumAvgCreateNewMetric(...this.metrics);
        total.totals.nsloc.commentToSourceRatio = total.totals.nsloc.comment/total.totals.nsloc.source;

        return total;
    }

    /**
     * @note: div id must match the SolidityMetricsContainer.getDotGraphs() object key which is also the div-id!
     */
    generateReportMarkdown(){

        let totals = this.totals();

        let suryamdreport;

        try {
            suryamdreport = surya.mdreport(this.seenFiles).replace("### ","#####").replace("## Sūrya's Description Report","").replace(this.basePathRegex, ""); /* remove surya title, fix layout */
        } catch(error) {
            suryamdreport = `\`\`\`
${error}
\`\`\``;
            console.error(error);
        }

        let mdreport_head = `
[<img width="200" alt="get in touch with Consensys Diligence" src="https://user-images.githubusercontent.com/2865694/56826101-91dcf380-685b-11e9-937c-af49c2510aa0.png">](https://diligence.consensys.net)<br/>
<sup>
[[  🌐  ](https://diligence.consensys.net)  [  📩  ](mailto:diligence@consensys.net)  [  🔥  ](https://consensys.github.io/diligence/)]
</sup><br/><br/>



# Solidity Metrics for ${this.name}

## Table of contents

- [Scope](#t-scope)
    - [Source Units in Scope](#t-source-Units-in-Scope)
    - [Out of Scope](#t-out-of-scope)
        - [Excluded Source Units](#t-out-of-scope-excluded-source-units)
        - [Duplicate Source Units](#t-out-of-scope-duplicate-source-units)
- [Report Overview](#t-report)
    - [Risk Summary](#t-risk)
    - [Source Lines](#t-source-lines)
    - [Inline Documentation](#t-inline-documentation)
    - [Components](#t-components)
    - [Exposed Functions](#t-exposed-functions)
    - [StateVariables](#t-statevariables)
    - [Capabilities](#t-capabilities)
    - [Totals](#t-totals)

## <span id=t-scope>Scope</span>

This section lists files that are in scope for the metrics report. 

- **Project:** \`${this.name}\`
- **Included Files:** ${`\n` + this.inputFileGlob.replace("{","").replace("}","").split(",").map(g => `    - \`${g}\``).join("\n")}
- **Excluded Paths:** ${`\n` + this.inputFileGlobExclusions.replace("{","").replace("}","").split(",").map(g => `    - \`${g}\``).join("\n")}
- **File Limit:** \`${this.inputFileGlobLimit}\`
    - **Exclude File list Limit:** \`${this.excludeFileGlobLimit}\`

- **Workspace Repository:** \`${this.repoInfo.remote|| "unknown"}\` (\`${this.repoInfo.branch}\`@\`${this.repoInfo.commit}\`)

### <span id=t-source-Units-in-Scope>Source Units in Scope</span>

Source Units Analyzed: **\`${this.seenFiles.length}\`**<br>
Source Units in Scope: **\`${this.metrics.length}\`** (**${Math.round(this.metrics.length/this.seenFiles.length * 100)}%**)

| Type | File   | Logic Contracts | Interfaces | Lines | nSLOC | Comment Lines | Complex. Score | Capabilities |
|========|=================|============|=======|=======|===============|==============|
${this.metrics.map(m => `| ${m.metrics.num.contracts ? "📝" : ""}${m.metrics.num.libraries ? "📚" : ""}${m.metrics.num.interfaces ? "🔍" : ""} | ${m.filename.replace(this.basePath, "")} | ${(m.metrics.num.contracts + m.metrics.num.libraries) || "****"} | ${m.metrics.num.interfaces || "****"} | ${m.metrics.sloc.total || "****"} | ${m.metrics.nsloc.total || "****"} | ${m.metrics.sloc.comment || "****"} | ${m.metrics.complexity.perceivedNaiveScore || "****"} | **${m.metrics.capabilities.assembly ? "<abbr title='Uses Assembly'>🖥</abbr>":""}${m.metrics.capabilities.experimental.length ? "<abbr title='Experimental Features'>🧪</abbr>":""}${m.metrics.capabilities.canReceiveFunds ? "<abbr title='Payable Functions'>💰</abbr>":""}${m.metrics.capabilities.destroyable ? "<abbr title='Destroyable Contract'>💣</abbr>":""}${m.metrics.capabilities.explicitValueTransfer ? "<abbr title='Initiates ETH Value Transfer'>📤</abbr>":""}${m.metrics.capabilities.lowLevelCall ? "<abbr title='Performs Low-Level Calls'>⚡</abbr>":""}${m.metrics.capabilities.delegateCall ? "<abbr title='DelegateCall'>👥</abbr>":""}${m.metrics.capabilities.hashFuncs ? "<abbr title='Uses Hash-Functions'>🧮</abbr>":""}${m.metrics.capabilities.ecrecover ? "<abbr title='Handles Signatures: ecrecover'>🔖</abbr>":""}${m.metrics.capabilities.deploysContract ? "<abbr title='create/create2'>🌀</abbr>":""}** |`).join("\n")}
| ${totals.totals.num.contracts ? "📝" : ""}${totals.totals.num.libraries ? "📚" : ""}${totals.totals.num.interfaces ? "🔍" : ""} | **Totals** | **${(totals.totals.num.contracts + totals.totals.num.libraries) || ""}** | **${totals.totals.num.interfaces || ""}** | **${totals.totals.sloc.total}** | **${totals.totals.nsloc.total}** | **${totals.totals.sloc.comment}** | **${totals.totals.complexity.perceivedNaiveScore}** | **${totals.totals.capabilities.assembly ? "<abbr title='Uses Assembly'>🖥</abbr>":""}${totals.totals.capabilities.experimental.length ? "<abbr title='Experimental Features'>🧪</abbr>":""}${totals.totals.capabilities.canReceiveFunds ? "<abbr title='Payable Functions'>💰</abbr>":""}${totals.totals.capabilities.destroyable ? "<abbr title='Destroyable Contract'>💣</abbr>":""}${totals.totals.capabilities.explicitValueTransfer ? "<abbr title='Initiates ETH Value Transfer'>📤</abbr>":""}${totals.totals.capabilities.lowLevelCall ? "<abbr title='Performs Low-Level Calls'>⚡</abbr>":""}${totals.totals.capabilities.delegateCall ? "<abbr title='DelegateCall'>👥</abbr>":""}${totals.totals.capabilities.hashFuncs ? "<abbr title='Uses Hash-Functions'>🧮</abbr>":""}${totals.totals.capabilities.ecrecover ? "<abbr title='Handles Signatures: ecrecover'>🔖</abbr>":""}${totals.totals.capabilities.deploysContract ? "<abbr title='create/create2'>🌀</abbr>":""}** |

#### <span id=t-out-of-scope>Out of Scope</span>

##### <span id=t-out-of-scope-excluded-source-units>Excluded Source Units</span>

Source Units Excluded: **\`${this.excludedFiles.length}\`**

<a onclick="toggleVisibility('excluded-files', this)">[➕]</a>
<div id="excluded-files" style="display:none">
| File   |
|========|
${this.excludedFiles.length ? this.excludedFiles.map(f => `|${f.replace(this.basePath, "")}|`).join("\n") : "| None |"}

</div>


##### <span id=t-out-of-scope-duplicate-source-units>Duplicate Source Units</span>

Duplicate Source Units Excluded: **\`${this.seenDuplicates.length}\`** 

<a onclick="toggleVisibility('duplicate-files', this)">[➕]</a>
<div id="duplicate-files" style="display:none">
| File   |
|========|
${this.seenDuplicates.length ? this.seenDuplicates.map(f => `|${f.replace(this.basePath, "")}|`).join("\n") : "| None |"}

</div>


## <span id=t-report>Report</span>

### Overview

The analysis finished with **\`${this.errors.length}\`** errors and **\`${this.seenDuplicates.length}\`** duplicate files.

${this.errors.length ? "**Errors:**\n\n" + this.errors.join("\n* ") : ""}

${this.truffleProjectLocations.length ? "**Truffle Project Locations Observed:**\n* " + this.truffleProjectLocations.map(f => "./"+f.replace(this.basePath, "")).join("\n* ") : ""}

#### <span id=t-risk>Risk</span>

<div class="wrapper" style="max-width: 512px; margin: auto">
			<canvas id="chart-risk-summary"></canvas>
</div>

#### <span id=t-source-lines>Source Lines (sloc vs. nsloc)</span>

<div class="wrapper" style="max-width: 512px; margin: auto">
    <canvas id="chart-nsloc-total"></canvas>
</div>

#### <span id=t-inline-documentation>Inline Documentation</span>

- **Comment-to-Source Ratio:** On average there are\`${Math.round(totals.totals.sloc.source/totals.totals.sloc.comment *100)/100}\` code lines per comment (lower=better).
- **ToDo's:** \`${totals.totals.sloc.todo}\` 

#### <span id=t-components>Components</span>

| 📝Contracts   | 📚Libraries | 🔍Interfaces |
|=============|===========|============|
| ${totals.totals.num.contracts} | ${totals.totals.num.libraries}  | ${totals.totals.num.interfaces}   |

#### <span id=t-exposed-functions>Exposed Functions</span>

This section lists functions that are explicitly declared public or payable. Please note that getter methods for public stateVars are not included.  

| 🌐Public   | 💰Payable |
|============|===========|
| ${totals.totals.num.functionsPublic} | ${totals.totals.num.functionsPayable}  | 

| External   | Internal | Private | Pure | View |
|============|==========|=========|======|======|
| ${totals.totals.ast["FunctionDefinition:External"] || 0} | ${totals.totals.ast["FunctionDefinition:Internal"] || 0}  | ${totals.totals.ast["FunctionDefinition:Private"] || 0} | ${totals.totals.ast["FunctionDefinition:Pure"] || 0} | ${totals.totals.ast["FunctionDefinition:View"] || 0} |

#### <span id=t-statevariables>StateVariables</span>

| Total      | 🌐Public  |
|============|===========|
| ${totals.totals.num.stateVars}  | ${totals.totals.num.stateVarsPublic} |

#### <span id=t-capabilities>Capabilities</span>

| Solidity Versions observed | 🧪 Experimental Features | 💰 Can Receive Funds | 🖥 Uses Assembly | 💣 Has Destroyable Contracts | 
|============|===========|===========|===========|
| ${totals.totals.capabilities.solidityVersions.map( v => `\`${v}\``).join("<br/>")} | ${totals.totals.capabilities.experimental.map( v => `\`${v}\``).join("<br/>")} | \`${totals.totals.capabilities.canReceiveFunds ? "yes" : "no"}\` | \`${totals.totals.capabilities.assembly ? "yes" : "no"}\`<br/>(${totals.totals.num.assemblyBlocks} asm blocks) | \`${totals.totals.capabilities.destroyable ? "yes" : "no"}\` | 

| 📤 Transfers ETH | ⚡ Low-Level Calls | 👥 DelegateCall | 🧮 Uses Hash Functions | 🔖 ECRecover | 🌀 New/Create/Create2 |
|============|===========|===========|===========|===========|
| \`${totals.totals.capabilities.explicitValueTransfer ? "yes" : "no"}\` | \`${totals.totals.capabilities.lowLevelCall ? "yes" : "no"}\` | \`${totals.totals.capabilities.delegateCall ? "yes" : "no"}\` | \`${totals.totals.capabilities.hashFuncs ? "yes" : "no"}\` | \`${totals.totals.capabilities.ecrecover ? "yes" : "no"}\` | \`${totals.totals.capabilities.deploysContract ? "yes" : "no"}\`<br>${Object.keys(totals.totals.ast).filter(k => k.match(/(NewContract:|AssemblyCall:Name:create|AssemblyCall:Name:create2)/g)).map( k => `→ \`${k}\``).join("<br/>")} | 


#### <span id=t-totals>Totals</span>

##### Summary

<div class="wrapper" style="max-width: 90%; margin: auto">
    <canvas id="chart-num-bar"></canvas>
</div>

##### AST Node Statistics

###### Function Calls

<div class="wrapper" style="max-width: 90%; margin: auto">
    <canvas id="chart-num-bar-ast-funccalls"></canvas>
</div>

###### Assembly Calls

<div class="wrapper" style="max-width: 90%; margin: auto">
    <canvas id="chart-num-bar-ast-asmcalls"></canvas>
</div>

###### AST Total

<div class="wrapper" style="max-width: 90%; margin: auto">
    <canvas id="chart-num-bar-ast"></canvas>
</div>

##### Inheritance Graph

<a onclick="toggleVisibility('surya-inherit', this)">[➕]</a>
<div id="surya-inherit" style="display:none">
<div class="wrapper" style="max-width: 512px; margin: auto">
    <div id="surya-inheritance" style="text-align: center;"></div> 
</div>
</div>

##### CallGraph

<a onclick="toggleVisibility('surya-call', this)">[➕]</a>
<div id="surya-call" style="display:none">
<div class="wrapper" style="max-width: 512px; margin: auto">
    <div id="surya-callgraph" style="text-align: center;"></div>
</div>
</div>

###### Contract Summary

<a onclick="toggleVisibility('surya-mdreport', this)">[➕]</a>
<div id="surya-mdreport" style="display:none">
${suryamdreport} 

</div>
____
<sub>
Thinking about smart contract security? We can provide training, ongoing advice, and smart contract auditing. [Contact us](https://diligence.consensys.net/contact/).
</sub>

`; 

        let debug_dump_totals = `
\`\`\`json
    ${JSON.stringify(totals,null,2)}
\`\`\`
`;

        let debug_dump_units = `
#### Source Units

\`\`\`json
    ${JSON.stringify(this.metrics,null,2)}
\`\`\`
        `;

        if(this.debug){
            return mdreport_head + debug_dump_totals + debug_dump_units; 
        }
        return mdreport_head;
        
    }
}

class Metric {
    
    constructor() {
        this.ast = {};
        this.sloc = {};
        this.nsloc = {};
        this.complexity = {
            cyclomatic:undefined,
            perceivedNaiveScore:0
        };
        this.summary = {
            perceivedComplexity: undefined,
            size: undefined,
            numLogicContracts: undefined,
            numFiles: undefined,
            inheritance: undefined,
            callgraph: undefined,
            cyclomatic: undefined,
            interfaceRisk: undefined,
            inlineDocumentation: undefined,
            compilerFeatures: undefined,
            compilerVersion: undefined
        };
        this.num = {
            astStatements:0,
            contractDefinitions:0,
            contracts:0,
            libraries:0,
            interfaces:0,
            imports:0,
            functionsPublic:0,
            functionsPayable:0,
            assemblyBlocks:0,
            stateVars:0,
            stateVarsPublic:0,
        };
        this.capabilities = {
            solidityVersions: [],
            assembly: false,
            experimental: [],
            canReceiveFunds: false,
            destroyable: false,
            explicitValueTransfer: false,
            lowLevelCall: false,
            hashFuncs: false,
            ecrecover: false,
            deploysContract: false
        };

        this.xx = 0;
    }
    
    
    update(){
        // calculate naiveScore (perceived complexity)
        this.complexity.perceivedNaiveScore = 0;
        Object.keys(this.ast).map(function(value, index){
            this.complexity.perceivedNaiveScore += this.ast[value] * (scores[value] || 0);
        }, this);

        this.num.contractDefinitions = this.ast["ContractDefinition"] || 0;
        this.num.contracts = this.ast["ContractDefinition:Contract"] || 0;
        this.num.libraries = this.ast["ContractDefinition:Library"] || 0;
        this.num.interfaces = this.ast["ContractDefinition:Interface"] || 0;
        this.num.imports = this.ast["ImportDirective"] || 0;
        this.num.functionsPublic = (this.ast["FunctionDefinition:Public"] || 0) + (this.ast["FunctionDefinition:External"] || 0);
        this.num.functionsPayable = this.ast["FunctionDefinition:Payable"] || 0;
        this.num.assemblyBlocks = this.ast["InlineAssemblyStatement"] || 0;
        this.num.stateVars = this.ast["StateVariableDeclaration"] || 0;
        this.num.stateVarsPublic = this.ast["StateVariableDeclaration:Public"] || 0;


        // generate human readable ratings
        this.summary.size = tshirtSizes.nsloc(this.nsloc.source);
        this.summary.perceivedComplexity = tshirtSizes.perceivedComplexity(this.complexity.perceivedNaiveScore);
        this.summary.numLogicContracts = tshirtSizes.files(this.num.contracts+this.num.libraries);
        this.summary.interfaceRisk = tshirtSizes.files(this.num.functionsPublic+this.num.functionsPayable);
        this.summary.inlineDocumentation = tshirtSizes.commentRatio(this.nsloc.commentToSourceRatio);
        this.summary.compilerFeatures = tshirtSizes.experimentalFeatures(this.capabilities.experimental);
        this.summary.compilerVersion = tshirtSizes.compilerVersion(this.capabilities.solidityVersions);
        if(this.ast["SourceUnit"]>1) this.summary.numFiles = tshirtSizes.files(this.ast["SourceUnit"]);

        //postprocess the ast
        this.capabilities.assembly = Object.keys(this.ast).some(function(k){ return ~k.toLowerCase().indexOf("assembly"); });
        this.capabilities.canReceiveFunds = !!this.ast["FunctionDefinition:Payable"];

        this.capabilities.destroyable = !!(this.ast["FunctionCall:Name:selfdestruct"] || this.ast["FunctionCall:Name:suicide"] || this.ast["AssemblyCall:Name:selfdestruct"] || this.ast["AssemblyCall:Name:suicide"]);
        this.capabilities.explicitValueTransfer = this.ast["FunctionCall:Name:transfer"] || this.ast["FunctionCall:Name:send"] || Object.keys(this.ast).filter(k => k.startsWith("FunctionCall:Name:")).some(k => k.endsWith(".value"));  //any value call
        this.capabilities.lowLevelCall = Object.keys(this.ast).some(k => k.match(/(Function|Assembly)Call:Name:(delegatecall|callcode|staticcall|call)[\.$]/g));
        this.capabilities.delegateCall = Object.keys(this.ast).some(k => k.startsWith("FunctionCall:Name:delegatecall")) || !!this.ast["AssemblyCall:Name:delegatecall"];
        this.capabilities.hashFuncs =  Object.keys(this.ast).some(k => k.match(/(Function|Assembly)Call:Name:(keccak256|sha3|sha256|ripemed160)/g)); //ignore addmod|mulmod 
        this.capabilities.ecrecover = !!this.ast["FunctionCall:Name:ecrecover"];
        this.capabilities.deploysContract = Object.keys(this.ast).some(k => k.startsWith("NewContract:")) || !!(this.ast["AssemblyCall:Name:create"] || this.ast["AssemblyCall:Name:create2"]);
    }

    sumCreateNewMetric(...solidityFileMetrics){
        let result = new Metric();

        solidityFileMetrics.forEach(a => {  //arguments
            Object.keys(result).forEach(attrib => {  // metric attribs -> object
                Object.keys(a.metrics[attrib]).map(function(key, index) { // argument.keys		
                    if(typeof a.metrics[attrib][key]==="number")  // ADD
                        result[attrib][key] = (result[attrib][key] || 0) + a.metrics[attrib][key];
                    else if(typeof a.metrics[attrib][key]==="boolean")  // OR
                        result[attrib][key] = result[attrib][key] || a.metrics[attrib][key];
                    else if(Array.isArray(a.metrics[attrib][key]))  // concat arrays -> maybe switch to sets 
                        result[attrib][key] = Array.from(new Set([...result[attrib][key], ...a.metrics[attrib][key]]));
                });
            });
        });

        result.update();
        return result;
    }

    sumAvgCreateNewMetric(...solidityFileMetrics){
        let result = this.sumCreateNewMetric(...solidityFileMetrics);

        Object.keys(result).forEach(attrib => {  // metric attribs -> object
            Object.keys(result[attrib]).map(function(key, index) { // argument.keys		
                if(typeof result[attrib][key]==="number")  // ADD
                    result[attrib][key] /= solidityFileMetrics.length;
                else
                    delete result[attrib][key];  //not used
            });
        });

        result.update();
        return result;
    }

}

class SolidityFileMetrics {

    constructor(filepath, content){
        
        this.filename = filepath;
        this.metrics = new Metric();
        // analyze
        this.analyze(content);

        // get sloc
        this.metrics.sloc = sloc(content, "js");
        this.metrics.sloc.commentToSourceRatio = this.metrics.sloc.comment/this.metrics.sloc.source;

        // get normalized sloc (function heads normalized)
        const normalized = content.replace(/function\s*\S+\s*\([^{]*/g, 'function ', content);
        this.metrics.nsloc = sloc(normalized, "js");
        this.metrics.nsloc.commentToSourceRatio = this.metrics.nsloc.comment/this.metrics.nsloc.source;

        this.metrics.update();
    }

    analyze(content){
        let that = this;
        let ast = this.parse(content);

        let countAllHandler = {
            PragmaDirective(node){
                let pragmaString = node.name + ":" + node.value.replace(" ","_");
                that.metrics.ast["Pragma:"+pragmaString] = ++that.metrics.ast["Pragma:"+pragmaString] || 1;
                if(node.name.toLowerCase().indexOf("experimental")>=0){
                    that.metrics.capabilities.experimental.push(node.value);
                } else if(node.name.toLowerCase().indexOf("solidity")>=0){
                    that.metrics.capabilities.solidityVersions.push(node.value);
                }
            },
            ContractDefinition(node) {
                that.metrics.ast["ContractDefinition:"+capitalFirst(node.kind)] = ++that.metrics.ast["ContractDefinition:"+capitalFirst(node.kind)] || 1;
                that.metrics.ast["ContractDefinition:BaseContracts"] = that.metrics.ast["ContractDefinition:BaseContracts"] + node.baseContracts.length || node.baseContracts.length;
            },
            FunctionDefinition(node){
                let stateMutability = node.stateMutability || "internal"; //set default
                that.metrics.ast["FunctionDefinition:"+capitalFirst(stateMutability)] = ++that.metrics.ast["FunctionDefinition:"+capitalFirst(stateMutability)]|| 1;
                that.metrics.ast["FunctionDefinition:"+capitalFirst(node.visibility)] = ++that.metrics.ast["FunctionDefinition:"+capitalFirst(node.visibility)] || 1;
            },
            StateVariableDeclaration(node){
                //NOP - this already counts the VariableDeclaration subelements.

            },
            VariableDeclaration(node){
                let typeName = "VariableDeclaration";
                if(node.isStateVar){
                    typeName = "StateVariableDeclaration";
                    that.metrics.ast[typeName+":"+capitalFirst(node.visibility)] = ++that.metrics.ast[typeName+":"+capitalFirst(node.visibility)]|| 1;
                }

                if(node.storageLocation){
                    that.metrics.ast[typeName+":"+capitalFirst(node.storageLocation)] = ++that.metrics.ast[typeName+":"+capitalFirst(node.storageLocation)]|| 1;
                }
                
                if(node.isDeclaredConst)
                    that.metrics.ast[typeName+":Const"] = ++that.metrics.ast[typeName+":Const"]|| 1;
                if(node.isIndexed)
                    that.metrics.ast[typeName+":Indexed"] = ++that.metrics.ast[typeName+":Indexed"]|| 1;
            },
            UserDefinedTypeName(node){
                that.metrics.ast["UserDefinedTypeName:"+capitalFirst(node.namePath)] = ++that.metrics.ast["UserDefinedTypeName:"+capitalFirst(node.namePath)]|| 1;
            },
            FunctionCall(node){
                let callName;
                let funcCallType;

                if(parserHelpers.isRegularFunctionCall(node)){
                    funcCallType = "Regular";
                    callName = node.expression.name;
                } else if (parserHelpers.isMemberAccess(node)) {
                    funcCallType =  parserHelpers.isMemberAccessOfAddress(node) ? "Address" : parserHelpers.isAContractTypecast(node) ? "ContractTypecast" : "MemberAccess";
                    callName = node.expression.memberName;

                    if(callName=="value" && parserHelpers.isMemberAccess(node.expression)){
                        // address.call.value(val)(data)
                        callName = node.expression.expression.memberName + "." + callName;
                    }
                } else if (node.expression && node.expression.type=="Identifier" && parserHelpers.BUILTINS.includes(node.expression.name)){
                    funcCallType = "BuiltIn";
                    callName = node.expression.name;
                } else if (node.expression && node.expression.type == "NewExpression") {
                    if(node.expression.typeName.type == "UserDefinedTypeName"){
                        //count contract creation calls
                        that.metrics.ast["NewContract:"+node.expression.typeName.namePath] = ++that.metrics.ast["NewContract:"+node.expression.typeName.namePath] || 1;
                    }
                } else {
                    // else TypeNameConversion (e.g. casts.)
                }

                if(funcCallType){
                    that.metrics.ast["FunctionCall:Type:"+funcCallType] = ++that.metrics.ast["FunctionCall:Type:"+funcCallType] || 1;
                    that.metrics.ast["FunctionCall:Name:"+callName] = ++that.metrics.ast["FunctionCall:Name:"+callName] || 1;   
                }
            },
            AssemblyCall(node){
                if(node.functionName && parserHelpers.BUILTINS_ASM.includes(node.functionName)){
                    that.metrics.ast["AssemblyCall:Name:"+node.functionName] = ++that.metrics.ast["AssemblyCall:Name:"+node.functionName] || 1;    
                } 
            }
        };

        let countAll= new Proxy(
            countAllHandler,{
                get(target, name) {
                    //note: this is getting called twice , once for the vistor[node.name] check and then for visitor[node.name](node) call.
                    if(name.endsWith(":exit")) return;  //skip func-exits

                    //we have to fix all handler native values afterwards (/2) for the 2nd get call.
                    that.metrics.ast[name] = ++that.metrics.ast[name] || 1;
                    that.metrics.num.astStatements += 1;
        
                    return target[name];
                }       
        });
        parser.visit(ast, countAll);

        // IMPORTANT: fix values caused by the proxy being entered twice by diligence parser for defined handler functions (once to check if handler is available, and for handler call) 
        Object.keys(countAllHandler).forEach( k => this.metrics.ast[k] ? this.metrics.ast[k] /= 2 : undefined );

    }

    parse(content){
        var ast = parser.parse(content, {loc:false, tolerant:true});
        return ast;
    }
}

module.exports = {
    SolidityMetricsContainer:SolidityMetricsContainer
};



/***/ }),
/* 8 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var antlr4 = __webpack_require__(9);

var _require = __webpack_require__(56),
    SolidityLexer = _require.SolidityLexer;

var _require2 = __webpack_require__(57),
    SolidityParser = _require2.SolidityParser;

var ASTBuilder = __webpack_require__(59);
var ErrorListener = __webpack_require__(60);

var _require3 = __webpack_require__(61),
    buildTokenList = _require3.buildTokenList;

function ParserError(args) {
  var _args$errors$ = args.errors[0],
      message = _args$errors$.message,
      line = _args$errors$.line,
      column = _args$errors$.column;

  this.message = message + ' (' + line + ':' + column + ')';
  this.errors = args.errors;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
}

ParserError.prototype = Object.create(Error.prototype);
ParserError.prototype.constructor = ParserError;
ParserError.prototype.name = 'ParserError';

function tokenize(input, options) {
  options = options || {};

  var chars = new antlr4.InputStream(input);
  var lexer = new SolidityLexer(chars);
  var tokens = new antlr4.CommonTokenStream(lexer);

  return buildTokenList(tokens.tokenSource.getAllTokens(), options);
}

function parse(input, options) {
  options = options || {};

  var chars = new antlr4.InputStream(input);

  var listener = new ErrorListener();

  var lexer = new SolidityLexer(chars);
  lexer.removeErrorListeners();
  lexer.addErrorListener(listener);

  var tokens = new antlr4.CommonTokenStream(lexer);

  var parser = new SolidityParser(tokens);

  parser.removeErrorListeners();
  parser.addErrorListener(listener);
  parser.buildParseTrees = true;

  var tree = parser.sourceUnit();

  var tokenList = void 0;
  if (options.tokens) {
    var tokenSource = tokens.tokenSource;
    tokenSource.reset();

    tokenList = buildTokenList(tokenSource.getAllTokens(), options);
  }

  if (!options.tolerant && listener.hasErrors()) {
    throw new ParserError({ errors: listener.getErrors() });
  }

  var visitor = new ASTBuilder(options);
  var ast = visitor.visit(tree);

  if (options.tolerant && listener.hasErrors()) {
    ast.errors = listener.getErrors();
  }
  if (options.tokens) {
    ast.tokens = tokenList;
  }

  return ast;
}

function _isASTNode(node) {
  return !!node && (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && Object.prototype.hasOwnProperty.call(node, 'type');
}

function visit(node, visitor) {
  if (Array.isArray(node)) {
    node.forEach(function (child) {
      return visit(child, visitor);
    });
  }

  if (!_isASTNode(node)) return;

  var cont = true;

  if (visitor[node.type]) {
    cont = visitor[node.type](node);
  }

  if (cont === false) return;

  for (var prop in node) {
    if (Object.prototype.hasOwnProperty.call(node, prop)) {
      visit(node[prop], visitor);
    }
  }

  var selector = node.type + ':exit';
  if (visitor[selector]) {
    visitor[selector](node);
  }
}

exports.tokenize = tokenize;
exports.parse = parse;
exports.visit = visit;
exports.ParserError = ParserError;

/***/ }),
/* 9 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = __webpack_require__(10);
exports.codepointat = __webpack_require__(41);
exports.dfa = __webpack_require__(42);
exports.fromcodepoint = __webpack_require__(45);
exports.tree = __webpack_require__(46);
exports.error = __webpack_require__(47);
exports.Token = __webpack_require__(14).Token;
exports.CharStreams = __webpack_require__(50).CharStreams;
exports.CommonToken = __webpack_require__(14).CommonToken;
exports.InputStream = __webpack_require__(51).InputStream;
exports.FileStream = __webpack_require__(52).FileStream;
exports.CommonTokenStream = __webpack_require__(53).CommonTokenStream;
exports.Lexer = __webpack_require__(30).Lexer;
exports.Parser = __webpack_require__(55).Parser;
var pc = __webpack_require__(20);
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = __webpack_require__(24).ParserRuleContext;
exports.Interval = __webpack_require__(18).Interval;
exports.Utils = __webpack_require__(13);

/***/ }),
/* 10 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = __webpack_require__(11).ATN;
exports.ATNDeserializer = __webpack_require__(25).ATNDeserializer;
exports.LexerATNSimulator = __webpack_require__(29).LexerATNSimulator;
exports.ParserATNSimulator = __webpack_require__(39).ParserATNSimulator;
exports.PredictionMode = __webpack_require__(40).PredictionMode;

/***/ }),
/* 11 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var LL1Analyzer = __webpack_require__(12).LL1Analyzer;
var IntervalSet = __webpack_require__(18).IntervalSet;

function ATN(grammarType, maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}

// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function (s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function (s) {
    if (s.nextTokenWithinRule !== null) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function (s, ctx) {
    if (ctx === undefined) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function (state) {
    if (state !== null) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function (state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function (s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length - 1;
    return s.decision;
};

ATN.prototype.getDecisionState = function (decision) {
    if (this.decisionToState.length === 0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = __webpack_require__(14).Token;

ATN.prototype.getExpectedTokens = function (stateNumber, ctx) {
    if (stateNumber < 0 || stateNumber >= this.states.length) {
        throw "Invalid state number.";
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;

/***/ }),
/* 12 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var Set = __webpack_require__(13).Set;
var BitSet = __webpack_require__(13).BitSet;
var Token = __webpack_require__(14).Token;
var ATNConfig = __webpack_require__(15).ATNConfig;
var Interval = __webpack_require__(18).Interval;
var IntervalSet = __webpack_require__(18).IntervalSet;
var RuleStopState = __webpack_require__(16).RuleStopState;
var RuleTransition = __webpack_require__(19).RuleTransition;
var NotSetTransition = __webpack_require__(19).NotSetTransition;
var WildcardTransition = __webpack_require__(19).WildcardTransition;
var AbstractPredicateTransition = __webpack_require__(19).AbstractPredicateTransition;

var pc = __webpack_require__(20);
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer(atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;

//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function (s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for (var alt = 0; alt < count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY, look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length === 0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function (s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
    ctx = ctx || null;
    var lookContext = ctx !== null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function (s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({ state: s, alt: 0, context: ctx }, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx === null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState) {
        if (ctx === null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for (var i = 0; i < ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for (var j = 0; j < s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if (t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;

/***/ }),
/* 13 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    var remainder,
        bytes,
        h1,
        h1b,
        c1,
        c1b,
        c2,
        c2b,
        k1,
        i,
        key = this.toString();

    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = String.prototype.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;

    while (i < bytes) {
        k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;
        ++i;

        k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;
        k1 = k1 << 15 | k1 >>> 17;
        k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;

        h1 ^= k1;
        h1 = h1 << 13 | h1 >>> 19;
        h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;
        h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= key.charCodeAt(i) & 0xff;

            k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a.equals(b);
}

function standardHashCodeFunction(a) {
    return a.hashCode();
}

function Set(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Set.prototype, "length", {
    get: function get() {
        var l = 0;
        for (var key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
});

Set.prototype.add = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
        values.push(value);
        return value;
    } else {
        this.data[key] = [value];
        return value;
    }
};

Set.prototype.contains = function (value) {
    return this.get(value) != null;
};

Set.prototype.get = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
    }
    return null;
};

Set.prototype.values = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Set.prototype.toString = function () {
    return arrayToString(this.values());
};

function BitSet() {
    this.data = [];
    return this;
}

BitSet.prototype.add = function (value) {
    this.data[value] = true;
};

BitSet.prototype.or = function (set) {
    var bits = this;
    Object.keys(set.data).map(function (alt) {
        bits.add(alt);
    });
};

BitSet.prototype.remove = function (value) {
    delete this.data[value];
};

BitSet.prototype.contains = function (value) {
    return this.data[value] === true;
};

BitSet.prototype.values = function () {
    return Object.keys(this.data);
};

BitSet.prototype.minValue = function () {
    return Math.min.apply(null, this.values());
};

BitSet.prototype.hashCode = function () {
    var hash = new Hash();
    hash.update(this.values());
    return hash.finish();
};

BitSet.prototype.equals = function (other) {
    if (!(other instanceof BitSet)) {
        return false;
    }
    return this.hashCode() === other.hashCode();
};

Object.defineProperty(BitSet.prototype, "length", {
    get: function get() {
        return this.values().length;
    }
});

BitSet.prototype.toString = function () {
    return "{" + this.values().join(", ") + "}";
};

function Map(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Map.prototype, "length", {
    get: function get() {
        var l = 0;
        for (var hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
});

Map.prototype.put = function (key, value) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) {
                var oldValue = entry.value;
                entry.value = value;
                return oldValue;
            }
        }
        entries.push({ key: key, value: value });
        return value;
    } else {
        this.data[hashKey] = [{ key: key, value: value }];
        return value;
    }
};

Map.prototype.containsKey = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) return true;
        }
    }
    return false;
};

Map.prototype.get = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) return entry.value;
        }
    }
    return null;
};

Map.prototype.entries = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Map.prototype.getKeys = function () {
    return this.entries().map(function (e) {
        return e.key;
    });
};

Map.prototype.getValues = function () {
    return this.entries().map(function (e) {
        return e.value;
    });
};

Map.prototype.toString = function () {
    var ss = this.entries().map(function (entry) {
        return '{' + entry.key + ':' + entry.value + '}';
    });
    return '[' + ss.join(", ") + ']';
};

function AltDict() {
    this.data = {};
    return this;
}

AltDict.prototype.get = function (key) {
    key = "k-" + key;
    if (key in this.data) {
        return this.data[key];
    } else {
        return null;
    }
};

AltDict.prototype.put = function (key, value) {
    key = "k-" + key;
    this.data[key] = value;
};

AltDict.prototype.values = function () {
    var data = this.data;
    var keys = Object.keys(this.data);
    return keys.map(function (key) {
        return data[key];
    });
};

function DoubleDict() {
    return this;
}

function Hash() {
    this.count = 0;
    this.hash = 0;
    return this;
}

Hash.prototype.update = function () {
    for (var i = 0; i < arguments.length; i++) {
        var value = arguments[i];
        if (value == null) continue;
        if (Array.isArray(value)) this.update.apply(value);else {
            var k = 0;
            switch (typeof value === "undefined" ? "undefined" : _typeof(value)) {
                case 'undefined':
                case 'function':
                    continue;
                case 'number':
                case 'boolean':
                    k = value;
                    break;
                case 'string':
                    k = value.hashCode();
                    break;
                default:
                    value.updateHashCode(this);
                    continue;
            }
            k = k * 0xCC9E2D51;
            k = k << 15 | k >>> 32 - 15;
            k = k * 0x1B873593;
            this.count = this.count + 1;
            var hash = this.hash ^ k;
            hash = hash << 13 | hash >>> 32 - 13;
            hash = hash * 5 + 0xE6546B64;
            this.hash = hash;
        }
    }
};

Hash.prototype.finish = function () {
    var hash = this.hash ^ this.count * 4;
    hash = hash ^ hash >>> 16;
    hash = hash * 0x85EBCA6B;
    hash = hash ^ hash >>> 13;
    hash = hash * 0xC2B2AE35;
    hash = hash ^ hash >>> 16;
    return hash;
};

function hashStuff() {
    var hash = new Hash();
    hash.update.apply(arguments);
    return hash.finish();
}

DoubleDict.prototype.get = function (a, b) {
    var d = this[a] || null;
    return d === null ? null : d[b] || null;
};

DoubleDict.prototype.set = function (a, b, o) {
    var d = this[a] || null;
    if (d === null) {
        d = {};
        this[a] = d;
    }
    d[b] = o;
};

function escapeWhitespace(s, escapeSpaces) {
    s = s.replace("\t", "\\t");
    s = s.replace("\n", "\\n");
    s = s.replace("\r", "\\r");
    if (escapeSpaces) {
        s = s.replace(" ", "\xB7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
};

function equalArrays(a, b) {
    if (!Array.isArray(a) || !Array.isArray(b)) return false;
    if (a == b) return true;
    if (a.length != b.length) return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] == b[i]) continue;
        if (!a[i].equals(b[i])) return false;
    }
    return true;
};

exports.Hash = Hash;
exports.Set = Set;
exports.Map = Map;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.hashStuff = hashStuff;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;
exports.titleCase = titleCase;
exports.equalArrays = equalArrays;

/***/ }),
/* 14 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get: function get() {
		return this._text;
	},
	set: function set(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function () {
	return this.source[0];
};

Token.prototype.getInputStream = function () {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [null, null];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function () {
	var t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get: function get() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set: function set(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function () {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" + txt + "',<" + this.type + ">" + (this.channel > 0 ? ",channel=" + this.channel : "") + "," + this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;

/***/ }),
/* 15 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = __webpack_require__(16).DecisionState;
var SemanticContext = __webpack_require__(17).SemanticContext;
var Hash = __webpack_require__(13).Hash;

function checkParams(params, isCfg) {
    if (params === null) {
        var result = { state: null, alt: null, context: null, semanticContext: null };
        if (isCfg) {
            result.reachesIntoOuterContext = 0;
        }
        return result;
    } else {
        var props = {};
        props.state = params.state || null;
        props.alt = params.alt === undefined ? null : params.alt;
        props.context = params.context || null;
        props.semanticContext = params.semanticContext || null;
        if (isCfg) {
            props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
            props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
        }
        return props;
    }
}

function ATNConfig(params, config) {
    this.checkContext(params, config);
    params = checkParams(params);
    config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state !== null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt !== null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context !== null ? params.context : config.context;
    this.semanticContext = params.semanticContext !== null ? params.semanticContext : config.semanticContext !== null ? config.semanticContext : SemanticContext.NONE;
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function (params, config) {
    if ((params.context === null || params.context === undefined) && (config === null || config.context === null || config.context === undefined)) {
        this.context = null;
    }
};

ATNConfig.prototype.hashCode = function () {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

ATNConfig.prototype.updateHashCode = function (hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.

ATNConfig.prototype.equals = function (other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && (this.context === null ? other.context === null : this.context.equals(other.context)) && this.semanticContext.equals(other.semanticContext) && this.precedenceFilterSuppressed === other.precedenceFilterSuppressed;
    }
};

ATNConfig.prototype.hashCodeForConfigSet = function () {
    var hash = new Hash();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
};

ATNConfig.prototype.equalsForConfigSet = function (other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && this.semanticContext.equals(other.semanticContext);
    }
};

ATNConfig.prototype.toString = function () {
    return "(" + this.state + "," + this.alt + (this.context !== null ? ",[" + this.context.toString() + "]" : "") + (this.semanticContext !== SemanticContext.NONE ? "," + this.semanticContext.toString() : "") + (this.reachesIntoOuterContext > 0 ? ",up=" + this.reachesIntoOuterContext : "") + ")";
};

function LexerATNConfig(params, config) {
    ATNConfig.call(this, params, config);

    // This is the backing field for {@link //getLexerActionExecutor}.
    var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config !== null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config !== null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.updateHashCode = function (hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
};

LexerATNConfig.prototype.equals = function (other) {
    return this === other || other instanceof LexerATNConfig && this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) && ATNConfig.prototype.equals.call(this, other);
};

LexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;

LexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;

LexerATNConfig.prototype.checkNonGreedyDecision = function (source, target) {
    return source.passedThroughNonGreedyDecision || target instanceof DecisionState && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;

/***/ }),
/* 16 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
  // Which ATN are we in?
  this.atn = null;
  this.stateNumber = ATNState.INVALID_STATE_NUMBER;
  this.stateType = null;
  this.ruleIndex = 0; // at runtime, we don't have Rule objects
  this.epsilonOnlyTransitions = false;
  // Track the transitions emanating from this ATN state.
  this.transitions = [];
  // Used to cache lookahead during parsing, not used during construction
  this.nextTokenWithinRule = null;
  return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = ["INVALID", "BASIC", "RULE_START", "BLOCK_START", "PLUS_BLOCK_START", "STAR_BLOCK_START", "TOKEN_START", "RULE_STOP", "BLOCK_END", "STAR_LOOP_BACK", "STAR_LOOP_ENTRY", "PLUS_LOOP_BACK", "LOOP_END"];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function () {
  return this.stateNumber;
};

ATNState.prototype.equals = function (other) {
  if (other instanceof ATNState) {
    return this.stateNumber === other.stateNumber;
  } else {
    return false;
  }
};

ATNState.prototype.isNonGreedyExitState = function () {
  return false;
};

ATNState.prototype.addTransition = function (trans, index) {
  if (index === undefined) {
    index = -1;
  }
  if (this.transitions.length === 0) {
    this.epsilonOnlyTransitions = trans.isEpsilon;
  } else if (this.epsilonOnlyTransitions !== trans.isEpsilon) {
    this.epsilonOnlyTransitions = false;
  }
  if (index === -1) {
    this.transitions.push(trans);
  } else {
    this.transitions.splice(index, 1, trans);
  }
};

function BasicState() {
  ATNState.call(this);
  this.stateType = ATNState.BASIC;
  return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;

function DecisionState() {
  ATNState.call(this);
  this.decision = -1;
  this.nonGreedy = false;
  return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;

//  The start of a regular {@code (...)} block.
function BlockStartState() {
  DecisionState.call(this);
  this.endState = null;
  return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;

function BasicBlockStartState() {
  BlockStartState.call(this);
  this.stateType = ATNState.BLOCK_START;
  return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;

// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
  ATNState.call(this);
  this.stateType = ATNState.BLOCK_END;
  this.startState = null;
  return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;

// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
  ATNState.call(this);
  this.stateType = ATNState.RULE_STOP;
  return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
  ATNState.call(this);
  this.stateType = ATNState.RULE_START;
  this.stopState = null;
  this.isPrecedenceRule = false;
  return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
  DecisionState.call(this);
  this.stateType = ATNState.PLUS_LOOP_BACK;
  return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;

// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
  BlockStartState.call(this);
  this.stateType = ATNState.PLUS_BLOCK_START;
  this.loopBackState = null;
  return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
  BlockStartState.call(this);
  this.stateType = ATNState.STAR_BLOCK_START;
  return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;

function StarLoopbackState() {
  ATNState.call(this);
  this.stateType = ATNState.STAR_LOOP_BACK;
  return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;

function StarLoopEntryState() {
  DecisionState.call(this);
  this.stateType = ATNState.STAR_LOOP_ENTRY;
  this.loopBackState = null;
  // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
  this.isPrecedenceDecision = null;
  return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;

// Mark the end of a * or + loop.
function LoopEndState() {
  ATNState.call(this);
  this.stateType = ATNState.LOOP_END;
  this.loopBackState = null;
  return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;

// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
  DecisionState.call(this);
  this.stateType = ATNState.TOKEN_START;
  return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;

/***/ }),
/* 17 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = __webpack_require__(13).Set;
var Hash = __webpack_require__(13).Hash;

function SemanticContext() {
	return this;
}

SemanticContext.prototype.hashCode = function () {
	var hash = new Hash();
	this.updateHashCode(hash);
	return hash.finish();
};

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function (parser, outerContext) {};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function (parser, outerContext) {
	return this;
};

SemanticContext.andContext = function (a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function (a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();

Predicate.prototype.evaluate = function (parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.updateHashCode = function (hash) {
	hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

Predicate.prototype.equals = function (other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function () {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function (parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function (parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function (other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.updateHashCode = function (hash) {
	hash.update(31);
};

PrecedencePredicate.prototype.equals = function (other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function () {
	return "{" + this.precedence + ">=prec}?";
};

PrecedencePredicate.filterPrecedencePredicates = function (set) {
	var result = [];
	set.values().map(function (context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};

// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function (o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function (o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map(function (p) {
			if (reduced === null || p.precedence < reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function (other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.updateHashCode = function (hash) {
	hash.update(this.opnds, "AND");
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function (parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function (parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= evaluated !== context;
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function (o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function () {
	var s = "";
	this.opnds.map(function (o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function (o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function (o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function (a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length - 1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function (other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.updateHashCode = function (hash) {
	hash.update(this.opnds, "OR");
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function (parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function (parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= evaluated !== context;
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function (o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function () {
	var s = "";
	this.opnds.map(function (o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;

/***/ }),
/* 18 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*jslint smarttabs:true */

var Token = __webpack_require__(14).Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function (item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function () {
	if (this.start === this.stop - 1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop - 1).toString();
	}
};

Object.defineProperty(Interval.prototype, "length", {
	get: function get() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function (v) {
	if (this.intervals === null || this.intervals.length === 0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function (v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function (l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function (v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
					this.intervals[k].start = v.start;
					return;
				}
				// overlapping range -> adjust and reduce
				else if (v.start <= i.stop) {
						this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
						this.reduce(k);
						return;
					}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function (other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function (k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function (start, stop) {
	var result = new IntervalSet();
	result.addInterval(new Interval(start, stop + 1));
	for (var i = 0; i < this.intervals.length; i++) {
		result.removeRange(this.intervals[i]);
	}
	return result;
};

IntervalSet.prototype.contains = function (item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if (this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get: function get() {
		var len = 0;
		this.intervals.map(function (i) {
			len += i.length;
		});
		return len;
	}
});

IntervalSet.prototype.removeRange = function (v) {
	if (v.start === v.stop - 1) {
		this.removeOne(v.start);
	} else if (this.intervals !== null) {
		var k = 0;
		for (var n = 0; n < this.intervals.length; n++) {
			var i = this.intervals[k];
			// intervals are ordered
			if (v.stop <= i.start) {
				return;
			}
			// check for including range, split it
			else if (v.start > i.start && v.stop < i.stop) {
					this.intervals[k] = new Interval(i.start, v.start);
					var x = new Interval(v.stop, i.stop);
					this.intervals.splice(k, 0, x);
					return;
				}
				// check for included range, remove it
				else if (v.start <= i.start && v.stop >= i.stop) {
						this.intervals.splice(k, 1);
						k = k - 1; // need another pass
					}
					// check for lower boundary
					else if (v.start < i.stop) {
							this.intervals[k] = new Interval(i.start, v.start);
						}
						// check for upper boundary
						else if (v.stop < i.stop) {
								this.intervals[k] = new Interval(v.stop, i.stop);
							}
			k += 1;
		}
	}
};

IntervalSet.prototype.removeOne = function (v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
					this.intervals.splice(k, 1);
					return;
				}
				// check for lower boundary
				else if (v === i.start) {
						this.intervals[k] = new Interval(i.start + 1, i.stop);
						return;
					}
					// check for upper boundary
					else if (v === i.stop - 1) {
							this.intervals[k] = new Interval(i.start, i.stop - 1);
							return;
						}
						// split existing range
						else if (v < i.stop - 1) {
								var x = new Interval(i.start, v);
								i.start = v + 1;
								this.intervals.splice(k, 0, x);
								return;
							}
		}
	}
};

IntervalSet.prototype.toString = function (literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if (literalNames !== null || symbolicNames !== null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if (elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function () {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if (v.stop === v.start + 1) {
			if (v.start === Token.EOF) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop - 1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.toIndexString = function () {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if (v.stop === v.start + 1) {
			if (v.start === Token.EOF) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop - 1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.toTokenString = function (literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function (literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;

/***/ }),
/* 19 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = __webpack_require__(14).Token;
var Interval = __webpack_require__(18).Interval;
var IntervalSet = __webpack_require__(18).IntervalSet;
var Predicate = __webpack_require__(17).Predicate;
var PrecedencePredicate = __webpack_require__(17).PrecedencePredicate;

function Transition(target) {
  // The target of this transition.
  if (target === undefined || target === null) {
    throw "target cannot be null.";
  }
  this.target = target;
  // Are we epsilon, action, sempred?
  this.isEpsilon = false;
  this.label = null;
  return this;
}
// constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = ["INVALID", "EPSILON", "RANGE", "RULE", "PREDICATE", "ATOM", "ACTION", "SET", "NOT_SET", "WILDCARD", "PRECEDENCE"];

Transition.serializationTypes = {
  EpsilonTransition: Transition.EPSILON,
  RangeTransition: Transition.RANGE,
  RuleTransition: Transition.RULE,
  PredicateTransition: Transition.PREDICATE,
  AtomTransition: Transition.ATOM,
  ActionTransition: Transition.ACTION,
  SetTransition: Transition.SET,
  NotSetTransition: Transition.NOT_SET,
  WildcardTransition: Transition.WILDCARD,
  PrecedencePredicateTransition: Transition.PRECEDENCE
};

// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
  Transition.call(this, target);
  this.label_ = label; // The token type or character value; or, signifies special label.
  this.label = this.makeLabel();
  this.serializationType = Transition.ATOM;
  return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function () {
  var s = new IntervalSet();
  s.addOne(this.label_);
  return s;
};

AtomTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return this.label_ === symbol;
};

AtomTransition.prototype.toString = function () {
  return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
  Transition.call(this, ruleStart);
  this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
  this.precedence = precedence;
  this.followState = followState; // what node to begin computations following ref to rule
  this.serializationType = Transition.RULE;
  this.isEpsilon = true;
  return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return false;
};

function EpsilonTransition(target, outermostPrecedenceReturn) {
  Transition.call(this, target);
  this.serializationType = Transition.EPSILON;
  this.isEpsilon = true;
  this.outermostPrecedenceReturn = outermostPrecedenceReturn;
  return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return false;
};

EpsilonTransition.prototype.toString = function () {
  return "epsilon";
};

function RangeTransition(target, start, stop) {
  Transition.call(this, target);
  this.serializationType = Transition.RANGE;
  this.start = start;
  this.stop = stop;
  this.label = this.makeLabel();
  return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function () {
  var s = new IntervalSet();
  s.addRange(this.start, this.stop);
  return s;
};

RangeTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function () {
  return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
  Transition.call(this, target);
  return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
  AbstractPredicateTransition.call(this, target);
  this.serializationType = Transition.PREDICATE;
  this.ruleIndex = ruleIndex;
  this.predIndex = predIndex;
  this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
  this.isEpsilon = true;
  return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return false;
};

PredicateTransition.prototype.getPredicate = function () {
  return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function () {
  return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
  Transition.call(this, target);
  this.serializationType = Transition.ACTION;
  this.ruleIndex = ruleIndex;
  this.actionIndex = actionIndex === undefined ? -1 : actionIndex;
  this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
  this.isEpsilon = true;
  return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;

ActionTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return false;
};

ActionTransition.prototype.toString = function () {
  return "action_" + this.ruleIndex + ":" + this.actionIndex;
};

// A transition containing a set of values.
function SetTransition(target, set) {
  Transition.call(this, target);
  this.serializationType = Transition.SET;
  if (set !== undefined && set !== null) {
    this.label = set;
  } else {
    this.label = new IntervalSet();
    this.label.addOne(Token.INVALID_TYPE);
  }
  return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return this.label.contains(symbol);
};

SetTransition.prototype.toString = function () {
  return this.label.toString();
};

function NotSetTransition(target, set) {
  SetTransition.call(this, target, set);
  this.serializationType = Transition.NOT_SET;
  return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function () {
  return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
  Transition.call(this, target);
  this.serializationType = Transition.WILDCARD;
  return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;

WildcardTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function () {
  return ".";
};

function PrecedencePredicateTransition(target, precedence) {
  AbstractPredicateTransition.call(this, target);
  this.serializationType = Transition.PRECEDENCE;
  this.precedence = precedence;
  this.isEpsilon = true;
  return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {
  return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function () {
  return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function () {
  return this.precedence + " >= _p";
};

exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;

/***/ }),
/* 20 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var RuleContext = __webpack_require__(21).RuleContext;
var Hash = __webpack_require__(13).Hash;

function PredictionContext(cachedHashCode) {
	this.cachedHashCode = cachedHashCode;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function () {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function () {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashCode = function () {
	return this.cachedHashCode;
};

PredictionContext.prototype.updateHashCode = function (hash) {
	hash.update(this.cachedHashCode);
};
/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = {};
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function (ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache[ctx] || null;
	if (existing !== null) {
		return existing;
	}
	this.cache[ctx] = ctx;
	return ctx;
};

PredictionContextCache.prototype.get = function (ctx) {
	return this.cache[ctx] || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get: function get() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashCode = 0;
	if (parent !== null) {
		var hash = new Hash();
		hash.update(parent, returnState);
		hashCode = hash.finish();
	}
	PredictionContext.call(this, hashCode);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function (parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get: function get() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function (index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function (index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function (other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		if (this.returnState !== other.returnState) return false;else if (this.parentCtx == null) return other.parentCtx == null;else return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.toString = function () {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function () {
	return true;
};

EmptyPredictionContext.prototype.getParent = function (index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function (index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function (other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function () {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var h = new Hash();
	h.update(parents, returnStates);
	var hashCode = h.finish();
	PredictionContext.call(this, hashCode);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function () {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get: function get() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function (index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function (index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function (other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates && this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function () {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else {
		// a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || a.parentCtx !== null && a.parentCtx === b.parentCtx) {
			// ax +
			// bx =
			// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) {
			// parents are same
			// sort payloads and use same parent
			var payloads = [a.returnState, b.returnState];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [singleParent, singleParent];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [a.returnState, b.returnState];
		var parents = [a.parentCtx, b.parentCtx];
		if (a.returnState > b.returnState) {
			// sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [b.parentCtx, a.parentCtx];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) {
			// $ + x = [$,x]
			var payloads = [b.returnState, PredictionContext.EMPTY_RETURN_STATE];
			var parents = [b.parentCtx, null];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) {
			// x + $ = [$,x] ($ is always first if present)
			var payloads = [a.returnState, PredictionContext.EMPTY_RETURN_STATE];
			var parents = [a.parentCtx, null];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE && a_parent === null && b_parent === null;
			var ax_ax = a_parent !== null && b_parent !== null && a_parent === b_parent; // ax+ax
			// ->
			// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else {
				// ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) {
			// copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else {
			// b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) {
		// write index < last position; trim
		if (k === 1) {
			// for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0], mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = {};

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(parent in uniqueParents)) {
			uniqueParents[parent] = parent;
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents[parents[q]];
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited[context] || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited[context] = existing;
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited[context] = context;
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited[updated] = updated;
	visited[context] = updated;

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = {};
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited[context] !== null) {
			return nodes;
		}
		visited[context] = context;
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;

/***/ }),
/* 21 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = __webpack_require__(22).RuleNode;
var INVALID_INTERVAL = __webpack_require__(22).INVALID_INTERVAL;
var INVALID_ALT_NUMBER = __webpack_require__(11).INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function () {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function () {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function () {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function () {
	return this;
};

RuleContext.prototype.getPayload = function () {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function () {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function (child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function () {
	return INVALID_ALT_NUMBER;
};

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function (altNumber) {};

RuleContext.prototype.getChild = function (i) {
	return null;
};

RuleContext.prototype.getChildCount = function () {
	return 0;
};

RuleContext.prototype.accept = function (visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = __webpack_require__(23).Trees;

// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function (ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function (ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = ri >= 0 && ri < ruleNames.length ? ruleNames[ri] : "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};

/***/ }),
/* 22 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = __webpack_require__(14).Token;
var Interval = __webpack_require__(18).Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = __webpack_require__(13);

function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function (ctx) {
	if (Array.isArray(ctx)) {
		return ctx.map(function (child) {
			return child.accept(this);
		}, this);
	} else {
		return ctx.accept(this);
	}
};

ParseTreeVisitor.prototype.visitChildren = function (ctx) {
	return this.visit(ctx.children);
};

ParseTreeVisitor.prototype.visitTerminal = function (node) {};

ParseTreeVisitor.prototype.visitErrorNode = function (node) {};

function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function (node) {};

ParseTreeListener.prototype.visitErrorNode = function (node) {};

ParseTreeListener.prototype.enterEveryRule = function (node) {};

ParseTreeListener.prototype.exitEveryRule = function (node) {};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function (i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function () {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function () {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function () {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function () {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function () {
	return 0;
};

TerminalNodeImpl.prototype.accept = function (visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function () {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function () {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function () {
	return true;
};

ErrorNodeImpl.prototype.accept = function (visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function (listener, t) {
	var errorNode = t instanceof ErrorNode || t.isErrorNode !== undefined && t.isErrorNode();
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function (listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function (listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;

/***/ }),
/* 23 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Utils = __webpack_require__(13);
var Token = __webpack_require__(14).Token;
var RuleNode = __webpack_require__(22).RuleNode;
var ErrorNode = __webpack_require__(22).ErrorNode;
var TerminalNode = __webpack_require__(22).TerminalNode;
var ParserRuleContext = __webpack_require__(24).ParserRuleContext;
var RuleContext = __webpack_require__(21).RuleContext;
var INVALID_ALT_NUMBER = __webpack_require__(11).INVALID_ALT_NUMBER;

/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function (tree, ruleNames, recog) {
    ruleNames = ruleNames || null;
    recog = recog || null;
    if (recog !== null) {
        ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if (c === 0) {
        return s;
    }
    var res = "(" + s + ' ';
    if (c > 0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for (var i = 1; i < c; i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function (t, ruleNames, recog) {
    ruleNames = ruleNames || null;
    recog = recog || null;
    if (recog !== null) {
        ruleNames = recog.ruleNames;
    }
    if (ruleNames !== null) {
        if (t instanceof RuleContext) {
            var altNumber = t.getAltNumber();
            if (altNumber != INVALID_ALT_NUMBER) {
                return ruleNames[t.ruleIndex] + ":" + altNumber;
            }
            return ruleNames[t.ruleIndex];
        } else if (t instanceof ErrorNode) {
            return t.toString();
        } else if (t instanceof TerminalNode) {
            if (t.symbol !== null) {
                return t.symbol.text;
            }
        }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token) {
        return payload.text;
    }
    return t.getPayload().toString();
};

// Return ordered list of all children of this node
Trees.getChildren = function (t) {
    var list = [];
    for (var i = 0; i < t.getChildCount(); i++) {
        list.push(t.getChild(i));
    }
    return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function (t) {
    var ancestors = [];
    t = t.getParent();
    while (t !== null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function (t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function (t, ruleIndex) {
    return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function (t, index, findTokens) {
    var nodes = [];
    Trees._findAllNodes(t, index, findTokens, nodes);
    return nodes;
};

Trees._findAllNodes = function (t, index, findTokens, nodes) {
    // check this node (the root) first
    if (findTokens && t instanceof TerminalNode) {
        if (t.symbol.type === index) {
            nodes.push(t);
        }
    } else if (!findTokens && t instanceof ParserRuleContext) {
        if (t.ruleIndex === index) {
            nodes.push(t);
        }
    }
    // check children
    for (var i = 0; i < t.getChildCount(); i++) {
        Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
    }
};

Trees.descendants = function (t) {
    var nodes = [t];
    for (var i = 0; i < t.getChildCount(); i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};

exports.Trees = Trees;

/***/ }),
/* 24 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = __webpack_require__(21).RuleContext;
var Tree = __webpack_require__(22);
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = __webpack_require__(18).Interval;

function ParserRuleContext(parent, invokingStateNumber) {
  parent = parent || null;
  invokingStateNumber = invokingStateNumber || null;
  RuleContext.call(this, parent, invokingStateNumber);
  this.ruleIndex = -1;
  // * If we are debugging or building a parse tree for a visitor,
  // we need to track all of the tokens and rule invocations associated
  // with this rule's context. This is empty for parsing w/o tree constr.
  // operation because we don't the need to track the details about
  // how we parse this rule.
  // /
  this.children = null;
  this.start = null;
  this.stop = null;
  // The exception that forced this rule to return. If the rule successfully
  // completed, this is {@code null}.
  this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function (ctx) {
  // from RuleContext
  this.parentCtx = ctx.parentCtx;
  this.invokingState = ctx.invokingState;
  this.children = null;
  this.start = ctx.start;
  this.stop = ctx.stop;
  // copy any error nodes to alt label node
  if (ctx.children) {
    this.children = [];
    // reset parent pointer for any error nodes
    ctx.children.map(function (child) {
      if (child instanceof ErrorNodeImpl) {
        this.children.push(child);
        child.parentCtx = this;
      }
    }, this);
  }
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function (listener) {};

ParserRuleContext.prototype.exitRule = function (listener) {};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function (child) {
  if (this.children === null) {
    this.children = [];
  }
  this.children.push(child);
  return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function () {
  if (this.children !== null) {
    this.children.pop();
  }
};

ParserRuleContext.prototype.addTokenNode = function (token) {
  var node = new TerminalNodeImpl(token);
  this.addChild(node);
  node.parentCtx = this;
  return node;
};

ParserRuleContext.prototype.addErrorNode = function (badToken) {
  var node = new ErrorNodeImpl(badToken);
  this.addChild(node);
  node.parentCtx = this;
  return node;
};

ParserRuleContext.prototype.getChild = function (i, type) {
  type = type || null;
  if (this.children === null || i < 0 || i >= this.children.length) {
    return null;
  }
  if (type === null) {
    return this.children[i];
  } else {
    for (var j = 0; j < this.children.length; j++) {
      var child = this.children[j];
      if (child instanceof type) {
        if (i === 0) {
          return child;
        } else {
          i -= 1;
        }
      }
    }
    return null;
  }
};

ParserRuleContext.prototype.getToken = function (ttype, i) {
  if (this.children === null || i < 0 || i >= this.children.length) {
    return null;
  }
  for (var j = 0; j < this.children.length; j++) {
    var child = this.children[j];
    if (child instanceof TerminalNode) {
      if (child.symbol.type === ttype) {
        if (i === 0) {
          return child;
        } else {
          i -= 1;
        }
      }
    }
  }
  return null;
};

ParserRuleContext.prototype.getTokens = function (ttype) {
  if (this.children === null) {
    return [];
  } else {
    var tokens = [];
    for (var j = 0; j < this.children.length; j++) {
      var child = this.children[j];
      if (child instanceof TerminalNode) {
        if (child.symbol.type === ttype) {
          tokens.push(child);
        }
      }
    }
    return tokens;
  }
};

ParserRuleContext.prototype.getTypedRuleContext = function (ctxType, i) {
  return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function (ctxType) {
  if (this.children === null) {
    return [];
  } else {
    var contexts = [];
    for (var j = 0; j < this.children.length; j++) {
      var child = this.children[j];
      if (child instanceof ctxType) {
        contexts.push(child);
      }
    }
    return contexts;
  }
};

ParserRuleContext.prototype.getChildCount = function () {
  if (this.children === null) {
    return 0;
  } else {
    return this.children.length;
  }
};

ParserRuleContext.prototype.getSourceInterval = function () {
  if (this.start === null || this.stop === null) {
    return INVALID_INTERVAL;
  } else {
    return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
  }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
  ParserRuleContext.call(parent, invokingStateNumber);
  this.ruleIndex = ruleIndex;
  return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;

/***/ }),
/* 25 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(14).Token;
var ATN = __webpack_require__(11).ATN;
var ATNType = __webpack_require__(26).ATNType;
var ATNStates = __webpack_require__(16);
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = __webpack_require__(19);
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = __webpack_require__(18).IntervalSet;
var Interval = __webpack_require__(18).Interval;
var ATNDeserializationOptions = __webpack_require__(27).ATNDeserializationOptions;
var LexerActions = __webpack_require__(28);
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
var ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray(length, value) {
    var tmp = [];
    tmp[length - 1] = value;
    return tmp.map(function (i) {
        return value;
    });
}

function ATNDeserializer(options) {

    if (options === undefined || options === null) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;

    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function (feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.indexOf(feature);
    if (idx1 < 0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function (data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = [];
    // First, deserialize sets with 16-bit arguments <= U+FFFF.
    this.readSets(atn, sets, this.readInt.bind(this));
    // Next, if the ATN was serialized with the Unicode SMP feature,
    // deserialize sets with 32-bit arguments <= U+10FFFF.
    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
        this.readSets(atn, sets, this.readInt32.bind(this));
    }
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function (data) {
    var adjust = function adjust(c) {
        var v = c.charCodeAt(0);
        return v > 1 ? v - 2 : -1;
    };
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function () {
    var version = this.readInt();
    if (version !== SERIALIZED_VERSION) {
        throw "Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").";
    }
};

ATNDeserializer.prototype.checkUUID = function () {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid) < 0) {
        throw "Could not deserialize ATN with UUID: " + uuid + " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID;
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function () {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function (atn) {
    var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for (var i = 0; i < nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype === ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) {
            // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if (s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
    // state instances have been initialized
    for (j = 0; j < loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j = 0; j < endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }

    var numNonGreedyStates = this.readInt();
    for (j = 0; j < numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j = 0; j < numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function (atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i = 0; i < nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if (atn.grammarType === ATNType.LEXER) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i = 0; i < atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function (atn) {
    var nmodes = this.readInt();
    for (var i = 0; i < nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function (atn, sets, readUnicode) {
    var m = this.readInt();
    for (var i = 0; i < m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof !== 0) {
            iset.addOne(-1);
        }
        for (var j = 0; j < n; j++) {
            var i1 = readUnicode();
            var i2 = readUnicode();
            iset.addRange(i1, i2);
        }
    }
};

ATNDeserializer.prototype.readEdges = function (atn, sets) {
    var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i = 0; i < nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i = 0; i < atn.states.length; i++) {
        state = atn.states[i];
        for (j = 0; j < state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
            var outermostPrecedenceReturn = -1;
            if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
                if (t.precedence === 0) {
                    outermostPrecedenceReturn = t.target.ruleIndex;
                }
            }

            trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i = 0; i < atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw "IllegalState";
            }
            // block end states can only be associated to a single block start
            // state
            if (state.endState.startState !== null) {
                throw "IllegalState";
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j = 0; j < state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j = 0; j < state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function (atn) {
    var ndecisions = this.readInt();
    for (var i = 0; i < ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function (atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i = 0; i < count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function (atn) {
    var i;
    var count = atn.ruleToStartState.length;
    for (i = 0; i < count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for (i = 0; i < count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function (atn, idx) {
    var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;

    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for (i = 0; i < atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw "Couldn't identify final state of the precedence rule prefix section.";
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }

    // all non-excluded transitions that currently target end state need to
    // target blockEnd instead
    for (i = 0; i < atn.states.length; i++) {
        state = atn.states[i];
        for (var j = 0; j < state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
    // instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while (count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count - 1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function (state, idx) {
    if (state.ruleIndex !== idx) {
        return null;
    }
    if (!(state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!(maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//isPrecedenceDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function (atn) {
    for (var i = 0; i < atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {
                    state.isPrecedenceDecision = true;
                }
            }
        }
    }
};

ATNDeserializer.prototype.verifyATN = function (atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
    for (var i = 0; i < atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw "IllegalState";
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || state instanceof RuleStopState);
        }
    }
};

ATNDeserializer.prototype.checkCondition = function (condition, message) {
    if (!condition) {
        if (message === undefined || message === null) {
            message = "IllegalState";
        }
        throw message;
    }
};

ATNDeserializer.prototype.readInt = function () {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function () {
    var low = this.readInt();
    var high = this.readInt();
    return low | high << 16;
};

ATNDeserializer.prototype.readLong = function () {
    var low = this.readInt32();
    var high = this.readInt32();
    return low & 0x00000000FFFFFFFF | high << 32;
};

function createByteToHex() {
    var bth = [];
    for (var i = 0; i < 256; i++) {
        bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
    }
    return bth;
}

var byteToHex = createByteToHex();

ATNDeserializer.prototype.readUUID = function () {
    var bb = [];
    for (var i = 7; i >= 0; i--) {
        var int = this.readInt();
        /* jshint bitwise: false */
        bb[2 * i + 1] = int & 0xFF;
        bb[2 * i] = int >> 8 & 0xFF;
    }
    return byteToHex[bb[0]] + byteToHex[bb[1]] + byteToHex[bb[2]] + byteToHex[bb[3]] + '-' + byteToHex[bb[4]] + byteToHex[bb[5]] + '-' + byteToHex[bb[6]] + byteToHex[bb[7]] + '-' + byteToHex[bb[8]] + byteToHex[bb[9]] + '-' + byteToHex[bb[10]] + byteToHex[bb[11]] + byteToHex[bb[12]] + byteToHex[bb[13]] + byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function (atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch (type) {
        case Transition.EPSILON:
            return new EpsilonTransition(target);
        case Transition.RANGE:
            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
        case Transition.RULE:
            return new RuleTransition(atn.states[arg1], arg2, arg3, target);
        case Transition.PREDICATE:
            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.PRECEDENCE:
            return new PrecedencePredicateTransition(target, arg1);
        case Transition.ATOM:
            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
        case Transition.ACTION:
            return new ActionTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.SET:
            return new SetTransition(target, sets[arg1]);
        case Transition.NOT_SET:
            return new NotSetTransition(target, sets[arg1]);
        case Transition.WILDCARD:
            return new WildcardTransition(target);
        default:
            throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function (type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function () {
            return new BasicState();
        };
        sf[ATNState.RULE_START] = function () {
            return new RuleStartState();
        };
        sf[ATNState.BLOCK_START] = function () {
            return new BasicBlockStartState();
        };
        sf[ATNState.PLUS_BLOCK_START] = function () {
            return new PlusBlockStartState();
        };
        sf[ATNState.STAR_BLOCK_START] = function () {
            return new StarBlockStartState();
        };
        sf[ATNState.TOKEN_START] = function () {
            return new TokensStartState();
        };
        sf[ATNState.RULE_STOP] = function () {
            return new RuleStopState();
        };
        sf[ATNState.BLOCK_END] = function () {
            return new BlockEndState();
        };
        sf[ATNState.STAR_LOOP_BACK] = function () {
            return new StarLoopbackState();
        };
        sf[ATNState.STAR_LOOP_ENTRY] = function () {
            return new StarLoopEntryState();
        };
        sf[ATNState.PLUS_LOOP_BACK] = function () {
            return new PlusLoopbackState();
        };
        sf[ATNState.LOOP_END] = function () {
            return new LoopEndState();
        };
        this.stateFactories = sf;
    }
    if (type > this.stateFactories.length || this.stateFactories[type] === null) {
        throw "The specified state type " + type + " is not valid.";
    } else {
        var s = this.stateFactories[type]();
        if (s !== null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function (type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function (data1, data2) {
            return new LexerChannelAction(data1);
        };
        af[LexerActionType.CUSTOM] = function (data1, data2) {
            return new LexerCustomAction(data1, data2);
        };
        af[LexerActionType.MODE] = function (data1, data2) {
            return new LexerModeAction(data1);
        };
        af[LexerActionType.MORE] = function (data1, data2) {
            return LexerMoreAction.INSTANCE;
        };
        af[LexerActionType.POP_MODE] = function (data1, data2) {
            return LexerPopModeAction.INSTANCE;
        };
        af[LexerActionType.PUSH_MODE] = function (data1, data2) {
            return new LexerPushModeAction(data1);
        };
        af[LexerActionType.SKIP] = function (data1, data2) {
            return LexerSkipAction.INSTANCE;
        };
        af[LexerActionType.TYPE] = function (data1, data2) {
            return new LexerTypeAction(data1);
        };
        this.actionFactories = af;
    }
    if (type > this.actionFactories.length || this.actionFactories[type] === null) {
        throw "The specified lexer action type " + type + " is not valid.";
    } else {
        return this.actionFactories[type](data1, data2);
    }
};

exports.ATNDeserializer = ATNDeserializer;

/***/ }),
/* 26 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;

/***/ }),
/* 27 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function ATNDeserializationOptions(copyFrom) {
  if (copyFrom === undefined) {
    copyFrom = null;
  }
  this.readOnly = false;
  this.verifyATN = copyFrom === null ? true : copyFrom.verifyATN;
  this.generateRuleBypassTransitions = copyFrom === null ? false : copyFrom.generateRuleBypassTransitions;

  return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;

/***/ }),
/* 28 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

function LexerActionType() {}

LexerActionType.CHANNEL = 0; //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1; //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2; //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3; //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4; //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5; //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6; //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7; //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashCode = function () {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

LexerAction.prototype.updateHashCode = function (hash) {
    hash.update(this.actionType);
};

LexerAction.prototype.equals = function (other) {
    return this === other;
};

//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
    LexerAction.call(this, LexerActionType.SKIP);
    return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function (lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function () {
    return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
    LexerAction.call(this, LexerActionType.TYPE);
    this.type = type;
    return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function (lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.updateHashCode = function (hash) {
    hash.update(this.actionType, this.type);
};

LexerTypeAction.prototype.equals = function (other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function () {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
    LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function (lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.updateHashCode = function (hash) {
    hash.update(this.actionType, this.mode);
};

LexerPushModeAction.prototype.equals = function (other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function () {
    return "pushMode(" + this.mode + ")";
};

// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
    LexerAction.call(this, LexerActionType.POP_MODE);
    return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function (lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function () {
    return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
    LexerAction.call(this, LexerActionType.MORE);
    return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function (lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function () {
    return "more";
};

// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
    LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function (lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.updateHashCode = function (hash) {
    hash.update(this.actionType, this.mode);
};

LexerModeAction.prototype.equals = function (other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function () {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


// Constructs a custom lexer action with the specified rule and action
// indexes.
//
// @param ruleIndex The rule index to use for calls to
// {@link Recognizer//action}.
// @param actionIndex The action index to use for calls to
// {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
    LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function (lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.updateHashCode = function (hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.equals = function (other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
    LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function (lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.updateHashCode = function (hash) {
    hash.update(this.actionType, this.channel);
};

LexerChannelAction.prototype.equals = function (other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function () {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
    LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function (lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.updateHashCode = function (hash) {
    hash.update(this.actionType, this.offset, this.action);
};

LexerIndexedCustomAction.prototype.equals = function (other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};

exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;

/***/ }),
/* 29 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = __webpack_require__(14).Token;
var Lexer = __webpack_require__(30).Lexer;
var ATN = __webpack_require__(11).ATN;
var ATNSimulator = __webpack_require__(35).ATNSimulator;
var DFAState = __webpack_require__(36).DFAState;
var ATNConfigSet = __webpack_require__(37).ATNConfigSet;
var OrderedATNConfigSet = __webpack_require__(37).OrderedATNConfigSet;
var PredictionContext = __webpack_require__(20).PredictionContext;
var SingletonPredictionContext = __webpack_require__(20).SingletonPredictionContext;
var RuleStopState = __webpack_require__(16).RuleStopState;
var LexerATNConfig = __webpack_require__(15).LexerATNConfig;
var Transition = __webpack_require__(19).Transition;
var LexerActionExecutor = __webpack_require__(38).LexerActionExecutor;
var LexerNoViableAltException = __webpack_require__(34).LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function () {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function (simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function (input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function () {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function (input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (LexerATNSimulator.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (LexerATNSimulator.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function (input, ds0) {
	if (LexerATNSimulator.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) {
		// while more work
		if (LexerATNSimulator.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function (s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if (target === undefined) {
		target = null;
	}
	if (LexerATNSimulator.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function (input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) {
		// we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function (prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function (input, closure, reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = cfg.alt === skipAlt;
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (LexerATNSimulator.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = t === Token.EOF;
				var config = new LexerATNConfig({ state: target, lexerActionExecutor: lexerActionExecutor }, cfg);
				if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function (input, lexerActionExecutor, startIndex, index, line, charPos) {
	if (LexerATNSimulator.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function (trans, t) {
	if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function (input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
		var cfg = new LexerATNConfig({ state: target, alt: i + 1, context: initialContext }, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function (input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (LexerATNSimulator.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (LexerATNSimulator.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state: config.state, context: PredictionContext.EMPTY }, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state: returnState, context: newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function (input, config, trans, configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig({ state: trans.target, context: newContext }, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (LexerATNSimulator.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state: trans.target }, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state: trans.target, lexerActionExecutor: lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig({ state: trans.target }, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state: trans.target }, config);
	} else if (trans.serializationType === Transition.ATOM || trans.serializationType === Transition.RANGE || trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
				cfg = new LexerATNConfig({ state: trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function (input, ruleIndex, predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function (settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function (from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (LexerATNSimulator.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function (configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states.get(proposed);
	if (existing !== null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states.add(newState);
	return newState;
};

LexerATNSimulator.prototype.getDFA = function (mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function (input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function (input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function (tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;

/***/ }),
/* 30 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest of speed.

var Token = __webpack_require__(14).Token;
var Recognizer = __webpack_require__(31).Recognizer;
var CommonTokenFactory = __webpack_require__(33).CommonTokenFactory;
var RecognitionException = __webpack_require__(34).RecognitionException;
var LexerNoViableAltException = __webpack_require__(34).LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [this, input];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

Lexer.prototype.reset = function () {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function () {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
					if (e instanceof RecognitionException) {
						this.notifyListeners(e); // report error
						this.recover(e);
					} else {
						console.log(e.stack);
						throw e;
					}
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function () {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function () {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function (m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function (m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function () {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get: function get() {
		return this._input;
	},
	set: function set(input) {
		this._input = null;
		this._tokenFactorySourcePair = [this, this._input];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [this, this._input];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get: function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function (token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function () {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function () {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get: function get() {
		return this.type;
	},
	set: function set(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get: function get() {
		return this._interp.line;
	},
	set: function set(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get: function get() {
		return this._interp.column;
	},
	set: function set(column) {
		this._interp.column = column;
	}
});

// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function () {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get: function get() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set: function set(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function () {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function (e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function (s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function (c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function (c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function (re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;

/***/ }),
/* 31 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(14).Token;
var ConsoleErrorListener = __webpack_require__(32).ConsoleErrorListener;
var ProxyErrorListener = __webpack_require__(32).ProxyErrorListener;

function Recognizer() {
    this._listeners = [ConsoleErrorListener.INSTANCE];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};

Recognizer.prototype.checkVersion = function (toolVersion) {
    var runtimeVersion = "4.7";
    if (runtimeVersion !== toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: " + runtimeVersion + "!=" + toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function (listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function () {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function () {
    var tokenNames = this.getTokenNames();
    if (tokenNames === null) {
        throw "The current recognizer does not provide a list of token names.";
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if (result === undefined) {
        result = tokenNames.reduce(function (o, k, i) {
            o[k] = i;
        });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function () {
    var ruleNames = this.ruleNames;
    if (ruleNames === null) {
        throw "The current recognizer does not provide a list of rule names.";
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if (result === undefined) {
        result = ruleNames.reduce(function (o, k, i) {
            o[k] = i;
        });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function (tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !== undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};

// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function (e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};

// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function (t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type === Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n", "\\n").replace("\r", "\\r").replace("\t", "\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function () {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function (localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function (localctx, precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
    get: function get() {
        return this._stateNumber;
    },
    set: function set(state) {
        this._stateNumber = state;
    }
});

exports.Recognizer = Recognizer;

/***/ }),
/* 32 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
  return this;
}

ErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {};

ErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {};

ErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {};

ErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {};

function ConsoleErrorListener() {
  ErrorListener.call(this);
  return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {
  console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
  ErrorListener.call(this);
  if (delegates === null) {
    throw "delegates";
  }
  this.delegates = delegates;
  return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {
  this.delegates.map(function (d) {
    d.syntaxError(recognizer, offendingSymbol, line, column, msg, e);
  });
};

ProxyErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
  this.delegates.map(function (d) {
    d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
  });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
  this.delegates.map(function (d) {
    d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs);
  });
};

ProxyErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {
  this.delegates.map(function (d) {
    d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs);
  });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;

/***/ }),
/* 33 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = __webpack_require__(14).CommonToken;

function TokenFactory() {
    return this;
}

function CommonTokenFactory(copyText) {
    TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText === undefined ? false : copyText;
    return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function (source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !== null) {
        t.text = text;
    } else if (this.copyText && source[1] !== null) {
        t.text = source[1].getText(start, stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function (type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;

/***/ }),
/* 34 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = __webpack_require__(19).PredicateTransition;

function RecognitionException(params) {
    Error.call(this);
    if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
    } else {
        var stack = new Error().stack;
    }
    this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer !== null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function () {
    if (this.recognizer !== null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function () {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
    RecognitionException.call(this, { message: "", recognizer: lexer, input: input, ctx: null });
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function () {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex, this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
    ctx = ctx || recognizer._ctx;
    offendingToken = offendingToken || recognizer.getCurrentToken();
    startToken = startToken || recognizer.getCurrentToken();
    input = input || recognizer.getInputStream();
    RecognitionException.call(this, { message: "", recognizer: recognizer, input: input, ctx: ctx });
    // Which configurations did we try at input.index() that couldn't match
    // input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
    RecognitionException.call(this, { message: "", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx });
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
    RecognitionException.call(this, { message: this.formatMessage(predicate, message || null), recognizer: recognizer,
        input: recognizer.getInputStream(), ctx: recognizer._ctx });
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function (predicate, message) {
    if (message !== null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
    Error.call(this);
    Error.captureStackTrace(this, ParseCancellationException);
    return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;
exports.ParseCancellationException = ParseCancellationException;

/***/ }),
/* 35 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var DFAState = __webpack_require__(36).DFAState;
var ATNConfigSet = __webpack_require__(37).ATNConfigSet;
var getCachedPredictionContext = __webpack_require__(20).getCachedPredictionContext;

function ATNSimulator(atn, sharedContextCache) {

    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());

ATNSimulator.prototype.getCachedContext = function (context) {
    if (this.sharedContextCache === null) {
        return context;
    }
    var visited = {};
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;

/***/ }),
/* 36 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var ATNConfigSet = __webpack_require__(37).ATNConfigSet;
var Utils = __webpack_require__(13);
var Hash = Utils.Hash;
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function () {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function () {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function (other) {
	// compare set of ATN configurations in this set with other
	return this === other || other instanceof DFAState && this.configs.equals(other.configs);
};

DFAState.prototype.toString = function () {
	var s = "" + this.stateNumber + ":" + this.configs;
	if (this.isAcceptState) {
		s = s + "=>";
		if (this.predicates !== null) s = s + this.predicates;else s = s + this.prediction;
	}
	return s;
};

DFAState.prototype.hashCode = function () {
	var hash = new Hash();
	hash.update(this.configs);
	if (this.isAcceptState) {
		if (this.predicates !== null) hash.update(this.predicates);else hash.update(this.prediction);
	}
	return hash.finish();
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;

/***/ }),
/* 37 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = __webpack_require__(11).ATN;
var Utils = __webpack_require__(13);
var Hash = Utils.Hash;
var Set = Utils.Set;
var SemanticContext = __webpack_require__(17).SemanticContext;
var merge = __webpack_require__(20).merge;

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if (a === b) {
		return true;
	} else if (a === null || b === null) {
		return false;
	} else return a.equalsForConfigSet(b);
}

function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashCode = -1;

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function (config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashCode = -1;
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max(existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function () {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function () {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get: function get() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function (interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function (coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function (other) {
	return this === other || other instanceof ATNConfigSet && Utils.equalArrays(this.configs, other.configs) && this.fullCtx === other.fullCtx && this.uniqueAlt === other.uniqueAlt && this.conflictingAlts === other.conflictingAlts && this.hasSemanticContext === other.hasSemanticContext && this.dipsIntoOuterContext === other.dipsIntoOuterContext;
};

ATNConfigSet.prototype.hashCode = function () {
	var hash = new Hash();
	this.updateHashCode(hash);
	return hash.finish();
};

ATNConfigSet.prototype.updateHashCode = function (hash) {
	if (this.readOnly) {
		if (this.cachedHashCode === -1) {
			var hash = new Hash();
			hash.update(this.configs);
			this.cachedHashCode = hash.finish();
		}
		hash.update(this.cachedHashCode);
	} else {
		hash.update(this.configs);
	}
};

Object.defineProperty(ATNConfigSet.prototype, "length", {
	get: function get() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function () {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function (item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function (item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function () {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashCode = -1;
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function (readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function () {
	return Utils.arrayToString(this.configs) + (this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") + (this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") + (this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") + (this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;

/***/ }),
/* 38 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var hashStuff = __webpack_require__(13).hashStuff;
var LexerIndexedCustomAction = __webpack_require__(28).LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function (lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([lexerAction]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([lexerAction]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function (offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent && !(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset, this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function (lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = startIndex + offset !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashCode = function () {
	return this.cachedHashCode;
};

LexerActionExecutor.prototype.updateHashCode = function (hash) {
	hash.update(this.cachedHashCode);
};

LexerActionExecutor.prototype.equals = function (other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this.cachedHashCode != other.cachedHashCode) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length;
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;

/***/ }),
/* 39 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = __webpack_require__(13);
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = __webpack_require__(11).ATN;
var ATNState = __webpack_require__(16).ATNState;
var ATNConfig = __webpack_require__(15).ATNConfig;
var ATNConfigSet = __webpack_require__(37).ATNConfigSet;
var Token = __webpack_require__(14).Token;
var DFAState = __webpack_require__(36).DFAState;
var PredPrediction = __webpack_require__(36).PredPrediction;
var ATNSimulator = __webpack_require__(35).ATNSimulator;
var PredictionMode = __webpack_require__(40).PredictionMode;
var RuleContext = __webpack_require__(21).RuleContext;
var ParserRuleContext = __webpack_require__(24).ParserRuleContext;
var SemanticContext = __webpack_require__(17).SemanticContext;
var StarLoopEntryState = __webpack_require__(16).StarLoopEntryState;
var RuleStopState = __webpack_require__(16).RuleStopState;
var PredictionContext = __webpack_require__(20).PredictionContext;
var Interval = __webpack_require__(18).Interval;
var Transitions = __webpack_require__(19);
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = __webpack_require__(34).NoViableAltException;

var SingletonPredictionContext = __webpack_require__(20).SingletonPredictionContext;
var predictionContextFromRuleContext = __webpack_require__(20).predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
    ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_closure = false;
ParserATNSimulator.prototype.debug_add = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;

ParserATNSimulator.prototype.reset = function () {};

ParserATNSimulator.prototype.adaptivePredict = function (input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision + " exec LA(1)==" + this.getLookaheadName(input) + " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;

    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0 === null) {
            if (outerContext === null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }

            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if (dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
// if the set is empty, there is no viable alternative for current symbol
// does the state uniquely predict an alternative?
// does the state have a conflict that would prevent us from
//   putting it on the work list?

// We also have some key operations to do:
// add an edge from previous DFA state to potentially new DFA state, D,
//   upon current symbol but only if adding to work list, which means in all
//   cases except no viable alternative (and possibly non-greedy decisions?)
// collecting predicates and adding semantic context to DFA accept states
// adding rule context to context-sensitive DFA accept states
// consuming an input symbol
// reporting a conflict
// reporting an ambiguity
// reporting a context sensitivity
// reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function (dfa, s0, input, startIndex, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while (true) {
        // while more work
        var D = this.getExistingTargetState(previousD, t);
        if (D === null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if (D === ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if (alt !== ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if (D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates !== null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if (conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length === 1) {
                    if (this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext + " in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates === null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length === 0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length === 1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function (previousD, t) {
    var edges = previousD.edges;
    if (edges === null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function (dfa, previousD, t) {
    var reach = this.computeReachSet(previousD.configs, t, false);
    if (reach === null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) + ", previous=" + previousD.configs + ", configs=" + reach + ", predict=" + predictedAlt + ", allSubsetsConflict=" + PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" + this.getConflictingAlts(reach));
    }
    if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if (D.predicates !== null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function (dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred !== null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function (dfa, D, // how far we got before failing over
s0, input, startIndex, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext " + s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) {
        // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach === null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if (alt !== ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if (this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" + PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" + PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function (closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if (this.mergeCache === null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.

    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i = 0; i < closure.items.length; i++) {
        var c = closure.items[i];
        if (this.debug_add) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates === null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if (this.debug_add) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for (var j = 0; j < c.state.transitions.length; j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target !== null) {
                var cfg = new ATNConfig({ state: target }, c);
                intermediate.add(cfg, this.mergeCache);
                if (this.debug_add) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates === null && t !== Token.EOF) {
        if (intermediate.items.length === 1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate) !== ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach === null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k = 0; k < intermediate.items.length; k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates !== null && (!fullCtx || !PredictionMode.hasConfigInRuleStopState(reach))) {
        for (var l = 0; l < skippedStopStates.length; l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length === 0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function (configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for (var i = 0; i < configs.items.length; i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({ state: endOfRuleState }, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function (p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for (var i = 0; i < p.transitions.length; i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state: target, alt: i + 1, context: initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function (configs) {
    var config;
    var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for (var i = 0; i < configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext === null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({ semanticContext: updatedContext }, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for (i = 0; i < configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
        if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context !== null && context.equals(config.context)) {
                // eliminated
                continue;
            }
        }
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function (trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function (ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];
        if (ambigAlts.contains(c.alt)) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i = 1; i < nalts + 1; i++) {
        var pred = altToPred[i] || null;
        if (pred === null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts === 0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function (ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i = 1; i < altToPred.length; i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if (ambigAlts !== null && ambigAlts.contains(i)) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (!containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function (configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt !== ATN.INVALID_ALT_NUMBER) {
        // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length > 0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt !== ATN.INVALID_ALT_NUMBER) {
            // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};

ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function (configs) {
    var alts = [];
    for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext > 0 || c.state instanceof RuleStopState && c.context.hasEmptyPath()) {
            if (alts.indexOf(c.alt) < 0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length === 0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function (configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function (predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for (var i = 0; i < predPredictions.length; i++) {
        var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (!complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (!complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function (config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, initialDepth, treatEofAsEpsilon);
};

ParserATNSimulator.prototype.closureCheckingStopState = function (config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser, true) + ")");
        // console.log("configs(" + configs.toString() + ")");
        if (config.reachesIntoOuterContext > 50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (!config.context.isEmpty()) {
            for (var i = 0; i < config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({ state: config.state, context: PredictionContext.EMPTY }, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = { state: returnState, alt: config.alt, context: newContext, semanticContext: config.semanticContext };
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if (fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};

// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function (config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (!p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for (var i = 0; i < p.transitions.length; i++) {
        if (i == 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config)) continue;

        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c !== null) {
            if (!t.isEpsilon && closureBusy.add(c) !== c) {
                // avoid infinite recursion for EOF* and EOF+
                continue;
            }
            var newDepth = depth;
            if (config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.

                if (closureBusy.add(c) !== c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }

                if (this._dfa !== null && this._dfa.precedenceDfa) {
                    if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
                        c.precedenceFilterSuppressed = true;
                    }
                }

                c.reachesIntoOuterContext += 1;
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else if (t instanceof RuleTransition) {
                // latch when newDepth goes negative - once we step out of the entry context we can't return
                if (newDepth >= 0) {
                    newDepth += 1;
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};

ParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function (config) {
    // return False
    var p = config.state;
    // First check to see if we are in StarLoopEntryState generated during
    // left-recursion elimination. For efficiency, also check if
    // the context has an empty stack case. If so, it would mean
    // global FOLLOW so we can't perform optimization
    // Are we the special loop entry/exit state? or SLL wildcard
    if (p.stateType != ATNState.STAR_LOOP_ENTRY) return false;
    if (p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision || config.context.isEmpty() || config.context.hasEmptyPath()) return false;

    // Require all return states to return back to the same rule that p is in.
    var numCtxs = config.context.length;
    for (var i = 0; i < numCtxs; i++) {
        // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex != p.ruleIndex) return false;
    }

    var decisionStartState = p.transitions[0].target;
    var blockEndStateNum = decisionStartState.endState.stateNumber;
    var blockEndState = this.atn.states[blockEndStateNum];

    // Verify that the top of each stack context leads to loop entry/exit
    // state through epsilon edges and w/o leaving rule.
    for (var i = 0; i < numCtxs; i++) {
        // for each stack context
        var returnStateNumber = config.context.getReturnState(i);
        var returnState = this.atn.states[returnStateNumber];
        // all states must have single outgoing epsilon edge
        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon) return false;

        // Look for prefix op case like 'not expr', (' type ')' expr
        var returnStateTarget = returnState.transitions[0].target;
        if (returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p) continue;

        // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that
        if (returnState == blockEndState) continue;

        // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state
        if (returnStateTarget == blockEndState) continue;

        // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block
        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1 && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p) continue;

        // anything else ain't conforming
        return false;
    }
    return true;
};

ParserATNSimulator.prototype.getRuleName = function (index) {
    if (this.parser !== null && index >= 0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function (config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch (t.serializationType) {
        case Transition.RULE:
            return this.ruleTransition(config, t);
        case Transition.PRECEDENCE:
            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.PREDICATE:
            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.ACTION:
            return this.actionTransition(config, t);
        case Transition.EPSILON:
            return new ATNConfig({ state: t.target }, config);
        case Transition.ATOM:
        case Transition.RANGE:
        case Transition.SET:
            // EOF transitions act like epsilon transitions after the first EOF
            // transition is traversed
            if (treatEofAsEpsilon) {
                if (t.matches(Token.EOF, 0, 1)) {
                    return new ATNConfig({ state: t.target }, config);
                }
            }
            return null;
        default:
            return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function (config, t) {
    if (this.debug) {
        var index = t.actionIndex == -1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
    }
    return new ATNConfig({ state: t.target }, config);
};

ParserATNSimulator.prototype.precedenceTransition = function (config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser !== null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({ state: pt.target }, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({ state: pt.target, semanticContext: newSemCtx }, config);
        }
    } else {
        c = new ATNConfig({ state: pt.target }, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function (config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex + ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser !== null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && (pt.isCtxDependent && inContext || !pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({ state: pt.target }, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({ state: pt.target, semanticContext: newSemCtx }, config);
        }
    } else {
        c = new ATNConfig({ state: pt.target }, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function (config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({ state: t.target, context: newContext }, config);
};

ParserATNSimulator.prototype.getConflictingAlts = function (configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

// Sam pointed out a problem with the previous definition, v3, of
// ambiguous states. If we have another state associated with conflicting
// alternatives, we should keep going. For example, the following grammar
//
// s : (ID | ID ID?) ';' ;
//
// When the ATN simulation reaches the state before ';', it has a DFA
// state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
// 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
// because alternative to has another way to continue, via [6|2|[]].
// The key is that we have a single state that has config's only associated
// with a single alternative, 2, and crucially the state transitions
// among the configurations are all non-epsilon transitions. That means
// we don't consider any conflicts that include alternative 2. So, we
// ignore the conflict between alts 1 and 2. We ignore a set of
// conflicting alts when there is an intersection with an alternative
// associated with a single alt state in the state&rarr;config-list map.
//
// It's also the case that we might have two conflicting configurations but
// also a 3rd nonconflicting configuration for a different alternative:
// [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
//
// a : A | A | A B ;
//
// After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not
// stop working on this state. In the previous example, we're concerned
// with states associated with the conflicting alternatives. Here alt
// 3 is not associated with the conflicting configs, but since we can continue
// looking for input reasonably, I don't declare the state done. We
// ignore a set of conflicting alts when we have an alternative
// that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function (configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function (t) {
    if (t === Token.EOF) {
        return "EOF";
    }
    if (this.parser !== null && this.parser.literalNames !== null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
            return name + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function (input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function (nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for (var i = 0; i < decs.length; i++) {
        var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length > 0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom " + this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = t instanceof NotSetTransition;
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function (input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function (configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt; // found first alt
        } else if (c.alt !== alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function (dfa, from_, t, to) {
    if (this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to === null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_ === null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges === null) {
        from_.edges = [];
    }
    from_.edges[t + 1] = to; // connect

    if (this.debug) {
        var literalNames = this.parser === null ? null : this.parser.literalNames;
        var symbolicNames = this.parser === null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function (dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var existing = dfa.states.get(D);
    if (existing !== null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (!D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function (dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser !== null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function (dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser !== null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};

// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function (dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser !== null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};

exports.ParserATNSimulator = ParserATNSimulator;

/***/ }),
/* 40 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = __webpack_require__(13).Set;
var Map = __webpack_require__(13).Map;
var BitSet = __webpack_require__(13).BitSet;
var AltDict = __webpack_require__(13).AltDict;
var ATN = __webpack_require__(11).ATN;
var RuleStopState = __webpack_require__(16).RuleStopState;
var ATNConfigSet = __webpack_require__(37).ATNConfigSet;
var ATNConfig = __webpack_require__(15).ATNConfig;
var SemanticContext = __webpack_require__(17).SemanticContext;
var Hash = __webpack_require__(13).Hash;
var hashStuff = __webpack_require__(13).hashStuff;
var equalArrays = __webpack_require__(13).equalArrays;

function PredictionMode() {
    return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;

//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function (mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for (var i = 0; i < configs.items.length; i++) {
                var c = configs.items[i];
                c = new ATNConfig({ semanticContext: SemanticContext.NONE }, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function (configs) {
    for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
    }
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function (configs) {
    for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
    }
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function (altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function (altsets) {
    return !PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function (altsets) {
    for (var i = 0; i < altsets.length; i++) {
        var alts = altsets[i];
        if (alts.length === 1) {
            return true;
        }
    }
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function (altsets) {
    for (var i = 0; i < altsets.length; i++) {
        var alts = altsets[i];
        if (alts.length > 1) {
            return true;
        }
    }
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function (altsets) {
    var first = null;
    for (var i = 0; i < altsets.length; i++) {
        var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts !== first) {
            return false;
        }
    }
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function (altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length === 1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function (altsets) {
    var all = new BitSet();
    altsets.map(function (alts) {
        all.or(alts);
    });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>

PredictionMode.getConflictingAltSubsets = function (configs) {
    var configToAlts = new Map();
    configToAlts.hashFunction = function (cfg) {
        hashStuff(cfg.state.stateNumber, cfg.context);
    };
    configToAlts.equalsFunction = function (c1, c2) {
        return c1.state.stateNumber == c2.state.stateNumber && c1.context.equals(c2.context);
    };
    configs.items.map(function (cfg) {
        var alts = configToAlts.get(cfg);
        if (alts === null) {
            alts = new BitSet();
            configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
    });
    return configToAlts.getValues();
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function (configs) {
    var m = new AltDict();
    configs.items.map(function (c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function (configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for (var i = 0; i < values.length; i++) {
        if (values[i].length === 1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function (altsets) {
    var result = null;
    for (var i = 0; i < altsets.length; i++) {
        var alts = altsets[i];
        var minAlt = alts.minValue();
        if (result === null) {
            result = minAlt;
        } else if (result !== minAlt) {
            // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return result;
};

exports.PredictionMode = PredictionMode;

/***/ }),
/* 41 */
/***/ (() => {

"use strict";


/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function () {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`

		var defineProperty = function () {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch (error) {}
			return result;
		}();
		var codePointAt = function codePointAt(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) {
				// better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
			first >= 0xD800 && first <= 0xDBFF && // high surrogate
			size > index + 1 // there is a next code unit
			) {
					second = string.charCodeAt(index + 1);
					if (second >= 0xDC00 && second <= 0xDFFF) {
						// low surrogate
						// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
						return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
					}
				}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	})();
}

/***/ }),
/* 42 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = __webpack_require__(43).DFA;
exports.DFASerializer = __webpack_require__(44).DFASerializer;
exports.LexerDFASerializer = __webpack_require__(44).LexerDFASerializer;
exports.PredPrediction = __webpack_require__(36).PredPrediction;

/***/ }),
/* 43 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Set = __webpack_require__(13).Set;
var DFAState = __webpack_require__(36).DFAState;
var StarLoopEntryState = __webpack_require__(16).StarLoopEntryState;
var ATNConfigSet = __webpack_require__(37).ATNConfigSet;
var DFASerializer = __webpack_require__(44).DFASerializer;
var LexerDFASerializer = __webpack_require__(44).LexerDFASerializer;

function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new Set();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
	if (atnStartState instanceof StarLoopEntryState) {
		if (atnStartState.isPrecedenceDecision) {
			this.precedenceDfa = true;
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		}
	}
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function (precedence) {
	if (!this.precedenceDfa) {
		throw "Only precedence DFAs may contain a precedence start state.";
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function (precedence, startState) {
	if (!this.precedenceDfa) {
		throw "Only precedence DFAs may contain a precedence start state.";
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function (precedenceDfa) {
	if (this.precedenceDfa !== precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get: function get() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function () {
	var list = this._states.values();
	return list.sort(function (a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function (literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function () {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;

/***/ }),
/* 44 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
    this.dfa = dfa;
    this.literalNames = literalNames || [];
    this.symbolicNames = symbolicNames || [];
    return this;
}

DFASerializer.prototype.toString = function () {
    if (this.dfa.s0 === null) {
        return null;
    }
    var buf = "";
    var states = this.dfa.sortedStates();
    for (var i = 0; i < states.length; i++) {
        var s = states[i];
        if (s.edges !== null) {
            var n = s.edges.length;
            for (var j = 0; j < n; j++) {
                var t = s.edges[j] || null;
                if (t !== null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
        }
    }
    return buf.length === 0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function (i) {
    if (i === 0) {
        return "EOF";
    } else if (this.literalNames !== null || this.symbolicNames !== null) {
        return this.literalNames[i - 1] || this.symbolicNames[i - 1];
    } else {
        return String.fromCharCode(i - 1);
    }
};

DFASerializer.prototype.getStateString = function (s) {
    var baseStateStr = (s.isAcceptState ? ":" : "") + "s" + s.stateNumber + (s.requiresFullContext ? "^" : "");
    if (s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
    DFASerializer.call(this, dfa, null);
    return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function (i) {
    return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;

/***/ }),
/* 45 */
/***/ (() => {

"use strict";


/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function () {
		var defineProperty = function () {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch (error) {}
			return result;
		}();
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function fromCodePoint(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
				codePoint < 0 || // not a valid Unicode code point
				codePoint > 0x10FFFF || // not a valid Unicode code point
				floor(codePoint) != codePoint // not an integer
				) {
						throw RangeError('Invalid code point: ' + codePoint);
					}
				if (codePoint <= 0xFFFF) {
					// BMP code point
					codeUnits.push(codePoint);
				} else {
					// Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = codePoint % 0x400 + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	})();
}

/***/ }),
/* 46 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Tree = __webpack_require__(22);
exports.Trees = __webpack_require__(23).Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;

/***/ }),
/* 47 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.RecognitionException = __webpack_require__(34).RecognitionException;
exports.NoViableAltException = __webpack_require__(34).NoViableAltException;
exports.LexerNoViableAltException = __webpack_require__(34).LexerNoViableAltException;
exports.InputMismatchException = __webpack_require__(34).InputMismatchException;
exports.FailedPredicateException = __webpack_require__(34).FailedPredicateException;
exports.DiagnosticErrorListener = __webpack_require__(48).DiagnosticErrorListener;
exports.BailErrorStrategy = __webpack_require__(49).BailErrorStrategy;
exports.ErrorListener = __webpack_require__(32).ErrorListener;

/***/ }),
/* 48 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = __webpack_require__(13).BitSet;
var ErrorListener = __webpack_require__(32).ErrorListener;
var Interval = __webpack_require__(18).Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" + this.getDecisionDescription(recognizer, dfa) + ": ambigAlts=" + this.getConflictingAlts(ambigAlts, configs) + ", input='" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" + this.getDecisionDescription(recognizer, dfa) + ", input='" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" + this.getDecisionDescription(recognizer, dfa) + ", input='" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function (recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function (reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;

/***/ }),
/* 49 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(14).Token;
var Errors = __webpack_require__(34);
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = __webpack_require__(16).ATNState;
var Interval = __webpack_require__(18).Interval;
var IntervalSet = __webpack_require__(18).IntervalSet;

function ErrorStrategy() {}

ErrorStrategy.prototype.reset = function (recognizer) {};

ErrorStrategy.prototype.recoverInline = function (recognizer) {};

ErrorStrategy.prototype.recover = function (recognizer, e) {};

ErrorStrategy.prototype.sync = function (recognizer) {};

ErrorStrategy.prototype.inErrorRecoveryMode = function (recognizer) {};

ErrorStrategy.prototype.reportError = function (recognizer) {};

// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
    ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function (recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function (recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function (recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function (recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function (recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function (recognizer, e) {
    // if we've already reported an error and have not matched a token
    // yet successfully, don't report any errors.
    if (this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if (e instanceof NoViableAltException) {
        this.reportNoViableAlternative(recognizer, e);
    } else if (e instanceof InputMismatchException) {
        this.reportInputMismatch(recognizer, e);
    } else if (e instanceof FailedPredicateException) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function (recognizer, e) {
    if (this.lastErrorIndex === recognizer.getInputStream().index && this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state) >= 0) {
        // uh oh, another error at same token index and previously-visited
        // state in ATN; must be a case where LT(1) is in the recovery
        // token set so nothing got consumed. Consume a single token
        // at least to prevent an infinite loop; this is a failsafe.
        recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function (recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    var nextTokens = recognizer.atn.nextTokens(s);
    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {
        return;
    }
    switch (s.stateType) {
        case ATNState.BLOCK_START:
        case ATNState.STAR_BLOCK_START:
        case ATNState.PLUS_BLOCK_START:
        case ATNState.STAR_LOOP_ENTRY:
            // report error and recover if possible
            if (this.singleTokenDeletion(recognizer) !== null) {
                return;
            } else {
                throw new InputMismatchException(recognizer);
            }
            break;
        case ATNState.PLUS_LOOP_BACK:
        case ATNState.STAR_LOOP_BACK:
            this.reportUnwantedToken(recognizer);
            var expecting = new IntervalSet();
            expecting.addSet(recognizer.getExpectedTokens());
            var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
            break;
        default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function (recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if (tokens !== null) {
        if (e.startToken.type === Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken, e.offendingToken));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function (recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) + " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function (recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function (recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function (recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) + " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function (recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function (recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType)) {
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function (recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function (recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType === Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type === Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source, expectedTokenType, tokenText, Token.DEFAULT_CHANNEL, -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function (recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function (t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type === Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function (s) {
    s = s.replace(/\n/g, "\\n");
    s = s.replace(/\r/g, "\\r");
    s = s.replace(/\t/g, "\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function (recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState >= 0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function (recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while (ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
    DefaultErrorStrategy.call(this);
    return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function (recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};

// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function (recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function (recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;

/***/ }),
/* 50 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var InputStream = __webpack_require__(51).InputStream;

var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(5) : null;

// Utility functions to create InputStreams from various sources.
//
// All returned InputStreams support the full range of Unicode
// up to U+10FFFF (the default behavior of InputStream only supports
// code points up to U+FFFF).
var CharStreams = {
  // Creates an InputStream from a string.
  fromString: function fromString(str) {
    return new InputStream(str, true);
  },

  // Asynchronously creates an InputStream from a blob given the
  // encoding of the bytes in that blob (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes onLoad(result) on success, onError(error) on
  // failure.
  fromBlob: function fromBlob(blob, encoding, onLoad, onError) {
    var reader = FileReader();
    reader.onload = function (e) {
      var is = new InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  // Creates an InputStream from a Buffer given the
  // encoding of the bytes in that buffer (defaults to 'utf8' if
  // encoding is null).
  fromBuffer: function fromBuffer(buffer, encoding) {
    return new InputStream(buffer.toString(encoding), true);
  },

  // Asynchronously creates an InputStream from a file on disk given
  // the encoding of the bytes in that file (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes callback(error, result) on completion.
  fromPath: function fromPath(path, encoding, callback) {
    fs.readFile(path, encoding, function (err, data) {
      var is = null;
      if (data !== null) {
        is = new InputStream(data, true);
      }
      callback(err, is);
    });
  },

  // Synchronously creates an InputStream given a path to a file
  // on disk and the encoding of the bytes in that file (defaults to
  // 'utf8' if encoding is null).
  fromPathSync: function fromPathSync(path, encoding) {
    var data = fs.readFileSync(path, encoding);
    return new InputStream(data, true);
  }
};

exports.CharStreams = CharStreams;

/***/ }),
/* 51 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(14).Token;
__webpack_require__(41);
__webpack_require__(45);

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream, decodeToUnicodeCodePoints) {
	stream._index = 0;
	stream.data = [];
	if (stream.decodeToUnicodeCodePoints) {
		for (var i = 0; i < stream.strdata.length;) {
			var codePoint = stream.strdata.codePointAt(i);
			stream.data.push(codePoint);
			i += codePoint <= 0xFFFF ? 1 : 2;
		}
	} else {
		for (var i = 0; i < stream.strdata.length; i++) {
			var codeUnit = stream.strdata.charCodeAt(i);
			stream.data.push(codeUnit);
		}
	}
	stream._size = stream.data.length;
}

// If decodeToUnicodeCodePoints is true, the input is treated
// as a series of Unicode code points.
//
// Otherwise, the input is treated as a series of 16-bit UTF-16 code
// units.
function InputStream(data, decodeToUnicodeCodePoints) {
	this.name = "<empty>";
	this.strdata = data;
	this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get: function get() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get: function get() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function () {
	this._index = 0;
};

InputStream.prototype.consume = function () {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw "cannot consume EOF";
	}
	this._index += 1;
};

InputStream.prototype.LA = function (offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) {
		// invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function (offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function () {
	return -1;
};

InputStream.prototype.release = function (marker) {};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function (_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
		// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function (start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		if (this.decodeToUnicodeCodePoints) {
			var result = "";
			for (var i = start; i <= stop; i++) {
				result += String.fromCodePoint(this.data[i]);
			}
			return result;
		} else {
			return this.strdata.slice(start, stop + 1);
		}
	}
};

InputStream.prototype.toString = function () {
	return this.strdata;
};

exports.InputStream = InputStream;

/***/ }),
/* 52 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
//
var InputStream = __webpack_require__(51).InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(5) : null;

function FileStream(fileName, decodeToUnicodeCodePoints) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data, decodeToUnicodeCodePoints);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;

/***/ }),
/* 53 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = __webpack_require__(14).Token;
var BufferedTokenStream = __webpack_require__(54).BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
    BufferedTokenStream.call(this, lexer);
    this.channel = channel === undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function (i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function (k) {
    if (k === 0 || this.index - k < 0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function (k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function () {
    var n = 0;
    this.fill();
    for (var i = 0; i < this.tokens.length; i++) {
        var t = this.tokens[i];
        if (t.channel === this.channel) {
            n += 1;
        }
        if (t.type === Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;

/***/ }),
/* 54 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = __webpack_require__(14).Token;
var Lexer = __webpack_require__(30).Lexer;
var Interval = __webpack_require__(18).Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function () {
	return 0;
};

BufferedTokenStream.prototype.release = function (marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function () {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function (index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function (index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function () {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function (i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function (n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function (start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function (i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function (k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function (k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) {
		// return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function (i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function () {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function () {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function (tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
	this.fetchedEOF = false;
};

// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function (i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function (i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function (tokenIndex, channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function (tokenIndex, channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function (left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function () {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function (interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function () {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;

/***/ }),
/* 55 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(14).Token;
var ParseTreeListener = __webpack_require__(22).ParseTreeListener;
var Recognizer = __webpack_require__(31).Recognizer;
var DefaultErrorStrategy = __webpack_require__(49).DefaultErrorStrategy;
var ATNDeserializer = __webpack_require__(25).ATNDeserializer;
var ATNDeserializationOptions = __webpack_require__(27).ATNDeserializationOptions;
var TerminalNode = __webpack_require__(22).TerminalNode;
var ErrorNode = __webpack_require__(22).ErrorNode;

function TraceListener(parser) {
	ParseTreeListener.call(this);
	this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener.prototype);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function (ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function (node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function (ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function () {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function (ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function () {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function () {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function (listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function (listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function () {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function () {
	if (this._parseListeners !== null) {
		var ctx = this._ctx;
		this._parseListeners.map(function (listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function () {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
		var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function (listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function () {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function (factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function () {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions).deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = __webpack_require__(30).Lexer;

Parser.prototype.compileParseTreePattern = function (pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function () {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function (input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function () {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function (input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function () {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function (msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function () {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
		node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function (listener) {
				if (node instanceof ErrorNode || node.isErrorNode !== undefined && node.isErrorNode()) {
					listener.visitErrorNode(node);
				} else if (node instanceof TerminalNode) {
					listener.visitTerminal(node);
				}
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function () {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function (localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function () {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function (localctx, altNum) {
	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function () {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length - 1];
	}
};

Parser.prototype.enterRecursionRule = function (localctx, state, ruleIndex, precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
		// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function (localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
		// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function (parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function (ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function (localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length - 1];
};

Parser.prototype.inContext = function (context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function (symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function () {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function () {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function (ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function (p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function () {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function () {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function () {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function (trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;

/***/ }),
/* 56 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


// Generated from antlr/Solidity.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = __webpack_require__(9);

var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964", "\x02\x84\u071B\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04", "\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t", "\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04", "\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10", "\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13", "\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17", "\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A", "\x04\x1B\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E", "\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#", "\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04", "*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x04", "1\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x04", "8\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04", "?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04", "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04", "M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04", "T\tT\x04U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04", "[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t`\x04a\ta\x04", "b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04", "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04", "p\tp\x04q\tq\x04r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04", "w\tw\x04x\tx\x04y\ty\x04z\tz\x04{\t{\x04|\t|\x04}\t}\x04", "~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81\x04", "\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t", "\x85\x04\x86\t\x86\x04\x87\t\x87\x04\x88\t\x88\x04", "\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B\x03\x02\x03", "\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03", "\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03", "\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03", "\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\x0B\x03\x0B\x03", "\x0B\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03", "\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E", "\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11", "\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12", "\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13", "\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13", "\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14", "\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15", "\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15", "\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18", "\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19", "\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B", "\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B", "\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C", "\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D", "\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D", "\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E", "\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F", "\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x03 \x03!\x03", "!\x03\"\x03\"\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03", "#\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03", "%\x03&\x03&\x03&\x03'\x03'\x03'\x03'\x03'\x03", "'\x03'\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03", ")\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03*\x03", "*\x03*\x03+\x03+\x03+\x03+\x03+\x03,\x03,\x03,\x03", ",\x03-\x03-\x03-\x03-\x03-\x03-\x03.\x03.\x03.\x03", ".\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03", "/\x03/\x030\x030\x030\x031\x031\x031\x031\x031\x03", "1\x031\x032\x032\x032\x032\x032\x032\x033\x033\x03", "3\x033\x033\x034\x034\x034\x034\x035\x035\x035\x03", "5\x035\x036\x036\x036\x036\x036\x036\x036\x037\x03", "7\x037\x037\x037\x038\x038\x038\x039\x039\x039\x03", ":\x03:\x03:\x03:\x03;\x03;\x03<\x03<\x03=\x03=\x03", ">\x03>\x03>\x03>\x03>\x03>\x03?\x03?\x03?\x03?\x03", "?\x03?\x03?\x03@\x03@\x03A\x03A\x03A\x03B\x03B\x03", "C\x03C\x03D\x03D\x03D\x03E\x03E\x03E\x03F\x03F\x03", "G\x03G\x03H\x03H\x03H\x03I\x03I\x03I\x03J\x03J\x03", "J\x03K\x03K\x03K\x03L\x03L\x03M\x03M\x03M\x03N\x03", "N\x03N\x03O\x03O\x03O\x03P\x03P\x03P\x03P\x03Q\x03", "Q\x03Q\x03Q\x03R\x03R\x03R\x03S\x03S\x03S\x03T\x03", "T\x03T\x03U\x03U\x03U\x03V\x03V\x03V\x03W\x03W\x03", "W\x03W\x03X\x03X\x03X\x03Y\x03Y\x03Y\x03Z\x03Z\x03", "Z\x03Z\x03Z\x03Z\x03Z\x03[\x03[\x03[\x03[\x03[\x03", "\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03]\x03", "]\x03]\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03", "^\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "`\x03`\x05`\u036C\n`\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x05a\u0445", "\na\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x05b\u0523\nb\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x06c\u0531\nc\rc\x0Ec\u0532\x03", "c\x03c\x06c\u0537\nc\rc\x0Ec\u0538\x05c\u053B\nc\x03d\x03", "d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03", "d\x03d\x03d\x06d\u054B\nd\rd\x0Ed\u054C\x03d\x03d\x06", "d\u0551\nd\rd\x0Ed\u0552\x05d\u0555\nd\x03e\x03e\x03e\x03", "e\x03e\x03e\x03e\x03e\x03e\x05e\u0560\ne\x03f\x03f\x05", "f\u0564\nf\x03f\x03f\x05f\u0568\nf\x03f\x03f\x05f\u056C", "\nf\x03g\x03g\x05g\u0570\ng\x03g\x07g\u0573\ng\fg\x0Eg\u0576", "\x0Bg\x03h\x03h\x03h\x03h\x03i\x03i\x05i\u057E\ni\x03", "i\x07i\u0581\ni\fi\x0Ei\u0584\x0Bi\x03j\x03j\x03j\x03", "j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03", "j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03", "j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03", "j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03", "j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x05j\u05BA", "\nj\x03k\x03k\x03k\x03k\x03k\x03k\x05k\u05C2\nk\x03", "k\x03k\x03k\x05k\u05C7\nk\x03k\x05k\u05CA\nk\x03l\x03", "l\x03l\x03m\x03m\x03n\x03n\x03n\x03n\x03n\x03n\x03", "n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03", "n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03", "n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03", "n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03", "n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03", "n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03", "n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03", "n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03", "n\x03n\x05n\u0629\nn\x03o\x03o\x03o\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03p\x03p\x03p\x03p\x03p\x03p\x03", "q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03r\x03", "r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03s\x03", "s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03t\x03t\x03", "t\x03t\x03t\x03t\x03u\x03u\x03u\x03u\x03u\x03u\x03", "u\x03u\x03u\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03", "v\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x03", "x\x03x\x03x\x03x\x03x\x03x\x03x\x03x\x03y\x03y\x03", "y\x03y\x03y\x03y\x03y\x03y\x03z\x03z\x03z\x03z\x03", "z\x03z\x03z\x03{\x03{\x03{\x03{\x03{\x03{\x03{\x03", "{\x03|\x03|\x03|\x03|\x03|\x03}\x03}\x03}\x03}\x03", "}\x03~\x03~\x03~\x03~\x03~\x03\x7F\x03\x7F\x03\x7F", "\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F", "\x03\x7F\x03\x7F\x03\x7F\x03\x80\x03\x80\x03\x80", "\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80", "\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81", "\x03\x81\x03\x81\x03\x82\x03\x82\x07\x82\u06C4\n", "\x82\f\x82\x0E\x82\u06C7\x0B\x82\x03\x83\x03\x83", "\x03\x84\x03\x84\x03\x85\x03\x85\x07\x85\u06CF\n", "\x85\f\x85\x0E\x85\u06D2\x0B\x85\x03\x85\x03\x85", "\x03\x85\x07\x85\u06D7\n\x85\f\x85\x0E\x85\u06DA\x0B", "\x85\x03\x85\x05\x85\u06DD\n\x85\x03\x86\x03\x86", "\x03\x86\x05\x86\u06E2\n\x86\x03\x87\x03\x87\x03", "\x87\x05\x87\u06E7\n\x87\x03\x88\x06\x88\u06EA\n\x88", "\r\x88\x0E\x88\u06EB\x03\x88\x03\x88\x06\x88\u06F0", "\n\x88\r\x88\x0E\x88\u06F1\x03\x88\x03\x88\x06\x88", "\u06F6\n\x88\r\x88\x0E\x88\u06F7\x05\x88\u06FA\n\x88\x03", "\x89\x06\x89\u06FD\n\x89\r\x89\x0E\x89\u06FE\x03\x89", "\x03\x89\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x07\x8A", "\u0707\n\x8A\f\x8A\x0E\x8A\u070A\x0B\x8A\x03\x8A\x03", "\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8B\x03\x8B\x03", "\x8B\x03\x8B\x07\x8B\u0715\n\x8B\f\x8B\x0E\x8B\u0718", "\x0B\x8B\x03\x8B\x03\x8B\x03\u0708\x02\x8C\x03\x03", "\x05\x04\x07\x05\t\x06\x0B\x07\r\b\x0F\t\x11\n\x13", "\x0B\x15\f\x17\r\x19\x0E\x1B\x0F\x1D\x10\x1F\x11", "!\x12#\x13%\x14'\x15)\x16+\x17-\x18/\x191\x1A3\x1B", "5\x1C7\x1D9\x1E;\x1F= ?!A\"C#E$G%I&K'M(O)Q*S+U,W-Y.[/]0_1a", "2c3e4g5i6k7m8o9q:s;u<w=y>{?}@\x7FA\x81B\x83C\x85D\x87E\x89", "F\x8BG\x8DH\x8FI\x91J\x93K\x95L\x97M\x99N\x9BO\x9D", "P\x9FQ\xA1R\xA3S\xA5T\xA7U\xA9V\xABW\xADX\xAFY\xB1", "Z\xB3[\xB5\\\xB7]\xB9^\xBB_\xBD`\xBFa\xC1b\xC3c\xC5", "d\xC7e\xC9f\xCBg\xCD\x02\xCFh\xD1\x02\xD3i\xD5j", "\xD7\x02\xD9\x02\xDBk\xDDl\xDFm\xE1n\xE3o\xE5p\xE7", "q\xE9r\xEBs\xEDt\xEFu\xF1v\xF3w\xF5x\xF7y\xF9z\xFB", "{\xFD|\xFF}\u0101~\u0103\x7F\u0105\x02\u0107\x02\u0109\x80", "\u010B\x02\u010D\x02\u010F\x81\u0111\x82\u0113\x83\u0115\x84", "\x03\x02\f\x03\x022;\x04\x02GGgg\x04\x02ZZzz\x05\x02", "2;CHch\x06\x02&&C\\aac|\x07\x02&&2;C\\aac|\x06\x02\f\f\x0F", "\x0F$$^^\x06\x02\f\f\x0F\x0F))^^\x05\x02\x0B\f\x0E", "\x0F\"\"\x04\x02\f\f\x0F\x0F\x02\u07A9\x02\x03\x03", "\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03", "\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\x0B\x03", "\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03", "\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03", "\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03", "\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03", "\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03", "\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02", "\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02", "\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02", "\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02", "1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03", "\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02", "\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02", "\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02", "\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02", "G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03", "\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02", "\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02", "\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02", "\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02", "]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03", "\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02", "\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02", "\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02", "\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02", "s\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02w\x03", "\x02\x02\x02\x02y\x03\x02\x02\x02\x02{\x03\x02", "\x02\x02\x02}\x03\x02\x02\x02\x02\x7F\x03\x02", "\x02\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02", "\x02\x02\x02\x85\x03\x02\x02\x02\x02\x87\x03\x02", "\x02\x02\x02\x89\x03\x02\x02\x02\x02\x8B\x03\x02", "\x02\x02\x02\x8D\x03\x02\x02\x02\x02\x8F\x03\x02", "\x02\x02\x02\x91\x03\x02\x02\x02\x02\x93\x03\x02", "\x02\x02\x02\x95\x03\x02\x02\x02\x02\x97\x03\x02", "\x02\x02\x02\x99\x03\x02\x02\x02\x02\x9B\x03\x02", "\x02\x02\x02\x9D\x03\x02\x02\x02\x02\x9F\x03\x02", "\x02\x02\x02\xA1\x03\x02\x02\x02\x02\xA3\x03\x02", "\x02\x02\x02\xA5\x03\x02\x02\x02\x02\xA7\x03\x02", "\x02\x02\x02\xA9\x03\x02\x02\x02\x02\xAB\x03\x02", "\x02\x02\x02\xAD\x03\x02\x02\x02\x02\xAF\x03\x02", "\x02\x02\x02\xB1\x03\x02\x02\x02\x02\xB3\x03\x02", "\x02\x02\x02\xB5\x03\x02\x02\x02\x02\xB7\x03\x02", "\x02\x02\x02\xB9\x03\x02\x02\x02\x02\xBB\x03\x02", "\x02\x02\x02\xBD\x03\x02\x02\x02\x02\xBF\x03\x02", "\x02\x02\x02\xC1\x03\x02\x02\x02\x02\xC3\x03\x02", "\x02\x02\x02\xC5\x03\x02\x02\x02\x02\xC7\x03\x02", "\x02\x02\x02\xC9\x03\x02\x02\x02\x02\xCB\x03\x02", "\x02\x02\x02\xCF\x03\x02\x02\x02\x02\xD3\x03\x02", "\x02\x02\x02\xD5\x03\x02\x02\x02\x02\xDB\x03\x02", "\x02\x02\x02\xDD\x03\x02\x02\x02\x02\xDF\x03\x02", "\x02\x02\x02\xE1\x03\x02\x02\x02\x02\xE3\x03\x02", "\x02\x02\x02\xE5\x03\x02\x02\x02\x02\xE7\x03\x02", "\x02\x02\x02\xE9\x03\x02\x02\x02\x02\xEB\x03\x02", "\x02\x02\x02\xED\x03\x02\x02\x02\x02\xEF\x03\x02", "\x02\x02\x02\xF1\x03\x02\x02\x02\x02\xF3\x03\x02", "\x02\x02\x02\xF5\x03\x02\x02\x02\x02\xF7\x03\x02", "\x02\x02\x02\xF9\x03\x02\x02\x02\x02\xFB\x03\x02", "\x02\x02\x02\xFD\x03\x02\x02\x02\x02\xFF\x03\x02", "\x02\x02\x02\u0101\x03\x02\x02\x02\x02\u0103\x03\x02", "\x02\x02\x02\u0109\x03\x02\x02\x02\x02\u010F\x03\x02", "\x02\x02\x02\u0111\x03\x02\x02\x02\x02\u0113\x03\x02", "\x02\x02\x02\u0115\x03\x02\x02\x02\x03\u0117\x03\x02", "\x02\x02\x05\u011E\x03\x02\x02\x02\x07\u0120\x03\x02", "\x02\x02\t\u0122\x03\x02\x02\x02\x0B\u0124\x03\x02", "\x02\x02\r\u0127\x03\x02\x02\x02\x0F\u0129\x03\x02", "\x02\x02\x11\u012B\x03\x02\x02\x02\x13\u012E\x03\x02", "\x02\x02\x15\u0130\x03\x02\x02\x02\x17\u0133\x03\x02", "\x02\x02\x19\u013A\x03\x02\x02\x02\x1B\u013C\x03\x02", "\x02\x02\x1D\u0141\x03\x02\x02\x02\x1F\u0143\x03\x02", "\x02\x02!\u0145\x03\x02\x02\x02#\u0147\x03\x02\x02", "\x02%\u0150\x03\x02\x02\x02'\u0159\x03\x02\x02\x02", ")\u0163\x03\x02\x02\x02+\u016B\x03\x02\x02\x02-\u016E", "\x03\x02\x02\x02/\u0170\x03\x02\x02\x021\u0172\x03", "\x02\x02\x023\u0178\x03\x02\x02\x025\u017C\x03\x02", "\x02\x027\u0183\x03\x02\x02\x029\u018C\x03\x02\x02", "\x02;\u0195\x03\x02\x02\x02=\u019D\x03\x02\x02\x02", "?\u01A3\x03\x02\x02\x02A\u01A8\x03\x02\x02\x02C\u01AA", "\x03\x02\x02\x02E\u01AC\x03\x02\x02\x02G\u01B4\x03", "\x02\x02\x02I\u01B6\x03\x02\x02\x02K\u01BE\x03\x02", "\x02\x02M\u01C1\x03\x02\x02\x02O\u01C8\x03\x02\x02", "\x02Q\u01D0\x03\x02\x02\x02S\u01D9\x03\x02\x02\x02", "U\u01DC\x03\x02\x02\x02W\u01E1\x03\x02\x02\x02Y\u01E5", "\x03\x02\x02\x02[\u01EB\x03\x02\x02\x02]\u01F1\x03", "\x02\x02\x02_\u01FA\x03\x02\x02\x02a\u01FD\x03\x02", "\x02\x02c\u0204\x03\x02\x02\x02e\u020A\x03\x02\x02", "\x02g\u020F\x03\x02\x02\x02i\u0213\x03\x02\x02\x02", "k\u0218\x03\x02\x02\x02m\u021F\x03\x02\x02\x02o\u0224", "\x03\x02\x02\x02q\u0227\x03\x02\x02\x02s\u022A\x03", "\x02\x02\x02u\u022E\x03\x02\x02\x02w\u0230\x03\x02", "\x02\x02y\u0232\x03\x02\x02\x02{\u0234\x03\x02\x02", "\x02}\u023A\x03\x02\x02\x02\x7F\u0241\x03\x02\x02", "\x02\x81\u0243\x03\x02\x02\x02\x83\u0246\x03\x02\x02", "\x02\x85\u0248\x03\x02\x02\x02\x87\u024A\x03\x02\x02", "\x02\x89\u024D\x03\x02\x02\x02\x8B\u0250\x03\x02\x02", "\x02\x8D\u0252\x03\x02\x02\x02\x8F\u0254\x03\x02\x02", "\x02\x91\u0257\x03\x02\x02\x02\x93\u025A\x03\x02\x02", "\x02\x95\u025D\x03\x02\x02\x02\x97\u0260\x03\x02\x02", "\x02\x99\u0262\x03\x02\x02\x02\x9B\u0265\x03\x02\x02", "\x02\x9D\u0268\x03\x02\x02\x02\x9F\u026B\x03\x02\x02", "\x02\xA1\u026F\x03\x02\x02\x02\xA3\u0273\x03\x02\x02", "\x02\xA5\u0276\x03\x02\x02\x02\xA7\u0279\x03\x02\x02", "\x02\xA9\u027C\x03\x02\x02\x02\xAB\u027F\x03\x02\x02", "\x02\xAD\u0282\x03\x02\x02\x02\xAF\u0286\x03\x02\x02", "\x02\xB1\u0289\x03\x02\x02\x02\xB3\u028C\x03\x02\x02", "\x02\xB5\u0293\x03\x02\x02\x02\xB7\u0298\x03\x02\x02", "\x02\xB9\u02A0\x03\x02\x02\x02\xBB\u02A3\x03\x02\x02", "\x02\xBD\u02AC\x03\x02\x02\x02\xBF\u036B\x03\x02\x02", "\x02\xC1\u0444\x03\x02\x02\x02\xC3\u0522\x03\x02\x02", "\x02\xC5\u053A\x03\x02\x02\x02\xC7\u0554\x03\x02\x02", "\x02\xC9\u055F\x03\x02\x02\x02\xCB\u0567\x03\x02\x02", "\x02\xCD\u056D\x03\x02\x02\x02\xCF\u0577\x03\x02\x02", "\x02\xD1\u057B\x03\x02\x02\x02\xD3\u05B9\x03\x02\x02", "\x02\xD5\u05BB\x03\x02\x02\x02\xD7\u05CB\x03\x02\x02", "\x02\xD9\u05CE\x03\x02\x02\x02\xDB\u0628\x03\x02\x02", "\x02\xDD\u062A\x03\x02\x02\x02\xDF\u0634\x03\x02\x02", "\x02\xE1\u063A\x03\x02\x02\x02\xE3\u0643\x03\x02\x02", "\x02\xE5\u064D\x03\x02\x02\x02\xE7\u0656\x03\x02\x02", "\x02\xE9\u065C\x03\x02\x02\x02\xEB\u0665\x03\x02\x02", "\x02\xED\u066D\x03\x02\x02\x02\xEF\u0676\x03\x02\x02", "\x02\xF1\u067E\x03\x02\x02\x02\xF3\u0686\x03\x02\x02", "\x02\xF5\u068D\x03\x02\x02\x02\xF7\u0695\x03\x02\x02", "\x02\xF9\u069A\x03\x02\x02\x02\xFB\u069F\x03\x02\x02", "\x02\xFD\u06A4\x03\x02\x02\x02\xFF\u06B0\x03\x02\x02", "\x02\u0101\u06B9\x03\x02\x02\x02\u0103\u06C1\x03\x02\x02", "\x02\u0105\u06C8\x03\x02\x02\x02\u0107\u06CA\x03\x02\x02", "\x02\u0109\u06DC\x03\x02\x02\x02\u010B\u06E1\x03\x02\x02", "\x02\u010D\u06E6\x03\x02\x02\x02\u010F\u06E9\x03\x02\x02", "\x02\u0111\u06FC\x03\x02\x02\x02\u0113\u0702\x03\x02\x02", "\x02\u0115\u0710\x03\x02\x02\x02\u0117\u0118\x07r\x02", "\x02\u0118\u0119\x07t\x02\x02\u0119\u011A\x07c\x02\x02", "\u011A\u011B\x07i\x02\x02\u011B\u011C\x07o\x02\x02\u011C", "\u011D\x07c\x02\x02\u011D\x04\x03\x02\x02\x02\u011E", "\u011F\x07=\x02\x02\u011F\x06\x03\x02\x02\x02\u0120", "\u0121\x07`\x02\x02\u0121\b\x03\x02\x02\x02\u0122\u0123", "\x07\x80\x02\x02\u0123\n\x03\x02\x02\x02\u0124\u0125", "\x07@\x02\x02\u0125\u0126\x07?\x02\x02\u0126\f\x03\x02", "\x02\x02\u0127\u0128\x07@\x02\x02\u0128\x0E\x03\x02", "\x02\x02\u0129\u012A\x07>\x02\x02\u012A\x10\x03\x02", "\x02\x02\u012B\u012C\x07>\x02\x02\u012C\u012D\x07?\x02", "\x02\u012D\x12\x03\x02\x02\x02\u012E\u012F\x07?\x02", "\x02\u012F\x14\x03\x02\x02\x02\u0130\u0131\x07c\x02", "\x02\u0131\u0132\x07u\x02\x02\u0132\x16\x03\x02\x02", "\x02\u0133\u0134\x07k\x02\x02\u0134\u0135\x07o\x02\x02", "\u0135\u0136\x07r\x02\x02\u0136\u0137\x07q\x02\x02\u0137", "\u0138\x07t\x02\x02\u0138\u0139\x07v\x02\x02\u0139\x18", "\x03\x02\x02\x02\u013A\u013B\x07,\x02\x02\u013B\x1A", "\x03\x02\x02\x02\u013C\u013D\x07h\x02\x02\u013D\u013E", "\x07t\x02\x02\u013E\u013F\x07q\x02\x02\u013F\u0140\x07", "o\x02\x02\u0140\x1C\x03\x02\x02\x02\u0141\u0142\x07", "}\x02\x02\u0142\x1E\x03\x02\x02\x02\u0143\u0144\x07", ".\x02\x02\u0144 \x03\x02\x02\x02\u0145\u0146\x07\x7F", "\x02\x02\u0146\"\x03\x02\x02\x02\u0147\u0148\x07c\x02", "\x02\u0148\u0149\x07d\x02\x02\u0149\u014A\x07u\x02\x02", "\u014A\u014B\x07v\x02\x02\u014B\u014C\x07t\x02\x02\u014C", "\u014D\x07c\x02\x02\u014D\u014E\x07e\x02\x02\u014E\u014F", "\x07v\x02\x02\u014F$\x03\x02\x02\x02\u0150\u0151\x07", "e\x02\x02\u0151\u0152\x07q\x02\x02\u0152\u0153\x07p\x02", "\x02\u0153\u0154\x07v\x02\x02\u0154\u0155\x07t\x02\x02", "\u0155\u0156\x07c\x02\x02\u0156\u0157\x07e\x02\x02\u0157", "\u0158\x07v\x02\x02\u0158&\x03\x02\x02\x02\u0159\u015A", "\x07k\x02\x02\u015A\u015B\x07p\x02\x02\u015B\u015C\x07", "v\x02\x02\u015C\u015D\x07g\x02\x02\u015D\u015E\x07t\x02", "\x02\u015E\u015F\x07h\x02\x02\u015F\u0160\x07c\x02\x02", "\u0160\u0161\x07e\x02\x02\u0161\u0162\x07g\x02\x02\u0162", "(\x03\x02\x02\x02\u0163\u0164\x07n\x02\x02\u0164\u0165", "\x07k\x02\x02\u0165\u0166\x07d\x02\x02\u0166\u0167\x07", "t\x02\x02\u0167\u0168\x07c\x02\x02\u0168\u0169\x07t\x02", "\x02\u0169\u016A\x07{\x02\x02\u016A*\x03\x02\x02\x02", "\u016B\u016C\x07k\x02\x02\u016C\u016D\x07u\x02\x02\u016D", ",\x03\x02\x02\x02\u016E\u016F\x07*\x02\x02\u016F.\x03", "\x02\x02\x02\u0170\u0171\x07+\x02\x02\u01710\x03\x02", "\x02\x02\u0172\u0173\x07w\x02\x02\u0173\u0174\x07u\x02", "\x02\u0174\u0175\x07k\x02\x02\u0175\u0176\x07p\x02\x02", "\u0176\u0177\x07i\x02\x02\u01772\x03\x02\x02\x02\u0178", "\u0179\x07h\x02\x02\u0179\u017A\x07q\x02\x02\u017A\u017B", "\x07t\x02\x02\u017B4\x03\x02\x02\x02\u017C\u017D\x07", "u\x02\x02\u017D\u017E\x07v\x02\x02\u017E\u017F\x07t\x02", "\x02\u017F\u0180\x07w\x02\x02\u0180\u0181\x07e\x02\x02", "\u0181\u0182\x07v\x02\x02\u01826\x03\x02\x02\x02\u0183", "\u0184\x07o\x02\x02\u0184\u0185\x07q\x02\x02\u0185\u0186", "\x07f\x02\x02\u0186\u0187\x07k\x02\x02\u0187\u0188\x07", "h\x02\x02\u0188\u0189\x07k\x02\x02\u0189\u018A\x07g\x02", "\x02\u018A\u018B\x07t\x02\x02\u018B8\x03\x02\x02\x02", "\u018C\u018D\x07h\x02\x02\u018D\u018E\x07w\x02\x02\u018E", "\u018F\x07p\x02\x02\u018F\u0190\x07e\x02\x02\u0190\u0191", "\x07v\x02\x02\u0191\u0192\x07k\x02\x02\u0192\u0193\x07", "q\x02\x02\u0193\u0194\x07p\x02\x02\u0194:\x03\x02\x02", "\x02\u0195\u0196\x07t\x02\x02\u0196\u0197\x07g\x02\x02", "\u0197\u0198\x07v\x02\x02\u0198\u0199\x07w\x02\x02\u0199", "\u019A\x07t\x02\x02\u019A\u019B\x07p\x02\x02\u019B\u019C", "\x07u\x02\x02\u019C<\x03\x02\x02\x02\u019D\u019E\x07", "g\x02\x02\u019E\u019F\x07x\x02\x02\u019F\u01A0\x07g\x02", "\x02\u01A0\u01A1\x07p\x02\x02\u01A1\u01A2\x07v\x02\x02", "\u01A2>\x03\x02\x02\x02\u01A3\u01A4\x07g\x02\x02\u01A4", "\u01A5\x07p\x02\x02\u01A5\u01A6\x07w\x02\x02\u01A6\u01A7", "\x07o\x02\x02\u01A7@\x03\x02\x02\x02\u01A8\u01A9\x07", "]\x02\x02\u01A9B\x03\x02\x02\x02\u01AA\u01AB\x07_\x02", "\x02\u01ABD\x03\x02\x02\x02\u01AC\u01AD\x07c\x02\x02", "\u01AD\u01AE\x07f\x02\x02\u01AE\u01AF\x07f\x02\x02\u01AF", "\u01B0\x07t\x02\x02\u01B0\u01B1\x07g\x02\x02\u01B1\u01B2", "\x07u\x02\x02\u01B2\u01B3\x07u\x02\x02\u01B3F\x03\x02", "\x02\x02\u01B4\u01B5\x070\x02\x02\u01B5H\x03\x02\x02", "\x02\u01B6\u01B7\x07o\x02\x02\u01B7\u01B8\x07c\x02\x02", "\u01B8\u01B9\x07r\x02\x02\u01B9\u01BA\x07r\x02\x02\u01BA", "\u01BB\x07k\x02\x02\u01BB\u01BC\x07p\x02\x02\u01BC\u01BD", "\x07i\x02\x02\u01BDJ\x03\x02\x02\x02\u01BE\u01BF\x07", "?\x02\x02\u01BF\u01C0\x07@\x02\x02\u01C0L\x03\x02\x02", "\x02\u01C1\u01C2\x07o\x02\x02\u01C2\u01C3\x07g\x02\x02", "\u01C3\u01C4\x07o\x02\x02\u01C4\u01C5\x07q\x02\x02\u01C5", "\u01C6\x07t\x02\x02\u01C6\u01C7\x07{\x02\x02\u01C7N\x03", "\x02\x02\x02\u01C8\u01C9\x07u\x02\x02\u01C9\u01CA\x07", "v\x02\x02\u01CA\u01CB\x07q\x02\x02\u01CB\u01CC\x07t\x02", "\x02\u01CC\u01CD\x07c\x02\x02\u01CD\u01CE\x07i\x02\x02", "\u01CE\u01CF\x07g\x02\x02\u01CFP\x03\x02\x02\x02\u01D0", "\u01D1\x07e\x02\x02\u01D1\u01D2\x07c\x02\x02\u01D2\u01D3", "\x07n\x02\x02\u01D3\u01D4\x07n\x02\x02\u01D4\u01D5\x07", "f\x02\x02\u01D5\u01D6\x07c\x02\x02\u01D6\u01D7\x07v\x02", "\x02\u01D7\u01D8\x07c\x02\x02\u01D8R\x03\x02\x02\x02", "\u01D9\u01DA\x07k\x02\x02\u01DA\u01DB\x07h\x02\x02\u01DB", "T\x03\x02\x02\x02\u01DC\u01DD\x07g\x02\x02\u01DD\u01DE", "\x07n\x02\x02\u01DE\u01DF\x07u\x02\x02\u01DF\u01E0\x07", "g\x02\x02\u01E0V\x03\x02\x02\x02\u01E1\u01E2\x07v\x02", "\x02\u01E2\u01E3\x07t\x02\x02\u01E3\u01E4\x07{\x02\x02", "\u01E4X\x03\x02\x02\x02\u01E5\u01E6\x07e\x02\x02\u01E6", "\u01E7\x07c\x02\x02\u01E7\u01E8\x07v\x02\x02\u01E8\u01E9", "\x07e\x02\x02\u01E9\u01EA\x07j\x02\x02\u01EAZ\x03\x02", "\x02\x02\u01EB\u01EC\x07y\x02\x02\u01EC\u01ED\x07j\x02", "\x02\u01ED\u01EE\x07k\x02\x02\u01EE\u01EF\x07n\x02\x02", "\u01EF\u01F0\x07g\x02\x02\u01F0\\\x03\x02\x02\x02\u01F1", "\u01F2\x07c\x02\x02\u01F2\u01F3\x07u\x02\x02\u01F3\u01F4", "\x07u\x02\x02\u01F4\u01F5\x07g\x02\x02\u01F5\u01F6\x07", "o\x02\x02\u01F6\u01F7\x07d\x02\x02\u01F7\u01F8\x07n\x02", "\x02\u01F8\u01F9\x07{\x02\x02\u01F9^\x03\x02\x02\x02", "\u01FA\u01FB\x07f\x02\x02\u01FB\u01FC\x07q\x02\x02\u01FC", "`\x03\x02\x02\x02\u01FD\u01FE\x07t\x02\x02\u01FE\u01FF", "\x07g\x02\x02\u01FF\u0200\x07v\x02\x02\u0200\u0201\x07", "w\x02\x02\u0201\u0202\x07t\x02\x02\u0202\u0203\x07p\x02", "\x02\u0203b\x03\x02\x02\x02\u0204\u0205\x07v\x02\x02", "\u0205\u0206\x07j\x02\x02\u0206\u0207\x07t\x02\x02\u0207", "\u0208\x07q\x02\x02\u0208\u0209\x07y\x02\x02\u0209d\x03", "\x02\x02\x02\u020A\u020B\x07g\x02\x02\u020B\u020C\x07", "o\x02\x02\u020C\u020D\x07k\x02\x02\u020D\u020E\x07v\x02", "\x02\u020Ef\x03\x02\x02\x02\u020F\u0210\x07x\x02\x02", "\u0210\u0211\x07c\x02\x02\u0211\u0212\x07t\x02\x02\u0212", "h\x03\x02\x02\x02\u0213\u0214\x07d\x02\x02\u0214\u0215", "\x07q\x02\x02\u0215\u0216\x07q\x02\x02\u0216\u0217\x07", "n\x02\x02\u0217j\x03\x02\x02\x02\u0218\u0219\x07u\x02", "\x02\u0219\u021A\x07v\x02\x02\u021A\u021B\x07t\x02\x02", "\u021B\u021C\x07k\x02\x02\u021C\u021D\x07p\x02\x02\u021D", "\u021E\x07i\x02\x02\u021El\x03\x02\x02\x02\u021F\u0220", "\x07d\x02\x02\u0220\u0221\x07{\x02\x02\u0221\u0222\x07", "v\x02\x02\u0222\u0223\x07g\x02\x02\u0223n\x03\x02\x02", "\x02\u0224\u0225\x07-\x02\x02\u0225\u0226\x07-\x02\x02", "\u0226p\x03\x02\x02\x02\u0227\u0228\x07/\x02\x02\u0228", "\u0229\x07/\x02\x02\u0229r\x03\x02\x02\x02\u022A\u022B", "\x07p\x02\x02\u022B\u022C\x07g\x02\x02\u022C\u022D\x07", "y\x02\x02\u022Dt\x03\x02\x02\x02\u022E\u022F\x07<\x02", "\x02\u022Fv\x03\x02\x02\x02\u0230\u0231\x07-\x02\x02", "\u0231x\x03\x02\x02\x02\u0232\u0233\x07/\x02\x02\u0233", "z\x03\x02\x02\x02\u0234\u0235\x07c\x02\x02\u0235\u0236", "\x07h\x02\x02\u0236\u0237\x07v\x02\x02\u0237\u0238\x07", "g\x02\x02\u0238\u0239\x07t\x02\x02\u0239|\x03\x02\x02", "\x02\u023A\u023B\x07f\x02\x02\u023B\u023C\x07g\x02\x02", "\u023C\u023D\x07n\x02\x02\u023D\u023E\x07g\x02\x02\u023E", "\u023F\x07v\x02\x02\u023F\u0240\x07g\x02\x02\u0240~\x03", "\x02\x02\x02\u0241\u0242\x07#\x02\x02\u0242\x80\x03", "\x02\x02\x02\u0243\u0244\x07,\x02\x02\u0244\u0245\x07", ",\x02\x02\u0245\x82\x03\x02\x02\x02\u0246\u0247\x07", "1\x02\x02\u0247\x84\x03\x02\x02\x02\u0248\u0249\x07", "'\x02\x02\u0249\x86\x03\x02\x02\x02\u024A\u024B\x07", ">\x02\x02\u024B\u024C\x07>\x02\x02\u024C\x88\x03\x02", "\x02\x02\u024D\u024E\x07@\x02\x02\u024E\u024F\x07@\x02", "\x02\u024F\x8A\x03\x02\x02\x02\u0250\u0251\x07(\x02", "\x02\u0251\x8C\x03\x02\x02\x02\u0252\u0253\x07~\x02", "\x02\u0253\x8E\x03\x02\x02\x02\u0254\u0255\x07?\x02", "\x02\u0255\u0256\x07?\x02\x02\u0256\x90\x03\x02\x02", "\x02\u0257\u0258\x07#\x02\x02\u0258\u0259\x07?\x02\x02", "\u0259\x92\x03\x02\x02\x02\u025A\u025B\x07(\x02\x02", "\u025B\u025C\x07(\x02\x02\u025C\x94\x03\x02\x02\x02", "\u025D\u025E\x07~\x02\x02\u025E\u025F\x07~\x02\x02\u025F", "\x96\x03\x02\x02\x02\u0260\u0261\x07A\x02\x02\u0261", "\x98\x03\x02\x02\x02\u0262\u0263\x07~\x02\x02\u0263", "\u0264\x07?\x02\x02\u0264\x9A\x03\x02\x02\x02\u0265", "\u0266\x07`\x02\x02\u0266\u0267\x07?\x02\x02\u0267\x9C", "\x03\x02\x02\x02\u0268\u0269\x07(\x02\x02\u0269\u026A", "\x07?\x02\x02\u026A\x9E\x03\x02\x02\x02\u026B\u026C", "\x07>\x02\x02\u026C\u026D\x07>\x02\x02\u026D\u026E\x07", "?\x02\x02\u026E\xA0\x03\x02\x02\x02\u026F\u0270\x07", "@\x02\x02\u0270\u0271\x07@\x02\x02\u0271\u0272\x07?\x02", "\x02\u0272\xA2\x03\x02\x02\x02\u0273\u0274\x07-\x02", "\x02\u0274\u0275\x07?\x02\x02\u0275\xA4\x03\x02\x02", "\x02\u0276\u0277\x07/\x02\x02\u0277\u0278\x07?\x02\x02", "\u0278\xA6\x03\x02\x02\x02\u0279\u027A\x07,\x02\x02", "\u027A\u027B\x07?\x02\x02\u027B\xA8\x03\x02\x02\x02", "\u027C\u027D\x071\x02\x02\u027D\u027E\x07?\x02\x02\u027E", "\xAA\x03\x02\x02\x02\u027F\u0280\x07'\x02\x02\u0280", "\u0281\x07?\x02\x02\u0281\xAC\x03\x02\x02\x02\u0282", "\u0283\x07n\x02\x02\u0283\u0284\x07g\x02\x02\u0284\u0285", "\x07v\x02\x02\u0285\xAE\x03\x02\x02\x02\u0286\u0287", "\x07<\x02\x02\u0287\u0288\x07?\x02\x02\u0288\xB0\x03", "\x02\x02\x02\u0289\u028A\x07?\x02\x02\u028A\u028B\x07", "<\x02\x02\u028B\xB2\x03\x02\x02\x02\u028C\u028D\x07", "u\x02\x02\u028D\u028E\x07y\x02\x02\u028E\u028F\x07k\x02", "\x02\u028F\u0290\x07v\x02\x02\u0290\u0291\x07e\x02\x02", "\u0291\u0292\x07j\x02\x02\u0292\xB4\x03\x02\x02\x02", "\u0293\u0294\x07e\x02\x02\u0294\u0295\x07c\x02\x02\u0295", "\u0296\x07u\x02\x02\u0296\u0297\x07g\x02\x02\u0297\xB6", "\x03\x02\x02\x02\u0298\u0299\x07f\x02\x02\u0299\u029A", "\x07g\x02\x02\u029A\u029B\x07h\x02\x02\u029B\u029C\x07", "c\x02\x02\u029C\u029D\x07w\x02\x02\u029D\u029E\x07n\x02", "\x02\u029E\u029F\x07v\x02\x02\u029F\xB8\x03\x02\x02", "\x02\u02A0\u02A1\x07/\x02\x02\u02A1\u02A2\x07@\x02\x02", "\u02A2\xBA\x03\x02\x02\x02\u02A3\u02A4\x07e\x02\x02", "\u02A4\u02A5\x07c\x02\x02\u02A5\u02A6\x07n\x02\x02\u02A6", "\u02A7\x07n\x02\x02\u02A7\u02A8\x07d\x02\x02\u02A8\u02A9", "\x07c\x02\x02\u02A9\u02AA\x07e\x02\x02\u02AA\u02AB\x07", "m\x02\x02\u02AB\xBC\x03\x02\x02\x02\u02AC\u02AD\x07", "q\x02\x02\u02AD\u02AE\x07x\x02\x02\u02AE\u02AF\x07g\x02", "\x02\u02AF\u02B0\x07t\x02\x02\u02B0\u02B1\x07t\x02\x02", "\u02B1\u02B2\x07k\x02\x02\u02B2\u02B3\x07f\x02\x02\u02B3", "\u02B4\x07g\x02\x02\u02B4\xBE\x03\x02\x02\x02\u02B5", "\u02B6\x07k\x02\x02\u02B6\u02B7\x07p\x02\x02\u02B7\u036C", "\x07v\x02\x02\u02B8\u02B9\x07k\x02\x02\u02B9\u02BA\x07", "p\x02\x02\u02BA\u02BB\x07v\x02\x02\u02BB\u036C\x07:\x02", "\x02\u02BC\u02BD\x07k\x02\x02\u02BD\u02BE\x07p\x02\x02", "\u02BE\u02BF\x07v\x02\x02\u02BF\u02C0\x073\x02\x02\u02C0", "\u036C\x078\x02\x02\u02C1\u02C2\x07k\x02\x02\u02C2\u02C3", "\x07p\x02\x02\u02C3\u02C4\x07v\x02\x02\u02C4\u02C5\x07", "4\x02\x02\u02C5\u036C\x076\x02\x02\u02C6\u02C7\x07k\x02", "\x02\u02C7\u02C8\x07p\x02\x02\u02C8\u02C9\x07v\x02\x02", "\u02C9\u02CA\x075\x02\x02\u02CA\u036C\x074\x02\x02\u02CB", "\u02CC\x07k\x02\x02\u02CC\u02CD\x07p\x02\x02\u02CD\u02CE", "\x07v\x02\x02\u02CE\u02CF\x076\x02\x02\u02CF\u036C\x07", "2\x02\x02\u02D0\u02D1\x07k\x02\x02\u02D1\u02D2\x07p\x02", "\x02\u02D2\u02D3\x07v\x02\x02\u02D3\u02D4\x076\x02\x02", "\u02D4\u036C\x07:\x02\x02\u02D5\u02D6\x07k\x02\x02\u02D6", "\u02D7\x07p\x02\x02\u02D7\u02D8\x07v\x02\x02\u02D8\u02D9", "\x077\x02\x02\u02D9\u036C\x078\x02\x02\u02DA\u02DB\x07", "k\x02\x02\u02DB\u02DC\x07p\x02\x02\u02DC\u02DD\x07v\x02", "\x02\u02DD\u02DE\x078\x02\x02\u02DE\u036C\x076\x02\x02", "\u02DF\u02E0\x07k\x02\x02\u02E0\u02E1\x07p\x02\x02\u02E1", "\u02E2\x07v\x02\x02\u02E2\u02E3\x079\x02\x02\u02E3\u036C", "\x074\x02\x02\u02E4\u02E5\x07k\x02\x02\u02E5\u02E6\x07", "p\x02\x02\u02E6\u02E7\x07v\x02\x02\u02E7\u02E8\x07:\x02", "\x02\u02E8\u036C\x072\x02\x02\u02E9\u02EA\x07k\x02\x02", "\u02EA\u02EB\x07p\x02\x02\u02EB\u02EC\x07v\x02\x02\u02EC", "\u02ED\x07:\x02\x02\u02ED\u036C\x07:\x02\x02\u02EE\u02EF", "\x07k\x02\x02\u02EF\u02F0\x07p\x02\x02\u02F0\u02F1\x07", "v\x02\x02\u02F1\u02F2\x07;\x02\x02\u02F2\u036C\x078\x02", "\x02\u02F3\u02F4\x07k\x02\x02\u02F4\u02F5\x07p\x02\x02", "\u02F5\u02F6\x07v\x02\x02\u02F6\u02F7\x073\x02\x02\u02F7", "\u02F8\x072\x02\x02\u02F8\u036C\x076\x02\x02\u02F9\u02FA", "\x07k\x02\x02\u02FA\u02FB\x07p\x02\x02\u02FB\u02FC\x07", "v\x02\x02\u02FC\u02FD\x073\x02\x02\u02FD\u02FE\x073\x02", "\x02\u02FE\u036C\x074\x02\x02\u02FF\u0300\x07k\x02\x02", "\u0300\u0301\x07p\x02\x02\u0301\u0302\x07v\x02\x02\u0302", "\u0303\x073\x02\x02\u0303\u0304\x074\x02\x02\u0304\u036C", "\x072\x02\x02\u0305\u0306\x07k\x02\x02\u0306\u0307\x07", "p\x02\x02\u0307\u0308\x07v\x02\x02\u0308\u0309\x073\x02", "\x02\u0309\u030A\x074\x02\x02\u030A\u036C\x07:\x02\x02", "\u030B\u030C\x07k\x02\x02\u030C\u030D\x07p\x02\x02\u030D", "\u030E\x07v\x02\x02\u030E\u030F\x073\x02\x02\u030F\u0310", "\x075\x02\x02\u0310\u036C\x078\x02\x02\u0311\u0312\x07", "k\x02\x02\u0312\u0313\x07p\x02\x02\u0313\u0314\x07v\x02", "\x02\u0314\u0315\x073\x02\x02\u0315\u0316\x076\x02\x02", "\u0316\u036C\x076\x02\x02\u0317\u0318\x07k\x02\x02\u0318", "\u0319\x07p\x02\x02\u0319\u031A\x07v\x02\x02\u031A\u031B", "\x073\x02\x02\u031B\u031C\x077\x02\x02\u031C\u036C\x07", "4\x02\x02\u031D\u031E\x07k\x02\x02\u031E\u031F\x07p\x02", "\x02\u031F\u0320\x07v\x02\x02\u0320\u0321\x073\x02\x02", "\u0321\u0322\x078\x02\x02\u0322\u036C\x072\x02\x02\u0323", "\u0324\x07k\x02\x02\u0324\u0325\x07p\x02\x02\u0325\u0326", "\x07v\x02\x02\u0326\u0327\x073\x02\x02\u0327\u0328\x07", "8\x02\x02\u0328\u036C\x07:\x02\x02\u0329\u032A\x07k\x02", "\x02\u032A\u032B\x07p\x02\x02\u032B\u032C\x07v\x02\x02", "\u032C\u032D\x073\x02\x02\u032D\u032E\x079\x02\x02\u032E", "\u036C\x078\x02\x02\u032F\u0330\x07k\x02\x02\u0330\u0331", "\x07p\x02\x02\u0331\u0332\x07v\x02\x02\u0332\u0333\x07", "3\x02\x02\u0333\u0334\x07:\x02\x02\u0334\u036C\x076\x02", "\x02\u0335\u0336\x07k\x02\x02\u0336\u0337\x07p\x02\x02", "\u0337\u0338\x07v\x02\x02\u0338\u0339\x073\x02\x02\u0339", "\u033A\x07;\x02\x02\u033A\u036C\x074\x02\x02\u033B\u033C", "\x07k\x02\x02\u033C\u033D\x07p\x02\x02\u033D\u033E\x07", "v\x02\x02\u033E\u033F\x074\x02\x02\u033F\u0340\x072\x02", "\x02\u0340\u036C\x072\x02\x02\u0341\u0342\x07k\x02\x02", "\u0342\u0343\x07p\x02\x02\u0343\u0344\x07v\x02\x02\u0344", "\u0345\x074\x02\x02\u0345\u0346\x072\x02\x02\u0346\u036C", "\x07:\x02\x02\u0347\u0348\x07k\x02\x02\u0348\u0349\x07", "p\x02\x02\u0349\u034A\x07v\x02\x02\u034A\u034B\x074\x02", "\x02\u034B\u034C\x073\x02\x02\u034C\u036C\x078\x02\x02", "\u034D\u034E\x07k\x02\x02\u034E\u034F\x07p\x02\x02\u034F", "\u0350\x07v\x02\x02\u0350\u0351\x074\x02\x02\u0351\u0352", "\x074\x02\x02\u0352\u036C\x076\x02\x02\u0353\u0354\x07", "k\x02\x02\u0354\u0355\x07p\x02\x02\u0355\u0356\x07v\x02", "\x02\u0356\u0357\x074\x02\x02\u0357\u0358\x075\x02\x02", "\u0358\u036C\x074\x02\x02\u0359\u035A\x07k\x02\x02\u035A", "\u035B\x07p\x02\x02\u035B\u035C\x07v\x02\x02\u035C\u035D", "\x074\x02\x02\u035D\u035E\x076\x02\x02\u035E\u036C\x07", "2\x02\x02\u035F\u0360\x07k\x02\x02\u0360\u0361\x07p\x02", "\x02\u0361\u0362\x07v\x02\x02\u0362\u0363\x074\x02\x02", "\u0363\u0364\x076\x02\x02\u0364\u036C\x07:\x02\x02\u0365", "\u0366\x07k\x02\x02\u0366\u0367\x07p\x02\x02\u0367\u0368", "\x07v\x02\x02\u0368\u0369\x074\x02\x02\u0369\u036A\x07", "7\x02\x02\u036A\u036C\x078\x02\x02\u036B\u02B5\x03\x02", "\x02\x02\u036B\u02B8\x03\x02\x02\x02\u036B\u02BC\x03\x02", "\x02\x02\u036B\u02C1\x03\x02\x02\x02\u036B\u02C6\x03\x02", "\x02\x02\u036B\u02CB\x03\x02\x02\x02\u036B\u02D0\x03\x02", "\x02\x02\u036B\u02D5\x03\x02\x02\x02\u036B\u02DA\x03\x02", "\x02\x02\u036B\u02DF\x03\x02\x02\x02\u036B\u02E4\x03\x02", "\x02\x02\u036B\u02E9\x03\x02\x02\x02\u036B\u02EE\x03\x02", "\x02\x02\u036B\u02F3\x03\x02\x02\x02\u036B\u02F9\x03\x02", "\x02\x02\u036B\u02FF\x03\x02\x02\x02\u036B\u0305\x03\x02", "\x02\x02\u036B\u030B\x03\x02\x02\x02\u036B\u0311\x03\x02", "\x02\x02\u036B\u0317\x03\x02\x02\x02\u036B\u031D\x03\x02", "\x02\x02\u036B\u0323\x03\x02\x02\x02\u036B\u0329\x03\x02", "\x02\x02\u036B\u032F\x03\x02\x02\x02\u036B\u0335\x03\x02", "\x02\x02\u036B\u033B\x03\x02\x02\x02\u036B\u0341\x03\x02", "\x02\x02\u036B\u0347\x03\x02\x02\x02\u036B\u034D\x03\x02", "\x02\x02\u036B\u0353\x03\x02\x02\x02\u036B\u0359\x03\x02", "\x02\x02\u036B\u035F\x03\x02\x02\x02\u036B\u0365\x03\x02", "\x02\x02\u036C\xC0\x03\x02\x02\x02\u036D\u036E\x07w", "\x02\x02\u036E\u036F\x07k\x02\x02\u036F\u0370\x07p\x02", "\x02\u0370\u0445\x07v\x02\x02\u0371\u0372\x07w\x02\x02", "\u0372\u0373\x07k\x02\x02\u0373\u0374\x07p\x02\x02\u0374", "\u0375\x07v\x02\x02\u0375\u0445\x07:\x02\x02\u0376\u0377", "\x07w\x02\x02\u0377\u0378\x07k\x02\x02\u0378\u0379\x07", "p\x02\x02\u0379\u037A\x07v\x02\x02\u037A\u037B\x073\x02", "\x02\u037B\u0445\x078\x02\x02\u037C\u037D\x07w\x02\x02", "\u037D\u037E\x07k\x02\x02\u037E\u037F\x07p\x02\x02\u037F", "\u0380\x07v\x02\x02\u0380\u0381\x074\x02\x02\u0381\u0445", "\x076\x02\x02\u0382\u0383\x07w\x02\x02\u0383\u0384\x07", "k\x02\x02\u0384\u0385\x07p\x02\x02\u0385\u0386\x07v\x02", "\x02\u0386\u0387\x075\x02\x02\u0387\u0445\x074\x02\x02", "\u0388\u0389\x07w\x02\x02\u0389\u038A\x07k\x02\x02\u038A", "\u038B\x07p\x02\x02\u038B\u038C\x07v\x02\x02\u038C\u038D", "\x076\x02\x02\u038D\u0445\x072\x02\x02\u038E\u038F\x07", "w\x02\x02\u038F\u0390\x07k\x02\x02\u0390\u0391\x07p\x02", "\x02\u0391\u0392\x07v\x02\x02\u0392\u0393\x076\x02\x02", "\u0393\u0445\x07:\x02\x02\u0394\u0395\x07w\x02\x02\u0395", "\u0396\x07k\x02\x02\u0396\u0397\x07p\x02\x02\u0397\u0398", "\x07v\x02\x02\u0398\u0399\x077\x02\x02\u0399\u0445\x07", "8\x02\x02\u039A\u039B\x07w\x02\x02\u039B\u039C\x07k\x02", "\x02\u039C\u039D\x07p\x02\x02\u039D\u039E\x07v\x02\x02", "\u039E\u039F\x078\x02\x02\u039F\u0445\x076\x02\x02\u03A0", "\u03A1\x07w\x02\x02\u03A1\u03A2\x07k\x02\x02\u03A2\u03A3", "\x07p\x02\x02\u03A3\u03A4\x07v\x02\x02\u03A4\u03A5\x07", "9\x02\x02\u03A5\u0445\x074\x02\x02\u03A6\u03A7\x07w\x02", "\x02\u03A7\u03A8\x07k\x02\x02\u03A8\u03A9\x07p\x02\x02", "\u03A9\u03AA\x07v\x02\x02\u03AA\u03AB\x07:\x02\x02\u03AB", "\u0445\x072\x02\x02\u03AC\u03AD\x07w\x02\x02\u03AD\u03AE", "\x07k\x02\x02\u03AE\u03AF\x07p\x02\x02\u03AF\u03B0\x07", "v\x02\x02\u03B0\u03B1\x07:\x02\x02\u03B1\u0445\x07:\x02", "\x02\u03B2\u03B3\x07w\x02\x02\u03B3\u03B4\x07k\x02\x02", "\u03B4\u03B5\x07p\x02\x02\u03B5\u03B6\x07v\x02\x02\u03B6", "\u03B7\x07;\x02\x02\u03B7\u0445\x078\x02\x02\u03B8\u03B9", "\x07w\x02\x02\u03B9\u03BA\x07k\x02\x02\u03BA\u03BB\x07", "p\x02\x02\u03BB\u03BC\x07v\x02\x02\u03BC\u03BD\x073\x02", "\x02\u03BD\u03BE\x072\x02\x02\u03BE\u0445\x076\x02\x02", "\u03BF\u03C0\x07w\x02\x02\u03C0\u03C1\x07k\x02\x02\u03C1", "\u03C2\x07p\x02\x02\u03C2\u03C3\x07v\x02\x02\u03C3\u03C4", "\x073\x02\x02\u03C4\u03C5\x073\x02\x02\u03C5\u0445\x07", "4\x02\x02\u03C6\u03C7\x07w\x02\x02\u03C7\u03C8\x07k\x02", "\x02\u03C8\u03C9\x07p\x02\x02\u03C9\u03CA\x07v\x02\x02", "\u03CA\u03CB\x073\x02\x02\u03CB\u03CC\x074\x02\x02\u03CC", "\u0445\x072\x02\x02\u03CD\u03CE\x07w\x02\x02\u03CE\u03CF", "\x07k\x02\x02\u03CF\u03D0\x07p\x02\x02\u03D0\u03D1\x07", "v\x02\x02\u03D1\u03D2\x073\x02\x02\u03D2\u03D3\x074\x02", "\x02\u03D3\u0445\x07:\x02\x02\u03D4\u03D5\x07w\x02\x02", "\u03D5\u03D6\x07k\x02\x02\u03D6\u03D7\x07p\x02\x02\u03D7", "\u03D8\x07v\x02\x02\u03D8\u03D9\x073\x02\x02\u03D9\u03DA", "\x075\x02\x02\u03DA\u0445\x078\x02\x02\u03DB\u03DC\x07", "w\x02\x02\u03DC\u03DD\x07k\x02\x02\u03DD\u03DE\x07p\x02", "\x02\u03DE\u03DF\x07v\x02\x02\u03DF\u03E0\x073\x02\x02", "\u03E0\u03E1\x076\x02\x02\u03E1\u0445\x076\x02\x02\u03E2", "\u03E3\x07w\x02\x02\u03E3\u03E4\x07k\x02\x02\u03E4\u03E5", "\x07p\x02\x02\u03E5\u03E6\x07v\x02\x02\u03E6\u03E7\x07", "3\x02\x02\u03E7\u03E8\x077\x02\x02\u03E8\u0445\x074\x02", "\x02\u03E9\u03EA\x07w\x02\x02\u03EA\u03EB\x07k\x02\x02", "\u03EB\u03EC\x07p\x02\x02\u03EC\u03ED\x07v\x02\x02\u03ED", "\u03EE\x073\x02\x02\u03EE\u03EF\x078\x02\x02\u03EF\u0445", "\x072\x02\x02\u03F0\u03F1\x07w\x02\x02\u03F1\u03F2\x07", "k\x02\x02\u03F2\u03F3\x07p\x02\x02\u03F3\u03F4\x07v\x02", "\x02\u03F4\u03F5\x073\x02\x02\u03F5\u03F6\x078\x02\x02", "\u03F6\u0445\x07:\x02\x02\u03F7\u03F8\x07w\x02\x02\u03F8", "\u03F9\x07k\x02\x02\u03F9\u03FA\x07p\x02\x02\u03FA\u03FB", "\x07v\x02\x02\u03FB\u03FC\x073\x02\x02\u03FC\u03FD\x07", "9\x02\x02\u03FD\u0445\x078\x02\x02\u03FE\u03FF\x07w\x02", "\x02\u03FF\u0400\x07k\x02\x02\u0400\u0401\x07p\x02\x02", "\u0401\u0402\x07v\x02\x02\u0402\u0403\x073\x02\x02\u0403", "\u0404\x07:\x02\x02\u0404\u0445\x076\x02\x02\u0405\u0406", "\x07w\x02\x02\u0406\u0407\x07k\x02\x02\u0407\u0408\x07", "p\x02\x02\u0408\u0409\x07v\x02\x02\u0409\u040A\x073\x02", "\x02\u040A\u040B\x07;\x02\x02\u040B\u0445\x074\x02\x02", "\u040C\u040D\x07w\x02\x02\u040D\u040E\x07k\x02\x02\u040E", "\u040F\x07p\x02\x02\u040F\u0410\x07v\x02\x02\u0410\u0411", "\x074\x02\x02\u0411\u0412\x072\x02\x02\u0412\u0445\x07", "2\x02\x02\u0413\u0414\x07w\x02\x02\u0414\u0415\x07k\x02", "\x02\u0415\u0416\x07p\x02\x02\u0416\u0417\x07v\x02\x02", "\u0417\u0418\x074\x02\x02\u0418\u0419\x072\x02\x02\u0419", "\u0445\x07:\x02\x02\u041A\u041B\x07w\x02\x02\u041B\u041C", "\x07k\x02\x02\u041C\u041D\x07p\x02\x02\u041D\u041E\x07", "v\x02\x02\u041E\u041F\x074\x02\x02\u041F\u0420\x073\x02", "\x02\u0420\u0445\x078\x02\x02\u0421\u0422\x07w\x02\x02", "\u0422\u0423\x07k\x02\x02\u0423\u0424\x07p\x02\x02\u0424", "\u0425\x07v\x02\x02\u0425\u0426\x074\x02\x02\u0426\u0427", "\x074\x02\x02\u0427\u0445\x076\x02\x02\u0428\u0429\x07", "w\x02\x02\u0429\u042A\x07k\x02\x02\u042A\u042B\x07p\x02", "\x02\u042B\u042C\x07v\x02\x02\u042C\u042D\x074\x02\x02", "\u042D\u042E\x075\x02\x02\u042E\u0445\x074\x02\x02\u042F", "\u0430\x07w\x02\x02\u0430\u0431\x07k\x02\x02\u0431\u0432", "\x07p\x02\x02\u0432\u0433\x07v\x02\x02\u0433\u0434\x07", "4\x02\x02\u0434\u0435\x076\x02\x02\u0435\u0445\x072\x02", "\x02\u0436\u0437\x07w\x02\x02\u0437\u0438\x07k\x02\x02", "\u0438\u0439\x07p\x02\x02\u0439\u043A\x07v\x02\x02\u043A", "\u043B\x074\x02\x02\u043B\u043C\x076\x02\x02\u043C\u0445", "\x07:\x02\x02\u043D\u043E\x07w\x02\x02\u043E\u043F\x07", "k\x02\x02\u043F\u0440\x07p\x02\x02\u0440\u0441\x07v\x02", "\x02\u0441\u0442\x074\x02\x02\u0442\u0443\x077\x02\x02", "\u0443\u0445\x078\x02\x02\u0444\u036D\x03\x02\x02\x02", "\u0444\u0371\x03\x02\x02\x02\u0444\u0376\x03\x02\x02\x02", "\u0444\u037C\x03\x02\x02\x02\u0444\u0382\x03\x02\x02\x02", "\u0444\u0388\x03\x02\x02\x02\u0444\u038E\x03\x02\x02\x02", "\u0444\u0394\x03\x02\x02\x02\u0444\u039A\x03\x02\x02\x02", "\u0444\u03A0\x03\x02\x02\x02\u0444\u03A6\x03\x02\x02\x02", "\u0444\u03AC\x03\x02\x02\x02\u0444\u03B2\x03\x02\x02\x02", "\u0444\u03B8\x03\x02\x02\x02\u0444\u03BF\x03\x02\x02\x02", "\u0444\u03C6\x03\x02\x02\x02\u0444\u03CD\x03\x02\x02\x02", "\u0444\u03D4\x03\x02\x02\x02\u0444\u03DB\x03\x02\x02\x02", "\u0444\u03E2\x03\x02\x02\x02\u0444\u03E9\x03\x02\x02\x02", "\u0444\u03F0\x03\x02\x02\x02\u0444\u03F7\x03\x02\x02\x02", "\u0444\u03FE\x03\x02\x02\x02\u0444\u0405\x03\x02\x02\x02", "\u0444\u040C\x03\x02\x02\x02\u0444\u0413\x03\x02\x02\x02", "\u0444\u041A\x03\x02\x02\x02\u0444\u0421\x03\x02\x02\x02", "\u0444\u0428\x03\x02\x02\x02\u0444\u042F\x03\x02\x02\x02", "\u0444\u0436\x03\x02\x02\x02\u0444\u043D\x03\x02\x02\x02", "\u0445\xC2\x03\x02\x02\x02\u0446\u0447\x07d\x02\x02", "\u0447\u0448\x07{\x02\x02\u0448\u0449\x07v\x02\x02\u0449", "\u044A\x07g\x02\x02\u044A\u0523\x07u\x02\x02\u044B\u044C", "\x07d\x02\x02\u044C\u044D\x07{\x02\x02\u044D\u044E\x07", "v\x02\x02\u044E\u044F\x07g\x02\x02\u044F\u0450\x07u\x02", "\x02\u0450\u0523\x073\x02\x02\u0451\u0452\x07d\x02\x02", "\u0452\u0453\x07{\x02\x02\u0453\u0454\x07v\x02\x02\u0454", "\u0455\x07g\x02\x02\u0455\u0456\x07u\x02\x02\u0456\u0523", "\x074\x02\x02\u0457\u0458\x07d\x02\x02\u0458\u0459\x07", "{\x02\x02\u0459\u045A\x07v\x02\x02\u045A\u045B\x07g\x02", "\x02\u045B\u045C\x07u\x02\x02\u045C\u0523\x075\x02\x02", "\u045D\u045E\x07d\x02\x02\u045E\u045F\x07{\x02\x02\u045F", "\u0460\x07v\x02\x02\u0460\u0461\x07g\x02\x02\u0461\u0462", "\x07u\x02\x02\u0462\u0523\x076\x02\x02\u0463\u0464\x07", "d\x02\x02\u0464\u0465\x07{\x02\x02\u0465\u0466\x07v\x02", "\x02\u0466\u0467\x07g\x02\x02\u0467\u0468\x07u\x02\x02", "\u0468\u0523\x077\x02\x02\u0469\u046A\x07d\x02\x02\u046A", "\u046B\x07{\x02\x02\u046B\u046C\x07v\x02\x02\u046C\u046D", "\x07g\x02\x02\u046D\u046E\x07u\x02\x02\u046E\u0523\x07", "8\x02\x02\u046F\u0470\x07d\x02\x02\u0470\u0471\x07{\x02", "\x02\u0471\u0472\x07v\x02\x02\u0472\u0473\x07g\x02\x02", "\u0473\u0474\x07u\x02\x02\u0474\u0523\x079\x02\x02\u0475", "\u0476\x07d\x02\x02\u0476\u0477\x07{\x02\x02\u0477\u0478", "\x07v\x02\x02\u0478\u0479\x07g\x02\x02\u0479\u047A\x07", "u\x02\x02\u047A\u0523\x07:\x02\x02\u047B\u047C\x07d\x02", "\x02\u047C\u047D\x07{\x02\x02\u047D\u047E\x07v\x02\x02", "\u047E\u047F\x07g\x02\x02\u047F\u0480\x07u\x02\x02\u0480", "\u0523\x07;\x02\x02\u0481\u0482\x07d\x02\x02\u0482\u0483", "\x07{\x02\x02\u0483\u0484\x07v\x02\x02\u0484\u0485\x07", "g\x02\x02\u0485\u0486\x07u\x02\x02\u0486\u0487\x073\x02", "\x02\u0487\u0523\x072\x02\x02\u0488\u0489\x07d\x02\x02", "\u0489\u048A\x07{\x02\x02\u048A\u048B\x07v\x02\x02\u048B", "\u048C\x07g\x02\x02\u048C\u048D\x07u\x02\x02\u048D\u048E", "\x073\x02\x02\u048E\u0523\x073\x02\x02\u048F\u0490\x07", "d\x02\x02\u0490\u0491\x07{\x02\x02\u0491\u0492\x07v\x02", "\x02\u0492\u0493\x07g\x02\x02\u0493\u0494\x07u\x02\x02", "\u0494\u0495\x073\x02\x02\u0495\u0523\x074\x02\x02\u0496", "\u0497\x07d\x02\x02\u0497\u0498\x07{\x02\x02\u0498\u0499", "\x07v\x02\x02\u0499\u049A\x07g\x02\x02\u049A\u049B\x07", "u\x02\x02\u049B\u049C\x073\x02\x02\u049C\u0523\x075\x02", "\x02\u049D\u049E\x07d\x02\x02\u049E\u049F\x07{\x02\x02", "\u049F\u04A0\x07v\x02\x02\u04A0\u04A1\x07g\x02\x02\u04A1", "\u04A2\x07u\x02\x02\u04A2\u04A3\x073\x02\x02\u04A3\u0523", "\x076\x02\x02\u04A4\u04A5\x07d\x02\x02\u04A5\u04A6\x07", "{\x02\x02\u04A6\u04A7\x07v\x02\x02\u04A7\u04A8\x07g\x02", "\x02\u04A8\u04A9\x07u\x02\x02\u04A9\u04AA\x073\x02\x02", "\u04AA\u0523\x077\x02\x02\u04AB\u04AC\x07d\x02\x02\u04AC", "\u04AD\x07{\x02\x02\u04AD\u04AE\x07v\x02\x02\u04AE\u04AF", "\x07g\x02\x02\u04AF\u04B0\x07u\x02\x02\u04B0\u04B1\x07", "3\x02\x02\u04B1\u0523\x078\x02\x02\u04B2\u04B3\x07d\x02", "\x02\u04B3\u04B4\x07{\x02\x02\u04B4\u04B5\x07v\x02\x02", "\u04B5\u04B6\x07g\x02\x02\u04B6\u04B7\x07u\x02\x02\u04B7", "\u04B8\x073\x02\x02\u04B8\u0523\x079\x02\x02\u04B9\u04BA", "\x07d\x02\x02\u04BA\u04BB\x07{\x02\x02\u04BB\u04BC\x07", "v\x02\x02\u04BC\u04BD\x07g\x02\x02\u04BD\u04BE\x07u\x02", "\x02\u04BE\u04BF\x073\x02\x02\u04BF\u0523\x07:\x02\x02", "\u04C0\u04C1\x07d\x02\x02\u04C1\u04C2\x07{\x02\x02\u04C2", "\u04C3\x07v\x02\x02\u04C3\u04C4\x07g\x02\x02\u04C4\u04C5", "\x07u\x02\x02\u04C5\u04C6\x073\x02\x02\u04C6\u0523\x07", ";\x02\x02\u04C7\u04C8\x07d\x02\x02\u04C8\u04C9\x07{\x02", "\x02\u04C9\u04CA\x07v\x02\x02\u04CA\u04CB\x07g\x02\x02", "\u04CB\u04CC\x07u\x02\x02\u04CC\u04CD\x074\x02\x02\u04CD", "\u0523\x072\x02\x02\u04CE\u04CF\x07d\x02\x02\u04CF\u04D0", "\x07{\x02\x02\u04D0\u04D1\x07v\x02\x02\u04D1\u04D2\x07", "g\x02\x02\u04D2\u04D3\x07u\x02\x02\u04D3\u04D4\x074\x02", "\x02\u04D4\u0523\x073\x02\x02\u04D5\u04D6\x07d\x02\x02", "\u04D6\u04D7\x07{\x02\x02\u04D7\u04D8\x07v\x02\x02\u04D8", "\u04D9\x07g\x02\x02\u04D9\u04DA\x07u\x02\x02\u04DA\u04DB", "\x074\x02\x02\u04DB\u0523\x074\x02\x02\u04DC\u04DD\x07", "d\x02\x02\u04DD\u04DE\x07{\x02\x02\u04DE\u04DF\x07v\x02", "\x02\u04DF\u04E0\x07g\x02\x02\u04E0\u04E1\x07u\x02\x02", "\u04E1\u04E2\x074\x02\x02\u04E2\u0523\x075\x02\x02\u04E3", "\u04E4\x07d\x02\x02\u04E4\u04E5\x07{\x02\x02\u04E5\u04E6", "\x07v\x02\x02\u04E6\u04E7\x07g\x02\x02\u04E7\u04E8\x07", "u\x02\x02\u04E8\u04E9\x074\x02\x02\u04E9\u0523\x076\x02", "\x02\u04EA\u04EB\x07d\x02\x02\u04EB\u04EC\x07{\x02\x02", "\u04EC\u04ED\x07v\x02\x02\u04ED\u04EE\x07g\x02\x02\u04EE", "\u04EF\x07u\x02\x02\u04EF\u04F0\x074\x02\x02\u04F0\u0523", "\x077\x02\x02\u04F1\u04F2\x07d\x02\x02\u04F2\u04F3\x07", "{\x02\x02\u04F3\u04F4\x07v\x02\x02\u04F4\u04F5\x07g\x02", "\x02\u04F5\u04F6\x07u\x02\x02\u04F6\u04F7\x074\x02\x02", "\u04F7\u0523\x078\x02\x02\u04F8\u04F9\x07d\x02\x02\u04F9", "\u04FA\x07{\x02\x02\u04FA\u04FB\x07v\x02\x02\u04FB\u04FC", "\x07g\x02\x02\u04FC\u04FD\x07u\x02\x02\u04FD\u04FE\x07", "4\x02\x02\u04FE\u0523\x079\x02\x02\u04FF\u0500\x07d\x02", "\x02\u0500\u0501\x07{\x02\x02\u0501\u0502\x07v\x02\x02", "\u0502\u0503\x07g\x02\x02\u0503\u0504\x07u\x02\x02\u0504", "\u0505\x074\x02\x02\u0505\u0523\x07:\x02\x02\u0506\u0507", "\x07d\x02\x02\u0507\u0508\x07{\x02\x02\u0508\u0509\x07", "v\x02\x02\u0509\u050A\x07g\x02\x02\u050A\u050B\x07u\x02", "\x02\u050B\u050C\x074\x02\x02\u050C\u0523\x07;\x02\x02", "\u050D\u050E\x07d\x02\x02\u050E\u050F\x07{\x02\x02\u050F", "\u0510\x07v\x02\x02\u0510\u0511\x07g\x02\x02\u0511\u0512", "\x07u\x02\x02\u0512\u0513\x075\x02\x02\u0513\u0523\x07", "2\x02\x02\u0514\u0515\x07d\x02\x02\u0515\u0516\x07{\x02", "\x02\u0516\u0517\x07v\x02\x02\u0517\u0518\x07g\x02\x02", "\u0518\u0519\x07u\x02\x02\u0519\u051A\x075\x02\x02\u051A", "\u0523\x073\x02\x02\u051B\u051C\x07d\x02\x02\u051C\u051D", "\x07{\x02\x02\u051D\u051E\x07v\x02\x02\u051E\u051F\x07", "g\x02\x02\u051F\u0520\x07u\x02\x02\u0520\u0521\x075\x02", "\x02\u0521\u0523\x074\x02\x02\u0522\u0446\x03\x02\x02", "\x02\u0522\u044B\x03\x02\x02\x02\u0522\u0451\x03\x02\x02", "\x02\u0522\u0457\x03\x02\x02\x02\u0522\u045D\x03\x02\x02", "\x02\u0522\u0463\x03\x02\x02\x02\u0522\u0469\x03\x02\x02", "\x02\u0522\u046F\x03\x02\x02\x02\u0522\u0475\x03\x02\x02", "\x02\u0522\u047B\x03\x02\x02\x02\u0522\u0481\x03\x02\x02", "\x02\u0522\u0488\x03\x02\x02\x02\u0522\u048F\x03\x02\x02", "\x02\u0522\u0496\x03\x02\x02\x02\u0522\u049D\x03\x02\x02", "\x02\u0522\u04A4\x03\x02\x02\x02\u0522\u04AB\x03\x02\x02", "\x02\u0522\u04B2\x03\x02\x02\x02\u0522\u04B9\x03\x02\x02", "\x02\u0522\u04C0\x03\x02\x02\x02\u0522\u04C7\x03\x02\x02", "\x02\u0522\u04CE\x03\x02\x02\x02\u0522\u04D5\x03\x02\x02", "\x02\u0522\u04DC\x03\x02\x02\x02\u0522\u04E3\x03\x02\x02", "\x02\u0522\u04EA\x03\x02\x02\x02\u0522\u04F1\x03\x02\x02", "\x02\u0522\u04F8\x03\x02\x02\x02\u0522\u04FF\x03\x02\x02", "\x02\u0522\u0506\x03\x02\x02\x02\u0522\u050D\x03\x02\x02", "\x02\u0522\u0514\x03\x02\x02\x02\u0522\u051B\x03\x02\x02", "\x02\u0523\xC4\x03\x02\x02\x02\u0524\u0525\x07h\x02", "\x02\u0525\u0526\x07k\x02\x02\u0526\u0527\x07z\x02\x02", "\u0527\u0528\x07g\x02\x02\u0528\u053B\x07f\x02\x02\u0529", "\u052A\x07h\x02\x02\u052A\u052B\x07k\x02\x02\u052B\u052C", "\x07z\x02\x02\u052C\u052D\x07g\x02\x02\u052D\u052E\x07", "f\x02\x02\u052E\u0530\x03\x02\x02\x02\u052F\u0531\t\x02", "\x02\x02\u0530\u052F\x03\x02\x02\x02\u0531\u0532\x03\x02", "\x02\x02\u0532\u0530\x03\x02\x02\x02\u0532\u0533\x03\x02", "\x02\x02\u0533\u0534\x03\x02\x02\x02\u0534\u0536\x07z", "\x02\x02\u0535\u0537\t\x02\x02\x02\u0536\u0535\x03\x02", "\x02\x02\u0537\u0538\x03\x02\x02\x02\u0538\u0536\x03\x02", "\x02\x02\u0538\u0539\x03\x02\x02\x02\u0539\u053B\x03\x02", "\x02\x02\u053A\u0524\x03\x02\x02\x02\u053A\u0529\x03\x02", "\x02\x02\u053B\xC6\x03\x02\x02\x02\u053C\u053D\x07w", "\x02\x02\u053D\u053E\x07h\x02\x02\u053E\u053F\x07k\x02", "\x02\u053F\u0540\x07z\x02\x02\u0540\u0541\x07g\x02\x02", "\u0541\u0555\x07f\x02\x02\u0542\u0543\x07w\x02\x02\u0543", "\u0544\x07h\x02\x02\u0544\u0545\x07k\x02\x02\u0545\u0546", "\x07z\x02\x02\u0546\u0547\x07g\x02\x02\u0547\u0548\x07", "f\x02\x02\u0548\u054A\x03\x02\x02\x02\u0549\u054B\t\x02", "\x02\x02\u054A\u0549\x03\x02\x02\x02\u054B\u054C\x03\x02", "\x02\x02\u054C\u054A\x03\x02\x02\x02\u054C\u054D\x03\x02", "\x02\x02\u054D\u054E\x03\x02\x02\x02\u054E\u0550\x07z", "\x02\x02\u054F\u0551\t\x02\x02\x02\u0550\u054F\x03\x02", "\x02\x02\u0551\u0552\x03\x02\x02\x02\u0552\u0550\x03\x02", "\x02\x02\u0552\u0553\x03\x02\x02\x02\u0553\u0555\x03\x02", "\x02\x02\u0554\u053C\x03\x02\x02\x02\u0554\u0542\x03\x02", "\x02\x02\u0555\xC8\x03\x02\x02\x02\u0556\u0557\x07v", "\x02\x02\u0557\u0558\x07t\x02\x02\u0558\u0559\x07w\x02", "\x02\u0559\u0560\x07g\x02\x02\u055A\u055B\x07h\x02\x02", "\u055B\u055C\x07c\x02\x02\u055C\u055D\x07n\x02\x02\u055D", "\u055E\x07u\x02\x02\u055E\u0560\x07g\x02\x02\u055F\u0556", "\x03\x02\x02\x02\u055F\u055A\x03\x02\x02\x02\u0560\xCA", "\x03\x02\x02\x02\u0561\u0568\x05\xCDg\x02\u0562\u0564", "\x05\xCDg\x02\u0563\u0562\x03\x02\x02\x02\u0563\u0564", "\x03\x02\x02\x02\u0564\u0565\x03\x02\x02\x02\u0565\u0566", "\x070\x02\x02\u0566\u0568\x05\xCDg\x02\u0567\u0561\x03", "\x02\x02\x02\u0567\u0563\x03\x02\x02\x02\u0568\u056B\x03", "\x02\x02\x02\u0569\u056A\t\x03\x02\x02\u056A\u056C\x05", "\xCDg\x02\u056B\u0569\x03\x02\x02\x02\u056B\u056C\x03", "\x02\x02\x02\u056C\xCC\x03\x02\x02\x02\u056D\u0574\t", "\x02\x02\x02\u056E\u0570\x07a\x02\x02\u056F\u056E\x03", "\x02\x02\x02\u056F\u0570\x03\x02\x02\x02\u0570\u0571\x03", "\x02\x02\x02\u0571\u0573\t\x02\x02\x02\u0572\u056F\x03", "\x02\x02\x02\u0573\u0576\x03\x02\x02\x02\u0574\u0572\x03", "\x02\x02\x02\u0574\u0575\x03\x02\x02\x02\u0575\xCE\x03", "\x02\x02\x02\u0576\u0574\x03\x02\x02\x02\u0577\u0578\x07", "2\x02\x02\u0578\u0579\t\x04\x02\x02\u0579\u057A\x05\xD1", "i\x02\u057A\xD0\x03\x02\x02\x02\u057B\u0582\x05\xD9", "m\x02\u057C\u057E\x07a\x02\x02\u057D\u057C\x03\x02\x02", "\x02\u057D\u057E\x03\x02\x02\x02\u057E\u057F\x03\x02\x02", "\x02\u057F\u0581\x05\xD9m\x02\u0580\u057D\x03\x02\x02", "\x02\u0581\u0584\x03\x02\x02\x02\u0582\u0580\x03\x02\x02", "\x02\u0582\u0583\x03\x02\x02\x02\u0583\xD2\x03\x02\x02", "\x02\u0584\u0582\x03\x02\x02\x02\u0585\u0586\x07y\x02", "\x02\u0586\u0587\x07g\x02\x02\u0587\u05BA\x07k\x02\x02", "\u0588\u0589\x07u\x02\x02\u0589\u058A\x07|\x02\x02\u058A", "\u058B\x07c\x02\x02\u058B\u058C\x07d\x02\x02\u058C\u05BA", "\x07q\x02\x02\u058D\u058E\x07h\x02\x02\u058E\u058F\x07", "k\x02\x02\u058F\u0590\x07p\x02\x02\u0590\u0591\x07p\x02", "\x02\u0591\u0592\x07g\x02\x02\u0592\u05BA\x07{\x02\x02", "\u0593\u0594\x07g\x02\x02\u0594\u0595\x07v\x02\x02\u0595", "\u0596\x07j\x02\x02\u0596\u0597\x07g\x02\x02\u0597\u05BA", "\x07t\x02\x02\u0598\u0599\x07u\x02\x02\u0599\u059A\x07", "g\x02\x02\u059A\u059B\x07e\x02\x02\u059B\u059C\x07q\x02", "\x02\u059C\u059D\x07p\x02\x02\u059D\u059E\x07f\x02\x02", "\u059E\u05BA\x07u\x02\x02\u059F\u05A0\x07o\x02\x02\u05A0", "\u05A1\x07k\x02\x02\u05A1\u05A2\x07p\x02\x02\u05A2\u05A3", "\x07w\x02\x02\u05A3\u05A4\x07v\x02\x02\u05A4\u05A5\x07", "g\x02\x02\u05A5\u05BA\x07u\x02\x02\u05A6\u05A7\x07j\x02", "\x02\u05A7\u05A8\x07q\x02\x02\u05A8\u05A9\x07w\x02\x02", "\u05A9\u05AA\x07t\x02\x02\u05AA\u05BA\x07u\x02\x02\u05AB", "\u05AC\x07f\x02\x02\u05AC\u05AD\x07c\x02\x02\u05AD\u05AE", "\x07{\x02\x02\u05AE\u05BA\x07u\x02\x02\u05AF\u05B0\x07", "y\x02\x02\u05B0\u05B1\x07g\x02\x02\u05B1\u05B2\x07g\x02", "\x02\u05B2\u05B3\x07m\x02\x02\u05B3\u05BA\x07u\x02\x02", "\u05B4\u05B5\x07{\x02\x02\u05B5\u05B6\x07g\x02\x02\u05B6", "\u05B7\x07c\x02\x02\u05B7\u05B8\x07t\x02\x02\u05B8\u05BA", "\x07u\x02\x02\u05B9\u0585\x03\x02\x02\x02\u05B9\u0588", "\x03\x02\x02\x02\u05B9\u058D\x03\x02\x02\x02\u05B9\u0593", "\x03\x02\x02\x02\u05B9\u0598\x03\x02\x02\x02\u05B9\u059F", "\x03\x02\x02\x02\u05B9\u05A6\x03\x02\x02\x02\u05B9\u05AB", "\x03\x02\x02\x02\u05B9\u05AF\x03\x02\x02\x02\u05B9\u05B4", "\x03\x02\x02\x02\u05BA\xD4\x03\x02\x02\x02\u05BB\u05BC", "\x07j\x02\x02\u05BC\u05BD\x07g\x02\x02\u05BD\u05BE\x07", "z\x02\x02\u05BE\u05C9\x03\x02\x02\x02\u05BF\u05C1\x07", "$\x02\x02\u05C0\u05C2\x05\xD1i\x02\u05C1\u05C0\x03\x02", "\x02\x02\u05C1\u05C2\x03\x02\x02\x02\u05C2\u05C3\x03\x02", "\x02\x02\u05C3\u05CA\x07$\x02\x02\u05C4\u05C6\x07)\x02", "\x02\u05C5\u05C7\x05\xD1i\x02\u05C6\u05C5\x03\x02\x02", "\x02\u05C6\u05C7\x03\x02\x02\x02\u05C7\u05C8\x03\x02\x02", "\x02\u05C8\u05CA\x07)\x02\x02\u05C9\u05BF\x03\x02\x02", "\x02\u05C9\u05C4\x03\x02\x02\x02\u05CA\xD6\x03\x02\x02", "\x02\u05CB\u05CC\x05\xD9m\x02\u05CC\u05CD\x05\xD9m\x02", "\u05CD\xD8\x03\x02\x02\x02\u05CE\u05CF\t\x05\x02\x02", "\u05CF\xDA\x03\x02\x02\x02\u05D0\u05D1\x07c\x02\x02", "\u05D1\u05D2\x07d\x02\x02\u05D2\u05D3\x07u\x02\x02\u05D3", "\u05D4\x07v\x02\x02\u05D4\u05D5\x07t\x02\x02\u05D5\u05D6", "\x07c\x02\x02\u05D6\u05D7\x07e\x02\x02\u05D7\u0629\x07", "v\x02\x02\u05D8\u05D9\x07c\x02\x02\u05D9\u05DA\x07h\x02", "\x02\u05DA\u05DB\x07v\x02\x02\u05DB\u05DC\x07g\x02\x02", "\u05DC\u0629\x07t\x02\x02\u05DD\u05DE\x07e\x02\x02\u05DE", "\u05DF\x07c\x02\x02\u05DF\u05E0\x07u\x02\x02\u05E0\u0629", "\x07g\x02\x02\u05E1\u05E2\x07e\x02\x02\u05E2\u05E3\x07", "c\x02\x02\u05E3\u05E4\x07v\x02\x02\u05E4\u05E5\x07e\x02", "\x02\u05E5\u0629\x07j\x02\x02\u05E6\u05E7\x07f\x02\x02", "\u05E7\u05E8\x07g\x02\x02\u05E8\u05E9\x07h\x02\x02\u05E9", "\u05EA\x07c\x02\x02\u05EA\u05EB\x07w\x02\x02\u05EB\u05EC", "\x07n\x02\x02\u05EC\u0629\x07v\x02\x02\u05ED\u05EE\x07", "h\x02\x02\u05EE\u05EF\x07k\x02\x02\u05EF\u05F0\x07p\x02", "\x02\u05F0\u05F1\x07c\x02\x02\u05F1\u0629\x07n\x02\x02", "\u05F2\u05F3\x07k\x02\x02\u05F3\u0629\x07p\x02\x02\u05F4", "\u05F5\x07k\x02\x02\u05F5\u05F6\x07p\x02\x02\u05F6\u05F7", "\x07n\x02\x02\u05F7\u05F8\x07k\x02\x02\u05F8\u05F9\x07", "p\x02\x02\u05F9\u0629\x07g\x02\x02\u05FA\u05FB\x07n\x02", "\x02\u05FB\u05FC\x07g\x02\x02\u05FC\u0629\x07v\x02\x02", "\u05FD\u05FE\x07o\x02\x02\u05FE\u05FF\x07c\x02\x02\u05FF", "\u0600\x07v\x02\x02\u0600\u0601\x07e\x02\x02\u0601\u0629", "\x07j\x02\x02\u0602\u0603\x07p\x02\x02\u0603\u0604\x07", "w\x02\x02\u0604\u0605\x07n\x02\x02\u0605\u0629\x07n\x02", "\x02\u0606\u0607\x07q\x02\x02\u0607\u0629\x07h\x02\x02", "\u0608\u0609\x07t\x02\x02\u0609\u060A\x07g\x02\x02\u060A", "\u060B\x07n\x02\x02\u060B\u060C\x07q\x02\x02\u060C\u060D", "\x07e\x02\x02\u060D\u060E\x07c\x02\x02\u060E\u060F\x07", "v\x02\x02\u060F\u0610\x07c\x02\x02\u0610\u0611\x07d\x02", "\x02\u0611\u0612\x07n\x02\x02\u0612\u0629\x07g\x02\x02", "\u0613\u0614\x07u\x02\x02\u0614\u0615\x07v\x02\x02\u0615", "\u0616\x07c\x02\x02\u0616\u0617\x07v\x02\x02\u0617\u0618", "\x07k\x02\x02\u0618\u0629\x07e\x02\x02\u0619\u061A\x07", "u\x02\x02\u061A\u061B\x07y\x02\x02\u061B\u061C\x07k\x02", "\x02\u061C\u061D\x07v\x02\x02\u061D\u061E\x07e\x02\x02", "\u061E\u0629\x07j\x02\x02\u061F\u0620\x07v\x02\x02\u0620", "\u0621\x07t\x02\x02\u0621\u0629\x07{\x02\x02\u0622\u0623", "\x07v\x02\x02\u0623\u0624\x07{\x02\x02\u0624\u0625\x07", "r\x02\x02\u0625\u0626\x07g\x02\x02\u0626\u0627\x07q\x02", "\x02\u0627\u0629\x07h\x02\x02\u0628\u05D0\x03\x02\x02", "\x02\u0628\u05D8\x03\x02\x02\x02\u0628\u05DD\x03\x02\x02", "\x02\u0628\u05E1\x03\x02\x02\x02\u0628\u05E6\x03\x02\x02", "\x02\u0628\u05ED\x03\x02\x02\x02\u0628\u05F2\x03\x02\x02", "\x02\u0628\u05F4\x03\x02\x02\x02\u0628\u05FA\x03\x02\x02", "\x02\u0628\u05FD\x03\x02\x02\x02\u0628\u0602\x03\x02\x02", "\x02\u0628\u0606\x03\x02\x02\x02\u0628\u0608\x03\x02\x02", "\x02\u0628\u0613\x03\x02\x02\x02\u0628\u0619\x03\x02\x02", "\x02\u0628\u061F\x03\x02\x02\x02\u0628\u0622\x03\x02\x02", "\x02\u0629\xDC\x03\x02\x02\x02\u062A\u062B\x07c\x02", "\x02\u062B\u062C\x07p\x02\x02\u062C\u062D\x07q\x02\x02", "\u062D\u062E\x07p\x02\x02\u062E\u062F\x07{\x02\x02\u062F", "\u0630\x07o\x02\x02\u0630\u0631\x07q\x02\x02\u0631\u0632", "\x07w\x02\x02\u0632\u0633\x07u\x02\x02\u0633\xDE\x03", "\x02\x02\x02\u0634\u0635\x07d\x02\x02\u0635\u0636\x07", "t\x02\x02\u0636\u0637\x07g\x02\x02\u0637\u0638\x07c\x02", "\x02\u0638\u0639\x07m\x02\x02\u0639\xE0\x03\x02\x02", "\x02\u063A\u063B\x07e\x02\x02\u063B\u063C\x07q\x02\x02", "\u063C\u063D\x07p\x02\x02\u063D\u063E\x07u\x02\x02\u063E", "\u063F\x07v\x02\x02\u063F\u0640\x07c\x02\x02\u0640\u0641", "\x07p\x02\x02\u0641\u0642\x07v\x02\x02\u0642\xE2\x03", "\x02\x02\x02\u0643\u0644\x07k\x02\x02\u0644\u0645\x07", "o\x02\x02\u0645\u0646\x07o\x02\x02\u0646\u0647\x07w\x02", "\x02\u0647\u0648\x07v\x02\x02\u0648\u0649\x07c\x02\x02", "\u0649\u064A\x07d\x02\x02\u064A\u064B\x07n\x02\x02\u064B", "\u064C\x07g\x02\x02\u064C\xE4\x03\x02\x02\x02\u064D", "\u064E\x07e\x02\x02\u064E\u064F\x07q\x02\x02\u064F\u0650", "\x07p\x02\x02\u0650\u0651\x07v\x02\x02\u0651\u0652\x07", "k\x02\x02\u0652\u0653\x07p\x02\x02\u0653\u0654\x07w\x02", "\x02\u0654\u0655\x07g\x02\x02\u0655\xE6\x03\x02\x02", "\x02\u0656\u0657\x07n\x02\x02\u0657\u0658\x07g\x02\x02", "\u0658\u0659\x07c\x02\x02\u0659\u065A\x07x\x02\x02\u065A", "\u065B\x07g\x02\x02\u065B\xE8\x03\x02\x02\x02\u065C", "\u065D\x07g\x02\x02\u065D\u065E\x07z\x02\x02\u065E\u065F", "\x07v\x02\x02\u065F\u0660\x07g\x02\x02\u0660\u0661\x07", "t\x02\x02\u0661\u0662\x07p\x02\x02\u0662\u0663\x07c\x02", "\x02\u0663\u0664\x07n\x02\x02\u0664\xEA\x03\x02\x02", "\x02\u0665\u0666\x07k\x02\x02\u0666\u0667\x07p\x02\x02", "\u0667\u0668\x07f\x02\x02\u0668\u0669\x07g\x02\x02\u0669", "\u066A\x07z\x02\x02\u066A\u066B\x07g\x02\x02\u066B\u066C", "\x07f\x02\x02\u066C\xEC\x03\x02\x02\x02\u066D\u066E", "\x07k\x02\x02\u066E\u066F\x07p\x02\x02\u066F\u0670\x07", "v\x02\x02\u0670\u0671\x07g\x02\x02\u0671\u0672\x07t\x02", "\x02\u0672\u0673\x07p\x02\x02\u0673\u0674\x07c\x02\x02", "\u0674\u0675\x07n\x02\x02\u0675\xEE\x03\x02\x02\x02", "\u0676\u0677\x07r\x02\x02\u0677\u0678\x07c\x02\x02\u0678", "\u0679\x07{\x02\x02\u0679\u067A\x07c\x02\x02\u067A\u067B", "\x07d\x02\x02\u067B\u067C\x07n\x02\x02\u067C\u067D\x07", "g\x02\x02\u067D\xF0\x03\x02\x02\x02\u067E\u067F\x07", "r\x02\x02\u067F\u0680\x07t\x02\x02\u0680\u0681\x07k\x02", "\x02\u0681\u0682\x07x\x02\x02\u0682\u0683\x07c\x02\x02", "\u0683\u0684\x07v\x02\x02\u0684\u0685\x07g\x02\x02\u0685", "\xF2\x03\x02\x02\x02\u0686\u0687\x07r\x02\x02\u0687", "\u0688\x07w\x02\x02\u0688\u0689\x07d\x02\x02\u0689\u068A", "\x07n\x02\x02\u068A\u068B\x07k\x02\x02\u068B\u068C\x07", "e\x02\x02\u068C\xF4\x03\x02\x02\x02\u068D\u068E\x07", "x\x02\x02\u068E\u068F\x07k\x02\x02\u068F\u0690\x07t\x02", "\x02\u0690\u0691\x07v\x02\x02\u0691\u0692\x07w\x02\x02", "\u0692\u0693\x07c\x02\x02\u0693\u0694\x07n\x02\x02\u0694", "\xF6\x03\x02\x02\x02\u0695\u0696\x07r\x02\x02\u0696", "\u0697\x07w\x02\x02\u0697\u0698\x07t\x02\x02\u0698\u0699", "\x07g\x02\x02\u0699\xF8\x03\x02\x02\x02\u069A\u069B", "\x07v\x02\x02\u069B\u069C\x07{\x02\x02\u069C\u069D\x07", "r\x02\x02\u069D\u069E\x07g\x02\x02\u069E\xFA\x03\x02", "\x02\x02\u069F\u06A0\x07x\x02\x02\u06A0\u06A1\x07k\x02", "\x02\u06A1\u06A2\x07g\x02\x02\u06A2\u06A3\x07y\x02\x02", "\u06A3\xFC\x03\x02\x02\x02\u06A4\u06A5\x07e\x02\x02", "\u06A5\u06A6\x07q\x02\x02\u06A6\u06A7\x07p\x02\x02\u06A7", "\u06A8\x07u\x02\x02\u06A8\u06A9\x07v\x02\x02\u06A9\u06AA", "\x07t\x02\x02\u06AA\u06AB\x07w\x02\x02\u06AB\u06AC\x07", "e\x02\x02\u06AC\u06AD\x07v\x02\x02\u06AD\u06AE\x07q\x02", "\x02\u06AE\u06AF\x07t\x02\x02\u06AF\xFE\x03\x02\x02", "\x02\u06B0\u06B1\x07h\x02\x02\u06B1\u06B2\x07c\x02\x02", "\u06B2\u06B3\x07n\x02\x02\u06B3\u06B4\x07n\x02\x02\u06B4", "\u06B5\x07d\x02\x02\u06B5\u06B6\x07c\x02\x02\u06B6\u06B7", "\x07e\x02\x02\u06B7\u06B8\x07m\x02\x02\u06B8\u0100\x03", "\x02\x02\x02\u06B9\u06BA\x07t\x02\x02\u06BA\u06BB\x07", "g\x02\x02\u06BB\u06BC\x07e\x02\x02\u06BC\u06BD\x07g\x02", "\x02\u06BD\u06BE\x07k\x02\x02\u06BE\u06BF\x07x\x02\x02", "\u06BF\u06C0\x07g\x02\x02\u06C0\u0102\x03\x02\x02\x02", "\u06C1\u06C5\x05\u0105\x83\x02\u06C2\u06C4\x05\u0107\x84\x02", "\u06C3\u06C2\x03\x02\x02\x02\u06C4\u06C7\x03\x02\x02\x02", "\u06C5\u06C3\x03\x02\x02\x02\u06C5\u06C6\x03\x02\x02\x02", "\u06C6\u0104\x03\x02\x02\x02\u06C7\u06C5\x03\x02\x02\x02", "\u06C8\u06C9\t\x06\x02\x02\u06C9\u0106\x03\x02\x02\x02", "\u06CA\u06CB\t\x07\x02\x02\u06CB\u0108\x03\x02\x02\x02", "\u06CC\u06D0\x07$\x02\x02\u06CD\u06CF\x05\u010B\x86\x02", "\u06CE\u06CD\x03\x02\x02\x02\u06CF\u06D2\x03\x02\x02\x02", "\u06D0\u06CE\x03\x02\x02\x02\u06D0\u06D1\x03\x02\x02\x02", "\u06D1\u06D3\x03\x02\x02\x02\u06D2\u06D0\x03\x02\x02\x02", "\u06D3\u06DD\x07$\x02\x02\u06D4\u06D8\x07)\x02\x02\u06D5", "\u06D7\x05\u010D\x87\x02\u06D6\u06D5\x03\x02\x02\x02\u06D7", "\u06DA\x03\x02\x02\x02\u06D8\u06D6\x03\x02\x02\x02\u06D8", "\u06D9\x03\x02\x02\x02\u06D9\u06DB\x03\x02\x02\x02\u06DA", "\u06D8\x03\x02\x02\x02\u06DB\u06DD\x07)\x02\x02\u06DC", "\u06CC\x03\x02\x02\x02\u06DC\u06D4\x03\x02\x02\x02\u06DD", "\u010A\x03\x02\x02\x02\u06DE\u06E2\n\b\x02\x02\u06DF\u06E0", "\x07^\x02\x02\u06E0\u06E2\x0B\x02\x02\x02\u06E1\u06DE", "\x03\x02\x02\x02\u06E1\u06DF\x03\x02\x02\x02\u06E2\u010C", "\x03\x02\x02\x02\u06E3\u06E7\n\t\x02\x02\u06E4\u06E5\x07", "^\x02\x02\u06E5\u06E7\x0B\x02\x02\x02\u06E6\u06E3\x03", "\x02\x02\x02\u06E6\u06E4\x03\x02\x02\x02\u06E7\u010E\x03", "\x02\x02\x02\u06E8\u06EA\t\x02\x02\x02\u06E9\u06E8\x03", "\x02\x02\x02\u06EA\u06EB\x03\x02\x02\x02\u06EB\u06E9\x03", "\x02\x02\x02\u06EB\u06EC\x03\x02\x02\x02\u06EC\u06ED\x03", "\x02\x02\x02\u06ED\u06EF\x070\x02\x02\u06EE\u06F0\t\x02", "\x02\x02\u06EF\u06EE\x03\x02\x02\x02\u06F0\u06F1\x03\x02", "\x02\x02\u06F1\u06EF\x03\x02\x02\x02\u06F1\u06F2\x03\x02", "\x02\x02\u06F2\u06F9\x03\x02\x02\x02\u06F3\u06F5\x070", "\x02\x02\u06F4\u06F6\t\x02\x02\x02\u06F5\u06F4\x03\x02", "\x02\x02\u06F6\u06F7\x03\x02\x02\x02\u06F7\u06F5\x03\x02", "\x02\x02\u06F7\u06F8\x03\x02\x02\x02\u06F8\u06FA\x03\x02", "\x02\x02\u06F9\u06F3\x03\x02\x02\x02\u06F9\u06FA\x03\x02", "\x02\x02\u06FA\u0110\x03\x02\x02\x02\u06FB\u06FD\t\n\x02", "\x02\u06FC\u06FB\x03\x02\x02\x02\u06FD\u06FE\x03\x02\x02", "\x02\u06FE\u06FC\x03\x02\x02\x02\u06FE\u06FF\x03\x02\x02", "\x02\u06FF\u0700\x03\x02\x02\x02\u0700\u0701\b\x89\x02", "\x02\u0701\u0112\x03\x02\x02\x02\u0702\u0703\x071\x02", "\x02\u0703\u0704\x07,\x02\x02\u0704\u0708\x03\x02\x02", "\x02\u0705\u0707\x0B\x02\x02\x02\u0706\u0705\x03\x02\x02", "\x02\u0707\u070A\x03\x02\x02\x02\u0708\u0709\x03\x02\x02", "\x02\u0708\u0706\x03\x02\x02\x02\u0709\u070B\x03\x02\x02", "\x02\u070A\u0708\x03\x02\x02\x02\u070B\u070C\x07,\x02", "\x02\u070C\u070D\x071\x02\x02\u070D\u070E\x03\x02\x02", "\x02\u070E\u070F\b\x8A\x03\x02\u070F\u0114\x03\x02\x02", "\x02\u0710\u0711\x071\x02\x02\u0711\u0712\x071\x02\x02", "\u0712\u0716\x03\x02\x02\x02\u0713\u0715\n\x0B\x02\x02", "\u0714\u0713\x03\x02\x02\x02\u0715\u0718\x03\x02\x02\x02", "\u0716\u0714\x03\x02\x02\x02\u0716\u0717\x03\x02\x02\x02", "\u0717\u0719\x03\x02\x02\x02\u0718\u0716\x03\x02\x02\x02", "\u0719\u071A\b\x8B\x03\x02\u071A\u0116\x03\x02\x02\x02", "&\x02\u036B\u0444\u0522\u0532\u0538\u053A\u054C\u0552\u0554\u055F", "\u0563\u0567\u056B\u056F\u0574\u057D\u0582\u05B9\u05C1\u05C6\u05C9\u0628", "\u06C5\u06D0\u06D8\u06DC\u06E1\u06E6\u06EB\u06F1\u06F7\u06F9\u06FE\u0708", "\u0716\x04\b\x02\x02\x02\x03\x02"].join("");

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
        return new antlr4.dfa.DFA(ds, index);
});

function SolidityLexer(input) {
        antlr4.Lexer.call(this, input);
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
        return this;
}

SolidityLexer.prototype = Object.create(antlr4.Lexer.prototype);
SolidityLexer.prototype.constructor = SolidityLexer;

Object.defineProperty(SolidityLexer.prototype, "atn", {
        get: function get() {
                return atn;
        }
});

SolidityLexer.EOF = antlr4.Token.EOF;
SolidityLexer.T__0 = 1;
SolidityLexer.T__1 = 2;
SolidityLexer.T__2 = 3;
SolidityLexer.T__3 = 4;
SolidityLexer.T__4 = 5;
SolidityLexer.T__5 = 6;
SolidityLexer.T__6 = 7;
SolidityLexer.T__7 = 8;
SolidityLexer.T__8 = 9;
SolidityLexer.T__9 = 10;
SolidityLexer.T__10 = 11;
SolidityLexer.T__11 = 12;
SolidityLexer.T__12 = 13;
SolidityLexer.T__13 = 14;
SolidityLexer.T__14 = 15;
SolidityLexer.T__15 = 16;
SolidityLexer.T__16 = 17;
SolidityLexer.T__17 = 18;
SolidityLexer.T__18 = 19;
SolidityLexer.T__19 = 20;
SolidityLexer.T__20 = 21;
SolidityLexer.T__21 = 22;
SolidityLexer.T__22 = 23;
SolidityLexer.T__23 = 24;
SolidityLexer.T__24 = 25;
SolidityLexer.T__25 = 26;
SolidityLexer.T__26 = 27;
SolidityLexer.T__27 = 28;
SolidityLexer.T__28 = 29;
SolidityLexer.T__29 = 30;
SolidityLexer.T__30 = 31;
SolidityLexer.T__31 = 32;
SolidityLexer.T__32 = 33;
SolidityLexer.T__33 = 34;
SolidityLexer.T__34 = 35;
SolidityLexer.T__35 = 36;
SolidityLexer.T__36 = 37;
SolidityLexer.T__37 = 38;
SolidityLexer.T__38 = 39;
SolidityLexer.T__39 = 40;
SolidityLexer.T__40 = 41;
SolidityLexer.T__41 = 42;
SolidityLexer.T__42 = 43;
SolidityLexer.T__43 = 44;
SolidityLexer.T__44 = 45;
SolidityLexer.T__45 = 46;
SolidityLexer.T__46 = 47;
SolidityLexer.T__47 = 48;
SolidityLexer.T__48 = 49;
SolidityLexer.T__49 = 50;
SolidityLexer.T__50 = 51;
SolidityLexer.T__51 = 52;
SolidityLexer.T__52 = 53;
SolidityLexer.T__53 = 54;
SolidityLexer.T__54 = 55;
SolidityLexer.T__55 = 56;
SolidityLexer.T__56 = 57;
SolidityLexer.T__57 = 58;
SolidityLexer.T__58 = 59;
SolidityLexer.T__59 = 60;
SolidityLexer.T__60 = 61;
SolidityLexer.T__61 = 62;
SolidityLexer.T__62 = 63;
SolidityLexer.T__63 = 64;
SolidityLexer.T__64 = 65;
SolidityLexer.T__65 = 66;
SolidityLexer.T__66 = 67;
SolidityLexer.T__67 = 68;
SolidityLexer.T__68 = 69;
SolidityLexer.T__69 = 70;
SolidityLexer.T__70 = 71;
SolidityLexer.T__71 = 72;
SolidityLexer.T__72 = 73;
SolidityLexer.T__73 = 74;
SolidityLexer.T__74 = 75;
SolidityLexer.T__75 = 76;
SolidityLexer.T__76 = 77;
SolidityLexer.T__77 = 78;
SolidityLexer.T__78 = 79;
SolidityLexer.T__79 = 80;
SolidityLexer.T__80 = 81;
SolidityLexer.T__81 = 82;
SolidityLexer.T__82 = 83;
SolidityLexer.T__83 = 84;
SolidityLexer.T__84 = 85;
SolidityLexer.T__85 = 86;
SolidityLexer.T__86 = 87;
SolidityLexer.T__87 = 88;
SolidityLexer.T__88 = 89;
SolidityLexer.T__89 = 90;
SolidityLexer.T__90 = 91;
SolidityLexer.T__91 = 92;
SolidityLexer.T__92 = 93;
SolidityLexer.T__93 = 94;
SolidityLexer.Int = 95;
SolidityLexer.Uint = 96;
SolidityLexer.Byte = 97;
SolidityLexer.Fixed = 98;
SolidityLexer.Ufixed = 99;
SolidityLexer.BooleanLiteral = 100;
SolidityLexer.DecimalNumber = 101;
SolidityLexer.HexNumber = 102;
SolidityLexer.NumberUnit = 103;
SolidityLexer.HexLiteral = 104;
SolidityLexer.ReservedKeyword = 105;
SolidityLexer.AnonymousKeyword = 106;
SolidityLexer.BreakKeyword = 107;
SolidityLexer.ConstantKeyword = 108;
SolidityLexer.ImmutableKeyword = 109;
SolidityLexer.ContinueKeyword = 110;
SolidityLexer.LeaveKeyword = 111;
SolidityLexer.ExternalKeyword = 112;
SolidityLexer.IndexedKeyword = 113;
SolidityLexer.InternalKeyword = 114;
SolidityLexer.PayableKeyword = 115;
SolidityLexer.PrivateKeyword = 116;
SolidityLexer.PublicKeyword = 117;
SolidityLexer.VirtualKeyword = 118;
SolidityLexer.PureKeyword = 119;
SolidityLexer.TypeKeyword = 120;
SolidityLexer.ViewKeyword = 121;
SolidityLexer.ConstructorKeyword = 122;
SolidityLexer.FallbackKeyword = 123;
SolidityLexer.ReceiveKeyword = 124;
SolidityLexer.Identifier = 125;
SolidityLexer.StringLiteralFragment = 126;
SolidityLexer.VersionLiteral = 127;
SolidityLexer.WS = 128;
SolidityLexer.COMMENT = 129;
SolidityLexer.LINE_COMMENT = 130;

SolidityLexer.prototype.channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

SolidityLexer.prototype.modeNames = ["DEFAULT_MODE"];

SolidityLexer.prototype.literalNames = [null, "'pragma'", "';'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", "'interface'", "'library'", "'is'", "'('", "')'", "'using'", "'for'", "'struct'", "'modifier'", "'function'", "'returns'", "'event'", "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'try'", "'catch'", "'while'", "'assembly'", "'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", "'->'", "'callback'", "'override'", null, null, null, null, null, null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", "'immutable'", "'continue'", "'leave'", "'external'", "'indexed'", "'internal'", "'payable'", "'private'", "'public'", "'virtual'", "'pure'", "'type'", "'view'", "'constructor'", "'fallback'", "'receive'"];

SolidityLexer.prototype.symbolicNames = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Int", "Uint", "Byte", "Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", "PrivateKeyword", "PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", "Identifier", "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", "LINE_COMMENT"];

SolidityLexer.prototype.ruleNames = ["T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", "T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "T__64", "T__65", "T__66", "T__67", "T__68", "T__69", "T__70", "T__71", "T__72", "T__73", "T__74", "T__75", "T__76", "T__77", "T__78", "T__79", "T__80", "T__81", "T__82", "T__83", "T__84", "T__85", "T__86", "T__87", "T__88", "T__89", "T__90", "T__91", "T__92", "T__93", "Int", "Uint", "Byte", "Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", "DecimalDigits", "HexNumber", "HexDigits", "NumberUnit", "HexLiteral", "HexPair", "HexCharacter", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", "PrivateKeyword", "PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", "Identifier", "IdentifierStart", "IdentifierPart", "StringLiteralFragment", "DoubleQuotedStringCharacter", "SingleQuotedStringCharacter", "VersionLiteral", "WS", "COMMENT", "LINE_COMMENT"];

SolidityLexer.prototype.grammarFileName = "Solidity.g4";

exports.SolidityLexer = SolidityLexer;

/***/ }),
/* 57 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


// Generated from antlr/Solidity.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = __webpack_require__(9);
var SolidityListener = __webpack_require__(58).SolidityListener;
var grammarFileName = "Solidity.g4";

var serializedATN = ['\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964', '\x03\x84\u0426\x04\x02\t\x02\x04\x03\t\x03\x04\x04', '\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07', '\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04\f\t\f', '\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10', '\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14', '\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17', '\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B', '\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E', '\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t"\x04#\t#\x04', '$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04', '+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x04', '2\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x04', '9\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04?\t?\x04', '@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04F\tF\x04', 'G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04', 'N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04', 'U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x03\x02\x03', '\x02\x03\x02\x03\x02\x03\x02\x07\x02\xBA\n\x02', '\f\x02\x0E\x02\xBD\x0B\x02\x03\x02\x03\x02\x03', '\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03', '\x04\x03\x05\x03\x05\x05\x05\xCA\n\x05\x03\x06', '\x03\x06\x05\x06\xCE\n\x06\x03\x07\x03\x07\x03', '\b\x05\b\xD3\n\b\x03\b\x03\b\x05\b\xD7\n\b\x03\b\x05', '\b\xDA\n\b\x03\t\x03\t\x03\t\x05\t\xDF\n\t\x03\n\x03', '\n\x03\n\x03\n\x05\n\xE5\n\n\x03\n\x03\n\x03\n\x03\n', '\x05\n\xEB\n\n\x03\n\x03\n\x05\n\xEF\n\n\x03\n\x03\n', '\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x07\n\xF9\n\n\f', '\n\x0E\n\xFC\x0B\n\x03\n\x03\n\x03\n\x03\n\x03\n\x05', '\n\u0103\n\n\x03\x0B\x05\x0B\u0106\n\x0B\x03\x0B\x03', '\x0B\x03\x0B\x03\x0B\x03\x0B\x03\x0B\x07\x0B\u010E', '\n\x0B\f\x0B\x0E\x0B\u0111\x0B\x0B\x05\x0B\u0113\n\x0B', '\x03\x0B\x03\x0B\x07\x0B\u0117\n\x0B\f\x0B\x0E\x0B', '\u011A\x0B\x0B\x03\x0B\x03\x0B\x03\f\x03\f\x03\f\x05', '\f\u0121\n\f\x03\f\x05\f\u0124\n\f\x03\r\x03\r\x03\r\x03', '\r\x03\r\x03\r\x03\r\x05\r\u012D\n\r\x03\x0E\x03\x0E', '\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x07\x0E', '\u0136\n\x0E\f\x0E\x0E\x0E\u0139\x0B\x0E\x03\x0E\x03', '\x0E\x03\x0E\x05\x0E\u013E\n\x0E\x03\x0E\x03\x0E', '\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F', '\u0147\n\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03', '\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x07', '\x10\u0153\n\x10\f\x10\x0E\x10\u0156\x0B\x10\x05\x10', '\u0158\n\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03', '\x11\x05\x11\u015F\n\x11\x03\x11\x03\x11\x07\x11', '\u0163\n\x11\f\x11\x0E\x11\u0166\x0B\x11\x03\x11\x03', '\x11\x03\x12\x03\x12\x03\x12\x05\x12\u016D\n\x12', '\x03\x12\x05\x12\u0170\n\x12\x03\x13\x03\x13\x03', '\x13\x03\x13\x05\x13\u0176\n\x13\x03\x13\x03\x13', '\x05\x13\u017A\n\x13\x03\x14\x03\x14\x05\x14\u017E', '\n\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0183\n\x14', '\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16', '\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16', '\u0190\n\x16\f\x16\x0E\x16\u0193\x0B\x16\x03\x17\x03', '\x17\x03\x17\x03\x17\x05\x17\u0199\n\x17\x03\x17', '\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19', '\x03\x19\x05\x19\u01A3\n\x19\x03\x19\x03\x19\x07', '\x19\u01A7\n\x19\f\x19\x0E\x19\u01AA\x0B\x19\x03\x19', '\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A', '\u01B2\n\x1A\f\x1A\x0E\x1A\u01B5\x0B\x1A\x05\x1A\u01B7', '\n\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x05\x1B', '\u01BD\n\x1B\x03\x1B\x05\x1B\u01C0\n\x1B\x03\x1C\x03', '\x1C\x03\x1C\x03\x1C\x07\x1C\u01C6\n\x1C\f\x1C\x0E', '\x1C\u01C9\x0B\x1C\x05\x1C\u01CB\n\x1C\x03\x1C\x03', '\x1C\x03\x1D\x03\x1D\x05\x1D\u01D1\n\x1D\x03\x1D', '\x05\x1D\u01D4\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03', '\x1E\x07\x1E\u01DA\n\x1E\f\x1E\x0E\x1E\u01DD\x0B\x1E', '\x05\x1E\u01DF\n\x1E\x03\x1E\x03\x1E\x03\x1F\x03', '\x1F\x05\x1F\u01E5\n\x1F\x03 \x03 \x05 \u01E9\n \x03', ' \x03 \x03!\x03!\x03!\x03!\x03!\x03!\x03!\x05!\u01F4', '\n!\x03!\x03!\x03!\x05!\u01F9\n!\x03!\x07!\u01FC\n!\f!\x0E', '!\u01FF\x0B!\x03"\x03"\x03"\x07"\u0204\n"\f"\x0E"', '\u0207\x0B"\x03#\x03#\x05#\u020B\n#\x03$\x03$\x03$\x03', '$\x03$\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x07%\u0219', '\n%\f%\x0E%\u021C\x0B%\x03%\x03%\x05%\u0220\n%\x03&\x03', '&\x03\'\x03\'\x03(\x03(\x07(\u0228\n(\f(\x0E(\u022B\x0B', '(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03', ')\x03)\x03)\x03)\x03)\x03)\x05)\u023C\n)\x03*\x03*\x03', '*\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x05+\u0248\n+\x03', ',\x03,\x03,\x05,\u024D\n,\x03,\x03,\x06,\u0251\n,\r,\x0E', ',\u0252\x03-\x03-\x05-\u0257\n-\x03-\x05-\u025A\n-\x03-', '\x03-\x03.\x03.\x03.\x03.\x03.\x03.\x03/\x03/\x05', '/\u0266\n/\x030\x030\x030\x030\x050\u026C\n0\x030\x03', '0\x050\u0270\n0\x030\x050\u0273\n0\x030\x030\x030\x03', '1\x031\x051\u027A\n1\x031\x031\x032\x032\x032\x032\x03', '2\x032\x032\x032\x033\x033\x033\x034\x034\x034\x03', '5\x035\x055\u028E\n5\x035\x035\x036\x036\x036\x037\x03', '7\x037\x037\x038\x038\x038\x038\x038\x038\x038\x05', '8\u02A0\n8\x038\x038\x058\u02A4\n8\x038\x038\x039\x05', '9\u02A9\n9\x039\x039\x059\u02AD\n9\x079\u02AF\n9\f9\x0E9\u02B2', '\x0B9\x03:\x03:\x05:\u02B6\n:\x03:\x07:\u02B9\n:\f:\x0E', ':\u02BC\x0B:\x03:\x05:\u02BF\n:\x03:\x03:\x03;\x03;\x03', '<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03', '<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x05<\u02D7\n<\x03', '<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03', '<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03', '<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03', '<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03', '<\x03<\x03<\x03<\x03<\x03<\x03<\x05<\u0308\n<\x03<\x03', '<\x03<\x03<\x05<\u030E\n<\x03<\x03<\x05<\u0312\n<\x03', '<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03', '<\x03<\x03<\x03<\x07<\u0322\n<\f<\x0E<\u0325\x0B<\x03', '=\x03=\x03=\x03=\x03=\x03=\x03=\x05=\u032E\n=\x03=\x03', '=\x03=\x03=\x03=\x03=\x05=\u0336\n=\x05=\u0338\n=\x03', '>\x03>\x03>\x07>\u033D\n>\f>\x0E>\u0340\x0B>\x03?\x03', '?\x03?\x07?\u0345\n?\f?\x0E?\u0348\x0B?\x03?\x05?\u034B', '\n?\x03@\x03@\x03@\x03@\x03A\x03A\x05A\u0353\nA\x03', 'A\x03A\x05A\u0357\nA\x05A\u0359\nA\x03B\x03B\x03B\x03', 'B\x03B\x03C\x03C\x07C\u0362\nC\fC\x0EC\u0365\x0BC\x03', 'C\x03C\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03', 'D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x05', 'D\u037B\nD\x03E\x03E\x05E\u037F\nE\x03F\x03F\x03F\x03', 'F\x05F\u0385\nF\x03F\x03F\x05F\u0389\nF\x03F\x03F\x07', 'F\u038D\nF\fF\x0EF\u0390\x0BF\x03F\x05F\u0393\nF\x03G\x03', 'G\x03G\x03G\x05G\u0399\nG\x03H\x03H\x03H\x03H\x03I\x03', 'I\x03I\x03I\x03I\x05I\u03A4\nI\x03J\x03J\x03J\x07J\u03A9', '\nJ\fJ\x0EJ\u03AC\x0BJ\x03K\x03K\x03K\x03L\x03L\x03', 'L\x03M\x03M\x03M\x07M\u03B7\nM\fM\x0EM\u03BA\x0BM\x03', 'N\x03N\x03N\x03N\x03N\x03N\x05N\u03C2\nN\x03O\x03O\x03', 'O\x03O\x05O\u03C8\nO\x03O\x03O\x05O\u03CC\nO\x03O\x03', 'O\x03P\x03P\x03P\x03Q\x03Q\x03Q\x05Q\u03D6\nQ\x03Q\x03', 'Q\x03Q\x05Q\u03DB\nQ\x03Q\x03Q\x03R\x03R\x03R\x03R\x03', 'S\x03S\x03S\x03S\x05S\u03E7\nS\x03T\x03T\x03T\x03T\x03', 'U\x03U\x05U\u03EF\nU\x03U\x03U\x05U\u03F3\nU\x07U\u03F5', '\nU\fU\x0EU\u03F8\x0BU\x03U\x03U\x03U\x03U\x03U\x07', 'U\u03FF\nU\fU\x0EU\u0402\x0BU\x05U\u0404\nU\x03U\x05U\u0407', '\nU\x03V\x03V\x05V\u040B\nV\x03W\x03W\x05W\u040F\nW\x03', 'X\x03X\x03Y\x03Y\x03Y\x03Y\x03Y\x07Y\u0418\nY\fY\x0E', 'Y\u041B\x0BY\x03Y\x03Y\x05Y\u041F\nY\x03Z\x06Z\u0422\nZ', '\rZ\x0EZ\u0423\x03Z\x02\x04@v[\x02\x04\x06\b\n\f\x0E', '\x10\x12\x14\x16\x18\x1A\x1C\x1E "$&(*,.02468:<>@B', 'DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\x80\x82\x84\x86\x88\x8A', '\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2', '\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\x02\x11\x03\x02', '\x05\x0B\x03\x02\x14\x16\x03\x02(*\x06\x02nnuuy', 'y{{\x05\x02$$58ae\x03\x029:\x03\x02=>\x03\x02?@\x04', '\x02\x0E\x0ECD\x03\x02EF\x03\x02\x07\n\x03\x02I', 'J\x04\x02\x0B\x0BNW\x03\x02gh\b\x02\x0F\x0F**__qq', 'uu~\x7F\x02\u049F\x02\xBB\x03\x02\x02\x02\x04\xC0', '\x03\x02\x02\x02\x06\xC5\x03\x02\x02\x02\b\xC9', '\x03\x02\x02\x02\n\xCB\x03\x02\x02\x02\f\xCF\x03', '\x02\x02\x02\x0E\xD9\x03\x02\x02\x02\x10\xDB\x03', '\x02\x02\x02\x12\u0102\x03\x02\x02\x02\x14\u0105\x03', '\x02\x02\x02\x16\u011D\x03\x02\x02\x02\x18\u012C\x03', '\x02\x02\x02\x1A\u012E\x03\x02\x02\x02\x1C\u0141\x03', '\x02\x02\x02\x1E\u014A\x03\x02\x02\x02 \u015B\x03', '\x02\x02\x02"\u0169\x03\x02\x02\x02$\u0171\x03\x02', '\x02\x02&\u0182\x03\x02\x02\x02(\u0184\x03\x02\x02', '\x02*\u0191\x03\x02\x02\x02,\u0194\x03\x02\x02\x02', '.\u019C\x03\x02\x02\x020\u019E\x03\x02\x02\x022\u01AD', '\x03\x02\x02\x024\u01BA\x03\x02\x02\x026\u01C1\x03', '\x02\x02\x028\u01CE\x03\x02\x02\x02:\u01D5\x03\x02', '\x02\x02<\u01E2\x03\x02\x02\x02>\u01E6\x03\x02\x02', '\x02@\u01F3\x03\x02\x02\x02B\u0200\x03\x02\x02\x02', 'D\u020A\x03\x02\x02\x02F\u020C\x03\x02\x02\x02H\u0213', '\x03\x02\x02\x02J\u0221\x03\x02\x02\x02L\u0223\x03', '\x02\x02\x02N\u0225\x03\x02\x02\x02P\u023B\x03\x02', '\x02\x02R\u023D\x03\x02\x02\x02T\u0240\x03\x02\x02', '\x02V\u0249\x03\x02\x02\x02X\u0254\x03\x02\x02\x02', 'Z\u025D\x03\x02\x02\x02\\\u0265\x03\x02\x02\x02^\u0267', '\x03\x02\x02\x02`\u0277\x03\x02\x02\x02b\u027D\x03', '\x02\x02\x02d\u0285\x03\x02\x02\x02f\u0288\x03\x02', '\x02\x02h\u028B\x03\x02\x02\x02j\u0291\x03\x02\x02', '\x02l\u0294\x03\x02\x02\x02n\u029F\x03\x02\x02\x02', 'p\u02A8\x03\x02\x02\x02r\u02B3\x03\x02\x02\x02t\u02C2', '\x03\x02\x02\x02v\u02D6\x03\x02\x02\x02x\u0337\x03', '\x02\x02\x02z\u0339\x03\x02\x02\x02|\u0341\x03\x02', '\x02\x02~\u034C\x03\x02\x02\x02\x80\u0358\x03\x02', '\x02\x02\x82\u035A\x03\x02\x02\x02\x84\u035F\x03\x02', '\x02\x02\x86\u037A\x03\x02\x02\x02\x88\u037E\x03\x02', '\x02\x02\x8A\u0384\x03\x02\x02\x02\x8C\u0394\x03\x02', '\x02\x02\x8E\u039A\x03\x02\x02\x02\x90\u03A3\x03\x02', '\x02\x02\x92\u03A5\x03\x02\x02\x02\x94\u03AD\x03\x02', '\x02\x02\x96\u03B0\x03\x02\x02\x02\x98\u03B3\x03\x02', '\x02\x02\x9A\u03C1\x03\x02\x02\x02\x9C\u03C3\x03\x02', '\x02\x02\x9E\u03CF\x03\x02\x02\x02\xA0\u03D2\x03\x02', '\x02\x02\xA2\u03DE\x03\x02\x02\x02\xA4\u03E6\x03\x02', '\x02\x02\xA6\u03E8\x03\x02\x02\x02\xA8\u0406\x03\x02', '\x02\x02\xAA\u040A\x03\x02\x02\x02\xAC\u040C\x03\x02', '\x02\x02\xAE\u0410\x03\x02\x02\x02\xB0\u0412\x03\x02', '\x02\x02\xB2\u0421\x03\x02\x02\x02\xB4\xBA\x05\x04', '\x03\x02\xB5\xBA\x05\x12\n\x02\xB6\xBA\x05\x14', '\x0B\x02\xB7\xBA\x050\x19\x02\xB8\xBA\x05\x1E', '\x10\x02\xB9\xB4\x03\x02\x02\x02\xB9\xB5\x03\x02', '\x02\x02\xB9\xB6\x03\x02\x02\x02\xB9\xB7\x03\x02', '\x02\x02\xB9\xB8\x03\x02\x02\x02\xBA\xBD\x03\x02', '\x02\x02\xBB\xB9\x03\x02\x02\x02\xBB\xBC\x03\x02', '\x02\x02\xBC\xBE\x03\x02\x02\x02\xBD\xBB\x03\x02', '\x02\x02\xBE\xBF\x07\x02\x02\x03\xBF\x03\x03\x02', '\x02\x02\xC0\xC1\x07\x03\x02\x02\xC1\xC2\x05\x06', '\x04\x02\xC2\xC3\x05\b\x05\x02\xC3\xC4\x07\x04', '\x02\x02\xC4\x05\x03\x02\x02\x02\xC5\xC6\x05\xAE', 'X\x02\xC6\x07\x03\x02\x02\x02\xC7\xCA\x05\n\x06', '\x02\xC8\xCA\x05v<\x02\xC9\xC7\x03\x02\x02\x02', '\xC9\xC8\x03\x02\x02\x02\xCA\t\x03\x02\x02\x02', '\xCB\xCD\x05\x0E\b\x02\xCC\xCE\x05\x0E\b\x02\xCD', '\xCC\x03\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE', '\x0B\x03\x02\x02\x02\xCF\xD0\t\x02\x02\x02\xD0', '\r\x03\x02\x02\x02\xD1\xD3\x05\f\x07\x02\xD2\xD1', '\x03\x02\x02\x02\xD2\xD3\x03\x02\x02\x02\xD3\xD4', '\x03\x02\x02\x02\xD4\xDA\x07\x81\x02\x02\xD5\xD7', '\x05\f\x07\x02\xD6\xD5\x03\x02\x02\x02\xD6\xD7', '\x03\x02\x02\x02\xD7\xD8\x03\x02\x02\x02\xD8\xDA', '\x07g\x02\x02\xD9\xD2\x03\x02\x02\x02\xD9\xD6', '\x03\x02\x02\x02\xDA\x0F\x03\x02\x02\x02\xDB\xDE', '\x05\xAEX\x02\xDC\xDD\x07\f\x02\x02\xDD\xDF\x05', '\xAEX\x02\xDE\xDC\x03\x02\x02\x02\xDE\xDF\x03', '\x02\x02\x02\xDF\x11\x03\x02\x02\x02\xE0\xE1\x07', '\r\x02\x02\xE1\xE4\x07\x80\x02\x02\xE2\xE3\x07', '\f\x02\x02\xE3\xE5\x05\xAEX\x02\xE4\xE2\x03\x02', '\x02\x02\xE4\xE5\x03\x02\x02\x02\xE5\xE6\x03\x02', '\x02\x02\xE6\u0103\x07\x04\x02\x02\xE7\xEA\x07\r', '\x02\x02\xE8\xEB\x07\x0E\x02\x02\xE9\xEB\x05\xAE', 'X\x02\xEA\xE8\x03\x02\x02\x02\xEA\xE9\x03\x02', '\x02\x02\xEB\xEE\x03\x02\x02\x02\xEC\xED\x07\f', '\x02\x02\xED\xEF\x05\xAEX\x02\xEE\xEC\x03\x02', '\x02\x02\xEE\xEF\x03\x02\x02\x02\xEF\xF0\x03\x02', '\x02\x02\xF0\xF1\x07\x0F\x02\x02\xF1\xF2\x07\x80', '\x02\x02\xF2\u0103\x07\x04\x02\x02\xF3\xF4\x07\r', '\x02\x02\xF4\xF5\x07\x10\x02\x02\xF5\xFA\x05\x10', '\t\x02\xF6\xF7\x07\x11\x02\x02\xF7\xF9\x05\x10', '\t\x02\xF8\xF6\x03\x02\x02\x02\xF9\xFC\x03\x02', '\x02\x02\xFA\xF8\x03\x02\x02\x02\xFA\xFB\x03\x02', '\x02\x02\xFB\xFD\x03\x02\x02\x02\xFC\xFA\x03\x02', '\x02\x02\xFD\xFE\x07\x12\x02\x02\xFE\xFF\x07\x0F', '\x02\x02\xFF\u0100\x07\x80\x02\x02\u0100\u0101\x07\x04', '\x02\x02\u0101\u0103\x03\x02\x02\x02\u0102\xE0\x03\x02', '\x02\x02\u0102\xE7\x03\x02\x02\x02\u0102\xF3\x03\x02', '\x02\x02\u0103\x13\x03\x02\x02\x02\u0104\u0106\x07\x13', '\x02\x02\u0105\u0104\x03\x02\x02\x02\u0105\u0106\x03\x02', '\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107\u0108\t\x03', '\x02\x02\u0108\u0112\x05\xAEX\x02\u0109\u010A\x07\x17', '\x02\x02\u010A\u010F\x05\x16\f\x02\u010B\u010C\x07\x11', '\x02\x02\u010C\u010E\x05\x16\f\x02\u010D\u010B\x03\x02', '\x02\x02\u010E\u0111\x03\x02\x02\x02\u010F\u010D\x03\x02', '\x02\x02\u010F\u0110\x03\x02\x02\x02\u0110\u0113\x03\x02', '\x02\x02\u0111\u010F\x03\x02\x02\x02\u0112\u0109\x03\x02', '\x02\x02\u0112\u0113\x03\x02\x02\x02\u0113\u0114\x03\x02', '\x02\x02\u0114\u0118\x07\x10\x02\x02\u0115\u0117\x05\x18', '\r\x02\u0116\u0115\x03\x02\x02\x02\u0117\u011A\x03\x02', '\x02\x02\u0118\u0116\x03\x02\x02\x02\u0118\u0119\x03\x02', '\x02\x02\u0119\u011B\x03\x02\x02\x02\u011A\u0118\x03\x02', '\x02\x02\u011B\u011C\x07\x12\x02\x02\u011C\x15\x03\x02', '\x02\x02\u011D\u0123\x05B"\x02\u011E\u0120\x07\x18\x02', '\x02\u011F\u0121\x05z>\x02\u0120\u011F\x03\x02\x02\x02', '\u0120\u0121\x03\x02\x02\x02\u0121\u0122\x03\x02\x02\x02', '\u0122\u0124\x07\x19\x02\x02\u0123\u011E\x03\x02\x02\x02', '\u0123\u0124\x03\x02\x02\x02\u0124\x17\x03\x02\x02\x02', '\u0125\u012D\x05\x1A\x0E\x02\u0126\u012D\x05\x1C\x0F\x02', '\u0127\u012D\x05\x1E\x10\x02\u0128\u012D\x05 \x11\x02', '\u0129\u012D\x05$\x13\x02\u012A\u012D\x05,\x17\x02\u012B', '\u012D\x050\x19\x02\u012C\u0125\x03\x02\x02\x02\u012C', '\u0126\x03\x02\x02\x02\u012C\u0127\x03\x02\x02\x02\u012C', '\u0128\x03\x02\x02\x02\u012C\u0129\x03\x02\x02\x02\u012C', '\u012A\x03\x02\x02\x02\u012C\u012B\x03\x02\x02\x02\u012D', '\x19\x03\x02\x02\x02\u012E\u0137\x05@!\x02\u012F\u0136', '\x07w\x02\x02\u0130\u0136\x07t\x02\x02\u0131\u0136\x07', 'v\x02\x02\u0132\u0136\x07n\x02\x02\u0133\u0136\x07o\x02', '\x02\u0134\u0136\x05\xB0Y\x02\u0135\u012F\x03\x02\x02', '\x02\u0135\u0130\x03\x02\x02\x02\u0135\u0131\x03\x02\x02', '\x02\u0135\u0132\x03\x02\x02\x02\u0135\u0133\x03\x02\x02', '\x02\u0135\u0134\x03\x02\x02\x02\u0136\u0139\x03\x02\x02', '\x02\u0137\u0135\x03\x02\x02\x02\u0137\u0138\x03\x02\x02', '\x02\u0138\u013A\x03\x02\x02\x02\u0139\u0137\x03\x02\x02', '\x02\u013A\u013D\x05\xAEX\x02\u013B\u013C\x07\x0B\x02', '\x02\u013C\u013E\x05v<\x02\u013D\u013B\x03\x02\x02\x02', '\u013D\u013E\x03\x02\x02\x02\u013E\u013F\x03\x02\x02\x02', '\u013F\u0140\x07\x04\x02\x02\u0140\x1B\x03\x02\x02\x02', '\u0141\u0142\x07\x1A\x02\x02\u0142\u0143\x05\xAEX\x02', '\u0143\u0146\x07\x1B\x02\x02\u0144\u0147\x07\x0E\x02\x02', '\u0145\u0147\x05@!\x02\u0146\u0144\x03\x02\x02\x02\u0146', '\u0145\x03\x02\x02\x02\u0147\u0148\x03\x02\x02\x02\u0148', '\u0149\x07\x04\x02\x02\u0149\x1D\x03\x02\x02\x02\u014A', '\u014B\x07\x1C\x02\x02\u014B\u014C\x05\xAEX\x02\u014C', '\u0157\x07\x10\x02\x02\u014D\u014E\x05> \x02\u014E\u0154', '\x07\x04\x02\x02\u014F\u0150\x05> \x02\u0150\u0151\x07', '\x04\x02\x02\u0151\u0153\x03\x02\x02\x02\u0152\u014F\x03', '\x02\x02\x02\u0153\u0156\x03\x02\x02\x02\u0154\u0152\x03', '\x02\x02\x02\u0154\u0155\x03\x02\x02\x02\u0155\u0158\x03', '\x02\x02\x02\u0156\u0154\x03\x02\x02\x02\u0157\u014D\x03', '\x02\x02\x02\u0157\u0158\x03\x02\x02\x02\u0158\u0159\x03', '\x02\x02\x02\u0159\u015A\x07\x12\x02\x02\u015A\x1F\x03', '\x02\x02\x02\u015B\u015C\x07\x1D\x02\x02\u015C\u015E\x05', '\xAEX\x02\u015D\u015F\x052\x1A\x02\u015E\u015D\x03\x02', '\x02\x02\u015E\u015F\x03\x02\x02\x02\u015F\u0164\x03\x02', '\x02\x02\u0160\u0163\x07x\x02\x02\u0161\u0163\x05\xB0', 'Y\x02\u0162\u0160\x03\x02\x02\x02\u0162\u0161\x03\x02', '\x02\x02\u0163\u0166\x03\x02\x02\x02\u0164\u0162\x03\x02', '\x02\x02\u0164\u0165\x03\x02\x02\x02\u0165\u0167\x03\x02', '\x02\x02\u0166\u0164\x03\x02\x02\x02\u0167\u0168\x05N', '(\x02\u0168!\x03\x02\x02\x02\u0169\u016F\x05\xAEX\x02', '\u016A\u016C\x07\x18\x02\x02\u016B\u016D\x05z>\x02\u016C', '\u016B\x03\x02\x02\x02\u016C\u016D\x03\x02\x02\x02\u016D', '\u016E\x03\x02\x02\x02\u016E\u0170\x07\x19\x02\x02\u016F', '\u016A\x03\x02\x02\x02\u016F\u0170\x03\x02\x02\x02\u0170', '#\x03\x02\x02\x02\u0171\u0172\x05&\x14\x02\u0172\u0173', '\x052\x1A\x02\u0173\u0175\x05*\x16\x02\u0174\u0176\x05', '(\x15\x02\u0175\u0174\x03\x02\x02\x02\u0175\u0176\x03', '\x02\x02\x02\u0176\u0179\x03\x02\x02\x02\u0177\u017A\x07', '\x04\x02\x02\u0178\u017A\x05N(\x02\u0179\u0177\x03\x02', '\x02\x02\u0179\u0178\x03\x02\x02\x02\u017A%\x03\x02', '\x02\x02\u017B\u017D\x07\x1E\x02\x02\u017C\u017E\x05\xAE', 'X\x02\u017D\u017C\x03\x02\x02\x02\u017D\u017E\x03\x02', '\x02\x02\u017E\u0183\x03\x02\x02\x02\u017F\u0183\x07|', '\x02\x02\u0180\u0183\x07}\x02\x02\u0181\u0183\x07~\x02', '\x02\u0182\u017B\x03\x02\x02\x02\u0182\u017F\x03\x02\x02', '\x02\u0182\u0180\x03\x02\x02\x02\u0182\u0181\x03\x02\x02', '\x02\u0183\'\x03\x02\x02\x02\u0184\u0185\x07\x1F\x02', '\x02\u0185\u0186\x052\x1A\x02\u0186)\x03\x02\x02\x02', '\u0187\u0190\x07r\x02\x02\u0188\u0190\x07w\x02\x02\u0189', '\u0190\x07t\x02\x02\u018A\u0190\x07v\x02\x02\u018B\u0190', '\x07x\x02\x02\u018C\u0190\x05L\'\x02\u018D\u0190\x05"\x12', '\x02\u018E\u0190\x05\xB0Y\x02\u018F\u0187\x03\x02\x02', '\x02\u018F\u0188\x03\x02\x02\x02\u018F\u0189\x03\x02\x02', '\x02\u018F\u018A\x03\x02\x02\x02\u018F\u018B\x03\x02\x02', '\x02\u018F\u018C\x03\x02\x02\x02\u018F\u018D\x03\x02\x02', '\x02\u018F\u018E\x03\x02\x02\x02\u0190\u0193\x03\x02\x02', '\x02\u0191\u018F\x03\x02\x02\x02\u0191\u0192\x03\x02\x02', '\x02\u0192+\x03\x02\x02\x02\u0193\u0191\x03\x02\x02', '\x02\u0194\u0195\x07 \x02\x02\u0195\u0196\x05\xAEX\x02', '\u0196\u0198\x056\x1C\x02\u0197\u0199\x07l\x02\x02\u0198', '\u0197\x03\x02\x02\x02\u0198\u0199\x03\x02\x02\x02\u0199', '\u019A\x03\x02\x02\x02\u019A\u019B\x07\x04\x02\x02\u019B', '-\x03\x02\x02\x02\u019C\u019D\x05\xAEX\x02\u019D/\x03', '\x02\x02\x02\u019E\u019F\x07!\x02\x02\u019F\u01A0\x05', '\xAEX\x02\u01A0\u01A2\x07\x10\x02\x02\u01A1\u01A3\x05', '.\x18\x02\u01A2\u01A1\x03\x02\x02\x02\u01A2\u01A3\x03', '\x02\x02\x02\u01A3\u01A8\x03\x02\x02\x02\u01A4\u01A5\x07', '\x11\x02\x02\u01A5\u01A7\x05.\x18\x02\u01A6\u01A4\x03', '\x02\x02\x02\u01A7\u01AA\x03\x02\x02\x02\u01A8\u01A6\x03', '\x02\x02\x02\u01A8\u01A9\x03\x02\x02\x02\u01A9\u01AB\x03', '\x02\x02\x02\u01AA\u01A8\x03\x02\x02\x02\u01AB\u01AC\x07', '\x12\x02\x02\u01AC1\x03\x02\x02\x02\u01AD\u01B6\x07', '\x18\x02\x02\u01AE\u01B3\x054\x1B\x02\u01AF\u01B0\x07', '\x11\x02\x02\u01B0\u01B2\x054\x1B\x02\u01B1\u01AF\x03', '\x02\x02\x02\u01B2\u01B5\x03\x02\x02\x02\u01B3\u01B1\x03', '\x02\x02\x02\u01B3\u01B4\x03\x02\x02\x02\u01B4\u01B7\x03', '\x02\x02\x02\u01B5\u01B3\x03\x02\x02\x02\u01B6\u01AE\x03', '\x02\x02\x02\u01B6\u01B7\x03\x02\x02\x02\u01B7\u01B8\x03', '\x02\x02\x02\u01B8\u01B9\x07\x19\x02\x02\u01B93\x03', '\x02\x02\x02\u01BA\u01BC\x05@!\x02\u01BB\u01BD\x05J&\x02', '\u01BC\u01BB\x03\x02\x02\x02\u01BC\u01BD\x03\x02\x02\x02', '\u01BD\u01BF\x03\x02\x02\x02\u01BE\u01C0\x05\xAEX\x02', '\u01BF\u01BE\x03\x02\x02\x02\u01BF\u01C0\x03\x02\x02\x02', '\u01C05\x03\x02\x02\x02\u01C1\u01CA\x07\x18\x02\x02', '\u01C2\u01C7\x058\x1D\x02\u01C3\u01C4\x07\x11\x02\x02', '\u01C4\u01C6\x058\x1D\x02\u01C5\u01C3\x03\x02\x02\x02', '\u01C6\u01C9\x03\x02\x02\x02\u01C7\u01C5\x03\x02\x02\x02', '\u01C7\u01C8\x03\x02\x02\x02\u01C8\u01CB\x03\x02\x02\x02', '\u01C9\u01C7\x03\x02\x02\x02\u01CA\u01C2\x03\x02\x02\x02', '\u01CA\u01CB\x03\x02\x02\x02\u01CB\u01CC\x03\x02\x02\x02', '\u01CC\u01CD\x07\x19\x02\x02\u01CD7\x03\x02\x02\x02', '\u01CE\u01D0\x05@!\x02\u01CF\u01D1\x07s\x02\x02\u01D0\u01CF', '\x03\x02\x02\x02\u01D0\u01D1\x03\x02\x02\x02\u01D1\u01D3', '\x03\x02\x02\x02\u01D2\u01D4\x05\xAEX\x02\u01D3\u01D2', '\x03\x02\x02\x02\u01D3\u01D4\x03\x02\x02\x02\u01D49', '\x03\x02\x02\x02\u01D5\u01DE\x07\x18\x02\x02\u01D6\u01DB', '\x05<\x1F\x02\u01D7\u01D8\x07\x11\x02\x02\u01D8\u01DA', '\x05<\x1F\x02\u01D9\u01D7\x03\x02\x02\x02\u01DA\u01DD', '\x03\x02\x02\x02\u01DB\u01D9\x03\x02\x02\x02\u01DB\u01DC', '\x03\x02\x02\x02\u01DC\u01DF\x03\x02\x02\x02\u01DD\u01DB', '\x03\x02\x02\x02\u01DE\u01D6\x03\x02\x02\x02\u01DE\u01DF', '\x03\x02\x02\x02\u01DF\u01E0\x03\x02\x02\x02\u01E0\u01E1', '\x07\x19\x02\x02\u01E1;\x03\x02\x02\x02\u01E2\u01E4', '\x05@!\x02\u01E3\u01E5\x05J&\x02\u01E4\u01E3\x03\x02\x02', '\x02\u01E4\u01E5\x03\x02\x02\x02\u01E5=\x03\x02\x02', '\x02\u01E6\u01E8\x05@!\x02\u01E7\u01E9\x05J&\x02\u01E8\u01E7', '\x03\x02\x02\x02\u01E8\u01E9\x03\x02\x02\x02\u01E9\u01EA', '\x03\x02\x02\x02\u01EA\u01EB\x05\xAEX\x02\u01EB?\x03', '\x02\x02\x02\u01EC\u01ED\b!\x01\x02\u01ED\u01F4\x05t;\x02', '\u01EE\u01F4\x05B"\x02\u01EF\u01F4\x05F$\x02\u01F0\u01F4\x05', 'H%\x02\u01F1\u01F2\x07$\x02\x02\u01F2\u01F4\x07u\x02\x02', '\u01F3\u01EC\x03\x02\x02\x02\u01F3\u01EE\x03\x02\x02\x02', '\u01F3\u01EF\x03\x02\x02\x02\u01F3\u01F0\x03\x02\x02\x02', '\u01F3\u01F1\x03\x02\x02\x02\u01F4\u01FD\x03\x02\x02\x02', '\u01F5\u01F6\f\x05\x02\x02\u01F6\u01F8\x07"\x02\x02\u01F7', '\u01F9\x05v<\x02\u01F8\u01F7\x03\x02\x02\x02\u01F8\u01F9', '\x03\x02\x02\x02\u01F9\u01FA\x03\x02\x02\x02\u01FA\u01FC', '\x07#\x02\x02\u01FB\u01F5\x03\x02\x02\x02\u01FC\u01FF', '\x03\x02\x02\x02\u01FD\u01FB\x03\x02\x02\x02\u01FD\u01FE', '\x03\x02\x02\x02\u01FEA\x03\x02\x02\x02\u01FF\u01FD', '\x03\x02\x02\x02\u0200\u0205\x05\xAEX\x02\u0201\u0202', '\x07%\x02\x02\u0202\u0204\x05\xAEX\x02\u0203\u0201\x03', '\x02\x02\x02\u0204\u0207\x03\x02\x02\x02\u0205\u0203\x03', '\x02\x02\x02\u0205\u0206\x03\x02\x02\x02\u0206C\x03', '\x02\x02\x02\u0207\u0205\x03\x02\x02\x02\u0208\u020B\x05', 't;\x02\u0209\u020B\x05B"\x02\u020A\u0208\x03\x02\x02\x02', '\u020A\u0209\x03\x02\x02\x02\u020BE\x03\x02\x02\x02', '\u020C\u020D\x07&\x02\x02\u020D\u020E\x07\x18\x02\x02', '\u020E\u020F\x05D#\x02\u020F\u0210\x07\'\x02\x02\u0210\u0211', '\x05@!\x02\u0211\u0212\x07\x19\x02\x02\u0212G\x03\x02', '\x02\x02\u0213\u0214\x07\x1E\x02\x02\u0214\u021A\x05:', '\x1E\x02\u0215\u0219\x07t\x02\x02\u0216\u0219\x07r\x02', '\x02\u0217\u0219\x05L\'\x02\u0218\u0215\x03\x02\x02\x02', '\u0218\u0216\x03\x02\x02\x02\u0218\u0217\x03\x02\x02\x02', '\u0219\u021C\x03\x02\x02\x02\u021A\u0218\x03\x02\x02\x02', '\u021A\u021B\x03\x02\x02\x02\u021B\u021F\x03\x02\x02\x02', '\u021C\u021A\x03\x02\x02\x02\u021D\u021E\x07\x1F\x02\x02', '\u021E\u0220\x05:\x1E\x02\u021F\u021D\x03\x02\x02\x02', '\u021F\u0220\x03\x02\x02\x02\u0220I\x03\x02\x02\x02', '\u0221\u0222\t\x04\x02\x02\u0222K\x03\x02\x02\x02\u0223', '\u0224\t\x05\x02\x02\u0224M\x03\x02\x02\x02\u0225\u0229', '\x07\x10\x02\x02\u0226\u0228\x05P)\x02\u0227\u0226\x03', '\x02\x02\x02\u0228\u022B\x03\x02\x02\x02\u0229\u0227\x03', '\x02\x02\x02\u0229\u022A\x03\x02\x02\x02\u022A\u022C\x03', '\x02\x02\x02\u022B\u0229\x03\x02\x02\x02\u022C\u022D\x07', '\x12\x02\x02\u022DO\x03\x02\x02\x02\u022E\u023C\x05', 'T+\x02\u022F\u023C\x05V,\x02\u0230\u023C\x05Z.\x02\u0231\u023C', '\x05^0\x02\u0232\u023C\x05N(\x02\u0233\u023C\x05`1\x02\u0234', '\u023C\x05b2\x02\u0235\u023C\x05d3\x02\u0236\u023C\x05f4\x02', '\u0237\u023C\x05h5\x02\u0238\u023C\x05j6\x02\u0239\u023C\x05', 'l7\x02\u023A\u023C\x05\\/\x02\u023B\u022E\x03\x02\x02\x02', '\u023B\u022F\x03\x02\x02\x02\u023B\u0230\x03\x02\x02\x02', '\u023B\u0231\x03\x02\x02\x02\u023B\u0232\x03\x02\x02\x02', '\u023B\u0233\x03\x02\x02\x02\u023B\u0234\x03\x02\x02\x02', '\u023B\u0235\x03\x02\x02\x02\u023B\u0236\x03\x02\x02\x02', '\u023B\u0237\x03\x02\x02\x02\u023B\u0238\x03\x02\x02\x02', '\u023B\u0239\x03\x02\x02\x02\u023B\u023A\x03\x02\x02\x02', '\u023CQ\x03\x02\x02\x02\u023D\u023E\x05v<\x02\u023E\u023F', '\x07\x04\x02\x02\u023FS\x03\x02\x02\x02\u0240\u0241', '\x07+\x02\x02\u0241\u0242\x07\x18\x02\x02\u0242\u0243', '\x05v<\x02\u0243\u0244\x07\x19\x02\x02\u0244\u0247\x05', 'P)\x02\u0245\u0246\x07,\x02\x02\u0246\u0248\x05P)\x02\u0247', '\u0245\x03\x02\x02\x02\u0247\u0248\x03\x02\x02\x02\u0248', 'U\x03\x02\x02\x02\u0249\u024A\x07-\x02\x02\u024A\u024C', '\x05v<\x02\u024B\u024D\x05(\x15\x02\u024C\u024B\x03\x02', '\x02\x02\u024C\u024D\x03\x02\x02\x02\u024D\u024E\x03\x02', '\x02\x02\u024E\u0250\x05N(\x02\u024F\u0251\x05X-\x02\u0250', '\u024F\x03\x02\x02\x02\u0251\u0252\x03\x02\x02\x02\u0252', '\u0250\x03\x02\x02\x02\u0252\u0253\x03\x02\x02\x02\u0253', 'W\x03\x02\x02\x02\u0254\u0259\x07.\x02\x02\u0255\u0257', '\x05\xAEX\x02\u0256\u0255\x03\x02\x02\x02\u0256\u0257', '\x03\x02\x02\x02\u0257\u0258\x03\x02\x02\x02\u0258\u025A', '\x052\x1A\x02\u0259\u0256\x03\x02\x02\x02\u0259\u025A', '\x03\x02\x02\x02\u025A\u025B\x03\x02\x02\x02\u025B\u025C', '\x05N(\x02\u025CY\x03\x02\x02\x02\u025D\u025E\x07/\x02', '\x02\u025E\u025F\x07\x18\x02\x02\u025F\u0260\x05v<\x02', '\u0260\u0261\x07\x19\x02\x02\u0261\u0262\x05P)\x02\u0262', '[\x03\x02\x02\x02\u0263\u0266\x05n8\x02\u0264\u0266\x05', 'R*\x02\u0265\u0263\x03\x02\x02\x02\u0265\u0264\x03\x02', '\x02\x02\u0266]\x03\x02\x02\x02\u0267\u0268\x07\x1B', '\x02\x02\u0268\u026B\x07\x18\x02\x02\u0269\u026C\x05\\', '/\x02\u026A\u026C\x07\x04\x02\x02\u026B\u0269\x03\x02', '\x02\x02\u026B\u026A\x03\x02\x02\x02\u026C\u026F\x03\x02', '\x02\x02\u026D\u0270\x05R*\x02\u026E\u0270\x07\x04\x02', '\x02\u026F\u026D\x03\x02\x02\x02\u026F\u026E\x03\x02\x02', '\x02\u0270\u0272\x03\x02\x02\x02\u0271\u0273\x05v<\x02', '\u0272\u0271\x03\x02\x02\x02\u0272\u0273\x03\x02\x02\x02', '\u0273\u0274\x03\x02\x02\x02\u0274\u0275\x07\x19\x02\x02', '\u0275\u0276\x05P)\x02\u0276_\x03\x02\x02\x02\u0277\u0279', '\x070\x02\x02\u0278\u027A\x07\x80\x02\x02\u0279\u0278', '\x03\x02\x02\x02\u0279\u027A\x03\x02\x02\x02\u027A\u027B', '\x03\x02\x02\x02\u027B\u027C\x05\x84C\x02\u027Ca\x03', '\x02\x02\x02\u027D\u027E\x071\x02\x02\u027E\u027F\x05', 'P)\x02\u027F\u0280\x07/\x02\x02\u0280\u0281\x07\x18\x02', '\x02\u0281\u0282\x05v<\x02\u0282\u0283\x07\x19\x02\x02', '\u0283\u0284\x07\x04\x02\x02\u0284c\x03\x02\x02\x02', '\u0285\u0286\x07p\x02\x02\u0286\u0287\x07\x04\x02\x02', '\u0287e\x03\x02\x02\x02\u0288\u0289\x07m\x02\x02\u0289', '\u028A\x07\x04\x02\x02\u028Ag\x03\x02\x02\x02\u028B', '\u028D\x072\x02\x02\u028C\u028E\x05v<\x02\u028D\u028C\x03', '\x02\x02\x02\u028D\u028E\x03\x02\x02\x02\u028E\u028F\x03', '\x02\x02\x02\u028F\u0290\x07\x04\x02\x02\u0290i\x03', '\x02\x02\x02\u0291\u0292\x073\x02\x02\u0292\u0293\x07', '\x04\x02\x02\u0293k\x03\x02\x02\x02\u0294\u0295\x07', '4\x02\x02\u0295\u0296\x05\x82B\x02\u0296\u0297\x07\x04', '\x02\x02\u0297m\x03\x02\x02\x02\u0298\u0299\x075\x02', '\x02\u0299\u02A0\x05r:\x02\u029A\u02A0\x05> \x02\u029B\u029C', '\x07\x18\x02\x02\u029C\u029D\x05p9\x02\u029D\u029E\x07', '\x19\x02\x02\u029E\u02A0\x03\x02\x02\x02\u029F\u0298\x03', '\x02\x02\x02\u029F\u029A\x03\x02\x02\x02\u029F\u029B\x03', '\x02\x02\x02\u02A0\u02A3\x03\x02\x02\x02\u02A1\u02A2\x07', '\x0B\x02\x02\u02A2\u02A4\x05v<\x02\u02A3\u02A1\x03\x02', '\x02\x02\u02A3\u02A4\x03\x02\x02\x02\u02A4\u02A5\x03\x02', '\x02\x02\u02A5\u02A6\x07\x04\x02\x02\u02A6o\x03\x02', '\x02\x02\u02A7\u02A9\x05> \x02\u02A8\u02A7\x03\x02\x02', '\x02\u02A8\u02A9\x03\x02\x02\x02\u02A9\u02B0\x03\x02\x02', '\x02\u02AA\u02AC\x07\x11\x02\x02\u02AB\u02AD\x05> \x02', '\u02AC\u02AB\x03\x02\x02\x02\u02AC\u02AD\x03\x02\x02\x02', '\u02AD\u02AF\x03\x02\x02\x02\u02AE\u02AA\x03\x02\x02\x02', '\u02AF\u02B2\x03\x02\x02\x02\u02B0\u02AE\x03\x02\x02\x02', '\u02B0\u02B1\x03\x02\x02\x02\u02B1q\x03\x02\x02\x02', '\u02B2\u02B0\x03\x02\x02\x02\u02B3\u02BA\x07\x18\x02\x02', '\u02B4\u02B6\x05\xAEX\x02\u02B5\u02B4\x03\x02\x02\x02', '\u02B5\u02B6\x03\x02\x02\x02\u02B6\u02B7\x03\x02\x02\x02', '\u02B7\u02B9\x07\x11\x02\x02\u02B8\u02B5\x03\x02\x02\x02', '\u02B9\u02BC\x03\x02\x02\x02\u02BA\u02B8\x03\x02\x02\x02', '\u02BA\u02BB\x03\x02\x02\x02\u02BB\u02BE\x03\x02\x02\x02', '\u02BC\u02BA\x03\x02\x02\x02\u02BD\u02BF\x05\xAEX\x02', '\u02BE\u02BD\x03\x02\x02\x02\u02BE\u02BF\x03\x02\x02\x02', '\u02BF\u02C0\x03\x02\x02\x02\u02C0\u02C1\x07\x19\x02\x02', '\u02C1s\x03\x02\x02\x02\u02C2\u02C3\t\x06\x02\x02\u02C3', 'u\x03\x02\x02\x02\u02C4\u02C5\b<\x01\x02\u02C5\u02C6\x07', ';\x02\x02\u02C6\u02D7\x05@!\x02\u02C7\u02C8\x07\x18\x02', '\x02\u02C8\u02C9\x05v<\x02\u02C9\u02CA\x07\x19\x02\x02', '\u02CA\u02D7\x03\x02\x02\x02\u02CB\u02CC\t\x07\x02\x02', '\u02CC\u02D7\x05v<\x15\u02CD\u02CE\t\b\x02\x02\u02CE\u02D7\x05', 'v<\x14\u02CF\u02D0\t\t\x02\x02\u02D0\u02D7\x05v<\x13\u02D1', '\u02D2\x07A\x02\x02\u02D2\u02D7\x05v<\x12\u02D3\u02D4\x07', '\x06\x02\x02\u02D4\u02D7\x05v<\x11\u02D5\u02D7\x05x=\x02', '\u02D6\u02C4\x03\x02\x02\x02\u02D6\u02C7\x03\x02\x02\x02', '\u02D6\u02CB\x03\x02\x02\x02\u02D6\u02CD\x03\x02\x02\x02', '\u02D6\u02CF\x03\x02\x02\x02\u02D6\u02D1\x03\x02\x02\x02', '\u02D6\u02D3\x03\x02\x02\x02\u02D6\u02D5\x03\x02\x02\x02', '\u02D7\u0323\x03\x02\x02\x02\u02D8\u02D9\f\x10\x02\x02', '\u02D9\u02DA\x07B\x02\x02\u02DA\u0322\x05v<\x11\u02DB\u02DC', '\f\x0F\x02\x02\u02DC\u02DD\t\n\x02\x02\u02DD\u0322\x05v', '<\x10\u02DE\u02DF\f\x0E\x02\x02\u02DF\u02E0\t\b\x02\x02', '\u02E0\u0322\x05v<\x0F\u02E1\u02E2\f\r\x02\x02\u02E2\u02E3\t', '\x0B\x02\x02\u02E3\u0322\x05v<\x0E\u02E4\u02E5\f\f\x02\x02', '\u02E5\u02E6\x07G\x02\x02\u02E6\u0322\x05v<\r\u02E7\u02E8\f', '\x0B\x02\x02\u02E8\u02E9\x07\x05\x02\x02\u02E9\u0322\x05', 'v<\f\u02EA\u02EB\f\n\x02\x02\u02EB\u02EC\x07H\x02\x02\u02EC', '\u0322\x05v<\x0B\u02ED\u02EE\f\t\x02\x02\u02EE\u02EF\t\f\x02', '\x02\u02EF\u0322\x05v<\n\u02F0\u02F1\f\b\x02\x02\u02F1\u02F2', '\t\r\x02\x02\u02F2\u0322\x05v<\t\u02F3\u02F4\f\x07\x02\x02', '\u02F4\u02F5\x07K\x02\x02\u02F5\u0322\x05v<\b\u02F6\u02F7\f', '\x06\x02\x02\u02F7\u02F8\x07L\x02\x02\u02F8\u0322\x05', 'v<\x07\u02F9\u02FA\f\x05\x02\x02\u02FA\u02FB\x07M\x02\x02', '\u02FB\u02FC\x05v<\x02\u02FC\u02FD\x07<\x02\x02\u02FD\u02FE', '\x05v<\x06\u02FE\u0322\x03\x02\x02\x02\u02FF\u0300\f\x04', '\x02\x02\u0300\u0301\t\x0E\x02\x02\u0301\u0322\x05v<\x05', '\u0302\u0303\f\x1D\x02\x02\u0303\u0322\t\x07\x02\x02\u0304', '\u0305\f\x1B\x02\x02\u0305\u0307\x07"\x02\x02\u0306\u0308', '\x05v<\x02\u0307\u0306\x03\x02\x02\x02\u0307\u0308\x03', '\x02\x02\x02\u0308\u0309\x03\x02\x02\x02\u0309\u0322\x07', '#\x02\x02\u030A\u030B\f\x1A\x02\x02\u030B\u030D\x07"\x02', '\x02\u030C\u030E\x05v<\x02\u030D\u030C\x03\x02\x02\x02', '\u030D\u030E\x03\x02\x02\x02\u030E\u030F\x03\x02\x02\x02', '\u030F\u0311\x07<\x02\x02\u0310\u0312\x05v<\x02\u0311\u0310', '\x03\x02\x02\x02\u0311\u0312\x03\x02\x02\x02\u0312\u0313', '\x03\x02\x02\x02\u0313\u0322\x07#\x02\x02\u0314\u0315', '\f\x19\x02\x02\u0315\u0316\x07%\x02\x02\u0316\u0322\x05', '\xAEX\x02\u0317\u0318\f\x18\x02\x02\u0318\u0319\x07\x10', '\x02\x02\u0319\u031A\x05|?\x02\u031A\u031B\x07\x12\x02', '\x02\u031B\u0322\x03\x02\x02\x02\u031C\u031D\f\x17\x02', '\x02\u031D\u031E\x07\x18\x02\x02\u031E\u031F\x05\x80A', '\x02\u031F\u0320\x07\x19\x02\x02\u0320\u0322\x03\x02\x02', '\x02\u0321\u02D8\x03\x02\x02\x02\u0321\u02DB\x03\x02\x02', '\x02\u0321\u02DE\x03\x02\x02\x02\u0321\u02E1\x03\x02\x02', '\x02\u0321\u02E4\x03\x02\x02\x02\u0321\u02E7\x03\x02\x02', '\x02\u0321\u02EA\x03\x02\x02\x02\u0321\u02ED\x03\x02\x02', '\x02\u0321\u02F0\x03\x02\x02\x02\u0321\u02F3\x03\x02\x02', '\x02\u0321\u02F6\x03\x02\x02\x02\u0321\u02F9\x03\x02\x02', '\x02\u0321\u02FF\x03\x02\x02\x02\u0321\u0302\x03\x02\x02', '\x02\u0321\u0304\x03\x02\x02\x02\u0321\u030A\x03\x02\x02', '\x02\u0321\u0314\x03\x02\x02\x02\u0321\u0317\x03\x02\x02', '\x02\u0321\u031C\x03\x02\x02\x02\u0322\u0325\x03\x02\x02', '\x02\u0323\u0321\x03\x02\x02\x02\u0323\u0324\x03\x02\x02', '\x02\u0324w\x03\x02\x02\x02\u0325\u0323\x03\x02\x02', '\x02\u0326\u0338\x07f\x02\x02\u0327\u0338\x05\xACW\x02', '\u0328\u0338\x07j\x02\x02\u0329\u0338\x05\xB2Z\x02\u032A', '\u032D\x05\xAEX\x02\u032B\u032C\x07"\x02\x02\u032C\u032E', '\x07#\x02\x02\u032D\u032B\x03\x02\x02\x02\u032D\u032E', '\x03\x02\x02\x02\u032E\u0338\x03\x02\x02\x02\u032F\u0338', '\x07z\x02\x02\u0330\u0338\x07u\x02\x02\u0331\u0338\x05', '\xA8U\x02\u0332\u0335\x05\xAAV\x02\u0333\u0334\x07"\x02', '\x02\u0334\u0336\x07#\x02\x02\u0335\u0333\x03\x02\x02', '\x02\u0335\u0336\x03\x02\x02\x02\u0336\u0338\x03\x02\x02', '\x02\u0337\u0326\x03\x02\x02\x02\u0337\u0327\x03\x02\x02', '\x02\u0337\u0328\x03\x02\x02\x02\u0337\u0329\x03\x02\x02', '\x02\u0337\u032A\x03\x02\x02\x02\u0337\u032F\x03\x02\x02', '\x02\u0337\u0330\x03\x02\x02\x02\u0337\u0331\x03\x02\x02', '\x02\u0337\u0332\x03\x02\x02\x02\u0338y\x03\x02\x02', '\x02\u0339\u033E\x05v<\x02\u033A\u033B\x07\x11\x02\x02', '\u033B\u033D\x05v<\x02\u033C\u033A\x03\x02\x02\x02\u033D', '\u0340\x03\x02\x02\x02\u033E\u033C\x03\x02\x02\x02\u033E', '\u033F\x03\x02\x02\x02\u033F{\x03\x02\x02\x02\u0340', '\u033E\x03\x02\x02\x02\u0341\u0346\x05~@\x02\u0342\u0343', '\x07\x11\x02\x02\u0343\u0345\x05~@\x02\u0344\u0342\x03', '\x02\x02\x02\u0345\u0348\x03\x02\x02\x02\u0346\u0344\x03', '\x02\x02\x02\u0346\u0347\x03\x02\x02\x02\u0347\u034A\x03', '\x02\x02\x02\u0348\u0346\x03\x02\x02\x02\u0349\u034B\x07', '\x11\x02\x02\u034A\u0349\x03\x02\x02\x02\u034A\u034B\x03', '\x02\x02\x02\u034B}\x03\x02\x02\x02\u034C\u034D\x05', '\xAEX\x02\u034D\u034E\x07<\x02\x02\u034E\u034F\x05v<\x02', '\u034F\x7F\x03\x02\x02\x02\u0350\u0352\x07\x10\x02\x02', '\u0351\u0353\x05|?\x02\u0352\u0351\x03\x02\x02\x02\u0352', '\u0353\x03\x02\x02\x02\u0353\u0354\x03\x02\x02\x02\u0354', '\u0359\x07\x12\x02\x02\u0355\u0357\x05z>\x02\u0356\u0355', '\x03\x02\x02\x02\u0356\u0357\x03\x02\x02\x02\u0357\u0359', '\x03\x02\x02\x02\u0358\u0350\x03\x02\x02\x02\u0358\u0356', '\x03\x02\x02\x02\u0359\x81\x03\x02\x02\x02\u035A\u035B', '\x05v<\x02\u035B\u035C\x07\x18\x02\x02\u035C\u035D\x05', '\x80A\x02\u035D\u035E\x07\x19\x02\x02\u035E\x83\x03', '\x02\x02\x02\u035F\u0363\x07\x10\x02\x02\u0360\u0362\x05', '\x86D\x02\u0361\u0360\x03\x02\x02\x02\u0362\u0365\x03', '\x02\x02\x02\u0363\u0361\x03\x02\x02\x02\u0363\u0364\x03', '\x02\x02\x02\u0364\u0366\x03\x02\x02\x02\u0365\u0363\x03', '\x02\x02\x02\u0366\u0367\x07\x12\x02\x02\u0367\x85\x03', '\x02\x02\x02\u0368\u037B\x05\xAEX\x02\u0369\u037B\x05', '\x84C\x02\u036A\u037B\x05\x88E\x02\u036B\u037B\x05\x8C', 'G\x02\u036C\u037B\x05\x8EH\x02\u036D\u037B\x05\x94K\x02', '\u036E\u037B\x05\x96L\x02\u036F\u037B\x05\x98M\x02\u0370', '\u037B\x05\x9CO\x02\u0371\u037B\x05\xA0Q\x02\u0372\u037B', '\x05\xA2R\x02\u0373\u037B\x07m\x02\x02\u0374\u037B\x07', 'p\x02\x02\u0375\u037B\x07q\x02\x02\u0376\u037B\x05\xA6', 'T\x02\u0377\u037B\x05\xACW\x02\u0378\u037B\x05\xB2Z\x02', '\u0379\u037B\x07j\x02\x02\u037A\u0368\x03\x02\x02\x02', '\u037A\u0369\x03\x02\x02\x02\u037A\u036A\x03\x02\x02\x02', '\u037A\u036B\x03\x02\x02\x02\u037A\u036C\x03\x02\x02\x02', '\u037A\u036D\x03\x02\x02\x02\u037A\u036E\x03\x02\x02\x02', '\u037A\u036F\x03\x02\x02\x02\u037A\u0370\x03\x02\x02\x02', '\u037A\u0371\x03\x02\x02\x02\u037A\u0372\x03\x02\x02\x02', '\u037A\u0373\x03\x02\x02\x02\u037A\u0374\x03\x02\x02\x02', '\u037A\u0375\x03\x02\x02\x02\u037A\u0376\x03\x02\x02\x02', '\u037A\u0377\x03\x02\x02\x02\u037A\u0378\x03\x02\x02\x02', '\u037A\u0379\x03\x02\x02\x02\u037B\x87\x03\x02\x02\x02', '\u037C\u037F\x05\x8AF\x02\u037D\u037F\x05\xA4S\x02\u037E', '\u037C\x03\x02\x02\x02\u037E\u037D\x03\x02\x02\x02\u037F', '\x89\x03\x02\x02\x02\u0380\u0385\x072\x02\x02\u0381', '\u0385\x07$\x02\x02\u0382\u0385\x078\x02\x02\u0383\u0385', '\x05\xAEX\x02\u0384\u0380\x03\x02\x02\x02\u0384\u0381', '\x03\x02\x02\x02\u0384\u0382\x03\x02\x02\x02\u0384\u0383', '\x03\x02\x02\x02\u0385\u0392\x03\x02\x02\x02\u0386\u0388', '\x07\x18\x02\x02\u0387\u0389\x05\x88E\x02\u0388\u0387', '\x03\x02\x02\x02\u0388\u0389\x03\x02\x02\x02\u0389\u038E', '\x03\x02\x02\x02\u038A\u038B\x07\x11\x02\x02\u038B\u038D', '\x05\x88E\x02\u038C\u038A\x03\x02\x02\x02\u038D\u0390', '\x03\x02\x02\x02\u038E\u038C\x03\x02\x02\x02\u038E\u038F', '\x03\x02\x02\x02\u038F\u0391\x03\x02\x02\x02\u0390\u038E', '\x03\x02\x02\x02\u0391\u0393\x07\x19\x02\x02\u0392\u0386', '\x03\x02\x02\x02\u0392\u0393\x03\x02\x02\x02\u0393\x8B', '\x03\x02\x02\x02\u0394\u0395\x07X\x02\x02\u0395\u0398', '\x05\x90I\x02\u0396\u0397\x07Y\x02\x02\u0397\u0399\x05', '\x88E\x02\u0398\u0396\x03\x02\x02\x02\u0398\u0399\x03', '\x02\x02\x02\u0399\x8D\x03\x02\x02\x02\u039A\u039B\x05', '\x90I\x02\u039B\u039C\x07Y\x02\x02\u039C\u039D\x05\x88', 'E\x02\u039D\x8F\x03\x02\x02\x02\u039E\u03A4\x05\xAE', 'X\x02\u039F\u03A0\x07\x18\x02\x02\u03A0\u03A1\x05\x92', 'J\x02\u03A1\u03A2\x07\x19\x02\x02\u03A2\u03A4\x03\x02', '\x02\x02\u03A3\u039E\x03\x02\x02\x02\u03A3\u039F\x03\x02', '\x02\x02\u03A4\x91\x03\x02\x02\x02\u03A5\u03AA\x05\xAE', 'X\x02\u03A6\u03A7\x07\x11\x02\x02\u03A7\u03A9\x05\xAE', 'X\x02\u03A8\u03A6\x03\x02\x02\x02\u03A9\u03AC\x03\x02', '\x02\x02\u03AA\u03A8\x03\x02\x02\x02\u03AA\u03AB\x03\x02', '\x02\x02\u03AB\x93\x03\x02\x02\x02\u03AC\u03AA\x03\x02', '\x02\x02\u03AD\u03AE\x07Z\x02\x02\u03AE\u03AF\x05\xAE', 'X\x02\u03AF\x95\x03\x02\x02\x02\u03B0\u03B1\x05\xAE', 'X\x02\u03B1\u03B2\x07<\x02\x02\u03B2\x97\x03\x02\x02', '\x02\u03B3\u03B4\x07[\x02\x02\u03B4\u03B8\x05\x88E\x02', '\u03B5\u03B7\x05\x9AN\x02\u03B6\u03B5\x03\x02\x02\x02', '\u03B7\u03BA\x03\x02\x02\x02\u03B8\u03B6\x03\x02\x02\x02', '\u03B8\u03B9\x03\x02\x02\x02\u03B9\x99\x03\x02\x02\x02', '\u03BA\u03B8\x03\x02\x02\x02\u03BB\u03BC\x07\\\x02\x02', '\u03BC\u03BD\x05\xA4S\x02\u03BD\u03BE\x05\x84C\x02\u03BE', '\u03C2\x03\x02\x02\x02\u03BF\u03C0\x07]\x02\x02\u03C0', '\u03C2\x05\x84C\x02\u03C1\u03BB\x03\x02\x02\x02\u03C1', '\u03BF\x03\x02\x02\x02\u03C2\x9B\x03\x02\x02\x02\u03C3', '\u03C4\x07\x1E\x02\x02\u03C4\u03C5\x05\xAEX\x02\u03C5', '\u03C7\x07\x18\x02\x02\u03C6\u03C8\x05\x92J\x02\u03C7', '\u03C6\x03\x02\x02\x02\u03C7\u03C8\x03\x02\x02\x02\u03C8', '\u03C9\x03\x02\x02\x02\u03C9\u03CB\x07\x19\x02\x02\u03CA', '\u03CC\x05\x9EP\x02\u03CB\u03CA\x03\x02\x02\x02\u03CB', '\u03CC\x03\x02\x02\x02\u03CC\u03CD\x03\x02\x02\x02\u03CD', '\u03CE\x05\x84C\x02\u03CE\x9D\x03\x02\x02\x02\u03CF', '\u03D0\x07^\x02\x02\u03D0\u03D1\x05\x92J\x02\u03D1\x9F', '\x03\x02\x02\x02\u03D2\u03D5\x07\x1B\x02\x02\u03D3\u03D6', '\x05\x84C\x02\u03D4\u03D6\x05\x88E\x02\u03D5\u03D3\x03', '\x02\x02\x02\u03D5\u03D4\x03\x02\x02\x02\u03D6\u03D7\x03', '\x02\x02\x02\u03D7\u03DA\x05\x88E\x02\u03D8\u03DB\x05', '\x84C\x02\u03D9\u03DB\x05\x88E\x02\u03DA\u03D8\x03\x02', '\x02\x02\u03DA\u03D9\x03\x02\x02\x02\u03DB\u03DC\x03\x02', '\x02\x02\u03DC\u03DD\x05\x84C\x02\u03DD\xA1\x03\x02', '\x02\x02\u03DE\u03DF\x07+\x02\x02\u03DF\u03E0\x05\x88', 'E\x02\u03E0\u03E1\x05\x84C\x02\u03E1\xA3\x03\x02\x02', '\x02\u03E2\u03E7\x05\xB2Z\x02\u03E3\u03E7\x07g\x02\x02', '\u03E4\u03E7\x07h\x02\x02\u03E5\u03E7\x07j\x02\x02\u03E6', '\u03E2\x03\x02\x02\x02\u03E6\u03E3\x03\x02\x02\x02\u03E6', '\u03E4\x03\x02\x02\x02\u03E6\u03E5\x03\x02\x02\x02\u03E7', '\xA5\x03\x02\x02\x02\u03E8\u03E9\x070\x02\x02\u03E9', '\u03EA\x05\xAEX\x02\u03EA\u03EB\x05\x84C\x02\u03EB\xA7', '\x03\x02\x02\x02\u03EC\u03EE\x07\x18\x02\x02\u03ED\u03EF', '\x05v<\x02\u03EE\u03ED\x03\x02\x02\x02\u03EE\u03EF\x03', '\x02\x02\x02\u03EF\u03F6\x03\x02\x02\x02\u03F0\u03F2\x07', '\x11\x02\x02\u03F1\u03F3\x05v<\x02\u03F2\u03F1\x03\x02', '\x02\x02\u03F2\u03F3\x03\x02\x02\x02\u03F3\u03F5\x03\x02', '\x02\x02\u03F4\u03F0\x03\x02\x02\x02\u03F5\u03F8\x03\x02', '\x02\x02\u03F6\u03F4\x03\x02\x02\x02\u03F6\u03F7\x03\x02', '\x02\x02\u03F7\u03F9\x03\x02\x02\x02\u03F8\u03F6\x03\x02', '\x02\x02\u03F9\u0407\x07\x19\x02\x02\u03FA\u0403\x07"', '\x02\x02\u03FB\u0400\x05v<\x02\u03FC\u03FD\x07\x11\x02', '\x02\u03FD\u03FF\x05v<\x02\u03FE\u03FC\x03\x02\x02\x02', '\u03FF\u0402\x03\x02\x02\x02\u0400\u03FE\x03\x02\x02\x02', '\u0400\u0401\x03\x02\x02\x02\u0401\u0404\x03\x02\x02\x02', '\u0402\u0400\x03\x02\x02\x02\u0403\u03FB\x03\x02\x02\x02', '\u0403\u0404\x03\x02\x02\x02\u0404\u0405\x03\x02\x02\x02', '\u0405\u0407\x07#\x02\x02\u0406\u03EC\x03\x02\x02\x02', '\u0406\u03FA\x03\x02\x02\x02\u0407\xA9\x03\x02\x02\x02', '\u0408\u040B\x05t;\x02\u0409\u040B\x05B"\x02\u040A\u0408\x03', '\x02\x02\x02\u040A\u0409\x03\x02\x02\x02\u040B\xAB\x03', '\x02\x02\x02\u040C\u040E\t\x0F\x02\x02\u040D\u040F\x07', 'i\x02\x02\u040E\u040D\x03\x02\x02\x02\u040E\u040F\x03', '\x02\x02\x02\u040F\xAD\x03\x02\x02\x02\u0410\u0411\t', '\x10\x02\x02\u0411\xAF\x03\x02\x02\x02\u0412\u041E\x07', '`\x02\x02\u0413\u0414\x07\x18\x02\x02\u0414\u0419\x05', 'B"\x02\u0415\u0416\x07\x11\x02\x02\u0416\u0418\x05B"\x02', '\u0417\u0415\x03\x02\x02\x02\u0418\u041B\x03\x02\x02\x02', '\u0419\u0417\x03\x02\x02\x02\u0419\u041A\x03\x02\x02\x02', '\u041A\u041C\x03\x02\x02\x02\u041B\u0419\x03\x02\x02\x02', '\u041C\u041D\x07\x19\x02\x02\u041D\u041F\x03\x02\x02\x02', '\u041E\u0413\x03\x02\x02\x02\u041E\u041F\x03\x02\x02\x02', '\u041F\xB1\x03\x02\x02\x02\u0420\u0422\x07\x80\x02\x02', '\u0421\u0420\x03\x02\x02\x02\u0422\u0423\x03\x02\x02\x02', '\u0423\u0421\x03\x02\x02\x02\u0423\u0424\x03\x02\x02\x02', '\u0424\xB3\x03\x02\x02\x02~\xB9\xBB\xC9\xCD\xD2', '\xD6\xD9\xDE\xE4\xEA\xEE\xFA\u0102\u0105\u010F\u0112\u0118', '\u0120\u0123\u012C\u0135\u0137\u013D\u0146\u0154\u0157\u015E\u0162\u0164', '\u016C\u016F\u0175\u0179\u017D\u0182\u018F\u0191\u0198\u01A2\u01A8\u01B3', '\u01B6\u01BC\u01BF\u01C7\u01CA\u01D0\u01D3\u01DB\u01DE\u01E4\u01E8\u01F3', '\u01F8\u01FD\u0205\u020A\u0218\u021A\u021F\u0229\u023B\u0247\u024C\u0252', '\u0256\u0259\u0265\u026B\u026F\u0272\u0279\u028D\u029F\u02A3\u02A8\u02AC', '\u02B0\u02B5\u02BA\u02BE\u02D6\u0307\u030D\u0311\u0321\u0323\u032D\u0335', '\u0337\u033E\u0346\u034A\u0352\u0356\u0358\u0363\u037A\u037E\u0384\u0388', '\u038E\u0392\u0398\u03A3\u03AA\u03B8\u03C1\u03C7\u03CB\u03D5\u03DA\u03E6', '\u03EE\u03F2\u03F6\u0400\u0403\u0406\u040A\u040E\u0419\u041E\u0423'].join("");

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
});

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [null, "'pragma'", "';'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", "'interface'", "'library'", "'is'", "'('", "')'", "'using'", "'for'", "'struct'", "'modifier'", "'function'", "'returns'", "'event'", "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'try'", "'catch'", "'while'", "'assembly'", "'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", "'->'", "'callback'", "'override'", null, null, null, null, null, null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", "'immutable'", "'continue'", "'leave'", "'external'", "'indexed'", "'internal'", "'payable'", "'private'", "'public'", "'virtual'", "'pure'", "'type'", "'view'", "'constructor'", "'fallback'", "'receive'"];

var symbolicNames = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Int", "Uint", "Byte", "Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", "PrivateKeyword", "PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", "Identifier", "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", "LINE_COMMENT"];

var ruleNames = ["sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", "versionOperator", "versionConstraint", "importDeclaration", "importDirective", "contractDefinition", "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", "usingForDeclaration", "structDefinition", "modifierDefinition", "modifierInvocation", "functionDefinition", "functionDescriptor", "returnParameters", "modifierList", "eventDefinition", "enumValue", "enumDefinition", "parameterList", "parameter", "eventParameterList", "eventParameter", "functionTypeParameterList", "functionTypeParameter", "variableDeclaration", "typeName", "userDefinedTypeName", "mappingKey", "mapping", "functionTypeName", "storageLocation", "stateMutability", "block", "statement", "expressionStatement", "ifStatement", "tryStatement", "catchClause", "whileStatement", "simpleStatement", "forStatement", "inlineAssemblyStatement", "doWhileStatement", "continueStatement", "breakStatement", "returnStatement", "throwStatement", "emitStatement", "variableDeclarationStatement", "variableDeclarationList", "identifierList", "elementaryTypeName", "expression", "primaryExpression", "expressionList", "nameValueList", "nameValue", "functionCallArguments", "functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition", "assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", "tupleExpression", "typeNameExpression", "numberLiteral", "identifier", "overrideSpecifier", "stringLiteral"];

function SolidityParser(input) {
    antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SolidityParser.prototype = Object.create(antlr4.Parser.prototype);
SolidityParser.prototype.constructor = SolidityParser;

Object.defineProperty(SolidityParser.prototype, "atn", {
    get: function get() {
        return atn;
    }
});

SolidityParser.EOF = antlr4.Token.EOF;
SolidityParser.T__0 = 1;
SolidityParser.T__1 = 2;
SolidityParser.T__2 = 3;
SolidityParser.T__3 = 4;
SolidityParser.T__4 = 5;
SolidityParser.T__5 = 6;
SolidityParser.T__6 = 7;
SolidityParser.T__7 = 8;
SolidityParser.T__8 = 9;
SolidityParser.T__9 = 10;
SolidityParser.T__10 = 11;
SolidityParser.T__11 = 12;
SolidityParser.T__12 = 13;
SolidityParser.T__13 = 14;
SolidityParser.T__14 = 15;
SolidityParser.T__15 = 16;
SolidityParser.T__16 = 17;
SolidityParser.T__17 = 18;
SolidityParser.T__18 = 19;
SolidityParser.T__19 = 20;
SolidityParser.T__20 = 21;
SolidityParser.T__21 = 22;
SolidityParser.T__22 = 23;
SolidityParser.T__23 = 24;
SolidityParser.T__24 = 25;
SolidityParser.T__25 = 26;
SolidityParser.T__26 = 27;
SolidityParser.T__27 = 28;
SolidityParser.T__28 = 29;
SolidityParser.T__29 = 30;
SolidityParser.T__30 = 31;
SolidityParser.T__31 = 32;
SolidityParser.T__32 = 33;
SolidityParser.T__33 = 34;
SolidityParser.T__34 = 35;
SolidityParser.T__35 = 36;
SolidityParser.T__36 = 37;
SolidityParser.T__37 = 38;
SolidityParser.T__38 = 39;
SolidityParser.T__39 = 40;
SolidityParser.T__40 = 41;
SolidityParser.T__41 = 42;
SolidityParser.T__42 = 43;
SolidityParser.T__43 = 44;
SolidityParser.T__44 = 45;
SolidityParser.T__45 = 46;
SolidityParser.T__46 = 47;
SolidityParser.T__47 = 48;
SolidityParser.T__48 = 49;
SolidityParser.T__49 = 50;
SolidityParser.T__50 = 51;
SolidityParser.T__51 = 52;
SolidityParser.T__52 = 53;
SolidityParser.T__53 = 54;
SolidityParser.T__54 = 55;
SolidityParser.T__55 = 56;
SolidityParser.T__56 = 57;
SolidityParser.T__57 = 58;
SolidityParser.T__58 = 59;
SolidityParser.T__59 = 60;
SolidityParser.T__60 = 61;
SolidityParser.T__61 = 62;
SolidityParser.T__62 = 63;
SolidityParser.T__63 = 64;
SolidityParser.T__64 = 65;
SolidityParser.T__65 = 66;
SolidityParser.T__66 = 67;
SolidityParser.T__67 = 68;
SolidityParser.T__68 = 69;
SolidityParser.T__69 = 70;
SolidityParser.T__70 = 71;
SolidityParser.T__71 = 72;
SolidityParser.T__72 = 73;
SolidityParser.T__73 = 74;
SolidityParser.T__74 = 75;
SolidityParser.T__75 = 76;
SolidityParser.T__76 = 77;
SolidityParser.T__77 = 78;
SolidityParser.T__78 = 79;
SolidityParser.T__79 = 80;
SolidityParser.T__80 = 81;
SolidityParser.T__81 = 82;
SolidityParser.T__82 = 83;
SolidityParser.T__83 = 84;
SolidityParser.T__84 = 85;
SolidityParser.T__85 = 86;
SolidityParser.T__86 = 87;
SolidityParser.T__87 = 88;
SolidityParser.T__88 = 89;
SolidityParser.T__89 = 90;
SolidityParser.T__90 = 91;
SolidityParser.T__91 = 92;
SolidityParser.T__92 = 93;
SolidityParser.T__93 = 94;
SolidityParser.Int = 95;
SolidityParser.Uint = 96;
SolidityParser.Byte = 97;
SolidityParser.Fixed = 98;
SolidityParser.Ufixed = 99;
SolidityParser.BooleanLiteral = 100;
SolidityParser.DecimalNumber = 101;
SolidityParser.HexNumber = 102;
SolidityParser.NumberUnit = 103;
SolidityParser.HexLiteral = 104;
SolidityParser.ReservedKeyword = 105;
SolidityParser.AnonymousKeyword = 106;
SolidityParser.BreakKeyword = 107;
SolidityParser.ConstantKeyword = 108;
SolidityParser.ImmutableKeyword = 109;
SolidityParser.ContinueKeyword = 110;
SolidityParser.LeaveKeyword = 111;
SolidityParser.ExternalKeyword = 112;
SolidityParser.IndexedKeyword = 113;
SolidityParser.InternalKeyword = 114;
SolidityParser.PayableKeyword = 115;
SolidityParser.PrivateKeyword = 116;
SolidityParser.PublicKeyword = 117;
SolidityParser.VirtualKeyword = 118;
SolidityParser.PureKeyword = 119;
SolidityParser.TypeKeyword = 120;
SolidityParser.ViewKeyword = 121;
SolidityParser.ConstructorKeyword = 122;
SolidityParser.FallbackKeyword = 123;
SolidityParser.ReceiveKeyword = 124;
SolidityParser.Identifier = 125;
SolidityParser.StringLiteralFragment = 126;
SolidityParser.VersionLiteral = 127;
SolidityParser.WS = 128;
SolidityParser.COMMENT = 129;
SolidityParser.LINE_COMMENT = 130;

SolidityParser.RULE_sourceUnit = 0;
SolidityParser.RULE_pragmaDirective = 1;
SolidityParser.RULE_pragmaName = 2;
SolidityParser.RULE_pragmaValue = 3;
SolidityParser.RULE_version = 4;
SolidityParser.RULE_versionOperator = 5;
SolidityParser.RULE_versionConstraint = 6;
SolidityParser.RULE_importDeclaration = 7;
SolidityParser.RULE_importDirective = 8;
SolidityParser.RULE_contractDefinition = 9;
SolidityParser.RULE_inheritanceSpecifier = 10;
SolidityParser.RULE_contractPart = 11;
SolidityParser.RULE_stateVariableDeclaration = 12;
SolidityParser.RULE_usingForDeclaration = 13;
SolidityParser.RULE_structDefinition = 14;
SolidityParser.RULE_modifierDefinition = 15;
SolidityParser.RULE_modifierInvocation = 16;
SolidityParser.RULE_functionDefinition = 17;
SolidityParser.RULE_functionDescriptor = 18;
SolidityParser.RULE_returnParameters = 19;
SolidityParser.RULE_modifierList = 20;
SolidityParser.RULE_eventDefinition = 21;
SolidityParser.RULE_enumValue = 22;
SolidityParser.RULE_enumDefinition = 23;
SolidityParser.RULE_parameterList = 24;
SolidityParser.RULE_parameter = 25;
SolidityParser.RULE_eventParameterList = 26;
SolidityParser.RULE_eventParameter = 27;
SolidityParser.RULE_functionTypeParameterList = 28;
SolidityParser.RULE_functionTypeParameter = 29;
SolidityParser.RULE_variableDeclaration = 30;
SolidityParser.RULE_typeName = 31;
SolidityParser.RULE_userDefinedTypeName = 32;
SolidityParser.RULE_mappingKey = 33;
SolidityParser.RULE_mapping = 34;
SolidityParser.RULE_functionTypeName = 35;
SolidityParser.RULE_storageLocation = 36;
SolidityParser.RULE_stateMutability = 37;
SolidityParser.RULE_block = 38;
SolidityParser.RULE_statement = 39;
SolidityParser.RULE_expressionStatement = 40;
SolidityParser.RULE_ifStatement = 41;
SolidityParser.RULE_tryStatement = 42;
SolidityParser.RULE_catchClause = 43;
SolidityParser.RULE_whileStatement = 44;
SolidityParser.RULE_simpleStatement = 45;
SolidityParser.RULE_forStatement = 46;
SolidityParser.RULE_inlineAssemblyStatement = 47;
SolidityParser.RULE_doWhileStatement = 48;
SolidityParser.RULE_continueStatement = 49;
SolidityParser.RULE_breakStatement = 50;
SolidityParser.RULE_returnStatement = 51;
SolidityParser.RULE_throwStatement = 52;
SolidityParser.RULE_emitStatement = 53;
SolidityParser.RULE_variableDeclarationStatement = 54;
SolidityParser.RULE_variableDeclarationList = 55;
SolidityParser.RULE_identifierList = 56;
SolidityParser.RULE_elementaryTypeName = 57;
SolidityParser.RULE_expression = 58;
SolidityParser.RULE_primaryExpression = 59;
SolidityParser.RULE_expressionList = 60;
SolidityParser.RULE_nameValueList = 61;
SolidityParser.RULE_nameValue = 62;
SolidityParser.RULE_functionCallArguments = 63;
SolidityParser.RULE_functionCall = 64;
SolidityParser.RULE_assemblyBlock = 65;
SolidityParser.RULE_assemblyItem = 66;
SolidityParser.RULE_assemblyExpression = 67;
SolidityParser.RULE_assemblyCall = 68;
SolidityParser.RULE_assemblyLocalDefinition = 69;
SolidityParser.RULE_assemblyAssignment = 70;
SolidityParser.RULE_assemblyIdentifierOrList = 71;
SolidityParser.RULE_assemblyIdentifierList = 72;
SolidityParser.RULE_assemblyStackAssignment = 73;
SolidityParser.RULE_labelDefinition = 74;
SolidityParser.RULE_assemblySwitch = 75;
SolidityParser.RULE_assemblyCase = 76;
SolidityParser.RULE_assemblyFunctionDefinition = 77;
SolidityParser.RULE_assemblyFunctionReturns = 78;
SolidityParser.RULE_assemblyFor = 79;
SolidityParser.RULE_assemblyIf = 80;
SolidityParser.RULE_assemblyLiteral = 81;
SolidityParser.RULE_subAssembly = 82;
SolidityParser.RULE_tupleExpression = 83;
SolidityParser.RULE_typeNameExpression = 84;
SolidityParser.RULE_numberLiteral = 85;
SolidityParser.RULE_identifier = 86;
SolidityParser.RULE_overrideSpecifier = 87;
SolidityParser.RULE_stringLiteral = 88;

function SourceUnitContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_sourceUnit;
    return this;
}

SourceUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceUnitContext.prototype.constructor = SourceUnitContext;

SourceUnitContext.prototype.EOF = function () {
    return this.getToken(SolidityParser.EOF, 0);
};

SourceUnitContext.prototype.pragmaDirective = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(PragmaDirectiveContext);
    } else {
        return this.getTypedRuleContext(PragmaDirectiveContext, i);
    }
};

SourceUnitContext.prototype.importDirective = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ImportDirectiveContext);
    } else {
        return this.getTypedRuleContext(ImportDirectiveContext, i);
    }
};

SourceUnitContext.prototype.contractDefinition = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ContractDefinitionContext);
    } else {
        return this.getTypedRuleContext(ContractDefinitionContext, i);
    }
};

SourceUnitContext.prototype.enumDefinition = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(EnumDefinitionContext);
    } else {
        return this.getTypedRuleContext(EnumDefinitionContext, i);
    }
};

SourceUnitContext.prototype.structDefinition = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(StructDefinitionContext);
    } else {
        return this.getTypedRuleContext(StructDefinitionContext, i);
    }
};

SourceUnitContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterSourceUnit(this);
    }
};

SourceUnitContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitSourceUnit(this);
    }
};

SolidityParser.SourceUnitContext = SourceUnitContext;

SolidityParser.prototype.sourceUnit = function () {

    var localctx = new SourceUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__0 | 1 << SolidityParser.T__10 | 1 << SolidityParser.T__16 | 1 << SolidityParser.T__17 | 1 << SolidityParser.T__18 | 1 << SolidityParser.T__19 | 1 << SolidityParser.T__25 | 1 << SolidityParser.T__30)) !== 0) {
            this.state = 183;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SolidityParser.T__0:
                    this.state = 178;
                    this.pragmaDirective();
                    break;
                case SolidityParser.T__10:
                    this.state = 179;
                    this.importDirective();
                    break;
                case SolidityParser.T__16:
                case SolidityParser.T__17:
                case SolidityParser.T__18:
                case SolidityParser.T__19:
                    this.state = 180;
                    this.contractDefinition();
                    break;
                case SolidityParser.T__30:
                    this.state = 181;
                    this.enumDefinition();
                    break;
                case SolidityParser.T__25:
                    this.state = 182;
                    this.structDefinition();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 188;
        this.match(SolidityParser.EOF);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaDirectiveContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaDirective;
    return this;
}

PragmaDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaDirectiveContext.prototype.constructor = PragmaDirectiveContext;

PragmaDirectiveContext.prototype.pragmaName = function () {
    return this.getTypedRuleContext(PragmaNameContext, 0);
};

PragmaDirectiveContext.prototype.pragmaValue = function () {
    return this.getTypedRuleContext(PragmaValueContext, 0);
};

PragmaDirectiveContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterPragmaDirective(this);
    }
};

PragmaDirectiveContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitPragmaDirective(this);
    }
};

SolidityParser.PragmaDirectiveContext = PragmaDirectiveContext;

SolidityParser.prototype.pragmaDirective = function () {

    var localctx = new PragmaDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 190;
        this.match(SolidityParser.T__0);
        this.state = 191;
        this.pragmaName();
        this.state = 192;
        this.pragmaValue();
        this.state = 193;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaName;
    return this;
}

PragmaNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaNameContext.prototype.constructor = PragmaNameContext;

PragmaNameContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

PragmaNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterPragmaName(this);
    }
};

PragmaNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitPragmaName(this);
    }
};

SolidityParser.PragmaNameContext = PragmaNameContext;

SolidityParser.prototype.pragmaName = function () {

    var localctx = new PragmaNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SolidityParser.RULE_pragmaName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 195;
        this.identifier();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaValueContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaValue;
    return this;
}

PragmaValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaValueContext.prototype.constructor = PragmaValueContext;

PragmaValueContext.prototype.version = function () {
    return this.getTypedRuleContext(VersionContext, 0);
};

PragmaValueContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

PragmaValueContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterPragmaValue(this);
    }
};

PragmaValueContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitPragmaValue(this);
    }
};

SolidityParser.PragmaValueContext = PragmaValueContext;

SolidityParser.prototype.pragmaValue = function () {

    var localctx = new PragmaValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SolidityParser.RULE_pragmaValue);
    try {
        this.state = 199;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 197;
                this.version();
                break;

            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 198;
                this.expression(0);
                break;

        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_version;
    return this;
}

VersionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionContext.prototype.constructor = VersionContext;

VersionContext.prototype.versionConstraint = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(VersionConstraintContext);
    } else {
        return this.getTypedRuleContext(VersionConstraintContext, i);
    }
};

VersionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterVersion(this);
    }
};

VersionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitVersion(this);
    }
};

SolidityParser.VersionContext = VersionContext;

SolidityParser.prototype.version = function () {

    var localctx = new VersionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SolidityParser.RULE_version);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 201;
        this.versionConstraint();
        this.state = 203;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0 || _la === SolidityParser.DecimalNumber || _la === SolidityParser.VersionLiteral) {
            this.state = 202;
            this.versionConstraint();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionOperatorContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_versionOperator;
    return this;
}

VersionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionOperatorContext.prototype.constructor = VersionOperatorContext;

VersionOperatorContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterVersionOperator(this);
    }
};

VersionOperatorContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitVersionOperator(this);
    }
};

SolidityParser.VersionOperatorContext = VersionOperatorContext;

SolidityParser.prototype.versionOperator = function () {

    var localctx = new VersionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SolidityParser.RULE_versionOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        _la = this._input.LA(1);
        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0)) {
            this._errHandler.recoverInline(this);
        } else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionConstraintContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_versionConstraint;
    return this;
}

VersionConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionConstraintContext.prototype.constructor = VersionConstraintContext;

VersionConstraintContext.prototype.VersionLiteral = function () {
    return this.getToken(SolidityParser.VersionLiteral, 0);
};

VersionConstraintContext.prototype.versionOperator = function () {
    return this.getTypedRuleContext(VersionOperatorContext, 0);
};

VersionConstraintContext.prototype.DecimalNumber = function () {
    return this.getToken(SolidityParser.DecimalNumber, 0);
};

VersionConstraintContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterVersionConstraint(this);
    }
};

VersionConstraintContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitVersionConstraint(this);
    }
};

SolidityParser.VersionConstraintContext = VersionConstraintContext;

SolidityParser.prototype.versionConstraint = function () {

    var localctx = new VersionConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SolidityParser.RULE_versionConstraint);
    var _la = 0; // Token type
    try {
        this.state = 215;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 208;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0) {
                    this.state = 207;
                    this.versionOperator();
                }

                this.state = 210;
                this.match(SolidityParser.VersionLiteral);
                break;

            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 212;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0) {
                    this.state = 211;
                    this.versionOperator();
                }

                this.state = 214;
                this.match(SolidityParser.DecimalNumber);
                break;

        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};

ImportDeclarationContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterImportDeclaration(this);
    }
};

ImportDeclarationContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitImportDeclaration(this);
    }
};

SolidityParser.ImportDeclarationContext = ImportDeclarationContext;

SolidityParser.prototype.importDeclaration = function () {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SolidityParser.RULE_importDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 217;
        this.identifier();
        this.state = 220;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__9) {
            this.state = 218;
            this.match(SolidityParser.T__9);
            this.state = 219;
            this.identifier();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDirectiveContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importDirective;
    return this;
}

ImportDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDirectiveContext.prototype.constructor = ImportDirectiveContext;

ImportDirectiveContext.prototype.StringLiteralFragment = function () {
    return this.getToken(SolidityParser.StringLiteralFragment, 0);
};

ImportDirectiveContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};

ImportDirectiveContext.prototype.importDeclaration = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ImportDeclarationContext);
    } else {
        return this.getTypedRuleContext(ImportDeclarationContext, i);
    }
};

ImportDirectiveContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterImportDirective(this);
    }
};

ImportDirectiveContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitImportDirective(this);
    }
};

SolidityParser.ImportDirectiveContext = ImportDirectiveContext;

SolidityParser.prototype.importDirective = function () {

    var localctx = new ImportDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SolidityParser.RULE_importDirective);
    var _la = 0; // Token type
    try {
        this.state = 256;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 12, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 222;
                this.match(SolidityParser.T__10);
                this.state = 223;
                this.match(SolidityParser.StringLiteralFragment);
                this.state = 226;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SolidityParser.T__9) {
                    this.state = 224;
                    this.match(SolidityParser.T__9);
                    this.state = 225;
                    this.identifier();
                }

                this.state = 228;
                this.match(SolidityParser.T__1);
                break;

            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 229;
                this.match(SolidityParser.T__10);
                this.state = 232;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case SolidityParser.T__11:
                        this.state = 230;
                        this.match(SolidityParser.T__11);
                        break;
                    case SolidityParser.T__12:
                    case SolidityParser.T__39:
                    case SolidityParser.T__92:
                    case SolidityParser.LeaveKeyword:
                    case SolidityParser.PayableKeyword:
                    case SolidityParser.ReceiveKeyword:
                    case SolidityParser.Identifier:
                        this.state = 231;
                        this.identifier();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 236;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SolidityParser.T__9) {
                    this.state = 234;
                    this.match(SolidityParser.T__9);
                    this.state = 235;
                    this.identifier();
                }

                this.state = 238;
                this.match(SolidityParser.T__12);
                this.state = 239;
                this.match(SolidityParser.StringLiteralFragment);
                this.state = 240;
                this.match(SolidityParser.T__1);
                break;

            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 241;
                this.match(SolidityParser.T__10);
                this.state = 242;
                this.match(SolidityParser.T__13);
                this.state = 243;
                this.importDeclaration();
                this.state = 248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SolidityParser.T__14) {
                    this.state = 244;
                    this.match(SolidityParser.T__14);
                    this.state = 245;
                    this.importDeclaration();
                    this.state = 250;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 251;
                this.match(SolidityParser.T__15);
                this.state = 252;
                this.match(SolidityParser.T__12);
                this.state = 253;
                this.match(SolidityParser.StringLiteralFragment);
                this.state = 254;
                this.match(SolidityParser.T__1);
                break;

        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContractDefinitionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractDefinition;
    return this;
}

ContractDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractDefinitionContext.prototype.constructor = ContractDefinitionContext;

ContractDefinitionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

ContractDefinitionContext.prototype.inheritanceSpecifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(InheritanceSpecifierContext);
    } else {
        return this.getTypedRuleContext(InheritanceSpecifierContext, i);
    }
};

ContractDefinitionContext.prototype.contractPart = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ContractPartContext);
    } else {
        return this.getTypedRuleContext(ContractPartContext, i);
    }
};

ContractDefinitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterContractDefinition(this);
    }
};

ContractDefinitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitContractDefinition(this);
    }
};

SolidityParser.ContractDefinitionContext = ContractDefinitionContext;

SolidityParser.prototype.contractDefinition = function () {

    var localctx = new ContractDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SolidityParser.RULE_contractDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__16) {
            this.state = 258;
            this.match(SolidityParser.T__16);
        }

        this.state = 261;
        _la = this._input.LA(1);
        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__17 | 1 << SolidityParser.T__18 | 1 << SolidityParser.T__19)) !== 0)) {
            this._errHandler.recoverInline(this);
        } else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 262;
        this.identifier();
        this.state = 272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__20) {
            this.state = 263;
            this.match(SolidityParser.T__20);
            this.state = 264;
            this.inheritanceSpecifier();
            this.state = 269;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SolidityParser.T__14) {
                this.state = 265;
                this.match(SolidityParser.T__14);
                this.state = 266;
                this.inheritanceSpecifier();
                this.state = 271;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 274;
        this.match(SolidityParser.T__13);
        this.state = 278;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__12 | 1 << SolidityParser.T__23 | 1 << SolidityParser.T__25 | 1 << SolidityParser.T__26 | 1 << SolidityParser.T__27 | 1 << SolidityParser.T__29 | 1 << SolidityParser.T__30)) !== 0 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ConstructorKeyword - 93 | 1 << SolidityParser.FallbackKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 275;
            this.contractPart();
            this.state = 280;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 281;
        this.match(SolidityParser.T__15);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InheritanceSpecifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;
    return this;
}

InheritanceSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritanceSpecifierContext.prototype.constructor = InheritanceSpecifierContext;

InheritanceSpecifierContext.prototype.userDefinedTypeName = function () {
    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
};

InheritanceSpecifierContext.prototype.expressionList = function () {
    return this.getTypedRuleContext(ExpressionListContext, 0);
};

InheritanceSpecifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterInheritanceSpecifier(this);
    }
};

InheritanceSpecifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitInheritanceSpecifier(this);
    }
};

SolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext;

SolidityParser.prototype.inheritanceSpecifier = function () {

    var localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 283;
        this.userDefinedTypeName();
        this.state = 289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__21) {
            this.state = 284;
            this.match(SolidityParser.T__21);
            this.state = 286;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                this.state = 285;
                this.expressionList();
            }

            this.state = 288;
            this.match(SolidityParser.T__22);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContractPartContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractPart;
    return this;
}

ContractPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractPartContext.prototype.constructor = ContractPartContext;

ContractPartContext.prototype.stateVariableDeclaration = function () {
    return this.getTypedRuleContext(StateVariableDeclarationContext, 0);
};

ContractPartContext.prototype.usingForDeclaration = function () {
    return this.getTypedRuleContext(UsingForDeclarationContext, 0);
};

ContractPartContext.prototype.structDefinition = function () {
    return this.getTypedRuleContext(StructDefinitionContext, 0);
};

ContractPartContext.prototype.modifierDefinition = function () {
    return this.getTypedRuleContext(ModifierDefinitionContext, 0);
};

ContractPartContext.prototype.functionDefinition = function () {
    return this.getTypedRuleContext(FunctionDefinitionContext, 0);
};

ContractPartContext.prototype.eventDefinition = function () {
    return this.getTypedRuleContext(EventDefinitionContext, 0);
};

ContractPartContext.prototype.enumDefinition = function () {
    return this.getTypedRuleContext(EnumDefinitionContext, 0);
};

ContractPartContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterContractPart(this);
    }
};

ContractPartContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitContractPart(this);
    }
};

SolidityParser.ContractPartContext = ContractPartContext;

SolidityParser.prototype.contractPart = function () {

    var localctx = new ContractPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SolidityParser.RULE_contractPart);
    try {
        this.state = 298;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 291;
                this.stateVariableDeclaration();
                break;

            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 292;
                this.usingForDeclaration();
                break;

            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 293;
                this.structDefinition();
                break;

            case 4:
                this.enterOuterAlt(localctx, 4);
                this.state = 294;
                this.modifierDefinition();
                break;

            case 5:
                this.enterOuterAlt(localctx, 5);
                this.state = 295;
                this.functionDefinition();
                break;

            case 6:
                this.enterOuterAlt(localctx, 6);
                this.state = 296;
                this.eventDefinition();
                break;

            case 7:
                this.enterOuterAlt(localctx, 7);
                this.state = 297;
                this.enumDefinition();
                break;

        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StateVariableDeclarationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;
    return this;
}

StateVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateVariableDeclarationContext.prototype.constructor = StateVariableDeclarationContext;

StateVariableDeclarationContext.prototype.typeName = function () {
    return this.getTypedRuleContext(TypeNameContext, 0);
};

StateVariableDeclarationContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

StateVariableDeclarationContext.prototype.PublicKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.PublicKeyword);
    } else {
        return this.getToken(SolidityParser.PublicKeyword, i);
    }
};

StateVariableDeclarationContext.prototype.InternalKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.InternalKeyword);
    } else {
        return this.getToken(SolidityParser.InternalKeyword, i);
    }
};

StateVariableDeclarationContext.prototype.PrivateKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.PrivateKeyword);
    } else {
        return this.getToken(SolidityParser.PrivateKeyword, i);
    }
};

StateVariableDeclarationContext.prototype.ConstantKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.ConstantKeyword);
    } else {
        return this.getToken(SolidityParser.ConstantKeyword, i);
    }
};

StateVariableDeclarationContext.prototype.ImmutableKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.ImmutableKeyword);
    } else {
        return this.getToken(SolidityParser.ImmutableKeyword, i);
    }
};

StateVariableDeclarationContext.prototype.overrideSpecifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
    } else {
        return this.getTypedRuleContext(OverrideSpecifierContext, i);
    }
};

StateVariableDeclarationContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

StateVariableDeclarationContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterStateVariableDeclaration(this);
    }
};

StateVariableDeclarationContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitStateVariableDeclaration(this);
    }
};

SolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext;

SolidityParser.prototype.stateVariableDeclaration = function () {

    var localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SolidityParser.RULE_stateVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 300;
        this.typeName(0);
        this.state = 309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.ConstantKeyword - 94 | 1 << SolidityParser.ImmutableKeyword - 94 | 1 << SolidityParser.InternalKeyword - 94 | 1 << SolidityParser.PrivateKeyword - 94 | 1 << SolidityParser.PublicKeyword - 94)) !== 0) {
            this.state = 307;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SolidityParser.PublicKeyword:
                    this.state = 301;
                    this.match(SolidityParser.PublicKeyword);
                    break;
                case SolidityParser.InternalKeyword:
                    this.state = 302;
                    this.match(SolidityParser.InternalKeyword);
                    break;
                case SolidityParser.PrivateKeyword:
                    this.state = 303;
                    this.match(SolidityParser.PrivateKeyword);
                    break;
                case SolidityParser.ConstantKeyword:
                    this.state = 304;
                    this.match(SolidityParser.ConstantKeyword);
                    break;
                case SolidityParser.ImmutableKeyword:
                    this.state = 305;
                    this.match(SolidityParser.ImmutableKeyword);
                    break;
                case SolidityParser.T__93:
                    this.state = 306;
                    this.overrideSpecifier();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 311;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 312;
        this.identifier();
        this.state = 315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__8) {
            this.state = 313;
            this.match(SolidityParser.T__8);
            this.state = 314;
            this.expression(0);
        }

        this.state = 317;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingForDeclarationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_usingForDeclaration;
    return this;
}

UsingForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingForDeclarationContext.prototype.constructor = UsingForDeclarationContext;

UsingForDeclarationContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

UsingForDeclarationContext.prototype.typeName = function () {
    return this.getTypedRuleContext(TypeNameContext, 0);
};

UsingForDeclarationContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterUsingForDeclaration(this);
    }
};

UsingForDeclarationContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitUsingForDeclaration(this);
    }
};

SolidityParser.UsingForDeclarationContext = UsingForDeclarationContext;

SolidityParser.prototype.usingForDeclaration = function () {

    var localctx = new UsingForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SolidityParser.RULE_usingForDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        this.match(SolidityParser.T__23);
        this.state = 320;
        this.identifier();
        this.state = 321;
        this.match(SolidityParser.T__24);
        this.state = 324;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__11:
                this.state = 322;
                this.match(SolidityParser.T__11);
                break;
            case SolidityParser.T__12:
            case SolidityParser.T__27:
            case SolidityParser.T__33:
            case SolidityParser.T__35:
            case SolidityParser.T__39:
            case SolidityParser.T__50:
            case SolidityParser.T__51:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__92:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
                this.state = 323;
                this.typeName(0);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 326;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDefinitionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_structDefinition;
    return this;
}

StructDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDefinitionContext.prototype.constructor = StructDefinitionContext;

StructDefinitionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

StructDefinitionContext.prototype.variableDeclaration = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext, i);
    }
};

StructDefinitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterStructDefinition(this);
    }
};

StructDefinitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitStructDefinition(this);
    }
};

SolidityParser.StructDefinitionContext = StructDefinitionContext;

SolidityParser.prototype.structDefinition = function () {

    var localctx = new StructDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SolidityParser.RULE_structDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 328;
        this.match(SolidityParser.T__25);
        this.state = 329;
        this.identifier();
        this.state = 330;
        this.match(SolidityParser.T__13);
        this.state = 341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 331;
            this.variableDeclaration();
            this.state = 332;
            this.match(SolidityParser.T__1);
            this.state = 338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
                this.state = 333;
                this.variableDeclaration();
                this.state = 334;
                this.match(SolidityParser.T__1);
                this.state = 340;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 343;
        this.match(SolidityParser.T__15);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierDefinitionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierDefinition;
    return this;
}

ModifierDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierDefinitionContext.prototype.constructor = ModifierDefinitionContext;

ModifierDefinitionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

ModifierDefinitionContext.prototype.block = function () {
    return this.getTypedRuleContext(BlockContext, 0);
};

ModifierDefinitionContext.prototype.parameterList = function () {
    return this.getTypedRuleContext(ParameterListContext, 0);
};

ModifierDefinitionContext.prototype.VirtualKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.VirtualKeyword);
    } else {
        return this.getToken(SolidityParser.VirtualKeyword, i);
    }
};

ModifierDefinitionContext.prototype.overrideSpecifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
    } else {
        return this.getTypedRuleContext(OverrideSpecifierContext, i);
    }
};

ModifierDefinitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterModifierDefinition(this);
    }
};

ModifierDefinitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitModifierDefinition(this);
    }
};

SolidityParser.ModifierDefinitionContext = ModifierDefinitionContext;

SolidityParser.prototype.modifierDefinition = function () {

    var localctx = new ModifierDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SolidityParser.RULE_modifierDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 345;
        this.match(SolidityParser.T__26);
        this.state = 346;
        this.identifier();
        this.state = 348;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__21) {
            this.state = 347;
            this.parameterList();
        }

        this.state = 354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SolidityParser.T__93 || _la === SolidityParser.VirtualKeyword) {
            this.state = 352;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SolidityParser.VirtualKeyword:
                    this.state = 350;
                    this.match(SolidityParser.VirtualKeyword);
                    break;
                case SolidityParser.T__93:
                    this.state = 351;
                    this.overrideSpecifier();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 357;
        this.block();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierInvocationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierInvocation;
    return this;
}

ModifierInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierInvocationContext.prototype.constructor = ModifierInvocationContext;

ModifierInvocationContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

ModifierInvocationContext.prototype.expressionList = function () {
    return this.getTypedRuleContext(ExpressionListContext, 0);
};

ModifierInvocationContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterModifierInvocation(this);
    }
};

ModifierInvocationContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitModifierInvocation(this);
    }
};

SolidityParser.ModifierInvocationContext = ModifierInvocationContext;

SolidityParser.prototype.modifierInvocation = function () {

    var localctx = new ModifierInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SolidityParser.RULE_modifierInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 359;
        this.identifier();
        this.state = 365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__21) {
            this.state = 360;
            this.match(SolidityParser.T__21);
            this.state = 362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                this.state = 361;
                this.expressionList();
            }

            this.state = 364;
            this.match(SolidityParser.T__22);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDefinitionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.functionDescriptor = function () {
    return this.getTypedRuleContext(FunctionDescriptorContext, 0);
};

FunctionDefinitionContext.prototype.parameterList = function () {
    return this.getTypedRuleContext(ParameterListContext, 0);
};

FunctionDefinitionContext.prototype.modifierList = function () {
    return this.getTypedRuleContext(ModifierListContext, 0);
};

FunctionDefinitionContext.prototype.block = function () {
    return this.getTypedRuleContext(BlockContext, 0);
};

FunctionDefinitionContext.prototype.returnParameters = function () {
    return this.getTypedRuleContext(ReturnParametersContext, 0);
};

FunctionDefinitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterFunctionDefinition(this);
    }
};

FunctionDefinitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitFunctionDefinition(this);
    }
};

SolidityParser.FunctionDefinitionContext = FunctionDefinitionContext;

SolidityParser.prototype.functionDefinition = function () {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SolidityParser.RULE_functionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 367;
        this.functionDescriptor();
        this.state = 368;
        this.parameterList();
        this.state = 369;
        this.modifierList();
        this.state = 371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__28) {
            this.state = 370;
            this.returnParameters();
        }

        this.state = 375;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__1:
                this.state = 373;
                this.match(SolidityParser.T__1);
                break;
            case SolidityParser.T__13:
                this.state = 374;
                this.block();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDescriptorContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionDescriptor;
    return this;
}

FunctionDescriptorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDescriptorContext.prototype.constructor = FunctionDescriptorContext;

FunctionDescriptorContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

FunctionDescriptorContext.prototype.ConstructorKeyword = function () {
    return this.getToken(SolidityParser.ConstructorKeyword, 0);
};

FunctionDescriptorContext.prototype.FallbackKeyword = function () {
    return this.getToken(SolidityParser.FallbackKeyword, 0);
};

FunctionDescriptorContext.prototype.ReceiveKeyword = function () {
    return this.getToken(SolidityParser.ReceiveKeyword, 0);
};

FunctionDescriptorContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterFunctionDescriptor(this);
    }
};

FunctionDescriptorContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitFunctionDescriptor(this);
    }
};

SolidityParser.FunctionDescriptorContext = FunctionDescriptorContext;

SolidityParser.prototype.functionDescriptor = function () {

    var localctx = new FunctionDescriptorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SolidityParser.RULE_functionDescriptor);
    var _la = 0; // Token type
    try {
        this.state = 384;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__27:
                this.enterOuterAlt(localctx, 1);
                this.state = 377;
                this.match(SolidityParser.T__27);
                this.state = 379;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
                    this.state = 378;
                    this.identifier();
                }

                break;
            case SolidityParser.ConstructorKeyword:
                this.enterOuterAlt(localctx, 2);
                this.state = 381;
                this.match(SolidityParser.ConstructorKeyword);
                break;
            case SolidityParser.FallbackKeyword:
                this.enterOuterAlt(localctx, 3);
                this.state = 382;
                this.match(SolidityParser.FallbackKeyword);
                break;
            case SolidityParser.ReceiveKeyword:
                this.enterOuterAlt(localctx, 4);
                this.state = 383;
                this.match(SolidityParser.ReceiveKeyword);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnParametersContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_returnParameters;
    return this;
}

ReturnParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnParametersContext.prototype.constructor = ReturnParametersContext;

ReturnParametersContext.prototype.parameterList = function () {
    return this.getTypedRuleContext(ParameterListContext, 0);
};

ReturnParametersContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterReturnParameters(this);
    }
};

ReturnParametersContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitReturnParameters(this);
    }
};

SolidityParser.ReturnParametersContext = ReturnParametersContext;

SolidityParser.prototype.returnParameters = function () {

    var localctx = new ReturnParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SolidityParser.RULE_returnParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 386;
        this.match(SolidityParser.T__28);
        this.state = 387;
        this.parameterList();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierList;
    return this;
}

ModifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierListContext.prototype.constructor = ModifierListContext;

ModifierListContext.prototype.ExternalKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.ExternalKeyword);
    } else {
        return this.getToken(SolidityParser.ExternalKeyword, i);
    }
};

ModifierListContext.prototype.PublicKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.PublicKeyword);
    } else {
        return this.getToken(SolidityParser.PublicKeyword, i);
    }
};

ModifierListContext.prototype.InternalKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.InternalKeyword);
    } else {
        return this.getToken(SolidityParser.InternalKeyword, i);
    }
};

ModifierListContext.prototype.PrivateKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.PrivateKeyword);
    } else {
        return this.getToken(SolidityParser.PrivateKeyword, i);
    }
};

ModifierListContext.prototype.VirtualKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.VirtualKeyword);
    } else {
        return this.getToken(SolidityParser.VirtualKeyword, i);
    }
};

ModifierListContext.prototype.stateMutability = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
    } else {
        return this.getTypedRuleContext(StateMutabilityContext, i);
    }
};

ModifierListContext.prototype.modifierInvocation = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ModifierInvocationContext);
    } else {
        return this.getTypedRuleContext(ModifierInvocationContext, i);
    }
};

ModifierListContext.prototype.overrideSpecifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
    } else {
        return this.getTypedRuleContext(OverrideSpecifierContext, i);
    }
};

ModifierListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterModifierList(this);
    }
};

ModifierListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitModifierList(this);
    }
};

SolidityParser.ModifierListContext = ModifierListContext;

SolidityParser.prototype.modifierList = function () {

    var localctx = new ModifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SolidityParser.RULE_modifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 399;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.T__93 - 93 | 1 << SolidityParser.ConstantKeyword - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.ExternalKeyword - 93 | 1 << SolidityParser.InternalKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.PrivateKeyword - 93 | 1 << SolidityParser.PublicKeyword - 93 | 1 << SolidityParser.VirtualKeyword - 93 | 1 << SolidityParser.PureKeyword - 93 | 1 << SolidityParser.ViewKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 397;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 389;
                    this.match(SolidityParser.ExternalKeyword);
                    break;

                case 2:
                    this.state = 390;
                    this.match(SolidityParser.PublicKeyword);
                    break;

                case 3:
                    this.state = 391;
                    this.match(SolidityParser.InternalKeyword);
                    break;

                case 4:
                    this.state = 392;
                    this.match(SolidityParser.PrivateKeyword);
                    break;

                case 5:
                    this.state = 393;
                    this.match(SolidityParser.VirtualKeyword);
                    break;

                case 6:
                    this.state = 394;
                    this.stateMutability();
                    break;

                case 7:
                    this.state = 395;
                    this.modifierInvocation();
                    break;

                case 8:
                    this.state = 396;
                    this.overrideSpecifier();
                    break;

            }
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventDefinitionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_eventDefinition;
    return this;
}

EventDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefinitionContext.prototype.constructor = EventDefinitionContext;

EventDefinitionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

EventDefinitionContext.prototype.eventParameterList = function () {
    return this.getTypedRuleContext(EventParameterListContext, 0);
};

EventDefinitionContext.prototype.AnonymousKeyword = function () {
    return this.getToken(SolidityParser.AnonymousKeyword, 0);
};

EventDefinitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterEventDefinition(this);
    }
};

EventDefinitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitEventDefinition(this);
    }
};

SolidityParser.EventDefinitionContext = EventDefinitionContext;

SolidityParser.prototype.eventDefinition = function () {

    var localctx = new EventDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SolidityParser.RULE_eventDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402;
        this.match(SolidityParser.T__29);
        this.state = 403;
        this.identifier();
        this.state = 404;
        this.eventParameterList();
        this.state = 406;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.AnonymousKeyword) {
            this.state = 405;
            this.match(SolidityParser.AnonymousKeyword);
        }

        this.state = 408;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumValueContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_enumValue;
    return this;
}

EnumValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumValueContext.prototype.constructor = EnumValueContext;

EnumValueContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

EnumValueContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterEnumValue(this);
    }
};

EnumValueContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitEnumValue(this);
    }
};

SolidityParser.EnumValueContext = EnumValueContext;

SolidityParser.prototype.enumValue = function () {

    var localctx = new EnumValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SolidityParser.RULE_enumValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.identifier();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDefinitionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_enumDefinition;
    return this;
}

EnumDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDefinitionContext.prototype.constructor = EnumDefinitionContext;

EnumDefinitionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

EnumDefinitionContext.prototype.enumValue = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(EnumValueContext);
    } else {
        return this.getTypedRuleContext(EnumValueContext, i);
    }
};

EnumDefinitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterEnumDefinition(this);
    }
};

EnumDefinitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitEnumDefinition(this);
    }
};

SolidityParser.EnumDefinitionContext = EnumDefinitionContext;

SolidityParser.prototype.enumDefinition = function () {

    var localctx = new EnumDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SolidityParser.RULE_enumDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 412;
        this.match(SolidityParser.T__30);
        this.state = 413;
        this.identifier();
        this.state = 414;
        this.match(SolidityParser.T__13);
        this.state = 416;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 415;
            this.enumValue();
        }

        this.state = 422;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SolidityParser.T__14) {
            this.state = 418;
            this.match(SolidityParser.T__14);
            this.state = 419;
            this.enumValue();
            this.state = 424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 425;
        this.match(SolidityParser.T__15);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.parameter = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext, i);
    }
};

ParameterListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterParameterList(this);
    }
};

ParameterListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitParameterList(this);
    }
};

SolidityParser.ParameterListContext = ParameterListContext;

SolidityParser.prototype.parameterList = function () {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SolidityParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        this.match(SolidityParser.T__21);
        this.state = 436;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 428;
            this.parameter();
            this.state = 433;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SolidityParser.T__14) {
                this.state = 429;
                this.match(SolidityParser.T__14);
                this.state = 430;
                this.parameter();
                this.state = 435;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 438;
        this.match(SolidityParser.T__22);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.typeName = function () {
    return this.getTypedRuleContext(TypeNameContext, 0);
};

ParameterContext.prototype.storageLocation = function () {
    return this.getTypedRuleContext(StorageLocationContext, 0);
};

ParameterContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

ParameterContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterParameter(this);
    }
};

ParameterContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitParameter(this);
    }
};

SolidityParser.ParameterContext = ParameterContext;

SolidityParser.prototype.parameter = function () {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SolidityParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.typeName(0);
        this.state = 442;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 42, this._ctx);
        if (la_ === 1) {
            this.state = 441;
            this.storageLocation();
        }
        this.state = 445;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 444;
            this.identifier();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventParameterListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_eventParameterList;
    return this;
}

EventParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventParameterListContext.prototype.constructor = EventParameterListContext;

EventParameterListContext.prototype.eventParameter = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(EventParameterContext);
    } else {
        return this.getTypedRuleContext(EventParameterContext, i);
    }
};

EventParameterListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterEventParameterList(this);
    }
};

EventParameterListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitEventParameterList(this);
    }
};

SolidityParser.EventParameterListContext = EventParameterListContext;

SolidityParser.prototype.eventParameterList = function () {

    var localctx = new EventParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SolidityParser.RULE_eventParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 447;
        this.match(SolidityParser.T__21);
        this.state = 456;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 448;
            this.eventParameter();
            this.state = 453;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SolidityParser.T__14) {
                this.state = 449;
                this.match(SolidityParser.T__14);
                this.state = 450;
                this.eventParameter();
                this.state = 455;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 458;
        this.match(SolidityParser.T__22);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventParameterContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_eventParameter;
    return this;
}

EventParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventParameterContext.prototype.constructor = EventParameterContext;

EventParameterContext.prototype.typeName = function () {
    return this.getTypedRuleContext(TypeNameContext, 0);
};

EventParameterContext.prototype.IndexedKeyword = function () {
    return this.getToken(SolidityParser.IndexedKeyword, 0);
};

EventParameterContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

EventParameterContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterEventParameter(this);
    }
};

EventParameterContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitEventParameter(this);
    }
};

SolidityParser.EventParameterContext = EventParameterContext;

SolidityParser.prototype.eventParameter = function () {

    var localctx = new EventParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SolidityParser.RULE_eventParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 460;
        this.typeName(0);
        this.state = 462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.IndexedKeyword) {
            this.state = 461;
            this.match(SolidityParser.IndexedKeyword);
        }

        this.state = 465;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 464;
            this.identifier();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionTypeParameterListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionTypeParameterList;
    return this;
}

FunctionTypeParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeParameterListContext.prototype.constructor = FunctionTypeParameterListContext;

FunctionTypeParameterListContext.prototype.functionTypeParameter = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(FunctionTypeParameterContext);
    } else {
        return this.getTypedRuleContext(FunctionTypeParameterContext, i);
    }
};

FunctionTypeParameterListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterFunctionTypeParameterList(this);
    }
};

FunctionTypeParameterListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitFunctionTypeParameterList(this);
    }
};

SolidityParser.FunctionTypeParameterListContext = FunctionTypeParameterListContext;

SolidityParser.prototype.functionTypeParameterList = function () {

    var localctx = new FunctionTypeParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SolidityParser.RULE_functionTypeParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 467;
        this.match(SolidityParser.T__21);
        this.state = 476;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 468;
            this.functionTypeParameter();
            this.state = 473;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SolidityParser.T__14) {
                this.state = 469;
                this.match(SolidityParser.T__14);
                this.state = 470;
                this.functionTypeParameter();
                this.state = 475;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 478;
        this.match(SolidityParser.T__22);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionTypeParameterContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionTypeParameter;
    return this;
}

FunctionTypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeParameterContext.prototype.constructor = FunctionTypeParameterContext;

FunctionTypeParameterContext.prototype.typeName = function () {
    return this.getTypedRuleContext(TypeNameContext, 0);
};

FunctionTypeParameterContext.prototype.storageLocation = function () {
    return this.getTypedRuleContext(StorageLocationContext, 0);
};

FunctionTypeParameterContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterFunctionTypeParameter(this);
    }
};

FunctionTypeParameterContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitFunctionTypeParameter(this);
    }
};

SolidityParser.FunctionTypeParameterContext = FunctionTypeParameterContext;

SolidityParser.prototype.functionTypeParameter = function () {

    var localctx = new FunctionTypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SolidityParser.RULE_functionTypeParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        this.typeName(0);
        this.state = 482;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 38 & ~0x1f) == 0 && (1 << _la - 38 & (1 << SolidityParser.T__37 - 38 | 1 << SolidityParser.T__38 - 38 | 1 << SolidityParser.T__39 - 38)) !== 0) {
            this.state = 481;
            this.storageLocation();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.typeName = function () {
    return this.getTypedRuleContext(TypeNameContext, 0);
};

VariableDeclarationContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

VariableDeclarationContext.prototype.storageLocation = function () {
    return this.getTypedRuleContext(StorageLocationContext, 0);
};

VariableDeclarationContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterVariableDeclaration(this);
    }
};

VariableDeclarationContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitVariableDeclaration(this);
    }
};

SolidityParser.VariableDeclarationContext = VariableDeclarationContext;

SolidityParser.prototype.variableDeclaration = function () {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SolidityParser.RULE_variableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.typeName(0);
        this.state = 486;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);
        if (la_ === 1) {
            this.state = 485;
            this.storageLocation();
        }
        this.state = 488;
        this.identifier();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.elementaryTypeName = function () {
    return this.getTypedRuleContext(ElementaryTypeNameContext, 0);
};

TypeNameContext.prototype.userDefinedTypeName = function () {
    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
};

TypeNameContext.prototype.mapping = function () {
    return this.getTypedRuleContext(MappingContext, 0);
};

TypeNameContext.prototype.functionTypeName = function () {
    return this.getTypedRuleContext(FunctionTypeNameContext, 0);
};

TypeNameContext.prototype.PayableKeyword = function () {
    return this.getToken(SolidityParser.PayableKeyword, 0);
};

TypeNameContext.prototype.typeName = function () {
    return this.getTypedRuleContext(TypeNameContext, 0);
};

TypeNameContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

TypeNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterTypeName(this);
    }
};

TypeNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitTypeName(this);
    }
};

SolidityParser.prototype.typeName = function (_p) {
    if (_p === undefined) {
        _p = 0;
    }
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeNameContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 62;
    this.enterRecursionRule(localctx, 62, SolidityParser.RULE_typeName, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 52, this._ctx);
        switch (la_) {
            case 1:
                this.state = 491;
                this.elementaryTypeName();
                break;

            case 2:
                this.state = 492;
                this.userDefinedTypeName();
                break;

            case 3:
                this.state = 493;
                this.mapping();
                break;

            case 4:
                this.state = 494;
                this.functionTypeName();
                break;

            case 5:
                this.state = 495;
                this.match(SolidityParser.T__33);
                this.state = 496;
                this.match(SolidityParser.PayableKeyword);
                break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 507;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                if (this._parseListeners !== null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeNameContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);
                this.state = 499;
                if (!this.precpred(this._ctx, 3)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                }
                this.state = 500;
                this.match(SolidityParser.T__31);
                this.state = 502;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                    this.state = 501;
                    this.expression(0);
                }

                this.state = 504;
                this.match(SolidityParser.T__32);
            }
            this.state = 509;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);
        }
    } catch (error) {
        if (error instanceof antlr4.error.RecognitionException) {
            localctx.exception = error;
            this._errHandler.reportError(this, error);
            this._errHandler.recover(this, error);
        } else {
            throw error;
        }
    } finally {
        this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
};

function UserDefinedTypeNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_userDefinedTypeName;
    return this;
}

UserDefinedTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserDefinedTypeNameContext.prototype.constructor = UserDefinedTypeNameContext;

UserDefinedTypeNameContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};

UserDefinedTypeNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterUserDefinedTypeName(this);
    }
};

UserDefinedTypeNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitUserDefinedTypeName(this);
    }
};

SolidityParser.UserDefinedTypeNameContext = UserDefinedTypeNameContext;

SolidityParser.prototype.userDefinedTypeName = function () {

    var localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SolidityParser.RULE_userDefinedTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 510;
        this.identifier();
        this.state = 515;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 511;
                this.match(SolidityParser.T__34);
                this.state = 512;
                this.identifier();
            }
            this.state = 517;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MappingKeyContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_mappingKey;
    return this;
}

MappingKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingKeyContext.prototype.constructor = MappingKeyContext;

MappingKeyContext.prototype.elementaryTypeName = function () {
    return this.getTypedRuleContext(ElementaryTypeNameContext, 0);
};

MappingKeyContext.prototype.userDefinedTypeName = function () {
    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
};

MappingKeyContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterMappingKey(this);
    }
};

MappingKeyContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitMappingKey(this);
    }
};

SolidityParser.MappingKeyContext = MappingKeyContext;

SolidityParser.prototype.mappingKey = function () {

    var localctx = new MappingKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SolidityParser.RULE_mappingKey);
    try {
        this.state = 520;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__33:
            case SolidityParser.T__50:
            case SolidityParser.T__51:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
                this.enterOuterAlt(localctx, 1);
                this.state = 518;
                this.elementaryTypeName();
                break;
            case SolidityParser.T__12:
            case SolidityParser.T__39:
            case SolidityParser.T__92:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
                this.enterOuterAlt(localctx, 2);
                this.state = 519;
                this.userDefinedTypeName();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MappingContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_mapping;
    return this;
}

MappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingContext.prototype.constructor = MappingContext;

MappingContext.prototype.mappingKey = function () {
    return this.getTypedRuleContext(MappingKeyContext, 0);
};

MappingContext.prototype.typeName = function () {
    return this.getTypedRuleContext(TypeNameContext, 0);
};

MappingContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterMapping(this);
    }
};

MappingContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitMapping(this);
    }
};

SolidityParser.MappingContext = MappingContext;

SolidityParser.prototype.mapping = function () {

    var localctx = new MappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SolidityParser.RULE_mapping);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 522;
        this.match(SolidityParser.T__35);
        this.state = 523;
        this.match(SolidityParser.T__21);
        this.state = 524;
        this.mappingKey();
        this.state = 525;
        this.match(SolidityParser.T__36);
        this.state = 526;
        this.typeName(0);
        this.state = 527;
        this.match(SolidityParser.T__22);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionTypeNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionTypeName;
    return this;
}

FunctionTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeNameContext.prototype.constructor = FunctionTypeNameContext;

FunctionTypeNameContext.prototype.functionTypeParameterList = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(FunctionTypeParameterListContext);
    } else {
        return this.getTypedRuleContext(FunctionTypeParameterListContext, i);
    }
};

FunctionTypeNameContext.prototype.InternalKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.InternalKeyword);
    } else {
        return this.getToken(SolidityParser.InternalKeyword, i);
    }
};

FunctionTypeNameContext.prototype.ExternalKeyword = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.ExternalKeyword);
    } else {
        return this.getToken(SolidityParser.ExternalKeyword, i);
    }
};

FunctionTypeNameContext.prototype.stateMutability = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
    } else {
        return this.getTypedRuleContext(StateMutabilityContext, i);
    }
};

FunctionTypeNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterFunctionTypeName(this);
    }
};

FunctionTypeNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitFunctionTypeName(this);
    }
};

SolidityParser.FunctionTypeNameContext = FunctionTypeNameContext;

SolidityParser.prototype.functionTypeName = function () {

    var localctx = new FunctionTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SolidityParser.RULE_functionTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        this.match(SolidityParser.T__27);
        this.state = 530;
        this.functionTypeParameterList();
        this.state = 536;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 534;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case SolidityParser.InternalKeyword:
                        this.state = 531;
                        this.match(SolidityParser.InternalKeyword);
                        break;
                    case SolidityParser.ExternalKeyword:
                        this.state = 532;
                        this.match(SolidityParser.ExternalKeyword);
                        break;
                    case SolidityParser.ConstantKeyword:
                    case SolidityParser.PayableKeyword:
                    case SolidityParser.PureKeyword:
                    case SolidityParser.ViewKeyword:
                        this.state = 533;
                        this.stateMutability();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
            }
            this.state = 538;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
        }

        this.state = 541;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
        if (la_ === 1) {
            this.state = 539;
            this.match(SolidityParser.T__28);
            this.state = 540;
            this.functionTypeParameterList();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageLocationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_storageLocation;
    return this;
}

StorageLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageLocationContext.prototype.constructor = StorageLocationContext;

StorageLocationContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterStorageLocation(this);
    }
};

StorageLocationContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitStorageLocation(this);
    }
};

SolidityParser.StorageLocationContext = StorageLocationContext;

SolidityParser.prototype.storageLocation = function () {

    var localctx = new StorageLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SolidityParser.RULE_storageLocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        _la = this._input.LA(1);
        if (!((_la - 38 & ~0x1f) == 0 && (1 << _la - 38 & (1 << SolidityParser.T__37 - 38 | 1 << SolidityParser.T__38 - 38 | 1 << SolidityParser.T__39 - 38)) !== 0)) {
            this._errHandler.recoverInline(this);
        } else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StateMutabilityContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stateMutability;
    return this;
}

StateMutabilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateMutabilityContext.prototype.constructor = StateMutabilityContext;

StateMutabilityContext.prototype.PureKeyword = function () {
    return this.getToken(SolidityParser.PureKeyword, 0);
};

StateMutabilityContext.prototype.ConstantKeyword = function () {
    return this.getToken(SolidityParser.ConstantKeyword, 0);
};

StateMutabilityContext.prototype.ViewKeyword = function () {
    return this.getToken(SolidityParser.ViewKeyword, 0);
};

StateMutabilityContext.prototype.PayableKeyword = function () {
    return this.getToken(SolidityParser.PayableKeyword, 0);
};

StateMutabilityContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterStateMutability(this);
    }
};

StateMutabilityContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitStateMutability(this);
    }
};

SolidityParser.StateMutabilityContext = StateMutabilityContext;

SolidityParser.prototype.stateMutability = function () {

    var localctx = new StateMutabilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SolidityParser.RULE_stateMutability);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        _la = this._input.LA(1);
        if (!((_la - 108 & ~0x1f) == 0 && (1 << _la - 108 & (1 << SolidityParser.ConstantKeyword - 108 | 1 << SolidityParser.PayableKeyword - 108 | 1 << SolidityParser.PureKeyword - 108 | 1 << SolidityParser.ViewKeyword - 108)) !== 0)) {
            this._errHandler.recoverInline(this);
        } else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.statement = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext, i);
    }
};

BlockContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterBlock(this);
    }
};

BlockContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitBlock(this);
    }
};

SolidityParser.BlockContext = BlockContext;

SolidityParser.prototype.block = function () {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SolidityParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.match(SolidityParser.T__13);
        this.state = 551;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__21 | 1 << SolidityParser.T__24 | 1 << SolidityParser.T__27)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__35 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__40 - 32 | 1 << SolidityParser.T__42 - 32 | 1 << SolidityParser.T__44 - 32 | 1 << SolidityParser.T__45 - 32 | 1 << SolidityParser.T__46 - 32 | 1 << SolidityParser.T__47 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.BreakKeyword - 93 | 1 << SolidityParser.ContinueKeyword - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
            this.state = 548;
            this.statement();
            this.state = 553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 554;
        this.match(SolidityParser.T__15);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.ifStatement = function () {
    return this.getTypedRuleContext(IfStatementContext, 0);
};

StatementContext.prototype.tryStatement = function () {
    return this.getTypedRuleContext(TryStatementContext, 0);
};

StatementContext.prototype.whileStatement = function () {
    return this.getTypedRuleContext(WhileStatementContext, 0);
};

StatementContext.prototype.forStatement = function () {
    return this.getTypedRuleContext(ForStatementContext, 0);
};

StatementContext.prototype.block = function () {
    return this.getTypedRuleContext(BlockContext, 0);
};

StatementContext.prototype.inlineAssemblyStatement = function () {
    return this.getTypedRuleContext(InlineAssemblyStatementContext, 0);
};

StatementContext.prototype.doWhileStatement = function () {
    return this.getTypedRuleContext(DoWhileStatementContext, 0);
};

StatementContext.prototype.continueStatement = function () {
    return this.getTypedRuleContext(ContinueStatementContext, 0);
};

StatementContext.prototype.breakStatement = function () {
    return this.getTypedRuleContext(BreakStatementContext, 0);
};

StatementContext.prototype.returnStatement = function () {
    return this.getTypedRuleContext(ReturnStatementContext, 0);
};

StatementContext.prototype.throwStatement = function () {
    return this.getTypedRuleContext(ThrowStatementContext, 0);
};

StatementContext.prototype.emitStatement = function () {
    return this.getTypedRuleContext(EmitStatementContext, 0);
};

StatementContext.prototype.simpleStatement = function () {
    return this.getTypedRuleContext(SimpleStatementContext, 0);
};

StatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterStatement(this);
    }
};

StatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitStatement(this);
    }
};

SolidityParser.StatementContext = StatementContext;

SolidityParser.prototype.statement = function () {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SolidityParser.RULE_statement);
    try {
        this.state = 569;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__40:
                this.enterOuterAlt(localctx, 1);
                this.state = 556;
                this.ifStatement();
                break;
            case SolidityParser.T__42:
                this.enterOuterAlt(localctx, 2);
                this.state = 557;
                this.tryStatement();
                break;
            case SolidityParser.T__44:
                this.enterOuterAlt(localctx, 3);
                this.state = 558;
                this.whileStatement();
                break;
            case SolidityParser.T__24:
                this.enterOuterAlt(localctx, 4);
                this.state = 559;
                this.forStatement();
                break;
            case SolidityParser.T__13:
                this.enterOuterAlt(localctx, 5);
                this.state = 560;
                this.block();
                break;
            case SolidityParser.T__45:
                this.enterOuterAlt(localctx, 6);
                this.state = 561;
                this.inlineAssemblyStatement();
                break;
            case SolidityParser.T__46:
                this.enterOuterAlt(localctx, 7);
                this.state = 562;
                this.doWhileStatement();
                break;
            case SolidityParser.ContinueKeyword:
                this.enterOuterAlt(localctx, 8);
                this.state = 563;
                this.continueStatement();
                break;
            case SolidityParser.BreakKeyword:
                this.enterOuterAlt(localctx, 9);
                this.state = 564;
                this.breakStatement();
                break;
            case SolidityParser.T__47:
                this.enterOuterAlt(localctx, 10);
                this.state = 565;
                this.returnStatement();
                break;
            case SolidityParser.T__48:
                this.enterOuterAlt(localctx, 11);
                this.state = 566;
                this.throwStatement();
                break;
            case SolidityParser.T__49:
                this.enterOuterAlt(localctx, 12);
                this.state = 567;
                this.emitStatement();
                break;
            case SolidityParser.T__3:
            case SolidityParser.T__12:
            case SolidityParser.T__21:
            case SolidityParser.T__27:
            case SolidityParser.T__31:
            case SolidityParser.T__33:
            case SolidityParser.T__35:
            case SolidityParser.T__39:
            case SolidityParser.T__50:
            case SolidityParser.T__51:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.T__56:
            case SolidityParser.T__58:
            case SolidityParser.T__59:
            case SolidityParser.T__60:
            case SolidityParser.T__61:
            case SolidityParser.T__62:
            case SolidityParser.T__92:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.BooleanLiteral:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteral:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.TypeKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
                this.enterOuterAlt(localctx, 13);
                this.state = 568;
                this.simpleStatement();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

ExpressionStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterExpressionStatement(this);
    }
};

ExpressionStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitExpressionStatement(this);
    }
};

SolidityParser.ExpressionStatementContext = ExpressionStatementContext;

SolidityParser.prototype.expressionStatement = function () {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SolidityParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        this.expression(0);
        this.state = 572;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

IfStatementContext.prototype.statement = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext, i);
    }
};

IfStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterIfStatement(this);
    }
};

IfStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitIfStatement(this);
    }
};

SolidityParser.IfStatementContext = IfStatementContext;

SolidityParser.prototype.ifStatement = function () {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SolidityParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        this.match(SolidityParser.T__40);
        this.state = 575;
        this.match(SolidityParser.T__21);
        this.state = 576;
        this.expression(0);
        this.state = 577;
        this.match(SolidityParser.T__22);
        this.state = 578;
        this.statement();
        this.state = 581;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);
        if (la_ === 1) {
            this.state = 579;
            this.match(SolidityParser.T__41);
            this.state = 580;
            this.statement();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

TryStatementContext.prototype.block = function () {
    return this.getTypedRuleContext(BlockContext, 0);
};

TryStatementContext.prototype.returnParameters = function () {
    return this.getTypedRuleContext(ReturnParametersContext, 0);
};

TryStatementContext.prototype.catchClause = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext, i);
    }
};

TryStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterTryStatement(this);
    }
};

TryStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitTryStatement(this);
    }
};

SolidityParser.TryStatementContext = TryStatementContext;

SolidityParser.prototype.tryStatement = function () {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SolidityParser.RULE_tryStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this.match(SolidityParser.T__42);
        this.state = 584;
        this.expression(0);
        this.state = 586;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__28) {
            this.state = 585;
            this.returnParameters();
        }

        this.state = 588;
        this.block();
        this.state = 590;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 589;
            this.catchClause();
            this.state = 592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while (_la === SolidityParser.T__43);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchClauseContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.block = function () {
    return this.getTypedRuleContext(BlockContext, 0);
};

CatchClauseContext.prototype.parameterList = function () {
    return this.getTypedRuleContext(ParameterListContext, 0);
};

CatchClauseContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

CatchClauseContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterCatchClause(this);
    }
};

CatchClauseContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitCatchClause(this);
    }
};

SolidityParser.CatchClauseContext = CatchClauseContext;

SolidityParser.prototype.catchClause = function () {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SolidityParser.RULE_catchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.match(SolidityParser.T__43);
        this.state = 599;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 13 & ~0x1f) == 0 && (1 << _la - 13 & (1 << SolidityParser.T__12 - 13 | 1 << SolidityParser.T__21 - 13 | 1 << SolidityParser.T__39 - 13)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
                this.state = 595;
                this.identifier();
            }

            this.state = 598;
            this.parameterList();
        }

        this.state = 601;
        this.block();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

WhileStatementContext.prototype.statement = function () {
    return this.getTypedRuleContext(StatementContext, 0);
};

WhileStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterWhileStatement(this);
    }
};

WhileStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitWhileStatement(this);
    }
};

SolidityParser.WhileStatementContext = WhileStatementContext;

SolidityParser.prototype.whileStatement = function () {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SolidityParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 603;
        this.match(SolidityParser.T__44);
        this.state = 604;
        this.match(SolidityParser.T__21);
        this.state = 605;
        this.expression(0);
        this.state = 606;
        this.match(SolidityParser.T__22);
        this.state = 607;
        this.statement();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_simpleStatement;
    return this;
}

SimpleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleStatementContext.prototype.constructor = SimpleStatementContext;

SimpleStatementContext.prototype.variableDeclarationStatement = function () {
    return this.getTypedRuleContext(VariableDeclarationStatementContext, 0);
};

SimpleStatementContext.prototype.expressionStatement = function () {
    return this.getTypedRuleContext(ExpressionStatementContext, 0);
};

SimpleStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterSimpleStatement(this);
    }
};

SimpleStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitSimpleStatement(this);
    }
};

SolidityParser.SimpleStatementContext = SimpleStatementContext;

SolidityParser.prototype.simpleStatement = function () {

    var localctx = new SimpleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SolidityParser.RULE_simpleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 611;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
        switch (la_) {
            case 1:
                this.state = 609;
                this.variableDeclarationStatement();
                break;

            case 2:
                this.state = 610;
                this.expressionStatement();
                break;

        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.statement = function () {
    return this.getTypedRuleContext(StatementContext, 0);
};

ForStatementContext.prototype.simpleStatement = function () {
    return this.getTypedRuleContext(SimpleStatementContext, 0);
};

ForStatementContext.prototype.expressionStatement = function () {
    return this.getTypedRuleContext(ExpressionStatementContext, 0);
};

ForStatementContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

ForStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterForStatement(this);
    }
};

ForStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitForStatement(this);
    }
};

SolidityParser.ForStatementContext = ForStatementContext;

SolidityParser.prototype.forStatement = function () {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SolidityParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 613;
        this.match(SolidityParser.T__24);
        this.state = 614;
        this.match(SolidityParser.T__21);
        this.state = 617;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__3:
            case SolidityParser.T__12:
            case SolidityParser.T__21:
            case SolidityParser.T__27:
            case SolidityParser.T__31:
            case SolidityParser.T__33:
            case SolidityParser.T__35:
            case SolidityParser.T__39:
            case SolidityParser.T__50:
            case SolidityParser.T__51:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.T__56:
            case SolidityParser.T__58:
            case SolidityParser.T__59:
            case SolidityParser.T__60:
            case SolidityParser.T__61:
            case SolidityParser.T__62:
            case SolidityParser.T__92:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.BooleanLiteral:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteral:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.TypeKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
                this.state = 615;
                this.simpleStatement();
                break;
            case SolidityParser.T__1:
                this.state = 616;
                this.match(SolidityParser.T__1);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 621;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__3:
            case SolidityParser.T__12:
            case SolidityParser.T__21:
            case SolidityParser.T__31:
            case SolidityParser.T__33:
            case SolidityParser.T__39:
            case SolidityParser.T__50:
            case SolidityParser.T__51:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.T__56:
            case SolidityParser.T__58:
            case SolidityParser.T__59:
            case SolidityParser.T__60:
            case SolidityParser.T__61:
            case SolidityParser.T__62:
            case SolidityParser.T__92:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.BooleanLiteral:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteral:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.TypeKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
                this.state = 619;
                this.expressionStatement();
                break;
            case SolidityParser.T__1:
                this.state = 620;
                this.match(SolidityParser.T__1);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 624;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
            this.state = 623;
            this.expression(0);
        }

        this.state = 626;
        this.match(SolidityParser.T__22);
        this.state = 627;
        this.statement();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineAssemblyStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inlineAssemblyStatement;
    return this;
}

InlineAssemblyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineAssemblyStatementContext.prototype.constructor = InlineAssemblyStatementContext;

InlineAssemblyStatementContext.prototype.assemblyBlock = function () {
    return this.getTypedRuleContext(AssemblyBlockContext, 0);
};

InlineAssemblyStatementContext.prototype.StringLiteralFragment = function () {
    return this.getToken(SolidityParser.StringLiteralFragment, 0);
};

InlineAssemblyStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterInlineAssemblyStatement(this);
    }
};

InlineAssemblyStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitInlineAssemblyStatement(this);
    }
};

SolidityParser.InlineAssemblyStatementContext = InlineAssemblyStatementContext;

SolidityParser.prototype.inlineAssemblyStatement = function () {

    var localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SolidityParser.RULE_inlineAssemblyStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 629;
        this.match(SolidityParser.T__45);
        this.state = 631;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.StringLiteralFragment) {
            this.state = 630;
            this.match(SolidityParser.StringLiteralFragment);
        }

        this.state = 633;
        this.assemblyBlock();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoWhileStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_doWhileStatement;
    return this;
}

DoWhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.statement = function () {
    return this.getTypedRuleContext(StatementContext, 0);
};

DoWhileStatementContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

DoWhileStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterDoWhileStatement(this);
    }
};

DoWhileStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitDoWhileStatement(this);
    }
};

SolidityParser.DoWhileStatementContext = DoWhileStatementContext;

SolidityParser.prototype.doWhileStatement = function () {

    var localctx = new DoWhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SolidityParser.RULE_doWhileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 635;
        this.match(SolidityParser.T__46);
        this.state = 636;
        this.statement();
        this.state = 637;
        this.match(SolidityParser.T__44);
        this.state = 638;
        this.match(SolidityParser.T__21);
        this.state = 639;
        this.expression(0);
        this.state = 640;
        this.match(SolidityParser.T__22);
        this.state = 641;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.ContinueKeyword = function () {
    return this.getToken(SolidityParser.ContinueKeyword, 0);
};

ContinueStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterContinueStatement(this);
    }
};

ContinueStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitContinueStatement(this);
    }
};

SolidityParser.ContinueStatementContext = ContinueStatementContext;

SolidityParser.prototype.continueStatement = function () {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SolidityParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this.match(SolidityParser.ContinueKeyword);
        this.state = 644;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.BreakKeyword = function () {
    return this.getToken(SolidityParser.BreakKeyword, 0);
};

BreakStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterBreakStatement(this);
    }
};

BreakStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitBreakStatement(this);
    }
};

SolidityParser.BreakStatementContext = BreakStatementContext;

SolidityParser.prototype.breakStatement = function () {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SolidityParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646;
        this.match(SolidityParser.BreakKeyword);
        this.state = 647;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

ReturnStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterReturnStatement(this);
    }
};

ReturnStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitReturnStatement(this);
    }
};

SolidityParser.ReturnStatementContext = ReturnStatementContext;

SolidityParser.prototype.returnStatement = function () {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SolidityParser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 649;
        this.match(SolidityParser.T__47);
        this.state = 651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
            this.state = 650;
            this.expression(0);
        }

        this.state = 653;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterThrowStatement(this);
    }
};

ThrowStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitThrowStatement(this);
    }
};

SolidityParser.ThrowStatementContext = ThrowStatementContext;

SolidityParser.prototype.throwStatement = function () {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SolidityParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.match(SolidityParser.T__48);
        this.state = 656;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmitStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_emitStatement;
    return this;
}

EmitStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmitStatementContext.prototype.constructor = EmitStatementContext;

EmitStatementContext.prototype.functionCall = function () {
    return this.getTypedRuleContext(FunctionCallContext, 0);
};

EmitStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterEmitStatement(this);
    }
};

EmitStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitEmitStatement(this);
    }
};

SolidityParser.EmitStatementContext = EmitStatementContext;

SolidityParser.prototype.emitStatement = function () {

    var localctx = new EmitStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SolidityParser.RULE_emitStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this.match(SolidityParser.T__49);
        this.state = 659;
        this.functionCall();
        this.state = 660;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;
    return this;
}

VariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationStatementContext.prototype.constructor = VariableDeclarationStatementContext;

VariableDeclarationStatementContext.prototype.identifierList = function () {
    return this.getTypedRuleContext(IdentifierListContext, 0);
};

VariableDeclarationStatementContext.prototype.variableDeclaration = function () {
    return this.getTypedRuleContext(VariableDeclarationContext, 0);
};

VariableDeclarationStatementContext.prototype.variableDeclarationList = function () {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
};

VariableDeclarationStatementContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

VariableDeclarationStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterVariableDeclarationStatement(this);
    }
};

VariableDeclarationStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitVariableDeclarationStatement(this);
    }
};

SolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext;

SolidityParser.prototype.variableDeclarationStatement = function () {

    var localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SolidityParser.RULE_variableDeclarationStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 669;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);
        switch (la_) {
            case 1:
                this.state = 662;
                this.match(SolidityParser.T__50);
                this.state = 663;
                this.identifierList();
                break;

            case 2:
                this.state = 664;
                this.variableDeclaration();
                break;

            case 3:
                this.state = 665;
                this.match(SolidityParser.T__21);
                this.state = 666;
                this.variableDeclarationList();
                this.state = 667;
                this.match(SolidityParser.T__22);
                break;

        }
        this.state = 673;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__8) {
            this.state = 671;
            this.match(SolidityParser.T__8);
            this.state = 672;
            this.expression(0);
        }

        this.state = 675;
        this.match(SolidityParser.T__1);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclarationList;
    return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.variableDeclaration = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext, i);
    }
};

VariableDeclarationListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterVariableDeclarationList(this);
    }
};

VariableDeclarationListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitVariableDeclarationList(this);
    }
};

SolidityParser.VariableDeclarationListContext = VariableDeclarationListContext;

SolidityParser.prototype.variableDeclarationList = function () {

    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SolidityParser.RULE_variableDeclarationList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 677;
            this.variableDeclaration();
        }

        this.state = 686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SolidityParser.T__14) {
            this.state = 680;
            this.match(SolidityParser.T__14);
            this.state = 682;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
                this.state = 681;
                this.variableDeclaration();
            }

            this.state = 688;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};

IdentifierListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterIdentifierList(this);
    }
};

IdentifierListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitIdentifierList(this);
    }
};

SolidityParser.IdentifierListContext = IdentifierListContext;

SolidityParser.prototype.identifierList = function () {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SolidityParser.RULE_identifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        this.match(SolidityParser.T__21);
        this.state = 696;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 79, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 691;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
                    this.state = 690;
                    this.identifier();
                }

                this.state = 693;
                this.match(SolidityParser.T__14);
            }
            this.state = 698;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 79, this._ctx);
        }

        this.state = 700;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 699;
            this.identifier();
        }

        this.state = 702;
        this.match(SolidityParser.T__22);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementaryTypeNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_elementaryTypeName;
    return this;
}

ElementaryTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementaryTypeNameContext.prototype.constructor = ElementaryTypeNameContext;

ElementaryTypeNameContext.prototype.Int = function () {
    return this.getToken(SolidityParser.Int, 0);
};

ElementaryTypeNameContext.prototype.Uint = function () {
    return this.getToken(SolidityParser.Uint, 0);
};

ElementaryTypeNameContext.prototype.Byte = function () {
    return this.getToken(SolidityParser.Byte, 0);
};

ElementaryTypeNameContext.prototype.Fixed = function () {
    return this.getToken(SolidityParser.Fixed, 0);
};

ElementaryTypeNameContext.prototype.Ufixed = function () {
    return this.getToken(SolidityParser.Ufixed, 0);
};

ElementaryTypeNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterElementaryTypeName(this);
    }
};

ElementaryTypeNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitElementaryTypeName(this);
    }
};

SolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext;

SolidityParser.prototype.elementaryTypeName = function () {

    var localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SolidityParser.RULE_elementaryTypeName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        _la = this._input.LA(1);
        if (!((_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 95 & ~0x1f) == 0 && (1 << _la - 95 & (1 << SolidityParser.Int - 95 | 1 << SolidityParser.Uint - 95 | 1 << SolidityParser.Byte - 95 | 1 << SolidityParser.Fixed - 95 | 1 << SolidityParser.Ufixed - 95)) !== 0)) {
            this._errHandler.recoverInline(this);
        } else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.typeName = function () {
    return this.getTypedRuleContext(TypeNameContext, 0);
};

ExpressionContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};

ExpressionContext.prototype.primaryExpression = function () {
    return this.getTypedRuleContext(PrimaryExpressionContext, 0);
};

ExpressionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

ExpressionContext.prototype.nameValueList = function () {
    return this.getTypedRuleContext(NameValueListContext, 0);
};

ExpressionContext.prototype.functionCallArguments = function () {
    return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);
};

ExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterExpression(this);
    }
};

ExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitExpression(this);
    }
};

SolidityParser.prototype.expression = function (_p) {
    if (_p === undefined) {
        _p = 0;
    }
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 116;
    this.enterRecursionRule(localctx, 116, SolidityParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 81, this._ctx);
        switch (la_) {
            case 1:
                this.state = 707;
                this.match(SolidityParser.T__56);
                this.state = 708;
                this.typeName(0);
                break;

            case 2:
                this.state = 709;
                this.match(SolidityParser.T__21);
                this.state = 710;
                this.expression(0);
                this.state = 711;
                this.match(SolidityParser.T__22);
                break;

            case 3:
                this.state = 713;
                _la = this._input.LA(1);
                if (!(_la === SolidityParser.T__54 || _la === SolidityParser.T__55)) {
                    this._errHandler.recoverInline(this);
                } else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 714;
                this.expression(19);
                break;

            case 4:
                this.state = 715;
                _la = this._input.LA(1);
                if (!(_la === SolidityParser.T__58 || _la === SolidityParser.T__59)) {
                    this._errHandler.recoverInline(this);
                } else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 716;
                this.expression(18);
                break;

            case 5:
                this.state = 717;
                _la = this._input.LA(1);
                if (!(_la === SolidityParser.T__60 || _la === SolidityParser.T__61)) {
                    this._errHandler.recoverInline(this);
                } else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 718;
                this.expression(17);
                break;

            case 6:
                this.state = 719;
                this.match(SolidityParser.T__62);
                this.state = 720;
                this.expression(16);
                break;

            case 7:
                this.state = 721;
                this.match(SolidityParser.T__3);
                this.state = 722;
                this.expression(15);
                break;

            case 8:
                this.state = 723;
                this.primaryExpression();
                break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 801;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 86, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                if (this._parseListeners !== null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 799;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 85, this._ctx);
                switch (la_) {
                    case 1:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 726;
                        if (!this.precpred(this._ctx, 14)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                        }
                        this.state = 727;
                        this.match(SolidityParser.T__63);
                        this.state = 728;
                        this.expression(15);
                        break;

                    case 2:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 729;
                        if (!this.precpred(this._ctx, 13)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                        }
                        this.state = 730;
                        _la = this._input.LA(1);
                        if (!(_la === SolidityParser.T__11 || _la === SolidityParser.T__64 || _la === SolidityParser.T__65)) {
                            this._errHandler.recoverInline(this);
                        } else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 731;
                        this.expression(14);
                        break;

                    case 3:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 732;
                        if (!this.precpred(this._ctx, 12)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                        }
                        this.state = 733;
                        _la = this._input.LA(1);
                        if (!(_la === SolidityParser.T__58 || _la === SolidityParser.T__59)) {
                            this._errHandler.recoverInline(this);
                        } else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 734;
                        this.expression(13);
                        break;

                    case 4:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 735;
                        if (!this.precpred(this._ctx, 11)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                        }
                        this.state = 736;
                        _la = this._input.LA(1);
                        if (!(_la === SolidityParser.T__66 || _la === SolidityParser.T__67)) {
                            this._errHandler.recoverInline(this);
                        } else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 737;
                        this.expression(12);
                        break;

                    case 5:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 738;
                        if (!this.precpred(this._ctx, 10)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                        }
                        this.state = 739;
                        this.match(SolidityParser.T__68);
                        this.state = 740;
                        this.expression(11);
                        break;

                    case 6:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 741;
                        if (!this.precpred(this._ctx, 9)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                        }
                        this.state = 742;
                        this.match(SolidityParser.T__2);
                        this.state = 743;
                        this.expression(10);
                        break;

                    case 7:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 744;
                        if (!this.precpred(this._ctx, 8)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                        }
                        this.state = 745;
                        this.match(SolidityParser.T__69);
                        this.state = 746;
                        this.expression(9);
                        break;

                    case 8:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 747;
                        if (!this.precpred(this._ctx, 7)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                        }
                        this.state = 748;
                        _la = this._input.LA(1);
                        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7)) !== 0)) {
                            this._errHandler.recoverInline(this);
                        } else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 749;
                        this.expression(8);
                        break;

                    case 9:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 750;
                        if (!this.precpred(this._ctx, 6)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                        }
                        this.state = 751;
                        _la = this._input.LA(1);
                        if (!(_la === SolidityParser.T__70 || _la === SolidityParser.T__71)) {
                            this._errHandler.recoverInline(this);
                        } else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 752;
                        this.expression(7);
                        break;

                    case 10:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 753;
                        if (!this.precpred(this._ctx, 5)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                        }
                        this.state = 754;
                        this.match(SolidityParser.T__72);
                        this.state = 755;
                        this.expression(6);
                        break;

                    case 11:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 756;
                        if (!this.precpred(this._ctx, 4)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                        }
                        this.state = 757;
                        this.match(SolidityParser.T__73);
                        this.state = 758;
                        this.expression(5);
                        break;

                    case 12:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 759;
                        if (!this.precpred(this._ctx, 3)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                        }
                        this.state = 760;
                        this.match(SolidityParser.T__74);
                        this.state = 761;
                        this.expression(0);
                        this.state = 762;
                        this.match(SolidityParser.T__57);
                        this.state = 763;
                        this.expression(4);
                        break;

                    case 13:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 765;
                        if (!this.precpred(this._ctx, 2)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                        }
                        this.state = 766;
                        _la = this._input.LA(1);
                        if (!(_la === SolidityParser.T__8 || (_la - 76 & ~0x1f) == 0 && (1 << _la - 76 & (1 << SolidityParser.T__75 - 76 | 1 << SolidityParser.T__76 - 76 | 1 << SolidityParser.T__77 - 76 | 1 << SolidityParser.T__78 - 76 | 1 << SolidityParser.T__79 - 76 | 1 << SolidityParser.T__80 - 76 | 1 << SolidityParser.T__81 - 76 | 1 << SolidityParser.T__82 - 76 | 1 << SolidityParser.T__83 - 76 | 1 << SolidityParser.T__84 - 76)) !== 0)) {
                            this._errHandler.recoverInline(this);
                        } else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 767;
                        this.expression(3);
                        break;

                    case 14:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 768;
                        if (!this.precpred(this._ctx, 27)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                        }
                        this.state = 769;
                        _la = this._input.LA(1);
                        if (!(_la === SolidityParser.T__54 || _la === SolidityParser.T__55)) {
                            this._errHandler.recoverInline(this);
                        } else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 15:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 770;
                        if (!this.precpred(this._ctx, 25)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                        }
                        this.state = 771;
                        this.match(SolidityParser.T__31);
                        this.state = 773;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                            this.state = 772;
                            this.expression(0);
                        }

                        this.state = 775;
                        this.match(SolidityParser.T__32);
                        break;

                    case 16:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 776;
                        if (!this.precpred(this._ctx, 24)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                        }
                        this.state = 777;
                        this.match(SolidityParser.T__31);
                        this.state = 779;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                            this.state = 778;
                            this.expression(0);
                        }

                        this.state = 781;
                        this.match(SolidityParser.T__57);
                        this.state = 783;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                            this.state = 782;
                            this.expression(0);
                        }

                        this.state = 785;
                        this.match(SolidityParser.T__32);
                        break;

                    case 17:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 786;
                        if (!this.precpred(this._ctx, 23)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                        }
                        this.state = 787;
                        this.match(SolidityParser.T__34);
                        this.state = 788;
                        this.identifier();
                        break;

                    case 18:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 789;
                        if (!this.precpred(this._ctx, 22)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                        }
                        this.state = 790;
                        this.match(SolidityParser.T__13);
                        this.state = 791;
                        this.nameValueList();
                        this.state = 792;
                        this.match(SolidityParser.T__15);
                        break;

                    case 19:
                        localctx = new ExpressionContext(this, _parentctx, _parentState);
                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                        this.state = 794;
                        if (!this.precpred(this._ctx, 21)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                        }
                        this.state = 795;
                        this.match(SolidityParser.T__21);
                        this.state = 796;
                        this.functionCallArguments();
                        this.state = 797;
                        this.match(SolidityParser.T__22);
                        break;

                }
            }
            this.state = 803;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 86, this._ctx);
        }
    } catch (error) {
        if (error instanceof antlr4.error.RecognitionException) {
            localctx.exception = error;
            this._errHandler.reportError(this, error);
            this._errHandler.recover(this, error);
        } else {
            throw error;
        }
    } finally {
        this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.BooleanLiteral = function () {
    return this.getToken(SolidityParser.BooleanLiteral, 0);
};

PrimaryExpressionContext.prototype.numberLiteral = function () {
    return this.getTypedRuleContext(NumberLiteralContext, 0);
};

PrimaryExpressionContext.prototype.HexLiteral = function () {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

PrimaryExpressionContext.prototype.stringLiteral = function () {
    return this.getTypedRuleContext(StringLiteralContext, 0);
};

PrimaryExpressionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

PrimaryExpressionContext.prototype.TypeKeyword = function () {
    return this.getToken(SolidityParser.TypeKeyword, 0);
};

PrimaryExpressionContext.prototype.PayableKeyword = function () {
    return this.getToken(SolidityParser.PayableKeyword, 0);
};

PrimaryExpressionContext.prototype.tupleExpression = function () {
    return this.getTypedRuleContext(TupleExpressionContext, 0);
};

PrimaryExpressionContext.prototype.typeNameExpression = function () {
    return this.getTypedRuleContext(TypeNameExpressionContext, 0);
};

PrimaryExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterPrimaryExpression(this);
    }
};

PrimaryExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitPrimaryExpression(this);
    }
};

SolidityParser.PrimaryExpressionContext = PrimaryExpressionContext;

SolidityParser.prototype.primaryExpression = function () {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SolidityParser.RULE_primaryExpression);
    try {
        this.state = 821;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 804;
                this.match(SolidityParser.BooleanLiteral);
                break;

            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 805;
                this.numberLiteral();
                break;

            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 806;
                this.match(SolidityParser.HexLiteral);
                break;

            case 4:
                this.enterOuterAlt(localctx, 4);
                this.state = 807;
                this.stringLiteral();
                break;

            case 5:
                this.enterOuterAlt(localctx, 5);
                this.state = 808;
                this.identifier();
                this.state = 811;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);
                if (la_ === 1) {
                    this.state = 809;
                    this.match(SolidityParser.T__31);
                    this.state = 810;
                    this.match(SolidityParser.T__32);
                }
                break;

            case 6:
                this.enterOuterAlt(localctx, 6);
                this.state = 813;
                this.match(SolidityParser.TypeKeyword);
                break;

            case 7:
                this.enterOuterAlt(localctx, 7);
                this.state = 814;
                this.match(SolidityParser.PayableKeyword);
                break;

            case 8:
                this.enterOuterAlt(localctx, 8);
                this.state = 815;
                this.tupleExpression();
                break;

            case 9:
                this.enterOuterAlt(localctx, 9);
                this.state = 816;
                this.typeNameExpression();
                this.state = 819;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);
                if (la_ === 1) {
                    this.state = 817;
                    this.match(SolidityParser.T__31);
                    this.state = 818;
                    this.match(SolidityParser.T__32);
                }
                break;

        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};

ExpressionListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterExpressionList(this);
    }
};

ExpressionListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitExpressionList(this);
    }
};

SolidityParser.ExpressionListContext = ExpressionListContext;

SolidityParser.prototype.expressionList = function () {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SolidityParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 823;
        this.expression(0);
        this.state = 828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SolidityParser.T__14) {
            this.state = 824;
            this.match(SolidityParser.T__14);
            this.state = 825;
            this.expression(0);
            this.state = 830;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameValueListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_nameValueList;
    return this;
}

NameValueListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameValueListContext.prototype.constructor = NameValueListContext;

NameValueListContext.prototype.nameValue = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(NameValueContext);
    } else {
        return this.getTypedRuleContext(NameValueContext, i);
    }
};

NameValueListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterNameValueList(this);
    }
};

NameValueListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitNameValueList(this);
    }
};

SolidityParser.NameValueListContext = NameValueListContext;

SolidityParser.prototype.nameValueList = function () {

    var localctx = new NameValueListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SolidityParser.RULE_nameValueList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 831;
        this.nameValue();
        this.state = 836;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 91, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 832;
                this.match(SolidityParser.T__14);
                this.state = 833;
                this.nameValue();
            }
            this.state = 838;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 91, this._ctx);
        }

        this.state = 840;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__14) {
            this.state = 839;
            this.match(SolidityParser.T__14);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameValueContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_nameValue;
    return this;
}

NameValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameValueContext.prototype.constructor = NameValueContext;

NameValueContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

NameValueContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

NameValueContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterNameValue(this);
    }
};

NameValueContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitNameValue(this);
    }
};

SolidityParser.NameValueContext = NameValueContext;

SolidityParser.prototype.nameValue = function () {

    var localctx = new NameValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SolidityParser.RULE_nameValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.identifier();
        this.state = 843;
        this.match(SolidityParser.T__57);
        this.state = 844;
        this.expression(0);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallArgumentsContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionCallArguments;
    return this;
}

FunctionCallArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallArgumentsContext.prototype.constructor = FunctionCallArgumentsContext;

FunctionCallArgumentsContext.prototype.nameValueList = function () {
    return this.getTypedRuleContext(NameValueListContext, 0);
};

FunctionCallArgumentsContext.prototype.expressionList = function () {
    return this.getTypedRuleContext(ExpressionListContext, 0);
};

FunctionCallArgumentsContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterFunctionCallArguments(this);
    }
};

FunctionCallArgumentsContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitFunctionCallArguments(this);
    }
};

SolidityParser.FunctionCallArgumentsContext = FunctionCallArgumentsContext;

SolidityParser.prototype.functionCallArguments = function () {

    var localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SolidityParser.RULE_functionCallArguments);
    var _la = 0; // Token type
    try {
        this.state = 854;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__13:
                this.enterOuterAlt(localctx, 1);
                this.state = 846;
                this.match(SolidityParser.T__13);
                this.state = 848;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
                    this.state = 847;
                    this.nameValueList();
                }

                this.state = 850;
                this.match(SolidityParser.T__15);
                break;
            case SolidityParser.T__3:
            case SolidityParser.T__12:
            case SolidityParser.T__21:
            case SolidityParser.T__22:
            case SolidityParser.T__31:
            case SolidityParser.T__33:
            case SolidityParser.T__39:
            case SolidityParser.T__50:
            case SolidityParser.T__51:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.T__56:
            case SolidityParser.T__58:
            case SolidityParser.T__59:
            case SolidityParser.T__60:
            case SolidityParser.T__61:
            case SolidityParser.T__62:
            case SolidityParser.T__92:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.BooleanLiteral:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteral:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.TypeKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
                this.enterOuterAlt(localctx, 2);
                this.state = 852;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                    this.state = 851;
                    this.expressionList();
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FunctionCallContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};

FunctionCallContext.prototype.functionCallArguments = function () {
    return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);
};

FunctionCallContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterFunctionCall(this);
    }
};

FunctionCallContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitFunctionCall(this);
    }
};

SolidityParser.FunctionCallContext = FunctionCallContext;

SolidityParser.prototype.functionCall = function () {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SolidityParser.RULE_functionCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 856;
        this.expression(0);
        this.state = 857;
        this.match(SolidityParser.T__21);
        this.state = 858;
        this.functionCallArguments();
        this.state = 859;
        this.match(SolidityParser.T__22);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyBlockContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyBlock;
    return this;
}

AssemblyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyBlockContext.prototype.constructor = AssemblyBlockContext;

AssemblyBlockContext.prototype.assemblyItem = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(AssemblyItemContext);
    } else {
        return this.getTypedRuleContext(AssemblyItemContext, i);
    }
};

AssemblyBlockContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyBlock(this);
    }
};

AssemblyBlockContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyBlock(this);
    }
};

SolidityParser.AssemblyBlockContext = AssemblyBlockContext;

SolidityParser.prototype.assemblyBlock = function () {

    var localctx = new AssemblyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SolidityParser.RULE_assemblyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 861;
        this.match(SolidityParser.T__13);
        this.state = 865;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__12 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__21 | 1 << SolidityParser.T__24 | 1 << SolidityParser.T__27)) !== 0 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__40 - 34 | 1 << SolidityParser.T__45 - 34 | 1 << SolidityParser.T__47 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 86 & ~0x1f) == 0 && (1 << _la - 86 & (1 << SolidityParser.T__85 - 86 | 1 << SolidityParser.T__87 - 86 | 1 << SolidityParser.T__88 - 86 | 1 << SolidityParser.T__92 - 86 | 1 << SolidityParser.DecimalNumber - 86 | 1 << SolidityParser.HexNumber - 86 | 1 << SolidityParser.HexLiteral - 86 | 1 << SolidityParser.BreakKeyword - 86 | 1 << SolidityParser.ContinueKeyword - 86 | 1 << SolidityParser.LeaveKeyword - 86 | 1 << SolidityParser.PayableKeyword - 86)) !== 0 || (_la - 124 & ~0x1f) == 0 && (1 << _la - 124 & (1 << SolidityParser.ReceiveKeyword - 124 | 1 << SolidityParser.Identifier - 124 | 1 << SolidityParser.StringLiteralFragment - 124)) !== 0) {
            this.state = 862;
            this.assemblyItem();
            this.state = 867;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 868;
        this.match(SolidityParser.T__15);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyItem;
    return this;
}

AssemblyItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyItemContext.prototype.constructor = AssemblyItemContext;

AssemblyItemContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

AssemblyItemContext.prototype.assemblyBlock = function () {
    return this.getTypedRuleContext(AssemblyBlockContext, 0);
};

AssemblyItemContext.prototype.assemblyExpression = function () {
    return this.getTypedRuleContext(AssemblyExpressionContext, 0);
};

AssemblyItemContext.prototype.assemblyLocalDefinition = function () {
    return this.getTypedRuleContext(AssemblyLocalDefinitionContext, 0);
};

AssemblyItemContext.prototype.assemblyAssignment = function () {
    return this.getTypedRuleContext(AssemblyAssignmentContext, 0);
};

AssemblyItemContext.prototype.assemblyStackAssignment = function () {
    return this.getTypedRuleContext(AssemblyStackAssignmentContext, 0);
};

AssemblyItemContext.prototype.labelDefinition = function () {
    return this.getTypedRuleContext(LabelDefinitionContext, 0);
};

AssemblyItemContext.prototype.assemblySwitch = function () {
    return this.getTypedRuleContext(AssemblySwitchContext, 0);
};

AssemblyItemContext.prototype.assemblyFunctionDefinition = function () {
    return this.getTypedRuleContext(AssemblyFunctionDefinitionContext, 0);
};

AssemblyItemContext.prototype.assemblyFor = function () {
    return this.getTypedRuleContext(AssemblyForContext, 0);
};

AssemblyItemContext.prototype.assemblyIf = function () {
    return this.getTypedRuleContext(AssemblyIfContext, 0);
};

AssemblyItemContext.prototype.BreakKeyword = function () {
    return this.getToken(SolidityParser.BreakKeyword, 0);
};

AssemblyItemContext.prototype.ContinueKeyword = function () {
    return this.getToken(SolidityParser.ContinueKeyword, 0);
};

AssemblyItemContext.prototype.LeaveKeyword = function () {
    return this.getToken(SolidityParser.LeaveKeyword, 0);
};

AssemblyItemContext.prototype.subAssembly = function () {
    return this.getTypedRuleContext(SubAssemblyContext, 0);
};

AssemblyItemContext.prototype.numberLiteral = function () {
    return this.getTypedRuleContext(NumberLiteralContext, 0);
};

AssemblyItemContext.prototype.stringLiteral = function () {
    return this.getTypedRuleContext(StringLiteralContext, 0);
};

AssemblyItemContext.prototype.HexLiteral = function () {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

AssemblyItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyItem(this);
    }
};

AssemblyItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyItem(this);
    }
};

SolidityParser.AssemblyItemContext = AssemblyItemContext;

SolidityParser.prototype.assemblyItem = function () {

    var localctx = new AssemblyItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SolidityParser.RULE_assemblyItem);
    try {
        this.state = 888;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 870;
                this.identifier();
                break;

            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 871;
                this.assemblyBlock();
                break;

            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 872;
                this.assemblyExpression();
                break;

            case 4:
                this.enterOuterAlt(localctx, 4);
                this.state = 873;
                this.assemblyLocalDefinition();
                break;

            case 5:
                this.enterOuterAlt(localctx, 5);
                this.state = 874;
                this.assemblyAssignment();
                break;

            case 6:
                this.enterOuterAlt(localctx, 6);
                this.state = 875;
                this.assemblyStackAssignment();
                break;

            case 7:
                this.enterOuterAlt(localctx, 7);
                this.state = 876;
                this.labelDefinition();
                break;

            case 8:
                this.enterOuterAlt(localctx, 8);
                this.state = 877;
                this.assemblySwitch();
                break;

            case 9:
                this.enterOuterAlt(localctx, 9);
                this.state = 878;
                this.assemblyFunctionDefinition();
                break;

            case 10:
                this.enterOuterAlt(localctx, 10);
                this.state = 879;
                this.assemblyFor();
                break;

            case 11:
                this.enterOuterAlt(localctx, 11);
                this.state = 880;
                this.assemblyIf();
                break;

            case 12:
                this.enterOuterAlt(localctx, 12);
                this.state = 881;
                this.match(SolidityParser.BreakKeyword);
                break;

            case 13:
                this.enterOuterAlt(localctx, 13);
                this.state = 882;
                this.match(SolidityParser.ContinueKeyword);
                break;

            case 14:
                this.enterOuterAlt(localctx, 14);
                this.state = 883;
                this.match(SolidityParser.LeaveKeyword);
                break;

            case 15:
                this.enterOuterAlt(localctx, 15);
                this.state = 884;
                this.subAssembly();
                break;

            case 16:
                this.enterOuterAlt(localctx, 16);
                this.state = 885;
                this.numberLiteral();
                break;

            case 17:
                this.enterOuterAlt(localctx, 17);
                this.state = 886;
                this.stringLiteral();
                break;

            case 18:
                this.enterOuterAlt(localctx, 18);
                this.state = 887;
                this.match(SolidityParser.HexLiteral);
                break;

        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyExpression;
    return this;
}

AssemblyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyExpressionContext.prototype.constructor = AssemblyExpressionContext;

AssemblyExpressionContext.prototype.assemblyCall = function () {
    return this.getTypedRuleContext(AssemblyCallContext, 0);
};

AssemblyExpressionContext.prototype.assemblyLiteral = function () {
    return this.getTypedRuleContext(AssemblyLiteralContext, 0);
};

AssemblyExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyExpression(this);
    }
};

AssemblyExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyExpression(this);
    }
};

SolidityParser.AssemblyExpressionContext = AssemblyExpressionContext;

SolidityParser.prototype.assemblyExpression = function () {

    var localctx = new AssemblyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SolidityParser.RULE_assemblyExpression);
    try {
        this.state = 892;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__12:
            case SolidityParser.T__33:
            case SolidityParser.T__39:
            case SolidityParser.T__47:
            case SolidityParser.T__53:
            case SolidityParser.T__92:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
                this.enterOuterAlt(localctx, 1);
                this.state = 890;
                this.assemblyCall();
                break;
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteral:
            case SolidityParser.StringLiteralFragment:
                this.enterOuterAlt(localctx, 2);
                this.state = 891;
                this.assemblyLiteral();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyCallContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyCall;
    return this;
}

AssemblyCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyCallContext.prototype.constructor = AssemblyCallContext;

AssemblyCallContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

AssemblyCallContext.prototype.assemblyExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(AssemblyExpressionContext);
    } else {
        return this.getTypedRuleContext(AssemblyExpressionContext, i);
    }
};

AssemblyCallContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyCall(this);
    }
};

AssemblyCallContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyCall(this);
    }
};

SolidityParser.AssemblyCallContext = AssemblyCallContext;

SolidityParser.prototype.assemblyCall = function () {

    var localctx = new AssemblyCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SolidityParser.RULE_assemblyCall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 898;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__47:
                this.state = 894;
                this.match(SolidityParser.T__47);
                break;
            case SolidityParser.T__33:
                this.state = 895;
                this.match(SolidityParser.T__33);
                break;
            case SolidityParser.T__53:
                this.state = 896;
                this.match(SolidityParser.T__53);
                break;
            case SolidityParser.T__12:
            case SolidityParser.T__39:
            case SolidityParser.T__92:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
                this.state = 897;
                this.identifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 912;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 102, this._ctx);
        if (la_ === 1) {
            this.state = 900;
            this.match(SolidityParser.T__21);
            this.state = 902;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SolidityParser.T__12 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__47 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                this.state = 901;
                this.assemblyExpression();
            }

            this.state = 908;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SolidityParser.T__14) {
                this.state = 904;
                this.match(SolidityParser.T__14);
                this.state = 905;
                this.assemblyExpression();
                this.state = 910;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 911;
            this.match(SolidityParser.T__22);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyLocalDefinitionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyLocalDefinition;
    return this;
}

AssemblyLocalDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyLocalDefinitionContext.prototype.constructor = AssemblyLocalDefinitionContext;

AssemblyLocalDefinitionContext.prototype.assemblyIdentifierOrList = function () {
    return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);
};

AssemblyLocalDefinitionContext.prototype.assemblyExpression = function () {
    return this.getTypedRuleContext(AssemblyExpressionContext, 0);
};

AssemblyLocalDefinitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyLocalDefinition(this);
    }
};

AssemblyLocalDefinitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyLocalDefinition(this);
    }
};

SolidityParser.AssemblyLocalDefinitionContext = AssemblyLocalDefinitionContext;

SolidityParser.prototype.assemblyLocalDefinition = function () {

    var localctx = new AssemblyLocalDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SolidityParser.RULE_assemblyLocalDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 914;
        this.match(SolidityParser.T__85);
        this.state = 915;
        this.assemblyIdentifierOrList();
        this.state = 918;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__86) {
            this.state = 916;
            this.match(SolidityParser.T__86);
            this.state = 917;
            this.assemblyExpression();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyAssignmentContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyAssignment;
    return this;
}

AssemblyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyAssignmentContext.prototype.constructor = AssemblyAssignmentContext;

AssemblyAssignmentContext.prototype.assemblyIdentifierOrList = function () {
    return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);
};

AssemblyAssignmentContext.prototype.assemblyExpression = function () {
    return this.getTypedRuleContext(AssemblyExpressionContext, 0);
};

AssemblyAssignmentContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyAssignment(this);
    }
};

AssemblyAssignmentContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyAssignment(this);
    }
};

SolidityParser.AssemblyAssignmentContext = AssemblyAssignmentContext;

SolidityParser.prototype.assemblyAssignment = function () {

    var localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SolidityParser.RULE_assemblyAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 920;
        this.assemblyIdentifierOrList();
        this.state = 921;
        this.match(SolidityParser.T__86);
        this.state = 922;
        this.assemblyExpression();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyIdentifierOrListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyIdentifierOrList;
    return this;
}

AssemblyIdentifierOrListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyIdentifierOrListContext.prototype.constructor = AssemblyIdentifierOrListContext;

AssemblyIdentifierOrListContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

AssemblyIdentifierOrListContext.prototype.assemblyIdentifierList = function () {
    return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);
};

AssemblyIdentifierOrListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyIdentifierOrList(this);
    }
};

AssemblyIdentifierOrListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyIdentifierOrList(this);
    }
};

SolidityParser.AssemblyIdentifierOrListContext = AssemblyIdentifierOrListContext;

SolidityParser.prototype.assemblyIdentifierOrList = function () {

    var localctx = new AssemblyIdentifierOrListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SolidityParser.RULE_assemblyIdentifierOrList);
    try {
        this.state = 929;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__12:
            case SolidityParser.T__39:
            case SolidityParser.T__92:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
                this.enterOuterAlt(localctx, 1);
                this.state = 924;
                this.identifier();
                break;
            case SolidityParser.T__21:
                this.enterOuterAlt(localctx, 2);
                this.state = 925;
                this.match(SolidityParser.T__21);
                this.state = 926;
                this.assemblyIdentifierList();
                this.state = 927;
                this.match(SolidityParser.T__22);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyIdentifierListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyIdentifierList;
    return this;
}

AssemblyIdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyIdentifierListContext.prototype.constructor = AssemblyIdentifierListContext;

AssemblyIdentifierListContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};

AssemblyIdentifierListContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyIdentifierList(this);
    }
};

AssemblyIdentifierListContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyIdentifierList(this);
    }
};

SolidityParser.AssemblyIdentifierListContext = AssemblyIdentifierListContext;

SolidityParser.prototype.assemblyIdentifierList = function () {

    var localctx = new AssemblyIdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SolidityParser.RULE_assemblyIdentifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.identifier();
        this.state = 936;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SolidityParser.T__14) {
            this.state = 932;
            this.match(SolidityParser.T__14);
            this.state = 933;
            this.identifier();
            this.state = 938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyStackAssignmentContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyStackAssignment;
    return this;
}

AssemblyStackAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyStackAssignmentContext.prototype.constructor = AssemblyStackAssignmentContext;

AssemblyStackAssignmentContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

AssemblyStackAssignmentContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyStackAssignment(this);
    }
};

AssemblyStackAssignmentContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyStackAssignment(this);
    }
};

SolidityParser.AssemblyStackAssignmentContext = AssemblyStackAssignmentContext;

SolidityParser.prototype.assemblyStackAssignment = function () {

    var localctx = new AssemblyStackAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SolidityParser.RULE_assemblyStackAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        this.match(SolidityParser.T__87);
        this.state = 940;
        this.identifier();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelDefinitionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_labelDefinition;
    return this;
}

LabelDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelDefinitionContext.prototype.constructor = LabelDefinitionContext;

LabelDefinitionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

LabelDefinitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterLabelDefinition(this);
    }
};

LabelDefinitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitLabelDefinition(this);
    }
};

SolidityParser.LabelDefinitionContext = LabelDefinitionContext;

SolidityParser.prototype.labelDefinition = function () {

    var localctx = new LabelDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SolidityParser.RULE_labelDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 942;
        this.identifier();
        this.state = 943;
        this.match(SolidityParser.T__57);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblySwitchContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblySwitch;
    return this;
}

AssemblySwitchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblySwitchContext.prototype.constructor = AssemblySwitchContext;

AssemblySwitchContext.prototype.assemblyExpression = function () {
    return this.getTypedRuleContext(AssemblyExpressionContext, 0);
};

AssemblySwitchContext.prototype.assemblyCase = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(AssemblyCaseContext);
    } else {
        return this.getTypedRuleContext(AssemblyCaseContext, i);
    }
};

AssemblySwitchContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblySwitch(this);
    }
};

AssemblySwitchContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblySwitch(this);
    }
};

SolidityParser.AssemblySwitchContext = AssemblySwitchContext;

SolidityParser.prototype.assemblySwitch = function () {

    var localctx = new AssemblySwitchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SolidityParser.RULE_assemblySwitch);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 945;
        this.match(SolidityParser.T__88);
        this.state = 946;
        this.assemblyExpression();
        this.state = 950;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SolidityParser.T__89 || _la === SolidityParser.T__90) {
            this.state = 947;
            this.assemblyCase();
            this.state = 952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyCaseContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyCase;
    return this;
}

AssemblyCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyCaseContext.prototype.constructor = AssemblyCaseContext;

AssemblyCaseContext.prototype.assemblyLiteral = function () {
    return this.getTypedRuleContext(AssemblyLiteralContext, 0);
};

AssemblyCaseContext.prototype.assemblyBlock = function () {
    return this.getTypedRuleContext(AssemblyBlockContext, 0);
};

AssemblyCaseContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyCase(this);
    }
};

AssemblyCaseContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyCase(this);
    }
};

SolidityParser.AssemblyCaseContext = AssemblyCaseContext;

SolidityParser.prototype.assemblyCase = function () {

    var localctx = new AssemblyCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SolidityParser.RULE_assemblyCase);
    try {
        this.state = 959;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__89:
                this.enterOuterAlt(localctx, 1);
                this.state = 953;
                this.match(SolidityParser.T__89);
                this.state = 954;
                this.assemblyLiteral();
                this.state = 955;
                this.assemblyBlock();
                break;
            case SolidityParser.T__90:
                this.enterOuterAlt(localctx, 2);
                this.state = 957;
                this.match(SolidityParser.T__90);
                this.state = 958;
                this.assemblyBlock();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyFunctionDefinitionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyFunctionDefinition;
    return this;
}

AssemblyFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyFunctionDefinitionContext.prototype.constructor = AssemblyFunctionDefinitionContext;

AssemblyFunctionDefinitionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

AssemblyFunctionDefinitionContext.prototype.assemblyBlock = function () {
    return this.getTypedRuleContext(AssemblyBlockContext, 0);
};

AssemblyFunctionDefinitionContext.prototype.assemblyIdentifierList = function () {
    return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);
};

AssemblyFunctionDefinitionContext.prototype.assemblyFunctionReturns = function () {
    return this.getTypedRuleContext(AssemblyFunctionReturnsContext, 0);
};

AssemblyFunctionDefinitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyFunctionDefinition(this);
    }
};

AssemblyFunctionDefinitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyFunctionDefinition(this);
    }
};

SolidityParser.AssemblyFunctionDefinitionContext = AssemblyFunctionDefinitionContext;

SolidityParser.prototype.assemblyFunctionDefinition = function () {

    var localctx = new AssemblyFunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SolidityParser.RULE_assemblyFunctionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        this.match(SolidityParser.T__27);
        this.state = 962;
        this.identifier();
        this.state = 963;
        this.match(SolidityParser.T__21);
        this.state = 965;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 964;
            this.assemblyIdentifierList();
        }

        this.state = 967;
        this.match(SolidityParser.T__22);
        this.state = 969;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__91) {
            this.state = 968;
            this.assemblyFunctionReturns();
        }

        this.state = 971;
        this.assemblyBlock();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyFunctionReturnsContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyFunctionReturns;
    return this;
}

AssemblyFunctionReturnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyFunctionReturnsContext.prototype.constructor = AssemblyFunctionReturnsContext;

AssemblyFunctionReturnsContext.prototype.assemblyIdentifierList = function () {
    return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);
};

AssemblyFunctionReturnsContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyFunctionReturns(this);
    }
};

AssemblyFunctionReturnsContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyFunctionReturns(this);
    }
};

SolidityParser.AssemblyFunctionReturnsContext = AssemblyFunctionReturnsContext;

SolidityParser.prototype.assemblyFunctionReturns = function () {

    var localctx = new AssemblyFunctionReturnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SolidityParser.RULE_assemblyFunctionReturns);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 973;
        this.match(SolidityParser.T__91);
        this.state = 974;
        this.assemblyIdentifierList();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyForContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyFor;
    return this;
}

AssemblyForContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyForContext.prototype.constructor = AssemblyForContext;

AssemblyForContext.prototype.assemblyExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(AssemblyExpressionContext);
    } else {
        return this.getTypedRuleContext(AssemblyExpressionContext, i);
    }
};

AssemblyForContext.prototype.assemblyBlock = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(AssemblyBlockContext);
    } else {
        return this.getTypedRuleContext(AssemblyBlockContext, i);
    }
};

AssemblyForContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyFor(this);
    }
};

AssemblyForContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyFor(this);
    }
};

SolidityParser.AssemblyForContext = AssemblyForContext;

SolidityParser.prototype.assemblyFor = function () {

    var localctx = new AssemblyForContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SolidityParser.RULE_assemblyFor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.match(SolidityParser.T__24);
        this.state = 979;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__13:
                this.state = 977;
                this.assemblyBlock();
                break;
            case SolidityParser.T__12:
            case SolidityParser.T__33:
            case SolidityParser.T__39:
            case SolidityParser.T__47:
            case SolidityParser.T__53:
            case SolidityParser.T__92:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteral:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
                this.state = 978;
                this.assemblyExpression();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 981;
        this.assemblyExpression();
        this.state = 984;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__13:
                this.state = 982;
                this.assemblyBlock();
                break;
            case SolidityParser.T__12:
            case SolidityParser.T__33:
            case SolidityParser.T__39:
            case SolidityParser.T__47:
            case SolidityParser.T__53:
            case SolidityParser.T__92:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteral:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
                this.state = 983;
                this.assemblyExpression();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 986;
        this.assemblyBlock();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyIfContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyIf;
    return this;
}

AssemblyIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyIfContext.prototype.constructor = AssemblyIfContext;

AssemblyIfContext.prototype.assemblyExpression = function () {
    return this.getTypedRuleContext(AssemblyExpressionContext, 0);
};

AssemblyIfContext.prototype.assemblyBlock = function () {
    return this.getTypedRuleContext(AssemblyBlockContext, 0);
};

AssemblyIfContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyIf(this);
    }
};

AssemblyIfContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyIf(this);
    }
};

SolidityParser.AssemblyIfContext = AssemblyIfContext;

SolidityParser.prototype.assemblyIf = function () {

    var localctx = new AssemblyIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SolidityParser.RULE_assemblyIf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 988;
        this.match(SolidityParser.T__40);
        this.state = 989;
        this.assemblyExpression();
        this.state = 990;
        this.assemblyBlock();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyLiteral;
    return this;
}

AssemblyLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyLiteralContext.prototype.constructor = AssemblyLiteralContext;

AssemblyLiteralContext.prototype.stringLiteral = function () {
    return this.getTypedRuleContext(StringLiteralContext, 0);
};

AssemblyLiteralContext.prototype.DecimalNumber = function () {
    return this.getToken(SolidityParser.DecimalNumber, 0);
};

AssemblyLiteralContext.prototype.HexNumber = function () {
    return this.getToken(SolidityParser.HexNumber, 0);
};

AssemblyLiteralContext.prototype.HexLiteral = function () {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

AssemblyLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterAssemblyLiteral(this);
    }
};

AssemblyLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitAssemblyLiteral(this);
    }
};

SolidityParser.AssemblyLiteralContext = AssemblyLiteralContext;

SolidityParser.prototype.assemblyLiteral = function () {

    var localctx = new AssemblyLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SolidityParser.RULE_assemblyLiteral);
    try {
        this.state = 996;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.StringLiteralFragment:
                this.enterOuterAlt(localctx, 1);
                this.state = 992;
                this.stringLiteral();
                break;
            case SolidityParser.DecimalNumber:
                this.enterOuterAlt(localctx, 2);
                this.state = 993;
                this.match(SolidityParser.DecimalNumber);
                break;
            case SolidityParser.HexNumber:
                this.enterOuterAlt(localctx, 3);
                this.state = 994;
                this.match(SolidityParser.HexNumber);
                break;
            case SolidityParser.HexLiteral:
                this.enterOuterAlt(localctx, 4);
                this.state = 995;
                this.match(SolidityParser.HexLiteral);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubAssemblyContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_subAssembly;
    return this;
}

SubAssemblyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubAssemblyContext.prototype.constructor = SubAssemblyContext;

SubAssemblyContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};

SubAssemblyContext.prototype.assemblyBlock = function () {
    return this.getTypedRuleContext(AssemblyBlockContext, 0);
};

SubAssemblyContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterSubAssembly(this);
    }
};

SubAssemblyContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitSubAssembly(this);
    }
};

SolidityParser.SubAssemblyContext = SubAssemblyContext;

SolidityParser.prototype.subAssembly = function () {

    var localctx = new SubAssemblyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SolidityParser.RULE_subAssembly);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 998;
        this.match(SolidityParser.T__45);
        this.state = 999;
        this.identifier();
        this.state = 1000;
        this.assemblyBlock();
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TupleExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_tupleExpression;
    return this;
}

TupleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleExpressionContext.prototype.constructor = TupleExpressionContext;

TupleExpressionContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};

TupleExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterTupleExpression(this);
    }
};

TupleExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitTupleExpression(this);
    }
};

SolidityParser.TupleExpressionContext = TupleExpressionContext;

SolidityParser.prototype.tupleExpression = function () {

    var localctx = new TupleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SolidityParser.RULE_tupleExpression);
    var _la = 0; // Token type
    try {
        this.state = 1028;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__21:
                this.enterOuterAlt(localctx, 1);
                this.state = 1002;
                this.match(SolidityParser.T__21);

                this.state = 1004;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                    this.state = 1003;
                    this.expression(0);
                }

                this.state = 1012;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SolidityParser.T__14) {
                    this.state = 1006;
                    this.match(SolidityParser.T__14);
                    this.state = 1008;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                        this.state = 1007;
                        this.expression(0);
                    }

                    this.state = 1014;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1015;
                this.match(SolidityParser.T__22);
                break;
            case SolidityParser.T__31:
                this.enterOuterAlt(localctx, 2);
                this.state = 1016;
                this.match(SolidityParser.T__31);
                this.state = 1025;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteral - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                    this.state = 1017;
                    this.expression(0);
                    this.state = 1022;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SolidityParser.T__14) {
                        this.state = 1018;
                        this.match(SolidityParser.T__14);
                        this.state = 1019;
                        this.expression(0);
                        this.state = 1024;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                this.state = 1027;
                this.match(SolidityParser.T__32);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNameExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_typeNameExpression;
    return this;
}

TypeNameExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameExpressionContext.prototype.constructor = TypeNameExpressionContext;

TypeNameExpressionContext.prototype.elementaryTypeName = function () {
    return this.getTypedRuleContext(ElementaryTypeNameContext, 0);
};

TypeNameExpressionContext.prototype.userDefinedTypeName = function () {
    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
};

TypeNameExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterTypeNameExpression(this);
    }
};

TypeNameExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitTypeNameExpression(this);
    }
};

SolidityParser.TypeNameExpressionContext = TypeNameExpressionContext;

SolidityParser.prototype.typeNameExpression = function () {

    var localctx = new TypeNameExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SolidityParser.RULE_typeNameExpression);
    try {
        this.state = 1032;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case SolidityParser.T__33:
            case SolidityParser.T__50:
            case SolidityParser.T__51:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
                this.enterOuterAlt(localctx, 1);
                this.state = 1030;
                this.elementaryTypeName();
                break;
            case SolidityParser.T__12:
            case SolidityParser.T__39:
            case SolidityParser.T__92:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
                this.enterOuterAlt(localctx, 2);
                this.state = 1031;
                this.userDefinedTypeName();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_numberLiteral;
    return this;
}

NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

NumberLiteralContext.prototype.DecimalNumber = function () {
    return this.getToken(SolidityParser.DecimalNumber, 0);
};

NumberLiteralContext.prototype.HexNumber = function () {
    return this.getToken(SolidityParser.HexNumber, 0);
};

NumberLiteralContext.prototype.NumberUnit = function () {
    return this.getToken(SolidityParser.NumberUnit, 0);
};

NumberLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterNumberLiteral(this);
    }
};

NumberLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitNumberLiteral(this);
    }
};

SolidityParser.NumberLiteralContext = NumberLiteralContext;

SolidityParser.prototype.numberLiteral = function () {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SolidityParser.RULE_numberLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1034;
        _la = this._input.LA(1);
        if (!(_la === SolidityParser.DecimalNumber || _la === SolidityParser.HexNumber)) {
            this._errHandler.recoverInline(this);
        } else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1036;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 120, this._ctx);
        if (la_ === 1) {
            this.state = 1035;
            this.match(SolidityParser.NumberUnit);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.ReceiveKeyword = function () {
    return this.getToken(SolidityParser.ReceiveKeyword, 0);
};

IdentifierContext.prototype.PayableKeyword = function () {
    return this.getToken(SolidityParser.PayableKeyword, 0);
};

IdentifierContext.prototype.LeaveKeyword = function () {
    return this.getToken(SolidityParser.LeaveKeyword, 0);
};

IdentifierContext.prototype.Identifier = function () {
    return this.getToken(SolidityParser.Identifier, 0);
};

IdentifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterIdentifier(this);
    }
};

IdentifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitIdentifier(this);
    }
};

SolidityParser.IdentifierContext = IdentifierContext;

SolidityParser.prototype.identifier = function () {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SolidityParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1038;
        _la = this._input.LA(1);
        if (!(_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier)) {
            this._errHandler.recoverInline(this);
        } else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OverrideSpecifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_overrideSpecifier;
    return this;
}

OverrideSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OverrideSpecifierContext.prototype.constructor = OverrideSpecifierContext;

OverrideSpecifierContext.prototype.userDefinedTypeName = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(UserDefinedTypeNameContext);
    } else {
        return this.getTypedRuleContext(UserDefinedTypeNameContext, i);
    }
};

OverrideSpecifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterOverrideSpecifier(this);
    }
};

OverrideSpecifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitOverrideSpecifier(this);
    }
};

SolidityParser.OverrideSpecifierContext = OverrideSpecifierContext;

SolidityParser.prototype.overrideSpecifier = function () {

    var localctx = new OverrideSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SolidityParser.RULE_overrideSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1040;
        this.match(SolidityParser.T__93);
        this.state = 1052;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SolidityParser.T__21) {
            this.state = 1041;
            this.match(SolidityParser.T__21);
            this.state = 1042;
            this.userDefinedTypeName();
            this.state = 1047;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SolidityParser.T__14) {
                this.state = 1043;
                this.match(SolidityParser.T__14);
                this.state = 1044;
                this.userDefinedTypeName();
                this.state = 1049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1050;
            this.match(SolidityParser.T__22);
        }
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.StringLiteralFragment = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(SolidityParser.StringLiteralFragment);
    } else {
        return this.getToken(SolidityParser.StringLiteralFragment, i);
    }
};

StringLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.enterStringLiteral(this);
    }
};

StringLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof SolidityListener) {
        listener.exitStringLiteral(this);
    }
};

SolidityParser.StringLiteralContext = StringLiteralContext;

SolidityParser.prototype.stringLiteral = function () {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SolidityParser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1055;
        this._errHandler.sync(this);
        var _alt = 1;
        do {
            switch (_alt) {
                case 1:
                    this.state = 1054;
                    this.match(SolidityParser.StringLiteralFragment);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1057;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 123, this._ctx);
        } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

SolidityParser.prototype.sempred = function (localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
        case 31:
            return this.typeName_sempred(localctx, predIndex);
        case 58:
            return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
    }
};

SolidityParser.prototype.typeName_sempred = function (localctx, predIndex) {
    switch (predIndex) {
        case 0:
            return this.precpred(this._ctx, 3);
        default:
            throw "No predicate with index:" + predIndex;
    }
};

SolidityParser.prototype.expression_sempred = function (localctx, predIndex) {
    switch (predIndex) {
        case 1:
            return this.precpred(this._ctx, 14);
        case 2:
            return this.precpred(this._ctx, 13);
        case 3:
            return this.precpred(this._ctx, 12);
        case 4:
            return this.precpred(this._ctx, 11);
        case 5:
            return this.precpred(this._ctx, 10);
        case 6:
            return this.precpred(this._ctx, 9);
        case 7:
            return this.precpred(this._ctx, 8);
        case 8:
            return this.precpred(this._ctx, 7);
        case 9:
            return this.precpred(this._ctx, 6);
        case 10:
            return this.precpred(this._ctx, 5);
        case 11:
            return this.precpred(this._ctx, 4);
        case 12:
            return this.precpred(this._ctx, 3);
        case 13:
            return this.precpred(this._ctx, 2);
        case 14:
            return this.precpred(this._ctx, 27);
        case 15:
            return this.precpred(this._ctx, 25);
        case 16:
            return this.precpred(this._ctx, 24);
        case 17:
            return this.precpred(this._ctx, 23);
        case 18:
            return this.precpred(this._ctx, 22);
        case 19:
            return this.precpred(this._ctx, 21);
        default:
            throw "No predicate with index:" + predIndex;
    }
};

exports.SolidityParser = SolidityParser;

/***/ }),
/* 58 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


// Generated from antlr/Solidity.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = __webpack_require__(9);

// This class defines a complete listener for a parse tree produced by SolidityParser.
function SolidityListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

SolidityListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
SolidityListener.prototype.constructor = SolidityListener;

// Enter a parse tree produced by SolidityParser#sourceUnit.
SolidityListener.prototype.enterSourceUnit = function (ctx) {};

// Exit a parse tree produced by SolidityParser#sourceUnit.
SolidityListener.prototype.exitSourceUnit = function (ctx) {};

// Enter a parse tree produced by SolidityParser#pragmaDirective.
SolidityListener.prototype.enterPragmaDirective = function (ctx) {};

// Exit a parse tree produced by SolidityParser#pragmaDirective.
SolidityListener.prototype.exitPragmaDirective = function (ctx) {};

// Enter a parse tree produced by SolidityParser#pragmaName.
SolidityListener.prototype.enterPragmaName = function (ctx) {};

// Exit a parse tree produced by SolidityParser#pragmaName.
SolidityListener.prototype.exitPragmaName = function (ctx) {};

// Enter a parse tree produced by SolidityParser#pragmaValue.
SolidityListener.prototype.enterPragmaValue = function (ctx) {};

// Exit a parse tree produced by SolidityParser#pragmaValue.
SolidityListener.prototype.exitPragmaValue = function (ctx) {};

// Enter a parse tree produced by SolidityParser#version.
SolidityListener.prototype.enterVersion = function (ctx) {};

// Exit a parse tree produced by SolidityParser#version.
SolidityListener.prototype.exitVersion = function (ctx) {};

// Enter a parse tree produced by SolidityParser#versionOperator.
SolidityListener.prototype.enterVersionOperator = function (ctx) {};

// Exit a parse tree produced by SolidityParser#versionOperator.
SolidityListener.prototype.exitVersionOperator = function (ctx) {};

// Enter a parse tree produced by SolidityParser#versionConstraint.
SolidityListener.prototype.enterVersionConstraint = function (ctx) {};

// Exit a parse tree produced by SolidityParser#versionConstraint.
SolidityListener.prototype.exitVersionConstraint = function (ctx) {};

// Enter a parse tree produced by SolidityParser#importDeclaration.
SolidityListener.prototype.enterImportDeclaration = function (ctx) {};

// Exit a parse tree produced by SolidityParser#importDeclaration.
SolidityListener.prototype.exitImportDeclaration = function (ctx) {};

// Enter a parse tree produced by SolidityParser#importDirective.
SolidityListener.prototype.enterImportDirective = function (ctx) {};

// Exit a parse tree produced by SolidityParser#importDirective.
SolidityListener.prototype.exitImportDirective = function (ctx) {};

// Enter a parse tree produced by SolidityParser#contractDefinition.
SolidityListener.prototype.enterContractDefinition = function (ctx) {};

// Exit a parse tree produced by SolidityParser#contractDefinition.
SolidityListener.prototype.exitContractDefinition = function (ctx) {};

// Enter a parse tree produced by SolidityParser#inheritanceSpecifier.
SolidityListener.prototype.enterInheritanceSpecifier = function (ctx) {};

// Exit a parse tree produced by SolidityParser#inheritanceSpecifier.
SolidityListener.prototype.exitInheritanceSpecifier = function (ctx) {};

// Enter a parse tree produced by SolidityParser#contractPart.
SolidityListener.prototype.enterContractPart = function (ctx) {};

// Exit a parse tree produced by SolidityParser#contractPart.
SolidityListener.prototype.exitContractPart = function (ctx) {};

// Enter a parse tree produced by SolidityParser#stateVariableDeclaration.
SolidityListener.prototype.enterStateVariableDeclaration = function (ctx) {};

// Exit a parse tree produced by SolidityParser#stateVariableDeclaration.
SolidityListener.prototype.exitStateVariableDeclaration = function (ctx) {};

// Enter a parse tree produced by SolidityParser#usingForDeclaration.
SolidityListener.prototype.enterUsingForDeclaration = function (ctx) {};

// Exit a parse tree produced by SolidityParser#usingForDeclaration.
SolidityListener.prototype.exitUsingForDeclaration = function (ctx) {};

// Enter a parse tree produced by SolidityParser#structDefinition.
SolidityListener.prototype.enterStructDefinition = function (ctx) {};

// Exit a parse tree produced by SolidityParser#structDefinition.
SolidityListener.prototype.exitStructDefinition = function (ctx) {};

// Enter a parse tree produced by SolidityParser#modifierDefinition.
SolidityListener.prototype.enterModifierDefinition = function (ctx) {};

// Exit a parse tree produced by SolidityParser#modifierDefinition.
SolidityListener.prototype.exitModifierDefinition = function (ctx) {};

// Enter a parse tree produced by SolidityParser#modifierInvocation.
SolidityListener.prototype.enterModifierInvocation = function (ctx) {};

// Exit a parse tree produced by SolidityParser#modifierInvocation.
SolidityListener.prototype.exitModifierInvocation = function (ctx) {};

// Enter a parse tree produced by SolidityParser#functionDefinition.
SolidityListener.prototype.enterFunctionDefinition = function (ctx) {};

// Exit a parse tree produced by SolidityParser#functionDefinition.
SolidityListener.prototype.exitFunctionDefinition = function (ctx) {};

// Enter a parse tree produced by SolidityParser#functionDescriptor.
SolidityListener.prototype.enterFunctionDescriptor = function (ctx) {};

// Exit a parse tree produced by SolidityParser#functionDescriptor.
SolidityListener.prototype.exitFunctionDescriptor = function (ctx) {};

// Enter a parse tree produced by SolidityParser#returnParameters.
SolidityListener.prototype.enterReturnParameters = function (ctx) {};

// Exit a parse tree produced by SolidityParser#returnParameters.
SolidityListener.prototype.exitReturnParameters = function (ctx) {};

// Enter a parse tree produced by SolidityParser#modifierList.
SolidityListener.prototype.enterModifierList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#modifierList.
SolidityListener.prototype.exitModifierList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#eventDefinition.
SolidityListener.prototype.enterEventDefinition = function (ctx) {};

// Exit a parse tree produced by SolidityParser#eventDefinition.
SolidityListener.prototype.exitEventDefinition = function (ctx) {};

// Enter a parse tree produced by SolidityParser#enumValue.
SolidityListener.prototype.enterEnumValue = function (ctx) {};

// Exit a parse tree produced by SolidityParser#enumValue.
SolidityListener.prototype.exitEnumValue = function (ctx) {};

// Enter a parse tree produced by SolidityParser#enumDefinition.
SolidityListener.prototype.enterEnumDefinition = function (ctx) {};

// Exit a parse tree produced by SolidityParser#enumDefinition.
SolidityListener.prototype.exitEnumDefinition = function (ctx) {};

// Enter a parse tree produced by SolidityParser#parameterList.
SolidityListener.prototype.enterParameterList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#parameterList.
SolidityListener.prototype.exitParameterList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#parameter.
SolidityListener.prototype.enterParameter = function (ctx) {};

// Exit a parse tree produced by SolidityParser#parameter.
SolidityListener.prototype.exitParameter = function (ctx) {};

// Enter a parse tree produced by SolidityParser#eventParameterList.
SolidityListener.prototype.enterEventParameterList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#eventParameterList.
SolidityListener.prototype.exitEventParameterList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#eventParameter.
SolidityListener.prototype.enterEventParameter = function (ctx) {};

// Exit a parse tree produced by SolidityParser#eventParameter.
SolidityListener.prototype.exitEventParameter = function (ctx) {};

// Enter a parse tree produced by SolidityParser#functionTypeParameterList.
SolidityListener.prototype.enterFunctionTypeParameterList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#functionTypeParameterList.
SolidityListener.prototype.exitFunctionTypeParameterList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#functionTypeParameter.
SolidityListener.prototype.enterFunctionTypeParameter = function (ctx) {};

// Exit a parse tree produced by SolidityParser#functionTypeParameter.
SolidityListener.prototype.exitFunctionTypeParameter = function (ctx) {};

// Enter a parse tree produced by SolidityParser#variableDeclaration.
SolidityListener.prototype.enterVariableDeclaration = function (ctx) {};

// Exit a parse tree produced by SolidityParser#variableDeclaration.
SolidityListener.prototype.exitVariableDeclaration = function (ctx) {};

// Enter a parse tree produced by SolidityParser#typeName.
SolidityListener.prototype.enterTypeName = function (ctx) {};

// Exit a parse tree produced by SolidityParser#typeName.
SolidityListener.prototype.exitTypeName = function (ctx) {};

// Enter a parse tree produced by SolidityParser#userDefinedTypeName.
SolidityListener.prototype.enterUserDefinedTypeName = function (ctx) {};

// Exit a parse tree produced by SolidityParser#userDefinedTypeName.
SolidityListener.prototype.exitUserDefinedTypeName = function (ctx) {};

// Enter a parse tree produced by SolidityParser#mappingKey.
SolidityListener.prototype.enterMappingKey = function (ctx) {};

// Exit a parse tree produced by SolidityParser#mappingKey.
SolidityListener.prototype.exitMappingKey = function (ctx) {};

// Enter a parse tree produced by SolidityParser#mapping.
SolidityListener.prototype.enterMapping = function (ctx) {};

// Exit a parse tree produced by SolidityParser#mapping.
SolidityListener.prototype.exitMapping = function (ctx) {};

// Enter a parse tree produced by SolidityParser#functionTypeName.
SolidityListener.prototype.enterFunctionTypeName = function (ctx) {};

// Exit a parse tree produced by SolidityParser#functionTypeName.
SolidityListener.prototype.exitFunctionTypeName = function (ctx) {};

// Enter a parse tree produced by SolidityParser#storageLocation.
SolidityListener.prototype.enterStorageLocation = function (ctx) {};

// Exit a parse tree produced by SolidityParser#storageLocation.
SolidityListener.prototype.exitStorageLocation = function (ctx) {};

// Enter a parse tree produced by SolidityParser#stateMutability.
SolidityListener.prototype.enterStateMutability = function (ctx) {};

// Exit a parse tree produced by SolidityParser#stateMutability.
SolidityListener.prototype.exitStateMutability = function (ctx) {};

// Enter a parse tree produced by SolidityParser#block.
SolidityListener.prototype.enterBlock = function (ctx) {};

// Exit a parse tree produced by SolidityParser#block.
SolidityListener.prototype.exitBlock = function (ctx) {};

// Enter a parse tree produced by SolidityParser#statement.
SolidityListener.prototype.enterStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#statement.
SolidityListener.prototype.exitStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#expressionStatement.
SolidityListener.prototype.enterExpressionStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#expressionStatement.
SolidityListener.prototype.exitExpressionStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#ifStatement.
SolidityListener.prototype.enterIfStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#ifStatement.
SolidityListener.prototype.exitIfStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#tryStatement.
SolidityListener.prototype.enterTryStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#tryStatement.
SolidityListener.prototype.exitTryStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#catchClause.
SolidityListener.prototype.enterCatchClause = function (ctx) {};

// Exit a parse tree produced by SolidityParser#catchClause.
SolidityListener.prototype.exitCatchClause = function (ctx) {};

// Enter a parse tree produced by SolidityParser#whileStatement.
SolidityListener.prototype.enterWhileStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#whileStatement.
SolidityListener.prototype.exitWhileStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#simpleStatement.
SolidityListener.prototype.enterSimpleStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#simpleStatement.
SolidityListener.prototype.exitSimpleStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#forStatement.
SolidityListener.prototype.enterForStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#forStatement.
SolidityListener.prototype.exitForStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#inlineAssemblyStatement.
SolidityListener.prototype.enterInlineAssemblyStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#inlineAssemblyStatement.
SolidityListener.prototype.exitInlineAssemblyStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#doWhileStatement.
SolidityListener.prototype.enterDoWhileStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#doWhileStatement.
SolidityListener.prototype.exitDoWhileStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#continueStatement.
SolidityListener.prototype.enterContinueStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#continueStatement.
SolidityListener.prototype.exitContinueStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#breakStatement.
SolidityListener.prototype.enterBreakStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#breakStatement.
SolidityListener.prototype.exitBreakStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#returnStatement.
SolidityListener.prototype.enterReturnStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#returnStatement.
SolidityListener.prototype.exitReturnStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#throwStatement.
SolidityListener.prototype.enterThrowStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#throwStatement.
SolidityListener.prototype.exitThrowStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#emitStatement.
SolidityListener.prototype.enterEmitStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#emitStatement.
SolidityListener.prototype.exitEmitStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#variableDeclarationStatement.
SolidityListener.prototype.enterVariableDeclarationStatement = function (ctx) {};

// Exit a parse tree produced by SolidityParser#variableDeclarationStatement.
SolidityListener.prototype.exitVariableDeclarationStatement = function (ctx) {};

// Enter a parse tree produced by SolidityParser#variableDeclarationList.
SolidityListener.prototype.enterVariableDeclarationList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#variableDeclarationList.
SolidityListener.prototype.exitVariableDeclarationList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#identifierList.
SolidityListener.prototype.enterIdentifierList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#identifierList.
SolidityListener.prototype.exitIdentifierList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#elementaryTypeName.
SolidityListener.prototype.enterElementaryTypeName = function (ctx) {};

// Exit a parse tree produced by SolidityParser#elementaryTypeName.
SolidityListener.prototype.exitElementaryTypeName = function (ctx) {};

// Enter a parse tree produced by SolidityParser#expression.
SolidityListener.prototype.enterExpression = function (ctx) {};

// Exit a parse tree produced by SolidityParser#expression.
SolidityListener.prototype.exitExpression = function (ctx) {};

// Enter a parse tree produced by SolidityParser#primaryExpression.
SolidityListener.prototype.enterPrimaryExpression = function (ctx) {};

// Exit a parse tree produced by SolidityParser#primaryExpression.
SolidityListener.prototype.exitPrimaryExpression = function (ctx) {};

// Enter a parse tree produced by SolidityParser#expressionList.
SolidityListener.prototype.enterExpressionList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#expressionList.
SolidityListener.prototype.exitExpressionList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#nameValueList.
SolidityListener.prototype.enterNameValueList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#nameValueList.
SolidityListener.prototype.exitNameValueList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#nameValue.
SolidityListener.prototype.enterNameValue = function (ctx) {};

// Exit a parse tree produced by SolidityParser#nameValue.
SolidityListener.prototype.exitNameValue = function (ctx) {};

// Enter a parse tree produced by SolidityParser#functionCallArguments.
SolidityListener.prototype.enterFunctionCallArguments = function (ctx) {};

// Exit a parse tree produced by SolidityParser#functionCallArguments.
SolidityListener.prototype.exitFunctionCallArguments = function (ctx) {};

// Enter a parse tree produced by SolidityParser#functionCall.
SolidityListener.prototype.enterFunctionCall = function (ctx) {};

// Exit a parse tree produced by SolidityParser#functionCall.
SolidityListener.prototype.exitFunctionCall = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyBlock.
SolidityListener.prototype.enterAssemblyBlock = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyBlock.
SolidityListener.prototype.exitAssemblyBlock = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyItem.
SolidityListener.prototype.enterAssemblyItem = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyItem.
SolidityListener.prototype.exitAssemblyItem = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyExpression.
SolidityListener.prototype.enterAssemblyExpression = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyExpression.
SolidityListener.prototype.exitAssemblyExpression = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyCall.
SolidityListener.prototype.enterAssemblyCall = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyCall.
SolidityListener.prototype.exitAssemblyCall = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyLocalDefinition.
SolidityListener.prototype.enterAssemblyLocalDefinition = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyLocalDefinition.
SolidityListener.prototype.exitAssemblyLocalDefinition = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyAssignment.
SolidityListener.prototype.enterAssemblyAssignment = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyAssignment.
SolidityListener.prototype.exitAssemblyAssignment = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyIdentifierOrList.
SolidityListener.prototype.enterAssemblyIdentifierOrList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyIdentifierOrList.
SolidityListener.prototype.exitAssemblyIdentifierOrList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyIdentifierList.
SolidityListener.prototype.enterAssemblyIdentifierList = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyIdentifierList.
SolidityListener.prototype.exitAssemblyIdentifierList = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyStackAssignment.
SolidityListener.prototype.enterAssemblyStackAssignment = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyStackAssignment.
SolidityListener.prototype.exitAssemblyStackAssignment = function (ctx) {};

// Enter a parse tree produced by SolidityParser#labelDefinition.
SolidityListener.prototype.enterLabelDefinition = function (ctx) {};

// Exit a parse tree produced by SolidityParser#labelDefinition.
SolidityListener.prototype.exitLabelDefinition = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblySwitch.
SolidityListener.prototype.enterAssemblySwitch = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblySwitch.
SolidityListener.prototype.exitAssemblySwitch = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyCase.
SolidityListener.prototype.enterAssemblyCase = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyCase.
SolidityListener.prototype.exitAssemblyCase = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyFunctionDefinition.
SolidityListener.prototype.enterAssemblyFunctionDefinition = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyFunctionDefinition.
SolidityListener.prototype.exitAssemblyFunctionDefinition = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyFunctionReturns.
SolidityListener.prototype.enterAssemblyFunctionReturns = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyFunctionReturns.
SolidityListener.prototype.exitAssemblyFunctionReturns = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyFor.
SolidityListener.prototype.enterAssemblyFor = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyFor.
SolidityListener.prototype.exitAssemblyFor = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyIf.
SolidityListener.prototype.enterAssemblyIf = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyIf.
SolidityListener.prototype.exitAssemblyIf = function (ctx) {};

// Enter a parse tree produced by SolidityParser#assemblyLiteral.
SolidityListener.prototype.enterAssemblyLiteral = function (ctx) {};

// Exit a parse tree produced by SolidityParser#assemblyLiteral.
SolidityListener.prototype.exitAssemblyLiteral = function (ctx) {};

// Enter a parse tree produced by SolidityParser#subAssembly.
SolidityListener.prototype.enterSubAssembly = function (ctx) {};

// Exit a parse tree produced by SolidityParser#subAssembly.
SolidityListener.prototype.exitSubAssembly = function (ctx) {};

// Enter a parse tree produced by SolidityParser#tupleExpression.
SolidityListener.prototype.enterTupleExpression = function (ctx) {};

// Exit a parse tree produced by SolidityParser#tupleExpression.
SolidityListener.prototype.exitTupleExpression = function (ctx) {};

// Enter a parse tree produced by SolidityParser#typeNameExpression.
SolidityListener.prototype.enterTypeNameExpression = function (ctx) {};

// Exit a parse tree produced by SolidityParser#typeNameExpression.
SolidityListener.prototype.exitTypeNameExpression = function (ctx) {};

// Enter a parse tree produced by SolidityParser#numberLiteral.
SolidityListener.prototype.enterNumberLiteral = function (ctx) {};

// Exit a parse tree produced by SolidityParser#numberLiteral.
SolidityListener.prototype.exitNumberLiteral = function (ctx) {};

// Enter a parse tree produced by SolidityParser#identifier.
SolidityListener.prototype.enterIdentifier = function (ctx) {};

// Exit a parse tree produced by SolidityParser#identifier.
SolidityListener.prototype.exitIdentifier = function (ctx) {};

// Enter a parse tree produced by SolidityParser#overrideSpecifier.
SolidityListener.prototype.enterOverrideSpecifier = function (ctx) {};

// Exit a parse tree produced by SolidityParser#overrideSpecifier.
SolidityListener.prototype.exitOverrideSpecifier = function (ctx) {};

// Enter a parse tree produced by SolidityParser#stringLiteral.
SolidityListener.prototype.enterStringLiteral = function (ctx) {};

// Exit a parse tree produced by SolidityParser#stringLiteral.
SolidityListener.prototype.exitStringLiteral = function (ctx) {};

exports.SolidityListener = SolidityListener;

/***/ }),
/* 59 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var antlr4 = __webpack_require__(9);

function toText(ctx) {
  if (ctx !== null) {
    return ctx.getText();
  }
  return null;
}

function mapCommasToNulls(children) {
  if (children.length === 0) {
    return [];
  }

  var values = [];
  var comma = true;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var el = _step.value;

      if (comma) {
        if (toText(el) === ',') {
          values.push(null);
        } else {
          values.push(el);
          comma = false;
        }
      } else {
        if (toText(el) !== ',') {
          throw new Error('expected comma');
        }
        comma = true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (comma) {
    values.push(null);
  }

  return values;
}

function isBinOp(op) {
  var binOps = ['+', '-', '*', '/', '**', '%', '<<', '>>', '&&', '||', '&', '|', '^', '<', '>', '<=', '>=', '==', '!=', '=', '|=', '^=', '&=', '<<=', '>>=', '+=', '-=', '*=', '/=', '%='];
  return binOps.includes(op);
}

var transformAST = {
  SourceUnit: function SourceUnit(ctx) {
    // last element is EOF terminal node
    return {
      children: this.visit(ctx.children.slice(0, -1))
    };
  },
  EnumDefinition: function EnumDefinition(ctx) {
    return {
      name: toText(ctx.identifier()),
      members: this.visit(ctx.enumValue())
    };
  },
  EnumValue: function EnumValue(ctx) {
    return {
      name: toText(ctx.identifier())
    };
  },
  UsingForDeclaration: function UsingForDeclaration(ctx) {
    var typeName = null;
    if (toText(ctx.getChild(3)) !== '*') {
      typeName = this.visit(ctx.getChild(3));
    }

    return {
      typeName: typeName,
      libraryName: toText(ctx.identifier())
    };
  },
  PragmaDirective: function PragmaDirective(ctx) {
    return {
      name: toText(ctx.pragmaName()),
      value: toText(ctx.pragmaValue())
    };
  },
  ContractDefinition: function ContractDefinition(ctx) {
    var name = toText(ctx.identifier());
    var kind = toText(ctx.getChild(0));

    this._currentContract = name;

    return {
      name: name,
      baseContracts: this.visit(ctx.inheritanceSpecifier()),
      subNodes: this.visit(ctx.contractPart()),
      kind: kind
    };
  },
  InheritanceSpecifier: function InheritanceSpecifier(ctx) {
    var exprList = ctx.expressionList();
    var args = exprList != null ? this.visit(exprList.expression()) : [];

    return {
      baseName: this.visit(ctx.userDefinedTypeName()),
      arguments: args
    };
  },
  ContractPart: function ContractPart(ctx) {
    return this.visit(ctx.children[0]);
  },
  FunctionDefinition: function FunctionDefinition(ctx) {
    var _this = this;

    var isConstructor = false;
    var isFallback = false;
    var isReceiveEther = false;
    var isVirtual = false;
    var name = null;
    var parameters = [];
    var returnParameters = null;
    var visibility = 'default';

    var block = null;
    if (ctx.block()) {
      block = this.visit(ctx.block());
    }

    var modifiers = ctx.modifierList().modifierInvocation().map(function (mod) {
      return _this.visit(mod);
    });

    var stateMutability = null;
    if (ctx.modifierList().stateMutability(0)) {
      stateMutability = toText(ctx.modifierList().stateMutability(0));
    }

    // see what type of function we're dealing with
    switch (toText(ctx.functionDescriptor().getChild(0))) {
      case 'constructor':
        parameters = this.visit(ctx.parameterList());

        if (ctx.returnParameters() && ctx.returnParameters().parameterList().parameter().length > 0) {
          throw new Error('Constructors cannot have return parameters');
        }

        // error out on incorrect function visibility
        if (ctx.modifierList().InternalKeyword(0)) {
          visibility = 'internal';
        } else if (ctx.modifierList().PublicKeyword(0)) {
          visibility = 'public';
        } else {
          throw new Error('Constructors have to be declared either "public" or "internal"');
        }

        isConstructor = true;
        break;
      case 'fallback':
        if (ctx.parameterList().parameter().length > 0) {
          throw new Error('Fallback functions cannot have parameters');
        }

        if (ctx.returnParameters() && ctx.returnParameters().parameterList().parameter().length > 0) {
          throw new Error('Fallback functions cannot have return parameters');
        }

        // error out on incorrect function visibility
        if (!ctx.modifierList().ExternalKeyword(0)) {
          throw new Error('Fallback functions have to be declared "external"');
        }
        visibility = 'external';

        isFallback = true;
        break;
      case 'receive':
        if (ctx.parameterList().parameter().length > 0) {
          throw new Error('Receive Ether functions cannot have parameters');
        }

        if (ctx.returnParameters() && ctx.returnParameters().parameterList().parameter().length > 0) {
          throw new Error('Receive Ether functions cannot have return parameters');
        }

        // error out on incorrect function visibility
        if (!ctx.modifierList().ExternalKeyword(0)) {
          throw new Error('Receive Ether functions have to be declared "external"');
        }
        visibility = 'external';

        // error out on incorrect function payability
        if (!ctx.modifierList().stateMutability(0) || !ctx.modifierList().stateMutability(0).PayableKeyword(0)) {
          throw new Error('Receive Ether functions have to be declared "payable"');
        }

        isReceiveEther = true;
        break;
      case 'function':
        name = ctx.functionDescriptor().identifier(0) ? toText(ctx.functionDescriptor().identifier(0)) : '';

        parameters = this.visit(ctx.parameterList());
        returnParameters = this.visit(ctx.returnParameters());

        // parse function visibility
        if (ctx.modifierList().ExternalKeyword(0)) {
          visibility = 'external';
        } else if (ctx.modifierList().InternalKeyword(0)) {
          visibility = 'internal';
        } else if (ctx.modifierList().PublicKeyword(0)) {
          visibility = 'public';
        } else if (ctx.modifierList().PrivateKeyword(0)) {
          visibility = 'private';
        }

        // check if function is virtual
        if (ctx.modifierList().VirtualKeyword(0)) {
          isVirtual = true;
        }

        isConstructor = name === this._currentContract;
        isFallback = name === '';
        break;
    }

    var override = void 0;
    var overrideSpecifier = ctx.modifierList().overrideSpecifier();
    if (overrideSpecifier.length === 0) {
      override = null;
    } else {
      override = this.visit(overrideSpecifier[0].userDefinedTypeName());
    }

    return {
      name: name,
      parameters: parameters,
      returnParameters: returnParameters,
      body: block,
      visibility: visibility,
      modifiers: modifiers,
      override: override,
      isConstructor: isConstructor,
      isReceiveEther: isReceiveEther,
      isFallback: isFallback,
      isVirtual: isVirtual,
      stateMutability: stateMutability
    };
  },
  ModifierInvocation: function ModifierInvocation(ctx) {
    var exprList = ctx.expressionList();

    var args = void 0;
    if (exprList != null) {
      args = this.visit(exprList.expression());
    } else if (ctx.children.length > 1) {
      args = [];
    } else {
      args = null;
    }

    return {
      name: toText(ctx.identifier()),
      arguments: args
    };
  },
  TypeNameExpression: function TypeNameExpression(ctx) {
    var typeName = ctx.elementaryTypeName();
    if (typeName === null) {
      typeName = ctx.userDefinedTypeName();
    }
    return {
      typeName: this.visit(typeName)
    };
  },
  TypeName: function TypeName(ctx) {
    if (ctx.children.length > 2) {
      var length = null;
      if (ctx.children.length === 4) {
        length = this.visit(ctx.getChild(2));
      }

      return {
        type: 'ArrayTypeName',
        baseTypeName: this.visit(ctx.typeName()),
        length: length
      };
    }
    if (ctx.children.length === 2) {
      return {
        type: 'ElementaryTypeName',
        name: toText(ctx.getChild(0)),
        stateMutability: toText(ctx.getChild(1))
      };
    }
    return this.visit(ctx.getChild(0));
  },
  FunctionTypeName: function FunctionTypeName(ctx) {
    var _this2 = this;

    var parameterTypes = ctx.functionTypeParameterList(0).functionTypeParameter().map(function (typeCtx) {
      return _this2.visit(typeCtx);
    });

    var returnTypes = [];
    if (ctx.functionTypeParameterList(1)) {
      returnTypes = ctx.functionTypeParameterList(1).functionTypeParameter().map(function (typeCtx) {
        return _this2.visit(typeCtx);
      });
    }

    var visibility = 'default';
    if (ctx.InternalKeyword(0)) {
      visibility = 'internal';
    } else if (ctx.ExternalKeyword(0)) {
      visibility = 'external';
    }

    var stateMutability = null;
    if (ctx.stateMutability(0)) {
      stateMutability = toText(ctx.stateMutability(0));
    }

    return {
      parameterTypes: parameterTypes,
      returnTypes: returnTypes,
      visibility: visibility,
      stateMutability: stateMutability
    };
  },
  ReturnStatement: function ReturnStatement(ctx) {
    var expression = null;
    if (ctx.expression()) {
      expression = this.visit(ctx.expression());
    }

    return { expression: expression };
  },
  EmitStatement: function EmitStatement(ctx) {
    return {
      eventCall: this.visit(ctx.functionCall())
    };
  },
  FunctionCall: function FunctionCall(ctx) {
    var _this3 = this;

    var args = [];
    var names = [];

    var ctxArgs = ctx.functionCallArguments();
    if (ctxArgs.expressionList()) {
      args = ctxArgs.expressionList().expression().map(function (exprCtx) {
        return _this3.visit(exprCtx);
      });
    } else if (ctxArgs.nameValueList()) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = ctxArgs.nameValueList().nameValue()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var nameValue = _step2.value;

          args.push(this.visit(nameValue.expression()));
          names.push(toText(nameValue.identifier()));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return {
      expression: this.visit(ctx.expression()),
      arguments: args,
      names: names
    };
  },
  StructDefinition: function StructDefinition(ctx) {
    return {
      name: toText(ctx.identifier()),
      members: this.visit(ctx.variableDeclaration())
    };
  },
  VariableDeclaration: function VariableDeclaration(ctx) {
    var storageLocation = null;
    if (ctx.storageLocation()) {
      storageLocation = toText(ctx.storageLocation());
    }

    return {
      typeName: this.visit(ctx.typeName()),
      name: toText(ctx.identifier()),
      storageLocation: storageLocation,
      isStateVar: false,
      isIndexed: false
    };
  },
  EventParameter: function EventParameter(ctx) {
    var storageLocation = null;
    if (ctx.storageLocation(0)) {
      storageLocation = toText(ctx.storageLocation(0));
    }

    return {
      type: 'VariableDeclaration',
      typeName: this.visit(ctx.typeName()),
      name: toText(ctx.identifier()),
      storageLocation: storageLocation,
      isStateVar: false,
      isIndexed: !!ctx.IndexedKeyword(0)
    };
  },
  FunctionTypeParameter: function FunctionTypeParameter(ctx) {
    var storageLocation = null;
    if (ctx.storageLocation()) {
      storageLocation = toText(ctx.storageLocation());
    }

    return {
      type: 'VariableDeclaration',
      typeName: this.visit(ctx.typeName()),
      name: null,
      storageLocation: storageLocation,
      isStateVar: false,
      isIndexed: false
    };
  },
  WhileStatement: function WhileStatement(ctx) {
    return {
      condition: this.visit(ctx.expression()),
      body: this.visit(ctx.statement())
    };
  },
  DoWhileStatement: function DoWhileStatement(ctx) {
    return {
      condition: this.visit(ctx.expression()),
      body: this.visit(ctx.statement())
    };
  },
  IfStatement: function IfStatement(ctx) {
    var trueBody = this.visit(ctx.statement(0));

    var falseBody = null;
    if (ctx.statement().length > 1) {
      falseBody = this.visit(ctx.statement(1));
    }

    return {
      condition: this.visit(ctx.expression()),
      trueBody: trueBody,
      falseBody: falseBody
    };
  },
  TryStatement: function TryStatement(ctx) {
    var _this4 = this;

    var returnParameters = null;
    if (ctx.returnParameters()) {
      returnParameters = this.visit(ctx.returnParameters());
    }

    var catchClauses = ctx.catchClause().map(function (exprCtx) {
      return _this4.visit(exprCtx);
    });

    return {
      expression: this.visit(ctx.expression()),
      returnParameters: returnParameters,
      body: this.visit(ctx.block()),
      catchClauses: catchClauses
    };
  },
  CatchClause: function CatchClause(ctx) {
    var parameters = null;
    if (ctx.parameterList()) {
      parameters = this.visit(ctx.parameterList());
    }

    if (ctx.identifier() && toText(ctx.identifier()) !== 'Error') {
      throw new Error('Expected "Error" identifier in catch clause');
    }

    return {
      isReasonStringType: !!(ctx.identifier() && toText(ctx.identifier()) === 'Error'),
      parameters: parameters,
      body: this.visit(ctx.block())
    };
  },
  UserDefinedTypeName: function UserDefinedTypeName(ctx) {
    return {
      namePath: toText(ctx)
    };
  },
  ElementaryTypeName: function ElementaryTypeName(ctx) {
    return {
      name: toText(ctx)
    };
  },
  Block: function Block(ctx) {
    return {
      statements: this.visit(ctx.statement())
    };
  },
  ExpressionStatement: function ExpressionStatement(ctx) {
    return {
      expression: this.visit(ctx.expression())
    };
  },
  NumberLiteral: function NumberLiteral(ctx) {
    var number = toText(ctx.getChild(0));
    var subdenomination = null;

    if (ctx.children.length === 2) {
      subdenomination = toText(ctx.getChild(1));
    }

    return {
      number: number,
      subdenomination: subdenomination
    };
  },
  MappingKey: function MappingKey(ctx) {
    if (ctx.elementaryTypeName()) {
      return this.visit(ctx.elementaryTypeName());
    } else if (ctx.userDefinedTypeName()) {
      return this.visit(ctx.userDefinedTypeName());
    } else {
      throw new Error('Expected MappingKey to have either ' + 'elementaryTypeName or userDefinedTypeName');
    }
  },
  Mapping: function Mapping(ctx) {
    return {
      keyType: this.visit(ctx.mappingKey()),
      valueType: this.visit(ctx.typeName())
    };
  },
  ModifierDefinition: function ModifierDefinition(ctx) {
    var parameters = null;
    if (ctx.parameterList()) {
      parameters = this.visit(ctx.parameterList());
    }

    var isVirtual = false;
    if (ctx.VirtualKeyword(0)) {
      isVirtual = true;
    }

    var override = void 0;
    var overrideSpecifier = ctx.overrideSpecifier();
    if (overrideSpecifier.length === 0) {
      override = null;
    } else {
      override = this.visit(overrideSpecifier[0].userDefinedTypeName());
    }

    return {
      name: toText(ctx.identifier()),
      parameters: parameters,
      body: this.visit(ctx.block()),
      isVirtual: isVirtual,
      override: override
    };
  },
  Statement: function Statement(ctx) {
    return this.visit(ctx.getChild(0));
  },
  SimpleStatement: function SimpleStatement(ctx) {
    return this.visit(ctx.getChild(0));
  },
  Expression: function Expression(ctx) {
    var _this5 = this;

    var op = void 0;

    switch (ctx.children.length) {
      case 1:
        // primary expression
        return this.visit(ctx.getChild(0));

      case 2:
        op = toText(ctx.getChild(0));

        // new expression
        if (op === 'new') {
          return {
            type: 'NewExpression',
            typeName: this.visit(ctx.typeName())
          };
        }

        // prefix operators
        if (['+', '-', '++', '--', '!', '~', 'after', 'delete'].includes(op)) {
          return {
            type: 'UnaryOperation',
            operator: op,
            subExpression: this.visit(ctx.getChild(1)),
            isPrefix: true
          };
        }

        op = toText(ctx.getChild(1));

        // postfix operators
        if (['++', '--'].includes(op)) {
          return {
            type: 'UnaryOperation',
            operator: op,
            subExpression: this.visit(ctx.getChild(0)),
            isPrefix: false
          };
        }
        break;

      case 3:
        // treat parenthesis as no-op
        if (toText(ctx.getChild(0)) === '(' && toText(ctx.getChild(2)) === ')') {
          return {
            type: 'TupleExpression',
            components: [this.visit(ctx.getChild(1))],
            isArray: false
          };
        }

        // if square parenthesis are present it can only be
        // a typename expression
        if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(2)) === ']') {
          return {
            "type": "TypeNameExpression",
            "typeName": {
              "type": "ArrayTypeName",
              "baseTypeName": this.visit(ctx.getChild(0)),
              "length": null
            }
          };
        }

        op = toText(ctx.getChild(1));

        // tuple separator
        if (op === ',') {
          return {
            type: 'TupleExpression',
            components: [this.visit(ctx.getChild(0)), this.visit(ctx.getChild(2))],
            isArray: false
          };
        }

        // member access
        if (op === '.') {
          return {
            type: 'MemberAccess',
            expression: this.visit(ctx.getChild(0)),
            memberName: toText(ctx.getChild(2))
          };
        }

        if (isBinOp(op)) {
          return {
            type: 'BinaryOperation',
            operator: op,
            left: this.visit(ctx.getChild(0)),
            right: this.visit(ctx.getChild(2))
          };
        }
        break;

      case 4:
        // function call
        if (toText(ctx.getChild(1)) === '(' && toText(ctx.getChild(3)) === ')') {
          var args = [];
          var names = [];

          var ctxArgs = ctx.functionCallArguments();
          if (ctxArgs.expressionList()) {
            args = ctxArgs.expressionList().expression().map(function (exprCtx) {
              return _this5.visit(exprCtx);
            });
          } else if (ctxArgs.nameValueList()) {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = ctxArgs.nameValueList().nameValue()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var nameValue = _step3.value;

                args.push(this.visit(nameValue.expression()));
                names.push(toText(nameValue.identifier()));
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          }

          return {
            type: 'FunctionCall',
            expression: this.visit(ctx.getChild(0)),
            arguments: args,
            names: names
          };
        }

        // index access
        if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(3)) === ']') {
          return {
            type: 'IndexAccess',
            base: this.visit(ctx.getChild(0)),
            index: this.visit(ctx.getChild(2))
          };
        }

        // expression with nameValueList
        if (toText(ctx.getChild(1)) === '{' && toText(ctx.getChild(3)) === '}') {
          return {
            type: 'NameValueExpression',
            expression: this.visit(ctx.getChild(0)),
            arguments: this.visit(ctx.getChild(2))
          };
        }

        break;

      case 5:
        // ternary operator
        if (toText(ctx.getChild(1)) === '?' && toText(ctx.getChild(3)) === ':') {
          return {
            type: 'Conditional',
            condition: this.visit(ctx.getChild(0)),
            trueExpression: this.visit(ctx.getChild(2)),
            falseExpression: this.visit(ctx.getChild(4))
          };
        }

        // index range access
        if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(2)) === ':' && toText(ctx.getChild(4)) === ']') {
          return {
            type: 'IndexRangeAccess',
            base: this.visit(ctx.getChild(0)),
            indexStart: null,
            indexEnd: this.visit(ctx.getChild(3))
          };
        } else if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(3)) === ':' && toText(ctx.getChild(4)) === ']') {
          return {
            type: 'IndexRangeAccess',
            base: this.visit(ctx.getChild(0)),
            indexStart: this.visit(ctx.getChild(2)),
            indexEnd: null
          };
        }
        break;

      case 6:
        // index range access
        if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(3)) === ':' && toText(ctx.getChild(5)) === ']') {
          return {
            type: 'IndexRangeAccess',
            base: this.visit(ctx.getChild(0)),
            indexStart: this.visit(ctx.getChild(2)),
            indexEnd: this.visit(ctx.getChild(4))
          };
        }
        break;
    }

    throw new Error('Unrecognized expression');
  },
  NameValueList: function NameValueList(ctx) {
    var names = [];
    var args = [];

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = ctx.nameValue()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var nameValue = _step4.value;

        names.push(toText(nameValue.identifier()));
        args.push(this.visit(nameValue.expression()));
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return {
      type: 'NameValueList',
      names: names,
      arguments: args
    };
  },
  StateVariableDeclaration: function StateVariableDeclaration(ctx) {
    var type = this.visit(ctx.typeName());
    var iden = ctx.identifier();
    var name = toText(iden);

    var expression = null;
    if (ctx.expression()) {
      expression = this.visit(ctx.expression());
    }

    var visibility = 'default';
    if (ctx.InternalKeyword(0)) {
      visibility = 'internal';
    } else if (ctx.PublicKeyword(0)) {
      visibility = 'public';
    } else if (ctx.PrivateKeyword(0)) {
      visibility = 'private';
    }

    var isDeclaredConst = false;
    if (ctx.ConstantKeyword(0)) {
      isDeclaredConst = true;
    }

    var override = void 0;
    var overrideSpecifier = ctx.overrideSpecifier();
    if (overrideSpecifier.length === 0) {
      override = null;
    } else {
      override = this.visit(overrideSpecifier[0].userDefinedTypeName());
    }

    var isImmutable = false;
    if (ctx.ImmutableKeyword(0)) {
      isImmutable = true;
    }

    var decl = this.createNode({
      type: 'VariableDeclaration',
      typeName: type,
      name: name,
      expression: expression,
      visibility: visibility,
      isStateVar: true,
      isDeclaredConst: isDeclaredConst,
      isIndexed: false,
      isImmutable: isImmutable,
      override: override
    }, iden);

    return {
      variables: [decl],
      initialValue: expression
    };
  },
  ForStatement: function ForStatement(ctx) {
    var conditionExpression = this.visit(ctx.expressionStatement());
    if (conditionExpression) {
      conditionExpression = conditionExpression.expression;
    }
    return {
      initExpression: this.visit(ctx.simpleStatement()),
      conditionExpression: conditionExpression,
      loopExpression: {
        type: 'ExpressionStatement',
        expression: this.visit(ctx.expression())
      },
      body: this.visit(ctx.statement())
    };
  },
  PrimaryExpression: function PrimaryExpression(ctx) {
    if (ctx.BooleanLiteral()) {
      return {
        type: 'BooleanLiteral',
        value: toText(ctx.BooleanLiteral()) === 'true'
      };
    }

    if (ctx.HexLiteral()) {
      return {
        type: 'HexLiteral',
        value: toText(ctx.HexLiteral())
      };
    }

    if (ctx.stringLiteral()) {
      var value = ctx.stringLiteral().StringLiteralFragment().map(function (stringLiteralFragmentCtx) {
        var text = toText(stringLiteralFragmentCtx);
        var singleQuotes = text[0] === "'";
        var textWithoutQuotes = text.substring(1, text.length - 1);
        var value = singleQuotes ? textWithoutQuotes.replace(new RegExp("\\\\'", 'g'), "'") : textWithoutQuotes.replace(new RegExp('\\\\"', 'g'), '"');

        return value;
      }).join("");

      return {
        type: 'StringLiteral',
        value: value
      };
    }

    if (ctx.TypeKeyword()) {
      return {
        type: 'Identifier',
        name: 'type'
      };
    }

    if (ctx.children.length == 3 && toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(2)) === ']') {
      var node = this.visit(ctx.getChild(0));
      if (node.type === 'Identifier') {
        node = {
          type: 'UserDefinedTypeName',
          namePath: node.name
        };
      } else if (node.type == 'TypeNameExpression') {
        node = node.typeName;
      } else {
        node = {
          type: 'ElementaryTypeName',
          name: toText(ctx.getChild(0))
        };
      }

      var typeName = {
        type: 'ArrayTypeName',
        baseTypeName: node,
        length: null
      };

      return {
        type: 'TypeNameExpression',
        typeName: typeName
      };
    }

    return this.visit(ctx.getChild(0));
  },
  Identifier: function Identifier(ctx) {
    return {
      name: toText(ctx)
    };
  },
  TupleExpression: function TupleExpression(ctx) {
    var _this6 = this;

    // remove parentheses
    var children = ctx.children.slice(1, -1);
    var components = mapCommasToNulls(children).map(function (expr) {
      // add a null for each empty value
      if (expr === null) {
        return null;
      }
      return _this6.visit(expr);
    });

    return {
      components: components,
      isArray: toText(ctx.getChild(0)) === '['
    };
  },
  IdentifierList: function IdentifierList(ctx) {
    var _this7 = this;

    // remove parentheses
    var children = ctx.children.slice(1, -1);
    return mapCommasToNulls(children).map(function (iden) {
      // add a null for each empty value
      if (iden === null) {
        return null;
      }

      return _this7.createNode({
        type: 'VariableDeclaration',
        name: toText(iden),
        storageLocation: null,
        typeName: null,
        isStateVar: false,
        isIndexed: false
      }, iden);
    });
  },
  VariableDeclarationList: function VariableDeclarationList(ctx) {
    var _this8 = this;

    // remove parentheses
    return mapCommasToNulls(ctx.children).map(function (decl) {
      // add a null for each empty value
      if (decl === null) {
        return null;
      }

      var storageLocation = null;
      if (decl.storageLocation()) {
        storageLocation = toText(decl.storageLocation());
      }

      return _this8.createNode({
        type: 'VariableDeclaration',
        name: toText(decl.identifier()),
        typeName: _this8.visit(decl.typeName()),
        storageLocation: storageLocation,
        isStateVar: false,
        isIndexed: false
      }, decl);
    });
  },
  VariableDeclarationStatement: function VariableDeclarationStatement(ctx) {
    var variables = void 0;
    if (ctx.variableDeclaration()) {
      variables = [this.visit(ctx.variableDeclaration())];
    } else if (ctx.identifierList()) {
      variables = this.visit(ctx.identifierList());
    } else if (ctx.variableDeclarationList()) {
      variables = this.visit(ctx.variableDeclarationList());
    }

    var initialValue = null;
    if (ctx.expression()) {
      initialValue = this.visit(ctx.expression());
    }

    return {
      variables: variables,
      initialValue: initialValue
    };
  },
  ImportDirective: function ImportDirective(ctx) {
    var pathString = toText(ctx.StringLiteralFragment());
    var unitAlias = null;
    var symbolAliases = null;

    if (ctx.importDeclaration().length > 0) {
      symbolAliases = ctx.importDeclaration().map(function (decl) {
        var symbol = toText(decl.identifier(0));
        var alias = null;
        if (decl.identifier(1)) {
          alias = toText(decl.identifier(1));
        }
        return [symbol, alias];
      });
    } else if (ctx.children.length === 7) {
      unitAlias = toText(ctx.getChild(3));
    } else if (ctx.children.length === 5) {
      unitAlias = toText(ctx.getChild(3));
    }

    return {
      path: pathString.substring(1, pathString.length - 1),
      unitAlias: unitAlias,
      symbolAliases: symbolAliases
    };
  },
  EventDefinition: function EventDefinition(ctx) {
    return {
      name: toText(ctx.identifier()),
      parameters: this.visit(ctx.eventParameterList()),
      isAnonymous: !!ctx.AnonymousKeyword()
    };
  },
  EventParameterList: function EventParameterList(ctx) {
    return ctx.eventParameter().map(function (paramCtx) {
      var type = this.visit(paramCtx.typeName());
      var name = null;
      if (paramCtx.identifier()) {
        name = toText(paramCtx.identifier());
      }

      return this.createNode({
        type: 'VariableDeclaration',
        typeName: type,
        name: name,
        isStateVar: false,
        isIndexed: !!paramCtx.IndexedKeyword(0)
      }, paramCtx);
    }, this);
  },
  ReturnParameters: function ReturnParameters(ctx) {
    return this.visit(ctx.parameterList());
  },
  ParameterList: function ParameterList(ctx) {
    var _this9 = this;

    return ctx.parameter().map(function (paramCtx) {
      return _this9.visit(paramCtx);
    });
  },
  Parameter: function Parameter(ctx) {
    var storageLocation = null;
    if (ctx.storageLocation()) {
      storageLocation = toText(ctx.storageLocation());
    }

    var name = null;
    if (ctx.identifier()) {
      name = toText(ctx.identifier());
    }

    return {
      type: 'VariableDeclaration',
      typeName: this.visit(ctx.typeName()),
      name: name,
      storageLocation: storageLocation,
      isStateVar: false,
      isIndexed: false
    };
  },
  InlineAssemblyStatement: function InlineAssemblyStatement(ctx) {
    var language = null;
    if (ctx.StringLiteralFragment()) {
      language = toText(ctx.StringLiteralFragment());
      language = language.substring(1, language.length - 1);
    }

    return {
      language: language,
      body: this.visit(ctx.assemblyBlock())
    };
  },
  AssemblyBlock: function AssemblyBlock(ctx) {
    var _this10 = this;

    var operations = ctx.assemblyItem().map(function (it) {
      return _this10.visit(it);
    });

    return { operations: operations };
  },
  AssemblyItem: function AssemblyItem(ctx) {
    var text = void 0;

    if (ctx.HexLiteral()) {
      return {
        type: 'HexLiteral',
        value: toText(ctx.HexLiteral())
      };
    }

    if (ctx.stringLiteral()) {
      text = toText(ctx.stringLiteral());
      return {
        type: 'StringLiteral',
        value: text.substring(1, text.length - 1)
      };
    }

    if (ctx.BreakKeyword()) {
      return {
        type: 'Break'
      };
    }

    if (ctx.ContinueKeyword()) {
      return {
        type: 'Continue'
      };
    }

    return this.visit(ctx.getChild(0));
  },
  AssemblyExpression: function AssemblyExpression(ctx) {
    return this.visit(ctx.getChild(0));
  },
  AssemblyCall: function AssemblyCall(ctx) {
    var _this11 = this;

    var functionName = toText(ctx.getChild(0));
    var args = ctx.assemblyExpression().map(function (arg) {
      return _this11.visit(arg);
    });

    return {
      functionName: functionName,
      arguments: args
    };
  },
  AssemblyLiteral: function AssemblyLiteral(ctx) {
    var text = void 0;

    if (ctx.stringLiteral()) {
      text = toText(ctx);
      return {
        type: 'StringLiteral',
        value: text.substring(1, text.length - 1)
      };
    }

    if (ctx.DecimalNumber()) {
      return {
        type: 'DecimalNumber',
        value: toText(ctx)
      };
    }

    if (ctx.HexNumber()) {
      return {
        type: 'HexNumber',
        value: toText(ctx)
      };
    }

    if (ctx.HexLiteral()) {
      return {
        type: 'HexLiteral',
        value: toText(ctx)
      };
    }
  },
  AssemblySwitch: function AssemblySwitch(ctx) {
    var _this12 = this;

    return {
      expression: this.visit(ctx.assemblyExpression()),
      cases: ctx.assemblyCase().map(function (c) {
        return _this12.visit(c);
      })
    };
  },
  AssemblyCase: function AssemblyCase(ctx) {
    var value = null;
    if (toText(ctx.getChild(0)) === 'case') {
      value = this.visit(ctx.assemblyLiteral());
    }

    var node = { block: this.visit(ctx.assemblyBlock()) };
    if (value !== null) {
      node.value = value;
    } else {
      node.default = true;
    }

    return node;
  },
  AssemblyLocalDefinition: function AssemblyLocalDefinition(ctx) {
    var names = ctx.assemblyIdentifierOrList();
    if (names.identifier()) {
      names = [this.visit(names.identifier())];
    } else {
      names = this.visit(names.assemblyIdentifierList().identifier());
    }

    return {
      names: names,
      expression: this.visit(ctx.assemblyExpression())
    };
  },
  AssemblyFunctionDefinition: function AssemblyFunctionDefinition(ctx) {
    var args = ctx.assemblyIdentifierList();
    args = args ? this.visit(args.identifier()) : [];

    var returnArgs = ctx.assemblyFunctionReturns();
    returnArgs = returnArgs ? this.visit(returnArgs.assemblyIdentifierList().identifier()) : [];

    return {
      name: toText(ctx.identifier()),
      arguments: args,
      returnArguments: returnArgs,
      body: this.visit(ctx.assemblyBlock())
    };
  },
  AssemblyAssignment: function AssemblyAssignment(ctx) {
    var names = ctx.assemblyIdentifierOrList();
    if (names.identifier()) {
      names = [this.visit(names.identifier())];
    } else {
      names = this.visit(names.assemblyIdentifierList().identifier());
    }

    return {
      names: names,
      expression: this.visit(ctx.assemblyExpression())
    };
  },
  LabelDefinition: function LabelDefinition(ctx) {
    return {
      name: toText(ctx.identifier())
    };
  },
  AssemblyStackAssignment: function AssemblyStackAssignment(ctx) {
    return {
      name: toText(ctx.identifier())
    };
  },
  AssemblyFor: function AssemblyFor(ctx) {
    return {
      pre: this.visit(ctx.getChild(1)),
      condition: this.visit(ctx.getChild(2)),
      post: this.visit(ctx.getChild(3)),
      body: this.visit(ctx.getChild(4))
    };
  },
  AssemblyIf: function AssemblyIf(ctx) {
    return {
      condition: this.visit(ctx.assemblyExpression()),
      body: this.visit(ctx.assemblyBlock())
    };
  }
};

function ASTBuilder(options) {
  antlr4.tree.ParseTreeVisitor.call(this);
  this.options = options;
}

ASTBuilder.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
ASTBuilder.prototype.constructor = ASTBuilder;

ASTBuilder.prototype._loc = function (ctx) {
  var sourceLocation = {
    start: {
      line: ctx.start.line,
      column: ctx.start.column
    },
    end: {
      line: ctx.stop ? ctx.stop.line : ctx.start.line,
      column: ctx.stop ? ctx.stop.column : ctx.start.column
    }
  };
  return { loc: sourceLocation };
};

ASTBuilder.prototype._range = function (ctx) {
  return { range: [ctx.start.start, ctx.stop.stop] };
};

ASTBuilder.prototype.meta = function (ctx) {
  var ret = {};
  if (this.options.loc) {
    Object.assign(ret, this._loc(ctx));
  }
  if (this.options.range) {
    Object.assign(ret, this._range(ctx));
  }
  return ret;
};

ASTBuilder.prototype.createNode = function (obj, ctx) {
  return Object.assign(obj, this.meta(ctx));
};

ASTBuilder.prototype.visit = function (ctx) {
  if (ctx == null) {
    return null;
  }

  if (Array.isArray(ctx)) {
    return ctx.map(function (child) {
      return this.visit(child);
    }, this);
  }

  var name = ctx.constructor.name;
  if (name.endsWith('Context')) {
    name = name.substring(0, name.length - 'Context'.length);
  }

  var node = { type: name };

  if (name in transformAST) {
    var visited = transformAST[name].call(this, ctx);
    if (Array.isArray(visited)) {
      return visited;
    }
    Object.assign(node, visited);
  }

  return this.createNode(node, ctx);
};

module.exports = ASTBuilder;

/***/ }),
/* 60 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var antlr4 = __webpack_require__(9);

function ErrorListener() {
  antlr4.error.ErrorListener.call(this);
  this._errors = [];
}

ErrorListener.prototype = Object.create(antlr4.error.ErrorListener.prototype);
ErrorListener.prototype.constructor = ErrorListener;

ErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, message) {
  this._errors.push({ message: message, line: line, column: column });
};

ErrorListener.prototype.getErrors = function () {
  return this._errors;
};

ErrorListener.prototype.hasErrors = function () {
  return this._errors.length > 0;
};

module.exports = ErrorListener;

/***/ }),
/* 61 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.buildTokenList = buildTokenList;
/* babel-plugin-inline-import './lib/Solidity.tokens' */var tokens = 'T__0=1\nT__1=2\nT__2=3\nT__3=4\nT__4=5\nT__5=6\nT__6=7\nT__7=8\nT__8=9\nT__9=10\nT__10=11\nT__11=12\nT__12=13\nT__13=14\nT__14=15\nT__15=16\nT__16=17\nT__17=18\nT__18=19\nT__19=20\nT__20=21\nT__21=22\nT__22=23\nT__23=24\nT__24=25\nT__25=26\nT__26=27\nT__27=28\nT__28=29\nT__29=30\nT__30=31\nT__31=32\nT__32=33\nT__33=34\nT__34=35\nT__35=36\nT__36=37\nT__37=38\nT__38=39\nT__39=40\nT__40=41\nT__41=42\nT__42=43\nT__43=44\nT__44=45\nT__45=46\nT__46=47\nT__47=48\nT__48=49\nT__49=50\nT__50=51\nT__51=52\nT__52=53\nT__53=54\nT__54=55\nT__55=56\nT__56=57\nT__57=58\nT__58=59\nT__59=60\nT__60=61\nT__61=62\nT__62=63\nT__63=64\nT__64=65\nT__65=66\nT__66=67\nT__67=68\nT__68=69\nT__69=70\nT__70=71\nT__71=72\nT__72=73\nT__73=74\nT__74=75\nT__75=76\nT__76=77\nT__77=78\nT__78=79\nT__79=80\nT__80=81\nT__81=82\nT__82=83\nT__83=84\nT__84=85\nT__85=86\nT__86=87\nT__87=88\nT__88=89\nT__89=90\nT__90=91\nT__91=92\nT__92=93\nT__93=94\nInt=95\nUint=96\nByte=97\nFixed=98\nUfixed=99\nBooleanLiteral=100\nDecimalNumber=101\nHexNumber=102\nNumberUnit=103\nHexLiteral=104\nReservedKeyword=105\nAnonymousKeyword=106\nBreakKeyword=107\nConstantKeyword=108\nImmutableKeyword=109\nContinueKeyword=110\nLeaveKeyword=111\nExternalKeyword=112\nIndexedKeyword=113\nInternalKeyword=114\nPayableKeyword=115\nPrivateKeyword=116\nPublicKeyword=117\nVirtualKeyword=118\nPureKeyword=119\nTypeKeyword=120\nViewKeyword=121\nConstructorKeyword=122\nFallbackKeyword=123\nReceiveKeyword=124\nIdentifier=125\nStringLiteralFragment=126\nVersionLiteral=127\nWS=128\nCOMMENT=129\nLINE_COMMENT=130\n\'pragma\'=1\n\';\'=2\n\'^\'=3\n\'~\'=4\n\'>=\'=5\n\'>\'=6\n\'<\'=7\n\'<=\'=8\n\'=\'=9\n\'as\'=10\n\'import\'=11\n\'*\'=12\n\'from\'=13\n\'{\'=14\n\',\'=15\n\'}\'=16\n\'abstract\'=17\n\'contract\'=18\n\'interface\'=19\n\'library\'=20\n\'is\'=21\n\'(\'=22\n\')\'=23\n\'using\'=24\n\'for\'=25\n\'struct\'=26\n\'modifier\'=27\n\'function\'=28\n\'returns\'=29\n\'event\'=30\n\'enum\'=31\n\'[\'=32\n\']\'=33\n\'address\'=34\n\'.\'=35\n\'mapping\'=36\n\'=>\'=37\n\'memory\'=38\n\'storage\'=39\n\'calldata\'=40\n\'if\'=41\n\'else\'=42\n\'try\'=43\n\'catch\'=44\n\'while\'=45\n\'assembly\'=46\n\'do\'=47\n\'return\'=48\n\'throw\'=49\n\'emit\'=50\n\'var\'=51\n\'bool\'=52\n\'string\'=53\n\'byte\'=54\n\'++\'=55\n\'--\'=56\n\'new\'=57\n\':\'=58\n\'+\'=59\n\'-\'=60\n\'after\'=61\n\'delete\'=62\n\'!\'=63\n\'**\'=64\n\'/\'=65\n\'%\'=66\n\'<<\'=67\n\'>>\'=68\n\'&\'=69\n\'|\'=70\n\'==\'=71\n\'!=\'=72\n\'&&\'=73\n\'||\'=74\n\'?\'=75\n\'|=\'=76\n\'^=\'=77\n\'&=\'=78\n\'<<=\'=79\n\'>>=\'=80\n\'+=\'=81\n\'-=\'=82\n\'*=\'=83\n\'/=\'=84\n\'%=\'=85\n\'let\'=86\n\':=\'=87\n\'=:\'=88\n\'switch\'=89\n\'case\'=90\n\'default\'=91\n\'->\'=92\n\'callback\'=93\n\'override\'=94\n\'anonymous\'=106\n\'break\'=107\n\'constant\'=108\n\'immutable\'=109\n\'continue\'=110\n\'leave\'=111\n\'external\'=112\n\'indexed\'=113\n\'internal\'=114\n\'payable\'=115\n\'private\'=116\n\'public\'=117\n\'virtual\'=118\n\'pure\'=119\n\'type\'=120\n\'view\'=121\n\'constructor\'=122\n\'fallback\'=123\n\'receive\'=124\n';


var TYPE_TOKENS = ['var', 'bool', 'address', 'string', 'Int', 'Uint', 'Byte', 'Fixed', 'UFixed'];

function rsplit(str, value) {
  var index = str.lastIndexOf(value);
  return [str.substring(0, index), str.substring(index + 1, str.length)];
}

function normalizeTokenType(value) {
  if (value.endsWith("'")) {
    value = value.substring(0, value.length - 1);
  }
  if (value.startsWith("'")) {
    value = value.substring(1, value.length);
  }
  return value;
}

function getTokenType(value) {
  if (value === 'Identifier' || value === 'from') {
    return 'Identifier';
  } else if (value === 'TrueLiteral' || value === 'FalseLiteral') {
    return 'Boolean';
  } else if (value === 'VersionLiteral') {
    return 'Version';
  } else if (value === 'StringLiteral') {
    return 'String';
  } else if (TYPE_TOKENS.includes(value)) {
    return 'Type';
  } else if (value === 'NumberUnit') {
    return 'Subdenomination';
  } else if (value === 'DecimalNumber') {
    return 'Numeric';
  } else if (value === 'HexLiteral') {
    return 'Hex';
  } else if (value === 'ReservedKeyword') {
    return 'Reserved';
  } else if (/^\W+$/.test(value)) {
    return 'Punctuator';
  } else {
    return 'Keyword';
  }
}

function getTokenTypeMap() {
  return tokens.split('\n').map(function (line) {
    return rsplit(line, '=');
  }).reduce(function (acum, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        value = _ref2[0],
        key = _ref2[1];

    acum[parseInt(key, 10)] = normalizeTokenType(value);
    return acum;
  }, {});
}

function buildTokenList(tokens, options) {
  var tokenTypes = getTokenTypeMap();

  return tokens.map(function (token) {
    var type = getTokenType(tokenTypes[token.type]);
    var node = { type: type, value: token.text };
    if (options.range) {
      node.range = [token.start, token.stop + 1];
    }
    if (options.loc) {
      node.loc = {
        start: { line: token.line, column: token.column },
        end: { line: token.line, column: token.column + token.text.length }
      };
    }
    return node;
  });
}

/***/ }),
/* 62 */
/***/ ((module) => {

"use strict";

/** 
 * @author github.com/tintinweb
 * @license MIT
 * 
 * 
 * */

//taken from https://github.com/ConsenSys/surya/blob/3147a190152caf8da5e3cfc79d4afcda54d3b0aa/src/utils/parserHelpers.js
//thx goncalo and surya!

const BUILTINS_ASM = ['add', 'addmod', 'address', 'and', 'balance', 'blockhash', 'byte', 'call', 'callcode', 'calldatacopy', 'calldataload', 'calldatasize', 'caller', 'callvalue', 'codecopy', 'codesize', 'coinbase', 'create', 'create2', 'delegatecall', 'difficulty', 'div', 'dup1', 'dup10', 'dup11', 'dup12', 'dup13', 'dup14', 'dup15', 'dup16', 'dup2', 'dup3', 'dup4', 'dup5', 'dup6', 'dup7', 'dup8', 'dup9', 'eq', 'exp', 'extcodecopy', 'extcodehash', 'extcodesize', 'gas', 'gaslimit', 'gasprice', 'gt', 'iszero', 'jump', 'jumpdest', 'jumpi', 'log0', 'log1', 'log2', 'log3', 'log4', 'lt', 'mload', 'mod', 'msize', 'mstore', 'mstore8', 'mul', 'mulmod', 'not', 'number', 'or', 'origin', 'pc', 'pop', 'push1', 'push10', 'push11', 'push12', 'push13', 'push14', 'push15', 'push16', 'push17', 'push18', 'push19', 'push2', 'push20', 'push21', 'push22', 'push23', 'push24', 'push25', 'push26', 'push27', 'push28', 'push29', 'push3', 'push30', 'push31', 'push32', 'push4', 'push5', 'push6', 'push7', 'push8', 'push9', 'return', 'returndatacopy', 'returndatasize', 'revert', 'sar', 'sdiv', 'selfdestruct', 'sgt', 'sha3', 'shl', 'shr', 'signextend', 'sload', 'slt', 'smod', 'sstore', 'staticcall', 'stop', 'sub', 'swap1', 'swap10', 'swap11', 'swap12', 'swap13', 'swap14', 'swap15', 'swap16', 'swap2', 'swap3', 'swap4', 'swap5', 'swap6', 'swap7', 'swap8', 'swap9', 'timestamp', 'xor']

const BUILTINS = [
  'gasleft', 'require', 'assert', 'revert', 'addmod', 'mulmod', 'keccak256',
  'sha256', 'sha3', 'ripemd160', 'ecrecover',
];

function isLowerCase(str) {
  return str === str.toLowerCase();
}

const parserHelpers = {
  BUILTINS,
  BUILTINS_ASM,
  isRegularFunctionCall: node => {
    const expr = node.expression;
    // @TODO: replace lowercase for better filtering
    return expr.type === 'Identifier' && isLowerCase(expr.name[0]) && !BUILTINS.includes(expr.name);
  },

  isMemberAccess: node => {
    const expr = node.expression;
    return expr.type === 'MemberAccess' && !['push', 'pop'].includes(expr.memberName);
  },

  isMemberAccessOfAddress: node => {
    const expr = node.expression.expression;
    return expr.type === 'FunctionCall' && 
      expr.expression.hasOwnProperty('typeName') && 
      expr.expression.typeName.name === 'address';
  },

  isAContractTypecast: node => {
    const expr = node.expression.expression;
    // @TODO: replace lowercase for better filtering
    return expr.type === 'FunctionCall' && 
      expr.expression.hasOwnProperty('name') && 
      !isLowerCase(expr.expression.name[0]);
  },

  isUserDefinedDeclaration: node => {
    return node.hasOwnProperty('typeName') && node.typeName.hasOwnProperty('type') && node.typeName.type === 'UserDefinedTypeName';
  },

  isAddressDeclaration: node => {
    return node.hasOwnProperty('typeName') && 
      node.typeName.hasOwnProperty('type') && 
      node.typeName.type === 'ElementaryTypeName' &&
      node.typeName.name === 'address';
  },
};

module.exports = parserHelpers;

/***/ }),
/* 63 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(64)
exports.createHash = exports.Hash = __webpack_require__(70)
exports.createHmac = exports.Hmac = __webpack_require__(122)

var algos = __webpack_require__(125)
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(127)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(133)

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = __webpack_require__(162)

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = __webpack_require__(173)

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = __webpack_require__(252)

var publicEncrypt = __webpack_require__(255)

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__(263)

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}


/***/ }),
/* 64 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);


// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = __webpack_require__(65).Buffer
var crypto = __webpack_require__.g.crypto || __webpack_require__.g.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}


/***/ }),
/* 65 */
/***/ ((module, exports, __webpack_require__) => {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(66)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 66 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(67)
var ieee754 = __webpack_require__(68)
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? Symbol.for('nodejs.util.inspect.custom')
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}


/***/ }),
/* 67 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 68 */
/***/ ((__unused_webpack_module, exports) => {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 69 */
/***/ ((module) => {

// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};


/***/ }),
/* 70 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var inherits = __webpack_require__(71)
var MD5 = __webpack_require__(72)
var RIPEMD160 = __webpack_require__(95)
var sha = __webpack_require__(96)
var Base = __webpack_require__(104)

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}


/***/ }),
/* 71 */
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 72 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var inherits = __webpack_require__(71)
var HashBase = __webpack_require__(73)
var Buffer = __webpack_require__(65).Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5


/***/ }),
/* 73 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var Buffer = __webpack_require__(74).Buffer
var Transform = __webpack_require__(75).Transform
var inherits = __webpack_require__(71)

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase


/***/ }),
/* 74 */
/***/ ((module, exports, __webpack_require__) => {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(66)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 75 */
/***/ ((module, exports, __webpack_require__) => {

exports = module.exports = __webpack_require__(76);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(86);
exports.Duplex = __webpack_require__(85);
exports.Transform = __webpack_require__(92);
exports.PassThrough = __webpack_require__(93);
exports.finished = __webpack_require__(90);
exports.pipeline = __webpack_require__(94);


/***/ }),
/* 76 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(77).EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(78);
/*</replacement>*/


var Buffer = __webpack_require__(66).Buffer;

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(79);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(80);

var destroyImpl = __webpack_require__(82);

var _require = __webpack_require__(83),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(84).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

__webpack_require__(71)(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(85);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(88).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(85);
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(88).StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(89);
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(91);
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}

/***/ }),
/* 77 */
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),
/* 78 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(77).EventEmitter;


/***/ }),
/* 79 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 80 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(66),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(81),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();

/***/ }),
/* 81 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 82 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
 // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};

/***/ }),
/* 83 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(84).codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),
/* 84 */
/***/ ((module) => {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),
/* 85 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(76);

var Writable = __webpack_require__(86);

__webpack_require__(71)(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

/***/ }),
/* 86 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(87)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(78);
/*</replacement>*/


var Buffer = __webpack_require__(66).Buffer;

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(82);

var _require = __webpack_require__(83),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(84).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

__webpack_require__(71)(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(85);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(85); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};

/***/ }),
/* 87 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!__webpack_require__.g.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = __webpack_require__.g.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}


/***/ }),
/* 88 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(65).Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 89 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);


var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = __webpack_require__(90);

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;

/***/ }),
/* 90 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(84).codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),
/* 91 */
/***/ ((module) => {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};


/***/ }),
/* 92 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__(84).codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(85);

__webpack_require__(71)(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),
/* 93 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(92);

__webpack_require__(71)(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 94 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = __webpack_require__(84).codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(90);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),
/* 95 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var Buffer = __webpack_require__(66).Buffer
var inherits = __webpack_require__(71)
var HashBase = __webpack_require__(73)

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160


/***/ }),
/* 96 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(97)
exports.sha1 = __webpack_require__(99)
exports.sha224 = __webpack_require__(100)
exports.sha256 = __webpack_require__(101)
exports.sha384 = __webpack_require__(102)
exports.sha512 = __webpack_require__(103)


/***/ }),
/* 97 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(71)
var Hash = __webpack_require__(98)
var Buffer = __webpack_require__(65).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),
/* 98 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Buffer = __webpack_require__(65).Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),
/* 99 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(71)
var Hash = __webpack_require__(98)
var Buffer = __webpack_require__(65).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),
/* 100 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(71)
var Sha256 = __webpack_require__(101)
var Hash = __webpack_require__(98)
var Buffer = __webpack_require__(65).Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),
/* 101 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(71)
var Hash = __webpack_require__(98)
var Buffer = __webpack_require__(65).Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),
/* 102 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var inherits = __webpack_require__(71)
var SHA512 = __webpack_require__(103)
var Hash = __webpack_require__(98)
var Buffer = __webpack_require__(65).Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),
/* 103 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var inherits = __webpack_require__(71)
var Hash = __webpack_require__(98)
var Buffer = __webpack_require__(65).Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),
/* 104 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Buffer = __webpack_require__(65).Buffer
var Transform = __webpack_require__(105).Transform
var StringDecoder = __webpack_require__(88).StringDecoder
var inherits = __webpack_require__(71)

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase


/***/ }),
/* 105 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(77).EventEmitter;
var inherits = __webpack_require__(71);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(106);
Stream.Writable = __webpack_require__(115);
Stream.Duplex = __webpack_require__(114);
Stream.Transform = __webpack_require__(119);
Stream.PassThrough = __webpack_require__(120);
Stream.finished = __webpack_require__(117)
Stream.pipeline = __webpack_require__(121)

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 106 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(77).EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(107);
/*</replacement>*/


var Buffer = __webpack_require__(66).Buffer;

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(108);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(109);

var destroyImpl = __webpack_require__(111);

var _require = __webpack_require__(112),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(113).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

__webpack_require__(71)(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(114);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(88).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(114);
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(88).StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(116);
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(118);
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}

/***/ }),
/* 107 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(77).EventEmitter;


/***/ }),
/* 108 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 109 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(66),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(110),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();

/***/ }),
/* 110 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 111 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
 // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};

/***/ }),
/* 112 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(113).codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),
/* 113 */
/***/ ((module) => {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),
/* 114 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(106);

var Writable = __webpack_require__(115);

__webpack_require__(71)(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

/***/ }),
/* 115 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(87)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(107);
/*</replacement>*/


var Buffer = __webpack_require__(66).Buffer;

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(111);

var _require = __webpack_require__(112),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(113).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

__webpack_require__(71)(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(114);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(114); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};

/***/ }),
/* 116 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);


var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = __webpack_require__(117);

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;

/***/ }),
/* 117 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(113).codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),
/* 118 */
/***/ ((module) => {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};


/***/ }),
/* 119 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__(113).codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(114);

__webpack_require__(71)(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),
/* 120 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(119);

__webpack_require__(71)(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 121 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = __webpack_require__(113).codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(117);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),
/* 122 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var inherits = __webpack_require__(71)
var Legacy = __webpack_require__(123)
var Base = __webpack_require__(104)
var Buffer = __webpack_require__(65).Buffer
var md5 = __webpack_require__(124)
var RIPEMD160 = __webpack_require__(95)

var sha = __webpack_require__(96)

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}


/***/ }),
/* 123 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var inherits = __webpack_require__(71)
var Buffer = __webpack_require__(65).Buffer

var Base = __webpack_require__(104)

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac


/***/ }),
/* 124 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MD5 = __webpack_require__(72)

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}


/***/ }),
/* 125 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(126)


/***/ }),
/* 126 */
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');

/***/ }),
/* 127 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

exports.pbkdf2 = __webpack_require__(128)
exports.pbkdf2Sync = __webpack_require__(131)


/***/ }),
/* 128 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Buffer = __webpack_require__(65).Buffer

var checkParameters = __webpack_require__(129)
var defaultEncoding = __webpack_require__(130)
var sync = __webpack_require__(131)
var toBuffer = __webpack_require__(132)

var ZERO_BUF
var subtle = __webpack_require__.g.crypto && __webpack_require__.g.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (__webpack_require__.g.process && !__webpack_require__.g.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}
var nextTick
function getNextTick () {
  if (nextTick) {
    return nextTick
  }
  if (__webpack_require__.g.process && __webpack_require__.g.process.nextTick) {
    nextTick = __webpack_require__.g.process.nextTick
  } else if (__webpack_require__.g.queueMicrotask) {
    nextTick = __webpack_require__.g.queueMicrotask
  } else if (__webpack_require__.g.setImmediate) {
    nextTick = __webpack_require__.g.setImmediate
  } else {
    nextTick = __webpack_require__.g.setTimeout
  }
  return nextTick
}
function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    getNextTick()(function () {
      callback(null, out)
    })
  }, function (e) {
    getNextTick()(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof __webpack_require__.g.Promise !== 'function') {
    getNextTick()(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
    return
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}


/***/ }),
/* 129 */
/***/ ((module) => {

var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}


/***/ }),
/* 130 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(69);
var defaultEncoding
/* istanbul ignore next */
if (__webpack_require__.g.process && __webpack_require__.g.process.browser) {
  defaultEncoding = 'utf-8'
} else if (__webpack_require__.g.process && __webpack_require__.g.process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding


/***/ }),
/* 131 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var md5 = __webpack_require__(124)
var RIPEMD160 = __webpack_require__(95)
var sha = __webpack_require__(96)
var Buffer = __webpack_require__(65).Buffer

var checkParameters = __webpack_require__(129)
var defaultEncoding = __webpack_require__(130)
var toBuffer = __webpack_require__(132)

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2


/***/ }),
/* 132 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Buffer = __webpack_require__(65).Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}


/***/ }),
/* 133 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DES = __webpack_require__(134)
var aes = __webpack_require__(142)
var aesModes = __webpack_require__(144)
var desModes = __webpack_require__(161)
var ebtk = __webpack_require__(159)

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 134 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var CipherBase = __webpack_require__(104)
var des = __webpack_require__(135)
var inherits = __webpack_require__(71)
var Buffer = __webpack_require__(65).Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}


/***/ }),
/* 135 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.utils = __webpack_require__(136);
exports.Cipher = __webpack_require__(137);
exports.DES = __webpack_require__(139);
exports.CBC = __webpack_require__(140);
exports.EDE = __webpack_require__(141);


/***/ }),
/* 136 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),
/* 137 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var assert = __webpack_require__(138);

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),
/* 138 */
/***/ ((module) => {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),
/* 139 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var assert = __webpack_require__(138);
var inherits = __webpack_require__(71);

var utils = __webpack_require__(136);
var Cipher = __webpack_require__(137);

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),
/* 140 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var assert = __webpack_require__(138);
var inherits = __webpack_require__(71);

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),
/* 141 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var assert = __webpack_require__(138);
var inherits = __webpack_require__(71);

var Cipher = __webpack_require__(137);
var DES = __webpack_require__(139);

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),
/* 142 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var ciphers = __webpack_require__(143)
var deciphers = __webpack_require__(160)
var modes = __webpack_require__(154)

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 143 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var MODES = __webpack_require__(144)
var AuthCipher = __webpack_require__(155)
var Buffer = __webpack_require__(65).Buffer
var StreamCipher = __webpack_require__(158)
var Transform = __webpack_require__(104)
var aes = __webpack_require__(156)
var ebtk = __webpack_require__(159)
var inherits = __webpack_require__(71)

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher


/***/ }),
/* 144 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var modeModules = {
  ECB: __webpack_require__(145),
  CBC: __webpack_require__(146),
  CFB: __webpack_require__(148),
  CFB8: __webpack_require__(149),
  CFB1: __webpack_require__(150),
  OFB: __webpack_require__(151),
  CTR: __webpack_require__(152),
  GCM: __webpack_require__(152)
}

var modes = __webpack_require__(154)

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes


/***/ }),
/* 145 */
/***/ ((__unused_webpack_module, exports) => {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),
/* 146 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var xor = __webpack_require__(147)

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),
/* 147 */
/***/ ((module) => {

module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}


/***/ }),
/* 148 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var Buffer = __webpack_require__(65).Buffer
var xor = __webpack_require__(147)

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}


/***/ }),
/* 149 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var Buffer = __webpack_require__(65).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),
/* 150 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var Buffer = __webpack_require__(65).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),
/* 151 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var xor = __webpack_require__(147)

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}


/***/ }),
/* 152 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var xor = __webpack_require__(147)
var Buffer = __webpack_require__(65).Buffer
var incr32 = __webpack_require__(153)

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}


/***/ }),
/* 153 */
/***/ ((module) => {

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32


/***/ }),
/* 154 */
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');

/***/ }),
/* 155 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aes = __webpack_require__(156)
var Buffer = __webpack_require__(65).Buffer
var Transform = __webpack_require__(104)
var inherits = __webpack_require__(71)
var GHASH = __webpack_require__(157)
var xor = __webpack_require__(147)
var incr32 = __webpack_require__(153)

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher


/***/ }),
/* 156 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = __webpack_require__(65).Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES


/***/ }),
/* 157 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Buffer = __webpack_require__(65).Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH


/***/ }),
/* 158 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aes = __webpack_require__(156)
var Buffer = __webpack_require__(65).Buffer
var Transform = __webpack_require__(104)
var inherits = __webpack_require__(71)

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher


/***/ }),
/* 159 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Buffer = __webpack_require__(65).Buffer
var MD5 = __webpack_require__(72)

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey


/***/ }),
/* 160 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var AuthCipher = __webpack_require__(155)
var Buffer = __webpack_require__(65).Buffer
var MODES = __webpack_require__(144)
var StreamCipher = __webpack_require__(158)
var Transform = __webpack_require__(104)
var aes = __webpack_require__(156)
var ebtk = __webpack_require__(159)
var inherits = __webpack_require__(71)

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv


/***/ }),
/* 161 */
/***/ ((__unused_webpack_module, exports) => {

exports["des-ecb"] = {
  key: 8,
  iv: 0
}
exports["des-cbc"] = exports.des = {
  key: 8,
  iv: 8
}
exports["des-ede3-cbc"] = exports.des3 = {
  key: 24,
  iv: 8
}
exports["des-ede3"] = {
  key: 24,
  iv: 0
}
exports["des-ede-cbc"] = {
  key: 16,
  iv: 8
}
exports["des-ede"] = {
  key: 16,
  iv: 0
}


/***/ }),
/* 162 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var generatePrime = __webpack_require__(163)
var primes = __webpack_require__(171)

var DH = __webpack_require__(172)

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman


/***/ }),
/* 163 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var randomBytes = __webpack_require__(64);
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(164);
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(166);
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),
/* 164 */
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(165).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),
/* 165 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 166 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bn = __webpack_require__(167);
var brorand = __webpack_require__(169);

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),
/* 167 */
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(168).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),
/* 168 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 169 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(170);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),
/* 170 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 171 */
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');

/***/ }),
/* 172 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var BN = __webpack_require__(164);
var MillerRabin = __webpack_require__(166);
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(163);
var randomBytes = __webpack_require__(64);
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}


/***/ }),
/* 173 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Buffer = __webpack_require__(174).Buffer
var createHash = __webpack_require__(70)
var stream = __webpack_require__(175)
var inherits = __webpack_require__(71)
var sign = __webpack_require__(192)
var verify = __webpack_require__(251)

var algorithms = __webpack_require__(126)
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = Buffer.from(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}


/***/ }),
/* 174 */
/***/ ((module, exports, __webpack_require__) => {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(66)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 175 */
/***/ ((module, exports, __webpack_require__) => {

exports = module.exports = __webpack_require__(176);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(185);
exports.Duplex = __webpack_require__(184);
exports.Transform = __webpack_require__(189);
exports.PassThrough = __webpack_require__(190);
exports.finished = __webpack_require__(187);
exports.pipeline = __webpack_require__(191);


/***/ }),
/* 176 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(77).EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(177);
/*</replacement>*/


var Buffer = __webpack_require__(66).Buffer;

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(178);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(179);

var destroyImpl = __webpack_require__(181);

var _require = __webpack_require__(182),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(183).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

__webpack_require__(71)(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(184);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(88).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(184);
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(88).StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(186);
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(188);
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}

/***/ }),
/* 177 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(77).EventEmitter;


/***/ }),
/* 178 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 179 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(66),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(180),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();

/***/ }),
/* 180 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 181 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
 // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};

/***/ }),
/* 182 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(183).codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),
/* 183 */
/***/ ((module) => {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),
/* 184 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(176);

var Writable = __webpack_require__(185);

__webpack_require__(71)(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

/***/ }),
/* 185 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(87)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(177);
/*</replacement>*/


var Buffer = __webpack_require__(66).Buffer;

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(181);

var _require = __webpack_require__(182),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(183).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

__webpack_require__(71)(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(184);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(184); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};

/***/ }),
/* 186 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);


var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = __webpack_require__(187);

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;

/***/ }),
/* 187 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(183).codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),
/* 188 */
/***/ ((module) => {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};


/***/ }),
/* 189 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__(183).codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(184);

__webpack_require__(71)(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),
/* 190 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(189);

__webpack_require__(71)(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 191 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = __webpack_require__(183).codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(187);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),
/* 192 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = __webpack_require__(174).Buffer
var createHmac = __webpack_require__(122)
var crt = __webpack_require__(193)
var EC = __webpack_require__(196).ec
var BN = __webpack_require__(194)
var parseKeys = __webpack_require__(228)
var curves = __webpack_require__(250)

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [0, 1]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return Buffer.from(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r)
  if (s[0] & 0x80) s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [0x30, total, 0x02, r.length]
  res = res.concat(r, [0x02, s.length], s)
  return Buffer.from(res)
}

function getKey (x, q, hash, algo) {
  x = Buffer.from(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = Buffer.alloc(hlen)
  v.fill(1)
  var k = Buffer.alloc(hlen)
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = Buffer.from(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = Buffer.alloc(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey


/***/ }),
/* 193 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var BN = __webpack_require__(194)
var randomBytes = __webpack_require__(64)

function blind (priv) {
  var r = getr(priv)
  var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed()
  return { blinder: blinder, unblinder: r.invm(priv.modulus) }
}

function getr (priv) {
  var len = priv.modulus.byteLength()
  var r
  do {
    r = new BN(randomBytes(len))
  } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
  return r
}

function crt (msg, priv) {
  var blinds = blind(priv)
  var len = priv.modulus.byteLength()
  var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus)
  var c1 = blinded.toRed(BN.mont(priv.prime1))
  var c2 = blinded.toRed(BN.mont(priv.prime2))
  var qinv = priv.coefficient
  var p = priv.prime1
  var q = priv.prime2
  var m1 = c1.redPow(priv.exponent1).fromRed()
  var m2 = c2.redPow(priv.exponent2).fromRed()
  var h = m1.isub(m2).imul(qinv).umod(p).imul(q)
  return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len)
}
crt.getr = getr

module.exports = crt


/***/ }),
/* 194 */
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(195).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),
/* 195 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 196 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(197).version;
elliptic.utils = __webpack_require__(198);
elliptic.rand = __webpack_require__(169);
elliptic.curve = __webpack_require__(202);
elliptic.curves = __webpack_require__(207);

// Protocols
elliptic.ec = __webpack_require__(221);
elliptic.eddsa = __webpack_require__(225);


/***/ }),
/* 197 */
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"_from":"elliptic@^6.5.3","_id":"elliptic@6.5.4","_inBundle":false,"_integrity":"sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==","_location":"/elliptic","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"elliptic@^6.5.3","name":"elliptic","escapedName":"elliptic","rawSpec":"^6.5.3","saveSpec":null,"fetchSpec":"^6.5.3"},"_requiredBy":["/browserify-sign","/create-ecdh"],"_resolved":"https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz","_shasum":"da37cebd31e79a1367e941b592ed1fbebd58abbb","_spec":"elliptic@^6.5.3","_where":"/Users/boss/git/mythx/vscode-solidity-metrics/node_modules/browserify-sign","author":{"name":"Fedor Indutny","email":"fedor@indutny.com"},"bugs":{"url":"https://github.com/indutny/elliptic/issues"},"bundleDependencies":false,"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"},"deprecated":false,"description":"EC cryptography","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"files":["lib"],"homepage":"https://github.com/indutny/elliptic","keywords":["EC","Elliptic","curve","Cryptography"],"license":"MIT","main":"lib/elliptic.js","name":"elliptic","repository":{"type":"git","url":"git+ssh://git@github.com/indutny/elliptic.git"},"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","test":"npm run lint && npm run unit","unit":"istanbul test _mocha --reporter=spec test/index.js","version":"grunt dist && git add dist/"},"version":"6.5.4"}');

/***/ }),
/* 198 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var utils = exports;
var BN = __webpack_require__(199);
var minAssert = __webpack_require__(138);
var minUtils = __webpack_require__(201);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),
/* 199 */
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(200).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),
/* 200 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 201 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),
/* 202 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var curve = exports;

curve.base = __webpack_require__(203);
curve.short = __webpack_require__(204);
curve.mont = __webpack_require__(205);
curve.edwards = __webpack_require__(206);


/***/ }),
/* 203 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var BN = __webpack_require__(199);
var utils = __webpack_require__(198);
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),
/* 204 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(198);
var BN = __webpack_require__(199);
var inherits = __webpack_require__(71);
var Base = __webpack_require__(203);

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),
/* 205 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var BN = __webpack_require__(199);
var inherits = __webpack_require__(71);
var Base = __webpack_require__(203);

var utils = __webpack_require__(198);

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),
/* 206 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(198);
var BN = __webpack_require__(199);
var inherits = __webpack_require__(71);
var Base = __webpack_require__(203);

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),
/* 207 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var curves = exports;

var hash = __webpack_require__(208);
var curve = __webpack_require__(202);
var utils = __webpack_require__(198);

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = __webpack_require__(220);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});


/***/ }),
/* 208 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var hash = exports;

hash.utils = __webpack_require__(209);
hash.common = __webpack_require__(210);
hash.sha = __webpack_require__(211);
hash.ripemd = __webpack_require__(218);
hash.hmac = __webpack_require__(219);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),
/* 209 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var assert = __webpack_require__(138);
var inherits = __webpack_require__(71);

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),
/* 210 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(209);
var assert = __webpack_require__(138);

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),
/* 211 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.sha1 = __webpack_require__(212);
exports.sha224 = __webpack_require__(214);
exports.sha256 = __webpack_require__(215);
exports.sha384 = __webpack_require__(216);
exports.sha512 = __webpack_require__(217);


/***/ }),
/* 212 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(209);
var common = __webpack_require__(210);
var shaCommon = __webpack_require__(213);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 213 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(209);
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),
/* 214 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(209);
var SHA256 = __webpack_require__(215);

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),
/* 215 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(209);
var common = __webpack_require__(210);
var shaCommon = __webpack_require__(213);
var assert = __webpack_require__(138);

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 216 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(209);

var SHA512 = __webpack_require__(217);

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),
/* 217 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(209);
var common = __webpack_require__(210);
var assert = __webpack_require__(138);

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),
/* 218 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(209);
var common = __webpack_require__(210);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),
/* 219 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(209);
var assert = __webpack_require__(138);

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),
/* 220 */
/***/ ((module) => {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};


/***/ }),
/* 221 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var BN = __webpack_require__(199);
var HmacDRBG = __webpack_require__(222);
var utils = __webpack_require__(198);
var curves = __webpack_require__(207);
var rand = __webpack_require__(169);
var assert = utils.assert;

var KeyPair = __webpack_require__(223);
var Signature = __webpack_require__(224);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),
/* 222 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hash = __webpack_require__(208);
var utils = __webpack_require__(201);
var assert = __webpack_require__(138);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),
/* 223 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var BN = __webpack_require__(199);
var utils = __webpack_require__(198);
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),
/* 224 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var BN = __webpack_require__(199);

var utils = __webpack_require__(198);
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),
/* 225 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hash = __webpack_require__(208);
var curves = __webpack_require__(207);
var utils = __webpack_require__(198);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(226);
var Signature = __webpack_require__(227);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),
/* 226 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(198);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),
/* 227 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var BN = __webpack_require__(199);
var utils = __webpack_require__(198);
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),
/* 228 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asn1 = __webpack_require__(229)
var aesid = __webpack_require__(248)
var fixProc = __webpack_require__(249)
var ciphers = __webpack_require__(142)
var compat = __webpack_require__(127)
var Buffer = __webpack_require__(65).Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}


/***/ }),
/* 229 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(230)

exports.certificate = __webpack_require__(247)

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),
/* 230 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const asn1 = exports;

asn1.bignum = __webpack_require__(231);

asn1.define = __webpack_require__(233).define;
asn1.base = __webpack_require__(245);
asn1.constants = __webpack_require__(246);
asn1.decoders = __webpack_require__(242);
asn1.encoders = __webpack_require__(234);


/***/ }),
/* 231 */
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(232).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),
/* 232 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 233 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const encoders = __webpack_require__(234);
const decoders = __webpack_require__(242);
const inherits = __webpack_require__(71);

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),
/* 234 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const encoders = exports;

encoders.der = __webpack_require__(235);
encoders.pem = __webpack_require__(241);


/***/ }),
/* 235 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const inherits = __webpack_require__(71);
const Buffer = __webpack_require__(236).Buffer;
const Node = __webpack_require__(237);

// Import DER constants
const der = __webpack_require__(240);

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),
/* 236 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);
/* eslint-disable node/no-deprecated-api */



var buffer = __webpack_require__(66)
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer


/***/ }),
/* 237 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const Reporter = __webpack_require__(238).Reporter;
const EncoderBuffer = __webpack_require__(239).EncoderBuffer;
const DecoderBuffer = __webpack_require__(239).DecoderBuffer;
const assert = __webpack_require__(138);

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};


/***/ }),
/* 238 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const inherits = __webpack_require__(71);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),
/* 239 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const inherits = __webpack_require__(71);
const Reporter = __webpack_require__(238).Reporter;
const Buffer = __webpack_require__(236).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),
/* 240 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);


/***/ }),
/* 241 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const inherits = __webpack_require__(71);

const DEREncoder = __webpack_require__(235);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),
/* 242 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const decoders = exports;

decoders.der = __webpack_require__(243);
decoders.pem = __webpack_require__(244);


/***/ }),
/* 243 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const inherits = __webpack_require__(71);

const bignum = __webpack_require__(231);
const DecoderBuffer = __webpack_require__(239).DecoderBuffer;
const Node = __webpack_require__(237);

// Import DER constants
const der = __webpack_require__(240);

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),
/* 244 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const inherits = __webpack_require__(71);
const Buffer = __webpack_require__(236).Buffer;

const DERDecoder = __webpack_require__(243);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),
/* 245 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const base = exports;

base.Reporter = __webpack_require__(238).Reporter;
base.DecoderBuffer = __webpack_require__(239).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(239).EncoderBuffer;
base.Node = __webpack_require__(237);


/***/ }),
/* 246 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(240);


/***/ }),
/* 247 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__(230)

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),
/* 248 */
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');

/***/ }),
/* 249 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = __webpack_require__(159)
var ciphers = __webpack_require__(142)
var Buffer = __webpack_require__(65).Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}


/***/ }),
/* 250 */
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');

/***/ }),
/* 251 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = __webpack_require__(174).Buffer
var BN = __webpack_require__(194)
var EC = __webpack_require__(196).ec
var parseKeys = __webpack_require__(228)
var curves = __webpack_require__(250)

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [1]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = Buffer.from(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = Buffer.from(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify


/***/ }),
/* 252 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var elliptic = __webpack_require__(196)
var BN = __webpack_require__(253)

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}


/***/ }),
/* 253 */
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(254).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),
/* 254 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 255 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

exports.publicEncrypt = __webpack_require__(256)
exports.privateDecrypt = __webpack_require__(262)

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}


/***/ }),
/* 256 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parseKeys = __webpack_require__(228)
var randomBytes = __webpack_require__(64)
var createHash = __webpack_require__(70)
var mgf = __webpack_require__(257)
var xor = __webpack_require__(258)
var BN = __webpack_require__(259)
var withPublic = __webpack_require__(261)
var crt = __webpack_require__(193)
var Buffer = __webpack_require__(65).Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}


/***/ }),
/* 257 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createHash = __webpack_require__(70)
var Buffer = __webpack_require__(65).Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}


/***/ }),
/* 258 */
/***/ ((module) => {

module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}


/***/ }),
/* 259 */
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(260).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),
/* 260 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 261 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var BN = __webpack_require__(259)
var Buffer = __webpack_require__(65).Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic


/***/ }),
/* 262 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parseKeys = __webpack_require__(228)
var mgf = __webpack_require__(257)
var xor = __webpack_require__(258)
var BN = __webpack_require__(259)
var crt = __webpack_require__(193)
var createHash = __webpack_require__(70)
var withPublic = __webpack_require__(261)
var Buffer = __webpack_require__(65).Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}


/***/ }),
/* 263 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);


function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = __webpack_require__(65)
var randombytes = __webpack_require__(64)
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = __webpack_require__.g.crypto || __webpack_require__.g.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof __webpack_require__.g.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof __webpack_require__.g.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// Generated by CoffeeScript 1.12.7

/*
This program is distributed under the terms of the MIT license.
Copyright 2012 - 2018 (c) Markus Kohlhase <mail@markus-kohlhase.de>
 */

(function() {
  var countComments, countMixed, emptyLines, emptyLns, endOfLine, extensions, getCommentExpressions, getStopRegex, getType, indexOfGroup, keys, lineSum, matchDefinedGroup, matchIdx, newLines, newLns, nonEmpty, slocModule, todoLines, todoLns, trampoline,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  keys = ['total', 'source', 'comment', 'single', 'block', 'mixed', 'blockEmpty', 'empty', 'todo'];

  nonEmpty = /[^\s]/;

  endOfLine = /$/m;

  newLines = /\n/g;

  emptyLines = /^\s*$/mg;

  todoLines = /^.*TODO.*$/mg;

  getCommentExpressions = function(lang) {
    var r, single, start, stop;
    single = (function() {
      switch (lang) {
        case "coffee":
        case "iced":
          return /\#[^\{]/;
        case "cr":
        case "py":
        case "ls":
        case "mochi":
        case "nix":
        case "r":
        case "rb":
        case "jl":
        case "pl":
        case "yaml":
        case "hr":
          return /\#/;
        case "js":
        case "jsx":
        case "mjs":
        case "c":
        case "cc":
        case "cpp":
        case "cs":
        case "cxx":
        case "h":
        case "m":
        case "mm":
        case "hpp":
        case "hx":
        case "hxx":
        case "ino":
        case "java":
        case "php":
        case "php5":
        case "go":
        case "groovy":
        case "scss":
        case "less":
        case "rs":
        case "sass":
        case "styl":
        case "scala":
        case "swift":
        case "ts":
        case "jade":
        case "gs":
        case "nut":
        case "kt":
        case "kts":
        case "tsx":
        case "fs":
        case "fsi":
        case "fsx":
        case "bsl":
          return /\/{2}/;
        case "latex":
        case "tex":
        case "sty":
        case "cls":
          return start = /\%/;
        case "lua":
        case "hs":
        case "sql":
          return /--/;
        case "erl":
          return /\%/;
        case "brs":
        case "monkey":
        case "vb":
          return /'/;
        case "nim":
          r = /(?:^[^\#]*)(\#)(?:(?![\#\!]))/;
          r._matchGroup_ = 1;
          return r;
        case "rkt":
        case "clj":
        case "cljs":
        case "hy":
        case "asm":
          return /;/;
        case "ly":
        case "ily":
          return start = /%/;
        case "f90":
        case "f95":
        case "f03":
        case "f08":
        case "f18":
          return /\!/;
        default:
          return null;
      }
    })();
    switch (lang) {
      case "coffee":
      case "iced":
        start = stop = /\#{3}/;
        break;
      case "js":
      case "jsx":
      case "mjs":
      case "c":
      case "cc":
      case "cpp":
      case "cs":
      case "cxx":
      case "h":
      case "m":
      case "mm":
      case "hpp":
      case "hx":
      case "hxx":
      case "ino":
      case "java":
      case "ls":
      case "nix":
      case "php":
      case "php5":
      case "go":
      case "css":
      case "sass":
      case "scss":
      case "less":
      case "rs":
      case "styl":
      case "scala":
      case "ts":
      case "gs":
      case "groovy":
      case "nut":
      case "kt":
      case "kts":
      case "tsx":
      case "sql":
        start = /\/\*+/;
        stop = /\*\/{1}/;
        break;
      case "python":
      case "py":
        start = stop = /\"{3}|\'{3}/;
        break;
      case "handlebars":
      case "hbs":
      case "mustache":
        start = /\{\{\!/;
        stop = /\}\}/;
        break;
      case "hs":
        start = /\{-/;
        stop = /-\}/;
        break;
      case "html":
      case "htm":
      case "svg":
      case "xml":
      case "vue":
        start = /<\!--/;
        stop = /-->/;
        break;
      case "lua":
        start = /--\[{2}/;
        stop = /--\]{2}/;
        break;
      case "monkey":
        start = /#rem/i;
        stop = /#end/i;
        break;
      case "nim":
        start = /\#{2}/;
        break;
      case "rb":
        start = /\=begin/;
        stop = /\=end/;
        break;
      case "rkt":
        start = /#\|/;
        stop = /\|#/;
        break;
      case "jl":
        start = /\#\=/;
        stop = /\=\#/;
        break;
      case "ml":
      case "mli":
      case "fs":
      case "fsi":
      case "fsx":
        start = /\(\*/;
        stop = /\*\)/;
        break;
      case "ly":
      case "ily":
        start = /%\{/;
        stop = /%\}/;
        break;
      default:
        if (indexOf.call(extensions, lang) >= 0) {
          start = stop = null;
        } else {
          throw new TypeError("File extension '" + lang + "' is not supported");
        }
    }
    return {
      start: start,
      stop: stop,
      single: single
    };
  };

  countMixed = function(res, lines, idx, startIdx, match) {
    var ref;
    if ((nonEmpty.exec(lines[0])) && (((ref = res.last) != null ? ref.stop : void 0) === idx || startIdx === idx)) {
      res.mixed.push({
        start: idx,
        stop: idx
      });
    }
    if ((match != null) && nonEmpty.exec(lines.slice(-1)[0].substr(0, match.index))) {
      return res.mixed.push({
        start: startIdx,
        stop: startIdx
      });
    }
  };

  getStopRegex = function(type, regex) {
    switch (type) {
      case 'single':
        return endOfLine;
      case 'block':
        return regex || endOfLine;
    }
  };

  getType = function(single, start) {
    if (single && !start) {
      return 'single';
    } else if (start && !single) {
      return 'block';
    } else {
      if (start.index <= single.index) {
        return 'block';
      } else {
        return 'single';
      }
    }
  };

  matchIdx = function(m) {
    return m.index + m[0].length;
  };

  emptyLns = function(c) {
    var ref;
    return ((ref = c.match(emptyLines)) != null ? ref.length : void 0) || 0;
  };

  newLns = function(c) {
    var ref;
    return ((ref = c.match(newLines)) != null ? ref.length : void 0) || 0;
  };

  todoLns = function(c) {
    var ref;
    return ((ref = c.match(todoLines)) != null ? ref.length : void 0) || 0;
  };

  indexOfGroup = function(match, n) {
    var i, ix, j, ref;
    ix = match.index;
    for (i = j = 1, ref = n; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      ix += match[i].length;
    }
    return ix;
  };

  matchDefinedGroup = function(reg, code) {
    var g, res;
    res = reg != null ? reg.exec(code) : void 0;
    if ((res != null) && ((g = reg != null ? reg._matchGroup_ : void 0) != null)) {
      res.index = indexOfGroup(res, g);
      res[0] = res[g];
    }
    return res;
  };

  countComments = function(code, regex) {
    var myself;
    myself = function(res, code, idx) {
      var cStartIdx, comment, empty, len, lines, match, single, splitAt, start, startIdx, stop, type;
      if (code === '') {
        return res;
      }
      if (code[0] === '\n') {
        return function() {
          return myself(res, code.slice(1), ++idx);
        };
      }
      start = matchDefinedGroup(regex.start, code);
      single = matchDefinedGroup(regex.single, code);
      if (!(start || single)) {
        countMixed(res, code.split('\n'), idx);
        return res;
      }
      type = getType(single, start);
      match = (function() {
        switch (type) {
          case 'single':
            return single;
          case 'block':
            return start;
        }
      })();
      cStartIdx = matchIdx(match);
      comment = code.substring(cStartIdx);
      lines = code.substring(0, match.index).split('\n');
      startIdx = lines.length - 1 + idx;
      stop = matchDefinedGroup(getStopRegex(type, regex.stop), comment);
      if (!stop) {
        res.error = true;
        return res;
      }
      empty = emptyLns(code.substring(match.index, cStartIdx + matchIdx(stop)));
      comment = comment.substring(0, stop.index);
      len = newLns(comment);
      splitAt = cStartIdx + comment.length + stop[0].length;
      code = code.substring(splitAt);
      countMixed(res, lines, idx, startIdx, match);
      res.last = {
        start: startIdx,
        stop: startIdx + len,
        empty: empty
      };
      res[type].push(res.last);
      return function() {
        return myself(res, code, startIdx + len);
      };
    };
    return trampoline(myself({
      single: [],
      block: [],
      mixed: []
    }, code, 0));
  };

  trampoline = function(next) {
    while (typeof next === 'function') {
      next = next();
    }
    return next;
  };

  lineSum = function(comments) {
    var c, d, i, j, len1, ref, sum;
    sum = 0;
    for (i = j = 0, len1 = comments.length; j < len1; i = ++j) {
      c = comments[i];
      d = (c.stop - c.start) + 1;
      if (((ref = comments[i + 1]) != null ? ref.start : void 0) === c.stop) {
        d--;
      }
      sum += d;
    }
    return sum;
  };

  slocModule = function(code, lang, opt) {
    var b, bIdx, block, blockEmpty, comment, empty, j, k, len1, len2, mixed, ref, ref1, ref2, res, s, single, source, todo, total, x;
    if (opt == null) {
      opt = {};
    }
    if (typeof code !== "string") {
      throw new TypeError("'code' has to be a string");
    }
    code = code.replace(/\r\n|\r/g, '\n');
    if (code.slice(-1) === '\n') {
      code = code.slice(0, -1);
    }
    total = (1 + newLns(code)) || 1;
    empty = emptyLns(code);
    res = countComments(code, getCommentExpressions(lang));
    single = lineSum(res.single);
    block = lineSum(res.block);
    mixed = lineSum(res.mixed);
    comment = block + single;
    todo = todoLns(code);
    bIdx = (function() {
      var j, len1, ref, results;
      ref = res.block;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        b = ref[j];
        results.push(b.stop);
      }
      return results;
    })();
    ref = res.single;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      s = ref[j];
      if (ref1 = s.start, indexOf.call(bIdx, ref1) >= 0) {
        comment--;
      }
    }
    blockEmpty = 0;
    ref2 = res.block;
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      x = ref2[k];
      blockEmpty += x.empty;
    }
    source = total - comment - empty + blockEmpty + mixed;
    if (opt.debug) {
      console.log(res);
    }
    return {
      total: total,
      source: source,
      comment: comment,
      single: single,
      block: block,
      mixed: mixed,
      empty: empty,
      todo: todo,
      blockEmpty: blockEmpty
    };
  };

  extensions = ["asm", "brs", "c", "cc", "clj", "cljs", "cls", "coffee", "cpp", "cr", "cs", "css", "cxx", "erl", "f90", "f95", "f03", "f08", "f18", "fs", "fsi", "fsx", "go", "groovy", "gs", "h", "handlebars", "hbs", "hpp", "hr", "hs", "html", "htm", "hx", "hxx", "hy", "iced", "ily", "ino", "jade", "java", "jl", "js", "jsx", "mjs", "kt", "kts", "latex", "less", "ly", "lua", "ls", "ml", "mli", "mochi", "monkey", "mustache", "nix", "nim", "nut", "php", "php5", "pl", "py", "r", "rb", "rkt", "rs", "sass", "scala", "scss", "sty", "styl", "svg", "sql", "swift", "tex", "ts", "tsx", "vb", "vue", "xml", "yaml", "m", "mm", "bsl"];

  slocModule.extensions = extensions;

  slocModule.keys = keys;

  if (( true && __webpack_require__.amdD !== null ? __webpack_require__.amdO : void 0) != null) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return slocModule;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (( true && module !== null ? module.exports : void 0) != null) {
    module.exports = slocModule;
  } else if (typeof window !== "undefined" && window !== null) {
    window.sloc = slocModule;
  }

}).call(this);


/***/ }),
/* 265 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _describe = __webpack_require__(266);

Object.defineProperty(exports, "describe", ({
  enumerable: true,
  get: function get() {
    return _describe.describe;
  }
}));

var _graph = __webpack_require__(269);

Object.defineProperty(exports, "graph", ({
  enumerable: true,
  get: function get() {
    return _graph.graph;
  }
}));

var _graphSimple = __webpack_require__(287);

Object.defineProperty(exports, "graphSimple", ({
  enumerable: true,
  get: function get() {
    return _graphSimple.graphSimple;
  }
}));

var _inheritance = __webpack_require__(288);

Object.defineProperty(exports, "inheritance", ({
  enumerable: true,
  get: function get() {
    return _inheritance.inheritance;
  }
}));

var _dependencies = __webpack_require__(289);

Object.defineProperty(exports, "dependenciesPrint", ({
  enumerable: true,
  get: function get() {
    return _dependencies.dependenciesPrint;
  }
}));
Object.defineProperty(exports, "dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependencies.dependencies;
  }
}));

var _parse = __webpack_require__(290);

Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function get() {
    return _parse.parse;
  }
}));

var _ftrace = __webpack_require__(292);

Object.defineProperty(exports, "ftrace", ({
  enumerable: true,
  get: function get() {
    return _ftrace.ftrace;
  }
}));

var _mdreport = __webpack_require__(293);

Object.defineProperty(exports, "mdreport", ({
  enumerable: true,
  get: function get() {
    return _mdreport.mdreport;
  }
}));

var _flatten = __webpack_require__(295);

Object.defineProperty(exports, "flatten", ({
  enumerable: true,
  get: function get() {
    return _flatten.flatten;
  }
}));

var _importer = __webpack_require__(268);

Object.defineProperty(exports, "importer", ({
  enumerable: true,
  get: function get() {
    return _importer.importer;
  }
}));

/***/ }),
/* 266 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.describe = describe;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var fs = __webpack_require__(5);
var parser = __webpack_require__(267);
var importer = __webpack_require__(268);

function describe(files) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var noColorOutput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (files.length === 0) {
    throw new Error('\nNo files were specified for analysis in the arguments. Bailing...\n');
  }

  // make the files array unique by typecasting them to a Set and back
  // this is not needed in case the importer flag is on, because the 
  // importer module already filters the array internally
  if (!options.contentsInFilePath && options.importer) {
    files = importer.importProfiler(files);
  } else {
    files = [].concat(_toConsumableArray(new Set(files)));
  }

  var _loop = function _loop(file) {

    var content = void 0;
    if (!options.contentsInFilePath) {
      try {
        content = fs.readFileSync(file).toString('utf-8');
      } catch (e) {
        if (e.code === 'EISDIR') {
          console.error('Skipping directory ' + file);
          return 'continue';
        } else {
          throw e;
        }
      }
    } else {
      content = file;
    }

    var ast = function () {
      try {
        return parser.parse(content);
      } catch (err) {
        if (!options.contentsInFilePath) {
          console.error('\nError found while parsing the following file: ' + file + '\n');
        } else {
          console.error('\nError found while parsing one of the provided files\n');
        }
        throw err;
      }
    }();

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {

        var name = node.name;
        var bases = node.baseContracts.map(function (spec) {
          return spec.baseName.namePath;
        }).join(', ');

        bases = bases.length ? noColorOutput ? '(' + bases + ')' : ('(' + bases + ')').gray : '';

        var specs = '';
        if (node.kind === 'library') {
          specs += noColorOutput ? '[Lib]' : '[Lib]'.yellow;
        } else if (node.kind === 'interface') {
          specs += noColorOutput ? '[Int]' : '[Int]'.blue;
        }

        console.log(' + ' + specs + ' ' + name + ' ' + bases);
      },


      'ContractDefinition:exit': function ContractDefinitionExit(node) {
        console.log('');
      },

      FunctionDefinition: function FunctionDefinition(node) {
        var name = void 0;

        if (node.isConstructor) {
          name = noColorOutput ? '<Constructor>' : '<Constructor>'.gray;
        } else if (!node.name) {
          name = noColorOutput ? '<Fallback>' : '<Fallback>'.gray;
        } else {
          name = node.name;
        }

        var spec = '';
        if (node.visibility === 'public' || node.visibility === 'default') {
          spec += noColorOutput ? '[Pub]' : '[Pub]'.green;
        } else if (node.visibility === 'external') {
          spec += noColorOutput ? '[Ext]' : '[Ext]'.blue;
        } else if (node.visibility === 'private') {
          spec += noColorOutput ? '[Prv]' : '[Prv]'.red;
        } else if (node.visibility === 'internal') {
          spec += noColorOutput ? '[Int]' : '[Int]'.gray;
        }

        var payable = '';
        if (node.stateMutability === 'payable') {
          payable = noColorOutput ? ' ($)' : ' ($)'.yellow;
        }

        var mutating = '';
        if (!node.stateMutability) {
          mutating = noColorOutput ? ' #' : ' #'.red;
        }

        var modifiers = '';
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = node.modifiers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var m = _step2.value;

            if (!!modifiers) modifiers += ',';
            modifiers += m.name;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        console.log('    - ' + spec + ' ' + name + payable + mutating);
        if (!!modifiers) {
          console.log('       - modifiers: ' + modifiers);
        }
      }
    });
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;

      var _ret = _loop(file);

      if (_ret === 'continue') continue;
    }

    // Print a legend for symbols being used
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var mutationSymbol = noColorOutput ? ' #' : ' #'.red;
  var payableSymbol = noColorOutput ? ' ($)' : ' ($)'.yellow;

  console.log('\n' + payableSymbol + ' = payable function\n' + mutationSymbol + ' = non-constant function\n  ');
}

/***/ }),
/* 267 */
/***/ (() => {

var SolidityParser = (function (exports) {
  'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;

    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */
  function arrayToString(a) {
      return "[" + a.join(", ") + "]";
  }

  String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

  String.prototype.hashCode = function () {
      const key = this.toString();
      let h1b, k1;

      const remainder = key.length & 3; // key.length % 4
      const bytes = key.length - remainder;
      let h1 = String.prototype.seed;
      const c1 = 0xcc9e2d51;
      const c2 = 0x1b873593;
      let i = 0;

      while (i < bytes) {
          k1 =
              ((key.charCodeAt(i) & 0xff)) |
              ((key.charCodeAt(++i) & 0xff) << 8) |
              ((key.charCodeAt(++i) & 0xff) << 16) |
              ((key.charCodeAt(++i) & 0xff) << 24);
          ++i;

          k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
          k1 = (k1 << 15) | (k1 >>> 17);
          k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

          h1 ^= k1;
          h1 = (h1 << 13) | (h1 >>> 19);
          h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
          h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
      }

      k1 = 0;

      switch (remainder) {
          case 3:
              k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
          case 2:
              k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
          case 1:
              k1 ^= (key.charCodeAt(i) & 0xff);

              k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
              k1 = (k1 << 15) | (k1 >>> 17);
              k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
              h1 ^= k1;
      }

      h1 ^= key.length;

      h1 ^= h1 >>> 16;
      h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
      h1 ^= h1 >>> 13;
      h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
      h1 ^= h1 >>> 16;

      return h1 >>> 0;
  };

  function standardEqualsFunction(a, b) {
      return a ? a.equals(b) : a==b;
  }

  function standardHashCodeFunction(a) {
      return a ? a.hashCode() : -1;
  }

  class Set {
      constructor(hashFunction, equalsFunction) {
          this.data = {};
          this.hashFunction = hashFunction || standardHashCodeFunction;
          this.equalsFunction = equalsFunction || standardEqualsFunction;
      }

      add(value) {
          const hash = this.hashFunction(value);
          const key = "hash_" + hash;
          if (key in this.data) {
              const values = this.data[key];
              for (let i = 0; i < values.length; i++) {
                  if (this.equalsFunction(value, values[i])) {
                      return values[i];
                  }
              }
              values.push(value);
              return value;
          } else {
              this.data[key] = [value];
              return value;
          }
      }

      contains(value) {
          return this.get(value) != null;
      }

      get(value) {
          const hash = this.hashFunction(value);
          const key = "hash_" + hash;
          if (key in this.data) {
              const values = this.data[key];
              for (let i = 0; i < values.length; i++) {
                  if (this.equalsFunction(value, values[i])) {
                      return values[i];
                  }
              }
          }
          return null;
      }

      values() {
          let l = [];
          for (const key in this.data) {
              if (key.indexOf("hash_") === 0) {
                  l = l.concat(this.data[key]);
              }
          }
          return l;
      }

      toString() {
          return arrayToString(this.values());
      }

      get length(){
          let l = 0;
          for (const key in this.data) {
              if (key.indexOf("hash_") === 0) {
                  l = l + this.data[key].length;
              }
          }
          return l;
      }
  }


  class BitSet {
      constructor() {
          this.data = [];
      }

      add(value) {
          this.data[value] = true;
      }

      or(set) {
          const bits = this;
          Object.keys(set.data).map(function (alt) {
              bits.add(alt);
          });
      }

      remove(value) {
          delete this.data[value];
      }

      contains(value) {
          return this.data[value] === true;
      }

      values() {
          return Object.keys(this.data);
      }

      minValue() {
          return Math.min.apply(null, this.values());
      }

      hashCode() {
          const hash = new Hash$1();
          hash.update(this.values());
          return hash.finish();
      }

      equals(other) {
          if (!(other instanceof BitSet)) {
              return false;
          }
          return this.hashCode() === other.hashCode();
      }

      toString() {
          return "{" + this.values().join(", ") + "}";
      }

      get length(){
          return this.values().length;
      }
  }


  class Map$1 {
      constructor(hashFunction, equalsFunction) {
          this.data = {};
          this.hashFunction = hashFunction || standardHashCodeFunction;
          this.equalsFunction = equalsFunction || standardEqualsFunction;
      }

      put(key, value) {
          const hashKey = "hash_" + this.hashFunction(key);
          if (hashKey in this.data) {
              const entries = this.data[hashKey];
              for (let i = 0; i < entries.length; i++) {
                  const entry = entries[i];
                  if (this.equalsFunction(key, entry.key)) {
                      const oldValue = entry.value;
                      entry.value = value;
                      return oldValue;
                  }
              }
              entries.push({key:key, value:value});
              return value;
          } else {
              this.data[hashKey] = [{key:key, value:value}];
              return value;
          }
      }

      containsKey(key) {
          const hashKey = "hash_" + this.hashFunction(key);
          if(hashKey in this.data) {
              const entries = this.data[hashKey];
              for (let i = 0; i < entries.length; i++) {
                  const entry = entries[i];
                  if (this.equalsFunction(key, entry.key))
                      return true;
              }
          }
          return false;
      }

      get(key) {
          const hashKey = "hash_" + this.hashFunction(key);
          if(hashKey in this.data) {
              const entries = this.data[hashKey];
              for (let i = 0; i < entries.length; i++) {
                  const entry = entries[i];
                  if (this.equalsFunction(key, entry.key))
                      return entry.value;
              }
          }
          return null;
      }

      entries() {
          let l = [];
          for (const key in this.data) {
              if (key.indexOf("hash_") === 0) {
                  l = l.concat(this.data[key]);
              }
          }
          return l;
      }

      getKeys() {
          return this.entries().map(function(e) {
              return e.key;
          });
      }

      getValues() {
          return this.entries().map(function(e) {
                  return e.value;
          });
      }

      toString() {
          const ss = this.entries().map(function(entry) {
              return '{' + entry.key + ':' + entry.value + '}';
          });
          return '[' + ss.join(", ") + ']';
      }

      get length(){
          let l = 0;
          for (const hashKey in this.data) {
              if (hashKey.indexOf("hash_") === 0) {
                  l = l + this.data[hashKey].length;
              }
          }
          return l;
      }
  }


  class AltDict {
      constructor() {
          this.data = {};
      }

      get(key) {
          key = "k-" + key;
          if (key in this.data) {
              return this.data[key];
          } else {
              return null;
          }
      }

      put(key, value) {
          key = "k-" + key;
          this.data[key] = value;
      }

      values() {
          const data = this.data;
          const keys = Object.keys(this.data);
          return keys.map(function (key) {
              return data[key];
          });
      }
  }


  class DoubleDict {
      constructor(defaultMapCtor) {
          this.defaultMapCtor = defaultMapCtor || Map$1;
          this.cacheMap = new this.defaultMapCtor();
      }

      get(a, b) {
          const d = this.cacheMap.get(a) || null;
          return d === null ? null : (d.get(b) || null);
      }

      set(a, b, o) {
          let d = this.cacheMap.get(a) || null;
          if (d === null) {
              d = new this.defaultMapCtor();
              this.cacheMap.put(a, d);
          }
          d.put(b, o);
      }
  }

  class Hash$1 {
      constructor() {
          this.count = 0;
          this.hash = 0;
      }

      update() {
          for(let i=0;i<arguments.length;i++) {
              const value = arguments[i];
              if (value == null)
                  continue;
              if(Array.isArray(value))
                  this.update.apply(this, value);
              else {
                  let k = 0;
                  switch (typeof(value)) {
                      case 'undefined':
                      case 'function':
                          continue;
                      case 'number':
                      case 'boolean':
                          k = value;
                          break;
                      case 'string':
                          k = value.hashCode();
                          break;
                      default:
                          if(value.updateHashCode)
                              value.updateHashCode(this);
                          else
                              console.log("No updateHashCode for " + value.toString());
                          continue;
                  }
                  k = k * 0xCC9E2D51;
                  k = (k << 15) | (k >>> (32 - 15));
                  k = k * 0x1B873593;
                  this.count = this.count + 1;
                  let hash = this.hash ^ k;
                  hash = (hash << 13) | (hash >>> (32 - 13));
                  hash = hash * 5 + 0xE6546B64;
                  this.hash = hash;
              }
          }
      }

      finish() {
          let hash = this.hash ^ (this.count * 4);
          hash = hash ^ (hash >>> 16);
          hash = hash * 0x85EBCA6B;
          hash = hash ^ (hash >>> 13);
          hash = hash * 0xC2B2AE35;
          hash = hash ^ (hash >>> 16);
          return hash;
      }
  }

  function hashStuff() {
      const hash = new Hash$1();
      hash.update.apply(hash, arguments);
      return hash.finish();
  }


  function escapeWhitespace(s, escapeSpaces) {
      s = s.replace(/\t/g, "\\t")
           .replace(/\n/g, "\\n")
           .replace(/\r/g, "\\r");
      if (escapeSpaces) {
          s = s.replace(/ /g, "\u00B7");
      }
      return s;
  }

  function titleCase(str) {
      return str.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1);
      });
  }

  function equalArrays(a, b) {
      if (!Array.isArray(a) || !Array.isArray(b))
          return false;
      if (a == b)
          return true;
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++) {
          if (a[i] == b[i])
              continue;
          if (!a[i].equals || !a[i].equals(b[i]))
              return false;
      }
      return true;
  }

  var Utils = {
      Hash: Hash$1,
      Set,
      Map: Map$1,
      BitSet,
      AltDict,
      DoubleDict,
      hashStuff,
      escapeWhitespace,
      arrayToString,
      titleCase,
      equalArrays
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */
  /**
   * A token has properties: text, type, line, character position in the line
   * (so we can ignore tabs), token channel, index, and source from which
   * we obtained this token.
   */
  class Token {
  	constructor() {
  		this.source = null;
  		this.type = null; // token type of the token
  		this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
  		this.start = null; // optional; return -1 if not implemented.
  		this.stop = null; // optional; return -1 if not implemented.
  		this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
  		this.line = null; // line=1..n of the 1st character
  		this.column = null; // beginning of the line at which it occurs, 0..n-1
  		this._text = null; // text of the token.
  	}

  	getTokenSource() {
  		return this.source[0];
  	}

  	getInputStream() {
  		return this.source[1];
  	}

  	get text(){
  		return this._text;
  	}

  	set text(text) {
  		this._text = text;
  	}
  }

  Token.INVALID_TYPE = 0;

  /**
   * During lookahead operations, this "token" signifies we hit rule end ATN state
   * and did not follow it despite needing to.
   */
  Token.EPSILON = -2;

  Token.MIN_USER_TOKEN_TYPE = 1;

  Token.EOF = -1;

  /**
   * All tokens go to the parser (unless skip() is called in that rule)
   * on a particular "channel". The parser tunes to a particular channel
   * so that whitespace etc... can go to the parser on a "hidden" channel.
   */
  Token.DEFAULT_CHANNEL = 0;

  /**
   * Anything on different channel than DEFAULT_CHANNEL is not parsed
   * by parser.
   */
  Token.HIDDEN_CHANNEL = 1;


  class CommonToken extends Token {
  	constructor(source, type, channel, start, stop) {
  		super();
  		this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
  		this.type = type !== undefined ? type : null;
  		this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
  		this.start = start !== undefined ? start : -1;
  		this.stop = stop !== undefined ? stop : -1;
  		this.tokenIndex = -1;
  		if (this.source[0] !== null) {
  			this.line = source[0].line;
  			this.column = source[0].column;
  		} else {
  			this.column = -1;
  		}
  	}

  	/**
  	 * Constructs a new {@link CommonToken} as a copy of another {@link Token}.
  	 *
  	 * <p>
  	 * If {@code oldToken} is also a {@link CommonToken} instance, the newly
  	 * constructed token will share a reference to the {@link //text} field and
  	 * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
  	 * be assigned the result of calling {@link //getText}, and {@link //source}
  	 * will be constructed from the result of {@link Token//getTokenSource} and
  	 * {@link Token//getInputStream}.</p>
  	 *
  	 * @param oldToken The token to copy.
  	 */
  	clone() {
  		const t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);
  		t.tokenIndex = this.tokenIndex;
  		t.line = this.line;
  		t.column = this.column;
  		t.text = this.text;
  		return t;
  	}

  	toString() {
  		let txt = this.text;
  		if (txt !== null) {
  			txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
  		} else {
  			txt = "<no text>";
  		}
  		return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
  				txt + "',<" + this.type + ">" +
  				(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
  				this.line + ":" + this.column + "]";
  	}

  	get text(){
  		if (this._text !== null) {
  			return this._text;
  		}
  		const input = this.getInputStream();
  		if (input === null) {
  			return null;
  		}
  		const n = input.size;
  		if (this.start < n && this.stop < n) {
  			return input.getText(this.start, this.stop);
  		} else {
  			return "<EOF>";
  		}
  	}

  	set text(text) {
  		this._text = text;
  	}
  }

  /**
   * An empty {@link Pair} which is used as the default value of
   * {@link //source} for tokens that do not have a source.
   */
  CommonToken.EMPTY_SOURCE = [ null, null ];

  var Token_1 = {
  	Token,
  	CommonToken
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  /**
   * The following images show the relation of states and
   * {@link ATNState//transitions} for various grammar constructs.
   *
   * <ul>
   *
   * <li>Solid edges marked with an &//0949; indicate a required
   * {@link EpsilonTransition}.</li>
   *
   * <li>Dashed edges indicate locations where any transition derived from
   * {@link Transition} might appear.</li>
   *
   * <li>Dashed nodes are place holders for either a sequence of linked
   * {@link BasicState} states or the inclusion of a block representing a nested
   * construct in one of the forms below.</li>
   *
   * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
   * any number of alternatives (one or more). Nodes without the {@code ...} only
   * support the exact number of alternatives shown in the diagram.</li>
   *
   * </ul>
   *
   * <h2>Basic Blocks</h2>
   *
   * <h3>Rule</h3>
   *
   * <embed src="images/Rule.svg" type="image/svg+xml"/>
   *
   * <h3>Block of 1 or more alternatives</h3>
   *
   * <embed src="images/Block.svg" type="image/svg+xml"/>
   *
   * <h2>Greedy Loops</h2>
   *
   * <h3>Greedy Closure: {@code (...)*}</h3>
   *
   * <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
   *
   * <h3>Greedy Positive Closure: {@code (...)+}</h3>
   *
   * <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
   *
   * <h3>Greedy Optional: {@code (...)?}</h3>
   *
   * <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
   *
   * <h2>Non-Greedy Loops</h2>
   *
   * <h3>Non-Greedy Closure: {@code (...)*?}</h3>
   *
   * <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
   *
   * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
   *
   * <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
   *
   * <h3>Non-Greedy Optional: {@code (...)??}</h3>
   *
   * <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
   */
  class ATNState {
      constructor() {
          // Which ATN are we in?
          this.atn = null;
          this.stateNumber = ATNState.INVALID_STATE_NUMBER;
          this.stateType = null;
          this.ruleIndex = 0; // at runtime, we don't have Rule objects
          this.epsilonOnlyTransitions = false;
          // Track the transitions emanating from this ATN state.
          this.transitions = [];
          // Used to cache lookahead during parsing, not used during construction
          this.nextTokenWithinRule = null;
      }

      toString() {
          return this.stateNumber;
      }

      equals(other) {
          if (other instanceof ATNState) {
              return this.stateNumber===other.stateNumber;
          } else {
              return false;
          }
      }

      isNonGreedyExitState() {
          return false;
      }

      addTransition(trans, index) {
          if(index===undefined) {
              index = -1;
          }
          if (this.transitions.length===0) {
              this.epsilonOnlyTransitions = trans.isEpsilon;
          } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
              this.epsilonOnlyTransitions = false;
          }
          if (index===-1) {
              this.transitions.push(trans);
          } else {
              this.transitions.splice(index, 1, trans);
          }
      }
  }

  // constants for serialization
  ATNState.INVALID_TYPE = 0;
  ATNState.BASIC = 1;
  ATNState.RULE_START = 2;
  ATNState.BLOCK_START = 3;
  ATNState.PLUS_BLOCK_START = 4;
  ATNState.STAR_BLOCK_START = 5;
  ATNState.TOKEN_START = 6;
  ATNState.RULE_STOP = 7;
  ATNState.BLOCK_END = 8;
  ATNState.STAR_LOOP_BACK = 9;
  ATNState.STAR_LOOP_ENTRY = 10;
  ATNState.PLUS_LOOP_BACK = 11;
  ATNState.LOOP_END = 12;

  ATNState.serializationNames = [
              "INVALID",
              "BASIC",
              "RULE_START",
              "BLOCK_START",
              "PLUS_BLOCK_START",
              "STAR_BLOCK_START",
              "TOKEN_START",
              "RULE_STOP",
              "BLOCK_END",
              "STAR_LOOP_BACK",
              "STAR_LOOP_ENTRY",
              "PLUS_LOOP_BACK",
              "LOOP_END" ];

  ATNState.INVALID_STATE_NUMBER = -1;


  class BasicState extends ATNState {
      constructor() {
          super();
          this.stateType = ATNState.BASIC;
      }
  }

  class DecisionState extends ATNState {
      constructor() {
          super();
          this.decision = -1;
          this.nonGreedy = false;
          return this;
      }
  }

  /**
   *  The start of a regular {@code (...)} block
   */
  class BlockStartState extends DecisionState {
      constructor() {
          super();
          this.endState = null;
          return this;
      }
  }

  class BasicBlockStartState extends BlockStartState {
      constructor() {
          super();
          this.stateType = ATNState.BLOCK_START;
          return this;
      }
  }

  /**
   * Terminal node of a simple {@code (a|b|c)} block
   */
  class BlockEndState extends ATNState {
      constructor() {
          super();
          this.stateType = ATNState.BLOCK_END;
          this.startState = null;
          return this;
      }
  }

  /**
   * The last node in the ATN for a rule, unless that rule is the start symbol.
   * In that case, there is one transition to EOF. Later, we might encode
   * references to all calls to this rule to compute FOLLOW sets for
   * error handling
   */
  class RuleStopState extends ATNState {
      constructor() {
          super();
          this.stateType = ATNState.RULE_STOP;
          return this;
      }
  }

  class RuleStartState extends ATNState {
      constructor() {
          super();
          this.stateType = ATNState.RULE_START;
          this.stopState = null;
          this.isPrecedenceRule = false;
          return this;
      }
  }

  /**
   * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
   * one to the loop back to start of the block and one to exit.
   */
  class PlusLoopbackState extends DecisionState {
      constructor() {
          super();
          this.stateType = ATNState.PLUS_LOOP_BACK;
          return this;
      }
  }

  /**
   * Start of {@code (A|B|...)+} loop. Technically a decision state, but
   * we don't use for code generation; somebody might need it, so I'm defining
   * it for completeness. In reality, the {@link PlusLoopbackState} node is the
   * real decision-making note for {@code A+}
   */
  class PlusBlockStartState extends BlockStartState {
      constructor() {
          super();
          this.stateType = ATNState.PLUS_BLOCK_START;
          this.loopBackState = null;
          return this;
      }
  }

  /**
   * The block that begins a closure loop
   */
  class StarBlockStartState extends BlockStartState {
      constructor() {
          super();
          this.stateType = ATNState.STAR_BLOCK_START;
          return this;
      }
  }

  class StarLoopbackState extends ATNState {
      constructor() {
          super();
          this.stateType = ATNState.STAR_LOOP_BACK;
          return this;
      }
  }

  class StarLoopEntryState extends DecisionState {
      constructor() {
          super();
          this.stateType = ATNState.STAR_LOOP_ENTRY;
          this.loopBackState = null;
          // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
          this.isPrecedenceDecision = null;
          return this;
      }
  }

  /**
   * Mark the end of a * or + loop
   */
  class LoopEndState extends ATNState {
      constructor() {
          super();
          this.stateType = ATNState.LOOP_END;
          this.loopBackState = null;
          return this;
      }
  }

  /**
   * The Tokens rule start state linking to each lexer rule start state
   */
  class TokensStartState extends DecisionState {
      constructor() {
          super();
          this.stateType = ATNState.TOKEN_START;
          return this;
      }
  }

  var ATNState_1 = {
      ATNState,
      BasicState,
      DecisionState,
      BlockStartState,
      BlockEndState,
      LoopEndState,
      RuleStartState,
      RuleStopState,
      TokensStartState,
      PlusLoopbackState,
      StarLoopbackState,
      StarLoopEntryState,
      PlusBlockStartState,
      StarBlockStartState,
      BasicBlockStartState
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Set: Set$1, Hash: Hash$2} = Utils;

  /**
   * A tree structure used to record the semantic context in which
   * an ATN configuration is valid.  It's either a single predicate,
   * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
   *
   * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
   * {@link SemanticContext} within the scope of this outer class.</p>
   */
  class SemanticContext {
  	hashCode() {
  		const hash = new Hash$2();
  		this.updateHashCode(hash);
  		return hash.finish();
  	}

  	/**
  	 * For context independent predicates, we evaluate them without a local
  	 * context (i.e., null context). That way, we can evaluate them without
  	 * having to create proper rule-specific context during prediction (as
  	 * opposed to the parser, which creates them naturally). In a practical
  	 * sense, this avoids a cast exception from RuleContext to myruleContext.
  	 *
  	 * <p>For context dependent predicates, we must pass in a local context so that
  	 * references such as $arg evaluate properly as _localctx.arg. We only
  	 * capture context dependent predicates in the context in which we begin
  	 * prediction, so we passed in the outer context here in case of context
  	 * dependent predicate evaluation.</p>
  	 */
  	evaluate(parser, outerContext) {}

  	/**
  	 * Evaluate the precedence predicates for the context and reduce the result.
  	 *
  	 * @param parser The parser instance.
  	 * @param outerContext The current parser context object.
  	 * @return The simplified semantic context after precedence predicates are
  	 * evaluated, which will be one of the following values.
  	 * <ul>
  	 * <li>{@link //NONE}: if the predicate simplifies to {@code true} after
  	 * precedence predicates are evaluated.</li>
  	 * <li>{@code null}: if the predicate simplifies to {@code false} after
  	 * precedence predicates are evaluated.</li>
  	 * <li>{@code this}: if the semantic context is not changed as a result of
  	 * precedence predicate evaluation.</li>
  	 * <li>A non-{@code null} {@link SemanticContext}: the new simplified
  	 * semantic context after precedence predicates are evaluated.</li>
  	 * </ul>
  	 */
  	evalPrecedence(parser, outerContext) {
  		return this;
  	}

  	static andContext(a, b) {
  		if (a === null || a === SemanticContext.NONE) {
  			return b;
  		}
  		if (b === null || b === SemanticContext.NONE) {
  			return a;
  		}
  		const result = new AND(a, b);
  		if (result.opnds.length === 1) {
  			return result.opnds[0];
  		} else {
  			return result;
  		}
  	}

  	static orContext(a, b) {
  		if (a === null) {
  			return b;
  		}
  		if (b === null) {
  			return a;
  		}
  		if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
  			return SemanticContext.NONE;
  		}
  		const result = new OR(a, b);
  		if (result.opnds.length === 1) {
  			return result.opnds[0];
  		} else {
  			return result;
  		}
  	}
  }


  class Predicate extends SemanticContext {
  	constructor(ruleIndex, predIndex, isCtxDependent) {
  		super();
  		this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
  		this.predIndex = predIndex === undefined ? -1 : predIndex;
  		this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
  	}

  	evaluate(parser, outerContext) {
  		const localctx = this.isCtxDependent ? outerContext : null;
  		return parser.sempred(localctx, this.ruleIndex, this.predIndex);
  	}

  	updateHashCode(hash) {
  		hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
  	}

  	equals(other) {
  		if (this === other) {
  			return true;
  		} else if (!(other instanceof Predicate)) {
  			return false;
  		} else {
  			return this.ruleIndex === other.ruleIndex &&
  					this.predIndex === other.predIndex &&
  					this.isCtxDependent === other.isCtxDependent;
  		}
  	}

  	toString() {
  		return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
  	}
  }

  /**
   * The default {@link SemanticContext}, which is semantically equivalent to
   * a predicate of the form {@code {true}?}
   */
  SemanticContext.NONE = new Predicate();


  class PrecedencePredicate extends SemanticContext {
  	constructor(precedence) {
  		super();
  		this.precedence = precedence === undefined ? 0 : precedence;
  	}

  	evaluate(parser, outerContext) {
  		return parser.precpred(outerContext, this.precedence);
  	}

  	evalPrecedence(parser, outerContext) {
  		if (parser.precpred(outerContext, this.precedence)) {
  			return SemanticContext.NONE;
  		} else {
  			return null;
  		}
  	}

  	compareTo(other) {
  		return this.precedence - other.precedence;
  	}

  	updateHashCode(hash) {
  		hash.update(31);
  	}

  	equals(other) {
  		if (this === other) {
  			return true;
  		} else if (!(other instanceof PrecedencePredicate)) {
  			return false;
  		} else {
  			return this.precedence === other.precedence;
  		}
  	}

  	toString() {
  		return "{"+this.precedence+">=prec}?";
  	}

  	static filterPrecedencePredicates(set) {
  		const result = [];
  		set.values().map( function(context) {
  			if (context instanceof PrecedencePredicate) {
  				result.push(context);
  			}
  		});
  		return result;
  	}
  }

  class AND extends SemanticContext {
  	/**
  	 * A semantic context which is true whenever none of the contained contexts
  	 * is false
  	 */
  	constructor(a, b) {
  		super();
  		const operands = new Set$1();
  		if (a instanceof AND) {
  			a.opnds.map(function(o) {
  				operands.add(o);
  			});
  		} else {
  			operands.add(a);
  		}
  		if (b instanceof AND) {
  			b.opnds.map(function(o) {
  				operands.add(o);
  			});
  		} else {
  			operands.add(b);
  		}
  		const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
  		if (precedencePredicates.length > 0) {
  			// interested in the transition with the lowest precedence
  			let reduced = null;
  			precedencePredicates.map( function(p) {
  				if(reduced===null || p.precedence<reduced.precedence) {
  					reduced = p;
  				}
  			});
  			operands.add(reduced);
  		}
  		this.opnds = operands.values();
  	}

  	equals(other) {
  		if (this === other) {
  			return true;
  		} else if (!(other instanceof AND)) {
  			return false;
  		} else {
  			return this.opnds === other.opnds;
  		}
  	}

  	updateHashCode(hash) {
  		hash.update(this.opnds, "AND");
  	}

  	/**
  	 * {@inheritDoc}
  	 *
  	 * <p>
  	 * The evaluation of predicates by this context is short-circuiting, but
  	 * unordered.</p>
  	 */
  	evaluate(parser, outerContext) {
  		for (let i = 0; i < this.opnds.length; i++) {
  			if (!this.opnds[i].evaluate(parser, outerContext)) {
  				return false;
  			}
  		}
  		return true;
  	}

  	evalPrecedence(parser, outerContext) {
  		let differs = false;
  		const operands = [];
  		for (let i = 0; i < this.opnds.length; i++) {
  			const context = this.opnds[i];
  			const evaluated = context.evalPrecedence(parser, outerContext);
  			differs |= (evaluated !== context);
  			if (evaluated === null) {
  				// The AND context is false if any element is false
  				return null;
  			} else if (evaluated !== SemanticContext.NONE) {
  				// Reduce the result by skipping true elements
  				operands.push(evaluated);
  			}
  		}
  		if (!differs) {
  			return this;
  		}
  		if (operands.length === 0) {
  			// all elements were true, so the AND context is true
  			return SemanticContext.NONE;
  		}
  		let result = null;
  		operands.map(function(o) {
  			result = result === null ? o : SemanticContext.andContext(result, o);
  		});
  		return result;
  	}

  	toString() {
  		let s = "";
  		this.opnds.map(function(o) {
  			s += "&& " + o.toString();
  		});
  		return s.length > 3 ? s.slice(3) : s;
  	}
  }


  class OR extends SemanticContext {
  	/**
  	 * A semantic context which is true whenever at least one of the contained
  	 * contexts is true
  	 */
  	constructor(a, b) {
  		super();
  		const operands = new Set$1();
  		if (a instanceof OR) {
  			a.opnds.map(function(o) {
  				operands.add(o);
  			});
  		} else {
  			operands.add(a);
  		}
  		if (b instanceof OR) {
  			b.opnds.map(function(o) {
  				operands.add(o);
  			});
  		} else {
  			operands.add(b);
  		}

  		const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
  		if (precedencePredicates.length > 0) {
  			// interested in the transition with the highest precedence
  			const s = precedencePredicates.sort(function(a, b) {
  				return a.compareTo(b);
  			});
  			const reduced = s[s.length-1];
  			operands.add(reduced);
  		}
  		this.opnds = operands.values();
  	}

  	equals(other) {
  		if (this === other) {
  			return true;
  		} else if (!(other instanceof OR)) {
  			return false;
  		} else {
  			return this.opnds === other.opnds;
  		}
  	}

  	updateHashCode(hash) {
  		hash.update(this.opnds, "OR");
  	}

  	/**
  	 * <p>
  	 * The evaluation of predicates by this context is short-circuiting, but
  	 * unordered.</p>
  	 */
  	evaluate(parser, outerContext) {
  		for (let i = 0; i < this.opnds.length; i++) {
  			if (this.opnds[i].evaluate(parser, outerContext)) {
  				return true;
  			}
  		}
  		return false;
  	}

  	evalPrecedence(parser, outerContext) {
  		let differs = false;
  		const operands = [];
  		for (let i = 0; i < this.opnds.length; i++) {
  			const context = this.opnds[i];
  			const evaluated = context.evalPrecedence(parser, outerContext);
  			differs |= (evaluated !== context);
  			if (evaluated === SemanticContext.NONE) {
  				// The OR context is true if any element is true
  				return SemanticContext.NONE;
  			} else if (evaluated !== null) {
  				// Reduce the result by skipping false elements
  				operands.push(evaluated);
  			}
  		}
  		if (!differs) {
  			return this;
  		}
  		if (operands.length === 0) {
  			// all elements were false, so the OR context is false
  			return null;
  		}
  		const result = null;
  		return result;
  	}

  	toString() {
  		let s = "";
  		this.opnds.map(function(o) {
  			s += "|| " + o.toString();
  		});
  		return s.length > 3 ? s.slice(3) : s;
  	}
  }

  var SemanticContext_1 = {
  	SemanticContext,
  	PrecedencePredicate,
  	Predicate
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {DecisionState: DecisionState$1} = ATNState_1;
  const {SemanticContext: SemanticContext$1} = SemanticContext_1;
  const {Hash: Hash$3} = Utils;


  function checkParams(params, isCfg) {
  	if(params===null) {
  		const result = { state:null, alt:null, context:null, semanticContext:null };
  		if(isCfg) {
  			result.reachesIntoOuterContext = 0;
  		}
  		return result;
  	} else {
  		const props = {};
  		props.state = params.state || null;
  		props.alt = (params.alt === undefined) ? null : params.alt;
  		props.context = params.context || null;
  		props.semanticContext = params.semanticContext || null;
  		if(isCfg) {
  			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
  			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
  		}
  		return props;
  	}
  }

  class ATNConfig {
      /**
       * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).
       * The syntactic context is a graph-structured stack node whose
       * path(s) to the root is the rule invocation(s)
       * chain used to arrive at the state.  The semantic context is
       * the tree of semantic predicates encountered before reaching
       * an ATN state
       */
      constructor(params, config) {
          this.checkContext(params, config);
          params = checkParams(params);
          config = checkParams(config, true);
          // The ATN state associated with this configuration///
          this.state = params.state!==null ? params.state : config.state;
          // What alt (or lexer rule) is predicted by this configuration///
          this.alt = params.alt!==null ? params.alt : config.alt;
          /**
           * The stack of invoking states leading to the rule/states associated
           * with this config.  We track only those contexts pushed during
           * execution of the ATN simulator
           */
          this.context = params.context!==null ? params.context : config.context;
          this.semanticContext = params.semanticContext!==null ? params.semanticContext :
              (config.semanticContext!==null ? config.semanticContext : SemanticContext$1.NONE);
          // TODO: make it a boolean then
          /**
           * We cannot execute predicates dependent upon local context unless
           * we know for sure we are in the correct context. Because there is
           * no way to do this efficiently, we simply cannot evaluate
           * dependent predicates unless we are in the rule that initially
           * invokes the ATN simulator.
           * closure() tracks the depth of how far we dip into the
           * outer context: depth &gt; 0.  Note that it may not be totally
           * accurate depth since I don't ever decrement
           */
          this.reachesIntoOuterContext = config.reachesIntoOuterContext;
          this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
      }

      checkContext(params, config) {
          if((params.context===null || params.context===undefined) &&
                  (config===null || config.context===null || config.context===undefined)) {
              this.context = null;
          }
      }

      hashCode() {
          const hash = new Hash$3();
          this.updateHashCode(hash);
          return hash.finish();
      }

      updateHashCode(hash) {
          hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
      }

      /**
       * An ATN configuration is equal to another if both have
       * the same state, they predict the same alternative, and
       * syntactic/semantic contexts are the same
       */
      equals(other) {
          if (this === other) {
              return true;
          } else if (! (other instanceof ATNConfig)) {
              return false;
          } else {
              return this.state.stateNumber===other.state.stateNumber &&
                  this.alt===other.alt &&
                  (this.context===null ? other.context===null : this.context.equals(other.context)) &&
                  this.semanticContext.equals(other.semanticContext) &&
                  this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
          }
      }

      hashCodeForConfigSet() {
          const hash = new Hash$3();
          hash.update(this.state.stateNumber, this.alt, this.semanticContext);
          return hash.finish();
      }

      equalsForConfigSet(other) {
          if (this === other) {
              return true;
          } else if (! (other instanceof ATNConfig)) {
              return false;
          } else {
              return this.state.stateNumber===other.state.stateNumber &&
                  this.alt===other.alt &&
                  this.semanticContext.equals(other.semanticContext);
          }
      }

      toString() {
          return "(" + this.state + "," + this.alt +
              (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
              (this.semanticContext !== SemanticContext$1.NONE ?
                      ("," + this.semanticContext.toString())
                      : "") +
              (this.reachesIntoOuterContext>0 ?
                      (",up=" + this.reachesIntoOuterContext)
                      : "") + ")";
      }
  }


  class LexerATNConfig extends ATNConfig {
      constructor(params, config) {
          super(params, config);

          // This is the backing field for {@link //getLexerActionExecutor}.
          const lexerActionExecutor = params.lexerActionExecutor || null;
          this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
          this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
          this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;
          this.equalsForConfigSet = LexerATNConfig.prototype.equals;
          return this;
      }

      updateHashCode(hash) {
          hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
      }

      equals(other) {
          return this === other ||
                  (other instanceof LexerATNConfig &&
                  this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
                  (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
                  super.equals(other));
      }

      checkNonGreedyDecision(source, target) {
          return source.passedThroughNonGreedyDecision ||
              (target instanceof DecisionState$1) && target.nonGreedy;
      }
  }


  var ATNConfig_2 = ATNConfig;
  var LexerATNConfig_1 = LexerATNConfig;

  var ATNConfig_1 = {
  	ATNConfig: ATNConfig_2,
  	LexerATNConfig: LexerATNConfig_1
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$1} = Token_1;

  /* stop is not included! */
  class Interval {
  	constructor(start, stop) {
  		this.start = start;
  		this.stop = stop;
  	}

  	contains(item) {
  		return item >= this.start && item < this.stop;
  	}

  	toString() {
  		if(this.start===this.stop-1) {
  			return this.start.toString();
  		} else {
  			return this.start.toString() + ".." + (this.stop-1).toString();
  		}
  	}

  	get length(){
  		return this.stop - this.start;
  	}
  }


  class IntervalSet {
  	constructor() {
  		this.intervals = null;
  		this.readOnly = false;
  	}

  	first(v) {
  		if (this.intervals === null || this.intervals.length===0) {
  			return Token$1.INVALID_TYPE;
  		} else {
  			return this.intervals[0].start;
  		}
  	}

  	addOne(v) {
  		this.addInterval(new Interval(v, v + 1));
  	}

  	addRange(l, h) {
  		this.addInterval(new Interval(l, h + 1));
  	}

  	addInterval(v) {
  		if (this.intervals === null) {
  			this.intervals = [];
  			this.intervals.push(v);
  		} else {
  			// find insert pos
  			for (let k = 0; k < this.intervals.length; k++) {
  				const i = this.intervals[k];
  				// distinct range -> insert
  				if (v.stop < i.start) {
  					this.intervals.splice(k, 0, v);
  					return;
  				}
  				// contiguous range -> adjust
  				else if (v.stop === i.start) {
  					this.intervals[k].start = v.start;
  					return;
  				}
  				// overlapping range -> adjust and reduce
  				else if (v.start <= i.stop) {
  					this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
  					this.reduce(k);
  					return;
  				}
  			}
  			// greater than any existing
  			this.intervals.push(v);
  		}
  	}

  	addSet(other) {
  		if (other.intervals !== null) {
  			for (let k = 0; k < other.intervals.length; k++) {
  				const i = other.intervals[k];
  				this.addInterval(new Interval(i.start, i.stop));
  			}
  		}
  		return this;
  	}

  	reduce(k) {
  		// only need to reduce if k is not the last
  		if (k < this.intervalslength - 1) {
  			const l = this.intervals[k];
  			const r = this.intervals[k + 1];
  			// if r contained in l
  			if (l.stop >= r.stop) {
  				this.intervals.pop(k + 1);
  				this.reduce(k);
  			} else if (l.stop >= r.start) {
  				this.intervals[k] = new Interval(l.start, r.stop);
  				this.intervals.pop(k + 1);
  			}
  		}
  	}

  	complement(start, stop) {
  		const result = new IntervalSet();
  		result.addInterval(new Interval(start,stop+1));
  		for(let i=0; i<this.intervals.length; i++) {
  			result.removeRange(this.intervals[i]);
  		}
  		return result;
  	}

  	contains(item) {
  		if (this.intervals === null) {
  			return false;
  		} else {
  			for (let k = 0; k < this.intervals.length; k++) {
  				if(this.intervals[k].contains(item)) {
  					return true;
  				}
  			}
  			return false;
  		}
  	}

  	removeRange(v) {
  		if(v.start===v.stop-1) {
  			this.removeOne(v.start);
  		} else if (this.intervals!==null) {
  			let k = 0;
  			for(let n=0; n<this.intervals.length; n++) {
  				const i = this.intervals[k];
  				// intervals are ordered
  				if (v.stop<=i.start) {
  					return;
  				}
  				// check for including range, split it
  				else if(v.start>i.start && v.stop<i.stop) {
  					this.intervals[k] = new Interval(i.start, v.start);
  					const x = new Interval(v.stop, i.stop);
  					this.intervals.splice(k, 0, x);
  					return;
  				}
  				// check for included range, remove it
  				else if(v.start<=i.start && v.stop>=i.stop) {
  					this.intervals.splice(k, 1);
  					k = k - 1; // need another pass
  				}
  				// check for lower boundary
  				else if(v.start<i.stop) {
  					this.intervals[k] = new Interval(i.start, v.start);
  				}
  				// check for upper boundary
  				else if(v.stop<i.stop) {
  					this.intervals[k] = new Interval(v.stop, i.stop);
  				}
  				k += 1;
  			}
  		}
  	}

  	removeOne(v) {
  		if (this.intervals !== null) {
  			for (let k = 0; k < this.intervals.length; k++) {
  				const i = this.intervals[k];
  				// intervals is ordered
  				if (v < i.start) {
  					return;
  				}
  				// check for single value range
  				else if (v === i.start && v === i.stop - 1) {
  					this.intervals.splice(k, 1);
  					return;
  				}
  				// check for lower boundary
  				else if (v === i.start) {
  					this.intervals[k] = new Interval(i.start + 1, i.stop);
  					return;
  				}
  				// check for upper boundary
  				else if (v === i.stop - 1) {
  					this.intervals[k] = new Interval(i.start, i.stop - 1);
  					return;
  				}
  				// split existing range
  				else if (v < i.stop - 1) {
  					const x = new Interval(i.start, v);
  					i.start = v + 1;
  					this.intervals.splice(k, 0, x);
  					return;
  				}
  			}
  		}
  	}

  	toString(literalNames, symbolicNames, elemsAreChar) {
  		literalNames = literalNames || null;
  		symbolicNames = symbolicNames || null;
  		elemsAreChar = elemsAreChar || false;
  		if (this.intervals === null) {
  			return "{}";
  		} else if(literalNames!==null || symbolicNames!==null) {
  			return this.toTokenString(literalNames, symbolicNames);
  		} else if(elemsAreChar) {
  			return this.toCharString();
  		} else {
  			return this.toIndexString();
  		}
  	}

  	toCharString() {
  		const names = [];
  		for (let i = 0; i < this.intervals.length; i++) {
  			const v = this.intervals[i];
  			if(v.stop===v.start+1) {
  				if ( v.start===Token$1.EOF ) {
  					names.push("<EOF>");
  				} else {
  					names.push("'" + String.fromCharCode(v.start) + "'");
  				}
  			} else {
  				names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
  			}
  		}
  		if (names.length > 1) {
  			return "{" + names.join(", ") + "}";
  		} else {
  			return names[0];
  		}
  	}

  	toIndexString() {
  		const names = [];
  		for (let i = 0; i < this.intervals.length; i++) {
  			const v = this.intervals[i];
  			if(v.stop===v.start+1) {
  				if ( v.start===Token$1.EOF ) {
  					names.push("<EOF>");
  				} else {
  					names.push(v.start.toString());
  				}
  			} else {
  				names.push(v.start.toString() + ".." + (v.stop-1).toString());
  			}
  		}
  		if (names.length > 1) {
  			return "{" + names.join(", ") + "}";
  		} else {
  			return names[0];
  		}
  	}

  	toTokenString(literalNames, symbolicNames) {
  		const names = [];
  		for (let i = 0; i < this.intervals.length; i++) {
  			const v = this.intervals[i];
  			for (let j = v.start; j < v.stop; j++) {
  				names.push(this.elementName(literalNames, symbolicNames, j));
  			}
  		}
  		if (names.length > 1) {
  			return "{" + names.join(", ") + "}";
  		} else {
  			return names[0];
  		}
  	}

  	elementName(literalNames, symbolicNames, a) {
  		if (a === Token$1.EOF) {
  			return "<EOF>";
  		} else if (a === Token$1.EPSILON) {
  			return "<EPSILON>";
  		} else {
  			return literalNames[a] || symbolicNames[a];
  		}
  	}

  	get length(){
  		let len = 0;
  		this.intervals.map(function(i) {len += i.length;});
  		return len;
  	}
  }

  var IntervalSet_1 = {
  	Interval,
  	IntervalSet
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$2} = Token_1;
  const {IntervalSet: IntervalSet$1} = IntervalSet_1;
  const {Predicate: Predicate$1, PrecedencePredicate: PrecedencePredicate$1} = SemanticContext_1;

  /**
   * An ATN transition between any two ATN states.  Subclasses define
   * atom, set, epsilon, action, predicate, rule transitions.
   *
   * <p>This is a one way link.  It emanates from a state (usually via a list of
   * transitions) and has a target state.</p>
   *
   * <p>Since we never have to change the ATN transitions once we construct it,
   * we can fix these transitions as specific classes. The DFA transitions
   * on the other hand need to update the labels as it adds transitions to
   * the states. We'll use the term Edge for the DFA to distinguish them from
   * ATN transitions.</p>
   */
  class Transition {
      constructor(target) {
          // The target of this transition.
          if (target===undefined || target===null) {
              throw "target cannot be null.";
          }
          this.target = target;
          // Are we epsilon, action, sempred?
          this.isEpsilon = false;
          this.label = null;
      }
  }

  // constants for serialization

  Transition.EPSILON = 1;
  Transition.RANGE = 2;
  Transition.RULE = 3;
  // e.g., {isType(input.LT(1))}?
  Transition.PREDICATE = 4;
  Transition.ATOM = 5;
  Transition.ACTION = 6;
  // ~(A|B) or ~atom, wildcard, which convert to next 2
  Transition.SET = 7;
  Transition.NOT_SET = 8;
  Transition.WILDCARD = 9;
  Transition.PRECEDENCE = 10;

  Transition.serializationNames = [
              "INVALID",
              "EPSILON",
              "RANGE",
              "RULE",
              "PREDICATE",
              "ATOM",
              "ACTION",
              "SET",
              "NOT_SET",
              "WILDCARD",
              "PRECEDENCE"
          ];

  Transition.serializationTypes = {
          EpsilonTransition: Transition.EPSILON,
          RangeTransition: Transition.RANGE,
          RuleTransition: Transition.RULE,
          PredicateTransition: Transition.PREDICATE,
          AtomTransition: Transition.ATOM,
          ActionTransition: Transition.ACTION,
          SetTransition: Transition.SET,
          NotSetTransition: Transition.NOT_SET,
          WildcardTransition: Transition.WILDCARD,
          PrecedencePredicateTransition: Transition.PRECEDENCE
      };


  // TODO: make all transitions sets? no, should remove set edges

  class AtomTransition$1 extends Transition {
      constructor(target, label) {
          super(target);
          // The token type or character value; or, signifies special label.
          this.label_ = label;
          this.label = this.makeLabel();
          this.serializationType = Transition.ATOM;
      }

      makeLabel() {
          const s = new IntervalSet$1();
          s.addOne(this.label_);
          return s;
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return this.label_ === symbol;
      }

      toString() {
          return this.label_;
      }
  }


  class RuleTransition extends Transition {
      constructor(ruleStart, ruleIndex, precedence, followState) {
          super(ruleStart);
          // ptr to the rule definition object for this rule ref
          this.ruleIndex = ruleIndex;
          this.precedence = precedence;
          // what node to begin computations following ref to rule
          this.followState = followState;
          this.serializationType = Transition.RULE;
          this.isEpsilon = true;
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return false;
      }
  }

  class EpsilonTransition extends Transition {
      constructor(target, outermostPrecedenceReturn) {
          super(target);
          this.serializationType = Transition.EPSILON;
          this.isEpsilon = true;
          this.outermostPrecedenceReturn = outermostPrecedenceReturn;
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return false;
      }

      toString() {
          return "epsilon";
      }
  }


  class RangeTransition extends Transition {
      constructor(target, start, stop) {
          super(target);
          this.serializationType = Transition.RANGE;
          this.start = start;
          this.stop = stop;
          this.label = this.makeLabel();
      }

      makeLabel() {
          const s = new IntervalSet$1();
          s.addRange(this.start, this.stop);
          return s;
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return symbol >= this.start && symbol <= this.stop;
      }

      toString() {
          return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
      }
  }


  class AbstractPredicateTransition extends Transition {
      constructor(target) {
          super(target);
      }
  }

  class PredicateTransition extends AbstractPredicateTransition {
      constructor(target, ruleIndex, predIndex, isCtxDependent) {
          super(target);
          this.serializationType = Transition.PREDICATE;
          this.ruleIndex = ruleIndex;
          this.predIndex = predIndex;
          this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
          this.isEpsilon = true;
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return false;
      }

      getPredicate() {
          return new Predicate$1(this.ruleIndex, this.predIndex, this.isCtxDependent);
      }

      toString() {
          return "pred_" + this.ruleIndex + ":" + this.predIndex;
      }
  }


  class ActionTransition extends Transition {
      constructor(target, ruleIndex, actionIndex, isCtxDependent) {
          super(target);
          this.serializationType = Transition.ACTION;
          this.ruleIndex = ruleIndex;
          this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
          this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
          this.isEpsilon = true;
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return false;
      }

      toString() {
          return "action_" + this.ruleIndex + ":" + this.actionIndex;
      }
  }


  // A transition containing a set of values.
  class SetTransition extends Transition {
      constructor(target, set) {
          super(target);
          this.serializationType = Transition.SET;
          if (set !==undefined && set !==null) {
              this.label = set;
          } else {
              this.label = new IntervalSet$1();
              this.label.addOne(Token$2.INVALID_TYPE);
          }
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return this.label.contains(symbol);
      }

      toString() {
          return this.label.toString();
      }
  }

  class NotSetTransition extends SetTransition {
      constructor(target, set) {
          super(target, set);
          this.serializationType = Transition.NOT_SET;
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
                  !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
      }

      toString() {
          return '~' + super.toString();
      }
  }

  class WildcardTransition extends Transition {
      constructor(target) {
          super(target);
          this.serializationType = Transition.WILDCARD;
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
      }

      toString() {
          return ".";
      }
  }

  class PrecedencePredicateTransition extends AbstractPredicateTransition {
      constructor(target, precedence) {
          super(target);
          this.serializationType = Transition.PRECEDENCE;
          this.precedence = precedence;
          this.isEpsilon = true;
      }

      matches(symbol, minVocabSymbol, maxVocabSymbol) {
          return false;
      }

      getPredicate() {
          return new PrecedencePredicate$1(this.precedence);
      }

      toString() {
          return this.precedence + " >= _p";
      }
  }

  var Transition_1 = {
      Transition,
      AtomTransition: AtomTransition$1,
      SetTransition,
      NotSetTransition,
      RuleTransition,
      ActionTransition,
      EpsilonTransition,
      RangeTransition,
      WildcardTransition,
      PredicateTransition,
      PrecedencePredicateTransition,
      AbstractPredicateTransition
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$3} = Token_1;
  const {Interval: Interval$1} = IntervalSet_1;
  const INVALID_INTERVAL = new Interval$1(-1, -2);

  /**
   * The basic notion of a tree has a parent, a payload, and a list of children.
   * It is the most abstract interface for all the trees used by ANTLR.
   */
  class Tree {}

  class SyntaxTree extends Tree {
  	constructor() {
  		super();
  	}
  }

  class ParseTree extends SyntaxTree {
  	constructor() {
  		super();
  	}
  }

  class RuleNode extends ParseTree {
  	constructor() {
  		super();
  	}

  	getRuleContext(){
  		throw new Error("missing interface implementation")
  	}
  }

  class TerminalNode extends ParseTree {
  	constructor() {
  		super();
  	}
  }

  class ErrorNode extends TerminalNode {
  	constructor() {
  		super();
  	}
  }

  class ParseTreeVisitor {
  	visit(ctx) {
  		 if (Array.isArray(ctx)) {
  			return ctx.map(function(child) {
  				return child.accept(this);
  			}, this);
  		} else {
  			return ctx.accept(this);
  		}
  	}

  	visitChildren(ctx) {
  		if (ctx.children) {
  			return this.visit(ctx.children);
  		} else {
  			return null;
  		}
  	}

  	visitTerminal(node) {
  	}

  	visitErrorNode(node) {
  	}
  }

  class ParseTreeListener {
  	visitTerminal(node) {
  	}

  	visitErrorNode(node) {
  	}

  	enterEveryRule(node) {
  	}

  	exitEveryRule(node) {
  	}
  }

  class TerminalNodeImpl extends TerminalNode {
  	constructor(symbol) {
  		super();
  		this.parentCtx = null;
  		this.symbol = symbol;
  	}

  	getChild(i) {
  		return null;
  	}

  	getSymbol() {
  		return this.symbol;
  	}

  	getParent() {
  		return this.parentCtx;
  	}

  	getPayload() {
  		return this.symbol;
  	}

  	getSourceInterval() {
  		if (this.symbol === null) {
  			return INVALID_INTERVAL;
  		}
  		const tokenIndex = this.symbol.tokenIndex;
  		return new Interval$1(tokenIndex, tokenIndex);
  	}

  	getChildCount() {
  		return 0;
  	}

  	accept(visitor) {
  		return visitor.visitTerminal(this);
  	}

  	getText() {
  		return this.symbol.text;
  	}

  	toString() {
  		if (this.symbol.type === Token$3.EOF) {
  			return "<EOF>";
  		} else {
  			return this.symbol.text;
  		}
  	}
  }


  /**
   * Represents a token that was consumed during resynchronization
   * rather than during a valid match operation. For example,
   * we will create this kind of a node during single token insertion
   * and deletion as well as during "consume until error recovery set"
   * upon no viable alternative exceptions.
   */
  class ErrorNodeImpl extends TerminalNodeImpl {
  	constructor(token) {
  		super(token);
  	}

  	isErrorNode() {
  		return true;
  	}

  	accept(visitor) {
  		return visitor.visitErrorNode(this);
  	}
  }

  class ParseTreeWalker {

  	/**
  	 * Performs a walk on the given parse tree starting at the root and going down recursively
  	 * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before
  	 * recursively walking down into child nodes, then
  	 * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.
  	 * @param listener The listener used by the walker to process grammar rules
  	 * @param t The parse tree to be walked on
  	 */
  	walk(listener, t) {
  		const errorNode = t instanceof ErrorNode ||
  				(t.isErrorNode !== undefined && t.isErrorNode());
  		if (errorNode) {
  			listener.visitErrorNode(t);
  		} else if (t instanceof TerminalNode) {
  			listener.visitTerminal(t);
  		} else {
  			this.enterRule(listener, t);
  			for (let i = 0; i < t.getChildCount(); i++) {
  				const child = t.getChild(i);
  				this.walk(listener, child);
  			}
  			this.exitRule(listener, t);
  		}
  	}

  	/**
  	 * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}
  	 * then by triggering the event specific to the given parse tree node
  	 * @param listener The listener responding to the trigger events
  	 * @param r The grammar rule containing the rule context
  	 */
  	enterRule(listener, r) {
  		const ctx = r.getRuleContext();
  		listener.enterEveryRule(ctx);
  		ctx.enterRule(listener);
  	}

  	/**
  	 * Exits a grammar rule by first triggering the event specific to the given parse tree node
  	 * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}
  	 * @param listener The listener responding to the trigger events
  	 * @param r The grammar rule containing the rule context
  	 */
  	exitRule(listener, r) {
  		const ctx = r.getRuleContext();
  		ctx.exitRule(listener);
  		listener.exitEveryRule(ctx);
  	}
  }

  ParseTreeWalker.DEFAULT = new ParseTreeWalker();

  var Tree_1 = {
  	RuleNode,
  	ErrorNode,
  	TerminalNode,
  	ErrorNodeImpl,
  	TerminalNodeImpl,
  	ParseTreeListener,
  	ParseTreeVisitor,
  	ParseTreeWalker,
  	INVALID_INTERVAL
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$4} = Token_1;
  const {ErrorNode: ErrorNode$1, TerminalNode: TerminalNode$1, RuleNode: RuleNode$1} = Tree_1;

  /** A set of utility routines useful for all kinds of ANTLR trees. */
  const Trees = {
      /**
       * Print out a whole tree in LISP form. {@link //getNodeText} is used on the
       *  node payloads to get the text for the nodes.  Detect
       *  parse trees and extract data appropriately.
       */
      toStringTree: function(tree, ruleNames, recog) {
          ruleNames = ruleNames || null;
          recog = recog || null;
          if(recog!==null) {
              ruleNames = recog.ruleNames;
          }
          let s = Trees.getNodeText(tree, ruleNames);
          s = Utils.escapeWhitespace(s, false);
          const c = tree.getChildCount();
          if(c===0) {
              return s;
          }
          let res = "(" + s + ' ';
          if(c>0) {
              s = Trees.toStringTree(tree.getChild(0), ruleNames);
              res = res.concat(s);
          }
          for(let i=1;i<c;i++) {
              s = Trees.toStringTree(tree.getChild(i), ruleNames);
              res = res.concat(' ' + s);
          }
          res = res.concat(")");
          return res;
      },

      getNodeText: function(t, ruleNames, recog) {
          ruleNames = ruleNames || null;
          recog = recog || null;
          if(recog!==null) {
              ruleNames = recog.ruleNames;
          }
          if(ruleNames!==null) {
              if (t instanceof RuleNode$1) {
                  const context = t.getRuleContext();
                  const altNumber = context.getAltNumber();
                  // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency
                  if ( altNumber != 0 ) {
                      return ruleNames[t.ruleIndex]+":"+altNumber;
                  }
                  return ruleNames[t.ruleIndex];
              } else if ( t instanceof ErrorNode$1) {
                  return t.toString();
              } else if(t instanceof TerminalNode$1) {
                  if(t.symbol!==null) {
                      return t.symbol.text;
                  }
              }
          }
          // no recog for rule names
          const payload = t.getPayload();
          if (payload instanceof Token$4 ) {
              return payload.text;
          }
          return t.getPayload().toString();
      },

      /**
       * Return ordered list of all children of this node
       */
      getChildren: function(t) {
          const list = [];
          for(let i=0;i<t.getChildCount();i++) {
              list.push(t.getChild(i));
          }
          return list;
      },

      /**
       * Return a list of all ancestors of this node.  The first node of
       * list is the root and the last is the parent of this node.
       */
      getAncestors: function(t) {
          let ancestors = [];
          t = t.getParent();
          while(t!==null) {
              ancestors = [t].concat(ancestors);
              t = t.getParent();
          }
          return ancestors;
      },

      findAllTokenNodes: function(t, ttype) {
          return Trees.findAllNodes(t, ttype, true);
      },

      findAllRuleNodes: function(t, ruleIndex) {
          return Trees.findAllNodes(t, ruleIndex, false);
      },

      findAllNodes: function(t, index, findTokens) {
          const nodes = [];
          Trees._findAllNodes(t, index, findTokens, nodes);
          return nodes;
      },

      _findAllNodes: function(t, index, findTokens, nodes) {
          // check this node (the root) first
          if(findTokens && (t instanceof TerminalNode$1)) {
              if(t.symbol.type===index) {
                  nodes.push(t);
              }
          } else if(!findTokens && (t instanceof RuleNode$1)) {
              if(t.ruleIndex===index) {
                  nodes.push(t);
              }
          }
          // check children
          for(let i=0;i<t.getChildCount();i++) {
              Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
          }
      },

      descendants: function(t) {
          let nodes = [t];
          for(let i=0;i<t.getChildCount();i++) {
              nodes = nodes.concat(Trees.descendants(t.getChild(i)));
          }
          return nodes;
      }
  };

  var Trees_1 = Trees;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {RuleNode: RuleNode$2} = Tree_1;
  const {INVALID_INTERVAL: INVALID_INTERVAL$1} = Tree_1;


  class RuleContext extends RuleNode$2 {
  	/** A rule context is a record of a single rule invocation. It knows
  	 * which context invoked it, if any. If there is no parent context, then
  	 * naturally the invoking state is not valid.  The parent link
  	 * provides a chain upwards from the current rule invocation to the root
  	 * of the invocation tree, forming a stack. We actually carry no
  	 * information about the rule associated with this context (except
  	 * when parsing). We keep only the state number of the invoking state from
  	 * the ATN submachine that invoked this. Contrast this with the s
  	 * pointer inside ParserRuleContext that tracks the current state
  	 * being "executed" for the current rule.
  	 *
  	 * The parent contexts are useful for computing lookahead sets and
  	 * getting error information.
  	 *
  	 * These objects are used during parsing and prediction.
  	 * For the special case of parsers, we use the subclass
  	 * ParserRuleContext.
  	 *
  	 * @see ParserRuleContext
  	 */
  	constructor(parent, invokingState) {
  		// What context invoked this rule?
  		super();
  		this.parentCtx = parent || null;
  		/**
  		 * What state invoked the rule associated with this context?
  		 * The "return address" is the followState of invokingState
  		 * If parent is null, this should be -1.
  		 */
  		this.invokingState = invokingState || -1;
  	}

  	depth() {
  		let n = 0;
  		let p = this;
  		while (p !== null) {
  			p = p.parentCtx;
  			n += 1;
  		}
  		return n;
  	}

  	/**
  	 * A context is empty if there is no invoking state; meaning nobody call
  	 * current context.
  	 */
  	isEmpty() {
  		return this.invokingState === -1;
  	}

  // satisfy the ParseTree / SyntaxTree interface
  	getSourceInterval() {
  		return INVALID_INTERVAL$1;
  	}

  	getRuleContext() {
  		return this;
  	}

  	getPayload() {
  		return this;
  	}

  	/**
  	 * Return the combined text of all child nodes. This method only considers
  	 * tokens which have been added to the parse tree.
  	 * <p>
  	 * Since tokens on hidden channels (e.g. whitespace or comments) are not
  	 * added to the parse trees, they will not appear in the output of this
  	 * method.
  	 */
  	getText() {
  		if (this.getChildCount() === 0) {
  			return "";
  		} else {
  			return this.children.map(function(child) {
  				return child.getText();
  			}).join("");
  		}
  	}

  	/**
  	 * For rule associated with this parse tree internal node, return
  	 * the outer alternative number used to match the input. Default
  	 * implementation does not compute nor store this alt num. Create
  	 * a subclass of ParserRuleContext with backing field and set
  	 * option contextSuperClass.
  	 * to set it.
  	 */
  	getAltNumber() {
  	    // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency
  	    return 0;
      }

  	/**
  	 * Set the outer alternative number for this context node. Default
  	 * implementation does nothing to avoid backing field overhead for
  	 * trees that don't need it.  Create
  	 * a subclass of ParserRuleContext with backing field and set
  	 * option contextSuperClass.
  	 */
  	setAltNumber(altNumber) { }

  	getChild(i) {
  		return null;
  	}

  	getChildCount() {
  		return 0;
  	}

  	accept(visitor) {
  		return visitor.visitChildren(this);
  	}

  	/**
  	 * Print out a whole tree, not just a node, in LISP format
  	 * (root child1 .. childN). Print just a node if this is a leaf.
  	 */
  	toStringTree(ruleNames, recog) {
  		return Trees_1.toStringTree(this, ruleNames, recog);
  	}

  	toString(ruleNames, stop) {
  		ruleNames = ruleNames || null;
  		stop = stop || null;
  		let p = this;
  		let s = "[";
  		while (p !== null && p !== stop) {
  			if (ruleNames === null) {
  				if (!p.isEmpty()) {
  					s += p.invokingState;
  				}
  			} else {
  				const ri = p.ruleIndex;
  				const ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
  						: "" + ri;
  				s += ruleName;
  			}
  			if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
  				s += " ";
  			}
  			p = p.parentCtx;
  		}
  		s += "]";
  		return s;
  	}
  }

  var RuleContext_1 = RuleContext;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Hash: Hash$4, Map: Map$2, equalArrays: equalArrays$1} = Utils;

  class PredictionContext {

  	constructor(cachedHashCode) {
  		this.cachedHashCode = cachedHashCode;
  	}

  	/**
  	 * Stores the computed hash code of this {@link PredictionContext}. The hash
  	 * code is computed in parts to match the following reference algorithm.
  	 *
  	 * <pre>
  	 * private int referenceHashCode() {
  	 * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
  	 * //INITIAL_HASH});
  	 *
  	 * for (int i = 0; i &lt; {@link //size()}; i++) {
  	 * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
  	 * getParent}(i));
  	 * }
  	 *
  	 * for (int i = 0; i &lt; {@link //size()}; i++) {
  	 * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
  	 * //getReturnState getReturnState}(i));
  	 * }
  	 *
  	 * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
  	 * //size()});
  	 * return hash;
  	 * }
  	 * </pre>
  	 * This means only the {@link //EMPTY} context is in set.
  	 */
  	isEmpty() {
  		return this === PredictionContext.EMPTY;
  	}

  	hasEmptyPath() {
  		return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
  	}

  	hashCode() {
  		return this.cachedHashCode;
  	}

  	updateHashCode(hash) {
  		hash.update(this.cachedHashCode);
  	}
  }

  /**
   * Represents {@code $} in local context prediction, which means wildcard.
   * {@code//+x =//}.
   */
  PredictionContext.EMPTY = null;

  /**
   * Represents {@code $} in an array in full context mode, when {@code $}
   * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
   * {@code $} = {@link //EMPTY_RETURN_STATE}.
   */
  PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

  PredictionContext.globalNodeCount = 1;
  PredictionContext.id = PredictionContext.globalNodeCount;


  /*
  function calculateHashString(parent, returnState) {
  	return "" + parent + returnState;
  }
  */

  /**
   * Used to cache {@link PredictionContext} objects. Its used for the shared
   * context cash associated with contexts in DFA states. This cache
   * can be used for both lexers and parsers.
   */
  class PredictionContextCache {

  	constructor() {
  		this.cache = new Map$2();
  	}

  	/**
  	 * Add a context to the cache and return it. If the context already exists,
  	 * return that one instead and do not add a new context to the cache.
  	 * Protect shared cache from unsafe thread access.
  	 */
  	add(ctx) {
  		if (ctx === PredictionContext.EMPTY) {
  			return PredictionContext.EMPTY;
  		}
  		const existing = this.cache.get(ctx) || null;
  		if (existing !== null) {
  			return existing;
  		}
  		this.cache.put(ctx, ctx);
  		return ctx;
  	}

  	get(ctx) {
  		return this.cache.get(ctx) || null;
  	}

  	get length(){
  		return this.cache.length;
  	}
  }


  class SingletonPredictionContext extends PredictionContext {

  	constructor(parent, returnState) {
  		let hashCode = 0;
  		const hash = new Hash$4();
  		if(parent !== null) {
  			hash.update(parent, returnState);
  		} else {
  			hash.update(1);
  		}
  		hashCode = hash.finish();
  		super(hashCode);
  		this.parentCtx = parent;
  		this.returnState = returnState;
  	}

  	getParent(index) {
  		return this.parentCtx;
  	}

  	getReturnState(index) {
  		return this.returnState;
  	}

  	equals(other) {
  		if (this === other) {
  			return true;
  		} else if (!(other instanceof SingletonPredictionContext)) {
  			return false;
  		} else if (this.hashCode() !== other.hashCode()) {
  			return false; // can't be same if hash is different
  		} else {
  			if(this.returnState !== other.returnState)
  				return false;
  			else if(this.parentCtx==null)
  				return other.parentCtx==null
  			else
  				return this.parentCtx.equals(other.parentCtx);
  		}
  	}

  	toString() {
  		const up = this.parentCtx === null ? "" : this.parentCtx.toString();
  		if (up.length === 0) {
  			if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
  				return "$";
  			} else {
  				return "" + this.returnState;
  			}
  		} else {
  			return "" + this.returnState + " " + up;
  		}
  	}

  	get length(){
  		return 1;
  	}

  	static create(parent, returnState) {
  		if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
  			// someone can pass in the bits of an array ctx that mean $
  			return PredictionContext.EMPTY;
  		} else {
  			return new SingletonPredictionContext(parent, returnState);
  		}
  	}
  }

  class EmptyPredictionContext extends SingletonPredictionContext {

  	constructor() {
  		super(null, PredictionContext.EMPTY_RETURN_STATE);
  	}

  	isEmpty() {
  		return true;
  	}

  	getParent(index) {
  		return null;
  	}

  	getReturnState(index) {
  		return this.returnState;
  	}

  	equals(other) {
  		return this === other;
  	}

  	toString() {
  		return "$";
  	}
  }


  PredictionContext.EMPTY = new EmptyPredictionContext();

  class ArrayPredictionContext extends PredictionContext {

  	constructor(parents, returnStates) {
  		/**
  		 * Parent can be null only if full ctx mode and we make an array
  		 * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
  		 * null parent and
  		 * returnState == {@link //EMPTY_RETURN_STATE}.
  		 */
  		const h = new Hash$4();
  		h.update(parents, returnStates);
  		const hashCode = h.finish();
  		super(hashCode);
  		this.parents = parents;
  		this.returnStates = returnStates;
  		return this;
  	}

  	isEmpty() {
  		// since EMPTY_RETURN_STATE can only appear in the last position, we
  		// don't need to verify that size==1
  		return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
  	}

  	getParent(index) {
  		return this.parents[index];
  	}

  	getReturnState(index) {
  		return this.returnStates[index];
  	}

  	equals(other) {
  		if (this === other) {
  			return true;
  		} else if (!(other instanceof ArrayPredictionContext)) {
  			return false;
  		} else if (this.hashCode() !== other.hashCode()) {
  			return false; // can't be same if hash is different
  		} else {
  			return equalArrays$1(this.returnStates, other.returnStates) &&
  				equalArrays$1(this.parents, other.parents);
  		}
  	}

  	toString() {
  		if (this.isEmpty()) {
  			return "[]";
  		} else {
  			let s = "[";
  			for (let i = 0; i < this.returnStates.length; i++) {
  				if (i > 0) {
  					s = s + ", ";
  				}
  				if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
  					s = s + "$";
  					continue;
  				}
  				s = s + this.returnStates[i];
  				if (this.parents[i] !== null) {
  					s = s + " " + this.parents[i];
  				} else {
  					s = s + "null";
  				}
  			}
  			return s + "]";
  		}
  	}

  	get length(){
  		return this.returnStates.length;
  	}
  }


  /**
   * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
   * Return {@link //EMPTY} if {@code outerContext} is empty or null.
   */
  function predictionContextFromRuleContext(atn, outerContext) {
  	if (outerContext === undefined || outerContext === null) {
  		outerContext = RuleContext_1.EMPTY;
  	}
  	// if we are in RuleContext of start rule, s, then PredictionContext
  	// is EMPTY. Nobody called us. (if we are empty, return empty)
  	if (outerContext.parentCtx === null || outerContext === RuleContext_1.EMPTY) {
  		return PredictionContext.EMPTY;
  	}
  	// If we have a parent, convert it to a PredictionContext graph
  	const parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
  	const state = atn.states[outerContext.invokingState];
  	const transition = state.transitions[0];
  	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
  }
  /*
  function calculateListsHashString(parents, returnStates) {
  	const s = "";
  	parents.map(function(p) {
  		s = s + p;
  	});
  	returnStates.map(function(r) {
  		s = s + r;
  	});
  	return s;
  }
  */
  function merge(a, b, rootIsWildcard, mergeCache) {
  	// share same graph if both same
  	if (a === b) {
  		return a;
  	}
  	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
  		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
  	}
  	// At least one of a or b is array
  	// If one is $ and rootIsWildcard, return $ as// wildcard
  	if (rootIsWildcard) {
  		if (a instanceof EmptyPredictionContext) {
  			return a;
  		}
  		if (b instanceof EmptyPredictionContext) {
  			return b;
  		}
  	}
  	// convert singleton so both are arrays to normalize
  	if (a instanceof SingletonPredictionContext) {
  		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
  	}
  	if (b instanceof SingletonPredictionContext) {
  		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
  	}
  	return mergeArrays(a, b, rootIsWildcard, mergeCache);
  }

  /**
   * Merge two {@link SingletonPredictionContext} instances.
   *
   * <p>Stack tops equal, parents merge is same; return left graph.<br>
   * <embed src="images/SingletonMerge_SameRootSamePar.svg"
   * type="image/svg+xml"/></p>
   *
   * <p>Same stack top, parents differ; merge parents giving array node, then
   * remainders of those graphs. A new root node is created to point to the
   * merged parents.<br>
   * <embed src="images/SingletonMerge_SameRootDiffPar.svg"
   * type="image/svg+xml"/></p>
   *
   * <p>Different stack tops pointing to same parent. Make array node for the
   * root where both element in the root point to the same (original)
   * parent.<br>
   * <embed src="images/SingletonMerge_DiffRootSamePar.svg"
   * type="image/svg+xml"/></p>
   *
   * <p>Different stack tops pointing to different parents. Make array node for
   * the root where each element points to the corresponding original
   * parent.<br>
   * <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
   * type="image/svg+xml"/></p>
   *
   * @param a the first {@link SingletonPredictionContext}
   * @param b the second {@link SingletonPredictionContext}
   * @param rootIsWildcard {@code true} if this is a local-context merge,
   * otherwise false to indicate a full-context merge
   * @param mergeCache
   */
  function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
  	if (mergeCache !== null) {
  		let previous = mergeCache.get(a, b);
  		if (previous !== null) {
  			return previous;
  		}
  		previous = mergeCache.get(b, a);
  		if (previous !== null) {
  			return previous;
  		}
  	}

  	const rootMerge = mergeRoot(a, b, rootIsWildcard);
  	if (rootMerge !== null) {
  		if (mergeCache !== null) {
  			mergeCache.set(a, b, rootMerge);
  		}
  		return rootMerge;
  	}
  	if (a.returnState === b.returnState) {
  		const parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
  		// if parent is same as existing a or b parent or reduced to a parent,
  		// return it
  		if (parent === a.parentCtx) {
  			return a; // ax + bx = ax, if a=b
  		}
  		if (parent === b.parentCtx) {
  			return b; // ax + bx = bx, if a=b
  		}
  		// else: ax + ay = a'[x,y]
  		// merge parents x and y, giving array node with x,y then remainders
  		// of those graphs. dup a, a' points at merged array
  		// new joined parent so create new singleton pointing to it, a'
  		const spc = SingletonPredictionContext.create(parent, a.returnState);
  		if (mergeCache !== null) {
  			mergeCache.set(a, b, spc);
  		}
  		return spc;
  	} else { // a != b payloads differ
  		// see if we can collapse parents due to $+x parents if local ctx
  		let singleParent = null;
  		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
  																				// bx =
  																				// [a,b]x
  			singleParent = a.parentCtx;
  		}
  		if (singleParent !== null) { // parents are same
  			// sort payloads and use same parent
  			const payloads = [ a.returnState, b.returnState ];
  			if (a.returnState > b.returnState) {
  				payloads[0] = b.returnState;
  				payloads[1] = a.returnState;
  			}
  			const parents = [ singleParent, singleParent ];
  			const apc = new ArrayPredictionContext(parents, payloads);
  			if (mergeCache !== null) {
  				mergeCache.set(a, b, apc);
  			}
  			return apc;
  		}
  		// parents differ and can't merge them. Just pack together
  		// into array; can't merge.
  		// ax + by = [ax,by]
  		const payloads = [ a.returnState, b.returnState ];
  		let parents = [ a.parentCtx, b.parentCtx ];
  		if (a.returnState > b.returnState) { // sort by payload
  			payloads[0] = b.returnState;
  			payloads[1] = a.returnState;
  			parents = [ b.parentCtx, a.parentCtx ];
  		}
  		const a_ = new ArrayPredictionContext(parents, payloads);
  		if (mergeCache !== null) {
  			mergeCache.set(a, b, a_);
  		}
  		return a_;
  	}
  }

  /**
   * Handle case where at least one of {@code a} or {@code b} is
   * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
   * to represent {@link //EMPTY}.
   *
   * <h2>Local-Context Merges</h2>
   *
   * <p>These local-context merge operations are used when {@code rootIsWildcard}
   * is true.</p>
   *
   * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
   * <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
   *
   * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
   * {@code //EMPTY}; return left graph.<br>
   * <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
   *
   * <p>Special case of last merge if local context.<br>
   * <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
   *
   * <h2>Full-Context Merges</h2>
   *
   * <p>These full-context merge operations are used when {@code rootIsWildcard}
   * is false.</p>
   *
   * <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
   *
   * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
   * null parent).<br>
   * <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
   *
   * <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
   *
   * @param a the first {@link SingletonPredictionContext}
   * @param b the second {@link SingletonPredictionContext}
   * @param rootIsWildcard {@code true} if this is a local-context merge,
   * otherwise false to indicate a full-context merge
   */
  function mergeRoot(a, b, rootIsWildcard) {
  	if (rootIsWildcard) {
  		if (a === PredictionContext.EMPTY) {
  			return PredictionContext.EMPTY; // // + b =//
  		}
  		if (b === PredictionContext.EMPTY) {
  			return PredictionContext.EMPTY; // a +// =//
  		}
  	} else {
  		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
  			return PredictionContext.EMPTY; // $ + $ = $
  		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
  			const payloads = [ b.returnState,
  					PredictionContext.EMPTY_RETURN_STATE ];
  			const parents = [ b.parentCtx, null ];
  			return new ArrayPredictionContext(parents, payloads);
  		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
  			const payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
  			const parents = [ a.parentCtx, null ];
  			return new ArrayPredictionContext(parents, payloads);
  		}
  	}
  	return null;
  }

  /**
   * Merge two {@link ArrayPredictionContext} instances.
   *
   * <p>Different tops, different parents.<br>
   * <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
   *
   * <p>Shared top, same parents.<br>
   * <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
   *
   * <p>Shared top, different parents.<br>
   * <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
   *
   * <p>Shared top, all shared parents.<br>
   * <embed src="images/ArrayMerge_ShareTopSharePar.svg"
   * type="image/svg+xml"/></p>
   *
   * <p>Equal tops, merge parents and reduce top to
   * {@link SingletonPredictionContext}.<br>
   * <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
   */
  function mergeArrays(a, b, rootIsWildcard, mergeCache) {
  	if (mergeCache !== null) {
  		let previous = mergeCache.get(a, b);
  		if (previous !== null) {
  			return previous;
  		}
  		previous = mergeCache.get(b, a);
  		if (previous !== null) {
  			return previous;
  		}
  	}
  	// merge sorted payloads a + b => M
  	let i = 0; // walks a
  	let j = 0; // walks b
  	let k = 0; // walks target M array

  	let mergedReturnStates = [];
  	let mergedParents = [];
  	// walk and merge to yield mergedParents, mergedReturnStates
  	while (i < a.returnStates.length && j < b.returnStates.length) {
  		const a_parent = a.parents[i];
  		const b_parent = b.parents[j];
  		if (equalArrays$1(a.returnStates[i], b.returnStates[j])) {
  			// same payload (stack tops are equal), must yield merged singleton
  			const payload = a.returnStates[i];
  			// $+$ = $
  			const bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
  					a_parent === null && b_parent === null;
  			const ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
  																							// ->
  																							// ax
  			if (bothDollars || ax_ax) {
  				mergedParents[k] = a_parent; // choose left
  				mergedReturnStates[k] = payload;
  			} else { // ax+ay -> a'[x,y]
  				mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
  				mergedReturnStates[k] = payload;
  			}
  			i += 1; // hop over left one as usual
  			j += 1; // but also skip one in right side since we merge
  		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
  			mergedParents[k] = a_parent;
  			mergedReturnStates[k] = a.returnStates[i];
  			i += 1;
  		} else { // b > a, copy b[j] to M
  			mergedParents[k] = b_parent;
  			mergedReturnStates[k] = b.returnStates[j];
  			j += 1;
  		}
  		k += 1;
  	}
  	// copy over any payloads remaining in either array
  	if (i < a.returnStates.length) {
  		for (let p = i; p < a.returnStates.length; p++) {
  			mergedParents[k] = a.parents[p];
  			mergedReturnStates[k] = a.returnStates[p];
  			k += 1;
  		}
  	} else {
  		for (let p = j; p < b.returnStates.length; p++) {
  			mergedParents[k] = b.parents[p];
  			mergedReturnStates[k] = b.returnStates[p];
  			k += 1;
  		}
  	}
  	// trim merged if we combined a few that had same stack tops
  	if (k < mergedParents.length) { // write index < last position; trim
  		if (k === 1) { // for just one merged element, return singleton top
  			const a_ = SingletonPredictionContext.create(mergedParents[0],
  					mergedReturnStates[0]);
  			if (mergeCache !== null) {
  				mergeCache.set(a, b, a_);
  			}
  			return a_;
  		}
  		mergedParents = mergedParents.slice(0, k);
  		mergedReturnStates = mergedReturnStates.slice(0, k);
  	}

  	const M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

  	// if we created same array as a or b, return that instead
  	// TODO: track whether this is possible above during merge sort for speed
  	if (M === a) {
  		if (mergeCache !== null) {
  			mergeCache.set(a, b, a);
  		}
  		return a;
  	}
  	if (M === b) {
  		if (mergeCache !== null) {
  			mergeCache.set(a, b, b);
  		}
  		return b;
  	}
  	combineCommonParents(mergedParents);

  	if (mergeCache !== null) {
  		mergeCache.set(a, b, M);
  	}
  	return M;
  }

  /**
   * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
   * ones.
   */
  function combineCommonParents(parents) {
  	const uniqueParents = new Map$2();

  	for (let p = 0; p < parents.length; p++) {
  		const parent = parents[p];
  		if (!(uniqueParents.containsKey(parent))) {
  			uniqueParents.put(parent, parent);
  		}
  	}
  	for (let q = 0; q < parents.length; q++) {
  		parents[q] = uniqueParents.get(parents[q]);
  	}
  }

  function getCachedPredictionContext(context, contextCache, visited) {
  	if (context.isEmpty()) {
  		return context;
  	}
  	let existing = visited.get(context) || null;
  	if (existing !== null) {
  		return existing;
  	}
  	existing = contextCache.get(context);
  	if (existing !== null) {
  		visited.put(context, existing);
  		return existing;
  	}
  	let changed = false;
  	let parents = [];
  	for (let i = 0; i < parents.length; i++) {
  		const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
  		if (changed || parent !== context.getParent(i)) {
  			if (!changed) {
  				parents = [];
  				for (let j = 0; j < context.length; j++) {
  					parents[j] = context.getParent(j);
  				}
  				changed = true;
  			}
  			parents[i] = parent;
  		}
  	}
  	if (!changed) {
  		contextCache.add(context);
  		visited.put(context, context);
  		return context;
  	}
  	let updated = null;
  	if (parents.length === 0) {
  		updated = PredictionContext.EMPTY;
  	} else if (parents.length === 1) {
  		updated = SingletonPredictionContext.create(parents[0], context
  				.getReturnState(0));
  	} else {
  		updated = new ArrayPredictionContext(parents, context.returnStates);
  	}
  	contextCache.add(updated);
  	visited.put(updated, updated);
  	visited.put(context, updated);

  	return updated;
  }

  var PredictionContext_1 = {
  	merge,
  	PredictionContext,
  	PredictionContextCache,
  	SingletonPredictionContext,
  	predictionContextFromRuleContext,
  	getCachedPredictionContext
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Set: Set$2, BitSet: BitSet$1} = Utils;
  const {Token: Token$5} = Token_1;
  const {ATNConfig: ATNConfig$1} = ATNConfig_1;
  const {IntervalSet: IntervalSet$2} = IntervalSet_1;
  const {RuleStopState: RuleStopState$1} = ATNState_1;
  const {RuleTransition: RuleTransition$1, NotSetTransition: NotSetTransition$1, WildcardTransition: WildcardTransition$1, AbstractPredicateTransition: AbstractPredicateTransition$1} = Transition_1;
  const {predictionContextFromRuleContext: predictionContextFromRuleContext$1, PredictionContext: PredictionContext$1, SingletonPredictionContext: SingletonPredictionContext$1} = PredictionContext_1;

  class LL1Analyzer {
      constructor(atn) {
          this.atn = atn;
      }

      /**
       * Calculates the SLL(1) expected lookahead set for each outgoing transition
       * of an {@link ATNState}. The returned array has one element for each
       * outgoing transition in {@code s}. If the closure from transition
       * <em>i</em> leads to a semantic predicate before matching a symbol, the
       * element at index <em>i</em> of the result will be {@code null}.
       *
       * @param s the ATN state
       * @return the expected symbols for each outgoing transition of {@code s}.
       */
      getDecisionLookahead(s) {
          if (s === null) {
              return null;
          }
          const count = s.transitions.length;
          const look = [];
          for(let alt=0; alt< count; alt++) {
              look[alt] = new IntervalSet$2();
              const lookBusy = new Set$2();
              const seeThruPreds = false; // fail to get lookahead upon pred
              this._LOOK(s.transition(alt).target, null, PredictionContext$1.EMPTY,
                    look[alt], lookBusy, new BitSet$1(), seeThruPreds, false);
              // Wipe out lookahead for this alternative if we found nothing
              // or we had a predicate when we !seeThruPreds
              if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
                  look[alt] = null;
              }
          }
          return look;
      }

      /**
       * Compute set of tokens that can follow {@code s} in the ATN in the
       * specified {@code ctx}.
       *
       * <p>If {@code ctx} is {@code null} and the end of the rule containing
       * {@code s} is reached, {@link Token//EPSILON} is added to the result set.
       * If {@code ctx} is not {@code null} and the end of the outermost rule is
       * reached, {@link Token//EOF} is added to the result set.</p>
       *
       * @param s the ATN state
       * @param stopState the ATN state to stop at. This can be a
       * {@link BlockEndState} to detect epsilon paths through a closure.
       * @param ctx the complete parser context, or {@code null} if the context
       * should be ignored
       *
       * @return The set of tokens that can follow {@code s} in the ATN in the
       * specified {@code ctx}.
       */
      LOOK(s, stopState, ctx) {
          const r = new IntervalSet$2();
          const seeThruPreds = true; // ignore preds; get all lookahead
          ctx = ctx || null;
          const lookContext = ctx!==null ? predictionContextFromRuleContext$1(s.atn, ctx) : null;
          this._LOOK(s, stopState, lookContext, r, new Set$2(), new BitSet$1(), seeThruPreds, true);
          return r;
      }

      /**
       * Compute set of tokens that can follow {@code s} in the ATN in the
       * specified {@code ctx}.
       *
       * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
       * rule containing {@code s} is reached, {@link Token//EPSILON} is added to
       * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
       * {@code true} and {@code stopState} or the end of the outermost rule is
       * reached, {@link Token//EOF} is added to the result set.</p>
       *
       * @param s the ATN state.
       * @param stopState the ATN state to stop at. This can be a
       * {@link BlockEndState} to detect epsilon paths through a closure.
       * @param ctx The outer context, or {@code null} if the outer context should
       * not be used.
       * @param look The result lookahead set.
       * @param lookBusy A set used for preventing epsilon closures in the ATN
       * from causing a stack overflow. Outside code should pass
       * {@code new Set<ATNConfig>} for this argument.
       * @param calledRuleStack A set used for preventing left recursion in the
       * ATN from causing a stack overflow. Outside code should pass
       * {@code new BitSet()} for this argument.
       * @param seeThruPreds {@code true} to true semantic predicates as
       * implicitly {@code true} and "see through them", otherwise {@code false}
       * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
       * result if one is encountered.
       * @param addEOF Add {@link Token//EOF} to the result if the end of the
       * outermost context is reached. This parameter has no effect if {@code ctx}
       * is {@code null}.
       */
      _LOOK(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
          const c = new ATNConfig$1({state:s, alt:0, context: ctx}, null);
          if (lookBusy.contains(c)) {
              return;
          }
          lookBusy.add(c);
          if (s === stopState) {
              if (ctx ===null) {
                  look.addOne(Token$5.EPSILON);
                  return;
              } else if (ctx.isEmpty() && addEOF) {
                  look.addOne(Token$5.EOF);
                  return;
              }
          }
          if (s instanceof RuleStopState$1 ) {
              if (ctx ===null) {
                  look.addOne(Token$5.EPSILON);
                  return;
              } else if (ctx.isEmpty() && addEOF) {
                  look.addOne(Token$5.EOF);
                  return;
              }
              if (ctx !== PredictionContext$1.EMPTY) {
                  // run thru all possible stack tops in ctx
                  for(let i=0; i<ctx.length; i++) {
                      const returnState = this.atn.states[ctx.getReturnState(i)];
                      const removed = calledRuleStack.contains(returnState.ruleIndex);
                      try {
                          calledRuleStack.remove(returnState.ruleIndex);
                          this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                      } finally {
                          if (removed) {
                              calledRuleStack.add(returnState.ruleIndex);
                          }
                      }
                  }
                  return;
              }
          }
          for(let j=0; j<s.transitions.length; j++) {
              const t = s.transitions[j];
              if (t.constructor === RuleTransition$1) {
                  if (calledRuleStack.contains(t.target.ruleIndex)) {
                      continue;
                  }
                  const newContext = SingletonPredictionContext$1.create(ctx, t.followState.stateNumber);
                  try {
                      calledRuleStack.add(t.target.ruleIndex);
                      this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                  } finally {
                      calledRuleStack.remove(t.target.ruleIndex);
                  }
              } else if (t instanceof AbstractPredicateTransition$1 ) {
                  if (seeThruPreds) {
                      this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                  } else {
                      look.addOne(LL1Analyzer.HIT_PRED);
                  }
              } else if( t.isEpsilon) {
                  this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
              } else if (t.constructor === WildcardTransition$1) {
                  look.addRange( Token$5.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
              } else {
                  let set = t.label;
                  if (set !== null) {
                      if (t instanceof NotSetTransition$1) {
                          set = set.complement(Token$5.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                      }
                      look.addSet(set);
                  }
              }
          }
      }
  }

  /**
   * Special value added to the lookahead sets to indicate that we hit
   * a predicate during analysis if {@code seeThruPreds==false}.
   */
  LL1Analyzer.HIT_PRED = Token$5.INVALID_TYPE;

  var LL1Analyzer_1 = LL1Analyzer;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {IntervalSet: IntervalSet$3} = IntervalSet_1;
  const {Token: Token$6} = Token_1;

  class ATN {

      constructor(grammarType , maxTokenType) {
          /**
           * Used for runtime deserialization of ATNs from strings
           * The type of the ATN.
          */
          this.grammarType = grammarType;
          // The maximum value for any symbol recognized by a transition in the ATN.
          this.maxTokenType = maxTokenType;
          this.states = [];
          /**
           * Each subrule/rule is a decision point and we must track them so we
           * can go back later and build DFA predictors for them.  This includes
           * all the rules, subrules, optional blocks, ()+, ()* etc...
           */
          this.decisionToState = [];
          // Maps from rule index to starting state number.
          this.ruleToStartState = [];
          // Maps from rule index to stop state number.
          this.ruleToStopState = null;
          this.modeNameToStartState = {};
          /**
           * For lexer ATNs, this maps the rule index to the resulting token type.
           * For parser ATNs, this maps the rule index to the generated bypass token
           * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
           * deserialization option was specified; otherwise, this is {@code null}
           */
          this.ruleToTokenType = null;
          /**
           * For lexer ATNs, this is an array of {@link LexerAction} objects which may
           * be referenced by action transitions in the ATN
           */
          this.lexerActions = null;
          this.modeToStartState = [];
      }

      /**
       * Compute the set of valid tokens that can occur starting in state {@code s}.
       * If {@code ctx} is null, the set of tokens will not include what can follow
       * the rule surrounding {@code s}. In other words, the set will be
       * restricted to tokens reachable staying within {@code s}'s rule
       */
      nextTokensInContext(s, ctx) {
          const anal = new LL1Analyzer_1(this);
          return anal.LOOK(s, null, ctx);
      }

      /**
       * Compute the set of valid tokens that can occur starting in {@code s} and
       * staying in same rule. {@link Token//EPSILON} is in set if we reach end of
       * rule
       */
      nextTokensNoContext(s) {
          if (s.nextTokenWithinRule !== null ) {
              return s.nextTokenWithinRule;
          }
          s.nextTokenWithinRule = this.nextTokensInContext(s, null);
          s.nextTokenWithinRule.readOnly = true;
          return s.nextTokenWithinRule;
      }

      nextTokens(s, ctx) {
          if ( ctx===undefined ) {
              return this.nextTokensNoContext(s);
          } else {
              return this.nextTokensInContext(s, ctx);
          }
      }

      addState(state) {
          if ( state !== null ) {
              state.atn = this;
              state.stateNumber = this.states.length;
          }
          this.states.push(state);
      }

      removeState(state) {
          this.states[state.stateNumber] = null; // just free mem, don't shift states in list
      }

      defineDecisionState(s) {
          this.decisionToState.push(s);
          s.decision = this.decisionToState.length-1;
          return s.decision;
      }

      getDecisionState(decision) {
          if (this.decisionToState.length===0) {
              return null;
          } else {
              return this.decisionToState[decision];
          }
      }

      /**
       * Computes the set of input symbols which could follow ATN state number
       * {@code stateNumber} in the specified full {@code context}. This method
       * considers the complete parser context, but does not evaluate semantic
       * predicates (i.e. all predicates encountered during the calculation are
       * assumed true). If a path in the ATN exists from the starting state to the
       * {@link RuleStopState} of the outermost context without matching any
       * symbols, {@link Token//EOF} is added to the returned set.
       *
       * <p>If {@code context} is {@code null}, it is treated as
       * {@link ParserRuleContext//EMPTY}.</p>
       *
       * @param stateNumber the ATN state number
       * @param ctx the full parse context
       *
       * @return {IntervalSet} The set of potentially valid input symbols which could follow the
       * specified state in the specified context.
       *
       * @throws IllegalArgumentException if the ATN does not contain a state with
       * number {@code stateNumber}
       */
      getExpectedTokens(stateNumber, ctx ) {
          if ( stateNumber < 0 || stateNumber >= this.states.length ) {
              throw("Invalid state number.");
          }
          const s = this.states[stateNumber];
          let following = this.nextTokens(s);
          if (!following.contains(Token$6.EPSILON)) {
              return following;
          }
          const expected = new IntervalSet$3();
          expected.addSet(following);
          expected.removeOne(Token$6.EPSILON);
          while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token$6.EPSILON)) {
              const invokingState = this.states[ctx.invokingState];
              const rt = invokingState.transitions[0];
              following = this.nextTokens(rt.followState);
              expected.addSet(following);
              expected.removeOne(Token$6.EPSILON);
              ctx = ctx.parentCtx;
          }
          if (following.contains(Token$6.EPSILON)) {
              expected.addOne(Token$6.EOF);
          }
          return expected;
      }
  }

  ATN.INVALID_ALT_NUMBER = 0;

  var ATN_1 = ATN;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */
  /**
   * Represents the type of recognizer an ATN applies to
   */
  var ATNType = {
      LEXER: 0,
      PARSER: 1
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */
  class ATNDeserializationOptions {
  	constructor(copyFrom) {
  		if(copyFrom===undefined) {
  			copyFrom = null;
  		}
  		this.readOnly = false;
  		this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
  		this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;
  	}
  }

  ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
  ATNDeserializationOptions.defaultOptions.readOnly = true;

  //    def __setattr__(self, key, value):
  //        if key!="readOnly" and self.readOnly:
  //            raise Exception("The object is read only.")
  //        super(type(self), self).__setattr__(key,value)

  var ATNDeserializationOptions_1 = ATNDeserializationOptions;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */
  const LexerActionType = {
      // The type of a {@link LexerChannelAction} action.
      CHANNEL: 0,
      // The type of a {@link LexerCustomAction} action
      CUSTOM: 1,
      // The type of a {@link LexerModeAction} action.
      MODE: 2,
      //The type of a {@link LexerMoreAction} action.
      MORE: 3,
      //The type of a {@link LexerPopModeAction} action.
      POP_MODE: 4,
      //The type of a {@link LexerPushModeAction} action.
      PUSH_MODE: 5,
      //The type of a {@link LexerSkipAction} action.
      SKIP: 6,
      //The type of a {@link LexerTypeAction} action.
      TYPE: 7
  };

  class LexerAction {
      constructor(action) {
          this.actionType = action;
          this.isPositionDependent = false;
      }

      hashCode() {
          const hash = new Hash();
          this.updateHashCode(hash);
          return hash.finish()
      }

      updateHashCode(hash) {
          hash.update(this.actionType);
      }

      equals(other) {
          return this === other;
      }
  }


  /**
   * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
   *
   * <p>The {@code skip} command does not have any parameters, so this action is
   * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
   */
  class LexerSkipAction extends LexerAction {
      constructor() {
          super(LexerActionType.SKIP);
      }

      execute(lexer) {
          lexer.skip();
      }

      toString() {
          return "skip";
      }
  }

  // Provides a singleton instance of this parameterless lexer action.
  LexerSkipAction.INSTANCE = new LexerSkipAction();

  /**
   * Implements the {@code type} lexer action by calling {@link Lexer//setType}
   * with the assigned type
   */
  class LexerTypeAction extends LexerAction {
      constructor(type) {
          super(LexerActionType.TYPE);
          this.type = type;
      }

      execute(lexer) {
          lexer.type = this.type;
      }

      updateHashCode(hash) {
          hash.update(this.actionType, this.type);
      }

      equals(other) {
          if(this === other) {
              return true;
          } else if (! (other instanceof LexerTypeAction)) {
              return false;
          } else {
              return this.type === other.type;
          }
      }

      toString() {
          return "type(" + this.type + ")";
      }
  }


  /**
   * Implements the {@code pushMode} lexer action by calling
   * {@link Lexer//pushMode} with the assigned mode
   */
  class LexerPushModeAction extends LexerAction {
      constructor(mode) {
          super(LexerActionType.PUSH_MODE);
          this.mode = mode;
      }

      /**
       * <p>This action is implemented by calling {@link Lexer//pushMode} with the
       * value provided by {@link //getMode}.</p>
       */
      execute(lexer) {
          lexer.pushMode(this.mode);
      }

      updateHashCode(hash) {
          hash.update(this.actionType, this.mode);
      }

      equals(other) {
          if (this === other) {
              return true;
          } else if (! (other instanceof LexerPushModeAction)) {
              return false;
          } else {
              return this.mode === other.mode;
          }
      }

      toString() {
          return "pushMode(" + this.mode + ")";
      }
  }

  /**
   * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
   *
   * <p>The {@code popMode} command does not have any parameters, so this action is
   * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
   */
  class LexerPopModeAction extends LexerAction {
      constructor() {
          super(LexerActionType.POP_MODE);
      }

      /**
       * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
       */
      execute(lexer) {
          lexer.popMode();
      }

      toString() {
          return "popMode";
      }
  }

  LexerPopModeAction.INSTANCE = new LexerPopModeAction();

  /**
   * Implements the {@code more} lexer action by calling {@link Lexer//more}.
   *
   * <p>The {@code more} command does not have any parameters, so this action is
   * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
   */
  class LexerMoreAction extends LexerAction {
      constructor() {
          super(LexerActionType.MORE);
      }

      /**
       * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
       */
      execute(lexer) {
          lexer.more();
      }

      toString() {
          return "more";
      }
  }

  LexerMoreAction.INSTANCE = new LexerMoreAction();


  /**
   * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
   * the assigned mode
   */
  class LexerModeAction extends LexerAction {
      constructor(mode) {
          super(LexerActionType.MODE);
          this.mode = mode;
      }

      /**
       * <p>This action is implemented by calling {@link Lexer//mode} with the
       * value provided by {@link //getMode}.</p>
       */
      execute(lexer) {
          lexer.mode(this.mode);
      }

      updateHashCode(hash) {
          hash.update(this.actionType, this.mode);
      }

      equals(other) {
          if (this === other) {
              return true;
          } else if (! (other instanceof LexerModeAction)) {
              return false;
          } else {
              return this.mode === other.mode;
          }
      }

      toString() {
          return "mode(" + this.mode + ")";
      }
  }

  /**
   * Executes a custom lexer action by calling {@link Recognizer//action} with the
   * rule and action indexes assigned to the custom action. The implementation of
   * a custom action is added to the generated code for the lexer in an override
   * of {@link Recognizer//action} when the grammar is compiled.
   *
   * <p>This class may represent embedded actions created with the <code>{...}</code>
   * syntax in ANTLR 4, as well as actions created for lexer commands where the
   * command argument could not be evaluated when the grammar was compiled.</p>
   */
  class LexerCustomAction extends LexerAction {
      /**
       * Constructs a custom lexer action with the specified rule and action
       * indexes.
       *
       * @param ruleIndex The rule index to use for calls to
       * {@link Recognizer//action}.
       * @param actionIndex The action index to use for calls to
       * {@link Recognizer//action}.
       */
      constructor(ruleIndex, actionIndex) {
          super(LexerActionType.CUSTOM);
          this.ruleIndex = ruleIndex;
          this.actionIndex = actionIndex;
          this.isPositionDependent = true;
      }

      /**
       * <p>Custom actions are implemented by calling {@link Lexer//action} with the
       * appropriate rule and action indexes.</p>
       */
      execute(lexer) {
          lexer.action(null, this.ruleIndex, this.actionIndex);
      }

      updateHashCode(hash) {
          hash.update(this.actionType, this.ruleIndex, this.actionIndex);
      }

      equals(other) {
          if (this === other) {
              return true;
          } else if (! (other instanceof LexerCustomAction)) {
              return false;
          } else {
              return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
          }
      }
  }

  /**
   * Implements the {@code channel} lexer action by calling
   * {@link Lexer//setChannel} with the assigned channel.
   * Constructs a new {@code channel} action with the specified channel value.
   * @param channel The channel value to pass to {@link Lexer//setChannel}
   */
  class LexerChannelAction extends LexerAction {
      constructor(channel) {
          super(LexerActionType.CHANNEL);
          this.channel = channel;
      }

      /**
       * <p>This action is implemented by calling {@link Lexer//setChannel} with the
       * value provided by {@link //getChannel}.</p>
       */
      execute(lexer) {
          lexer._channel = this.channel;
      }

      updateHashCode(hash) {
          hash.update(this.actionType, this.channel);
      }

      equals(other) {
          if (this === other) {
              return true;
          } else if (! (other instanceof LexerChannelAction)) {
              return false;
          } else {
              return this.channel === other.channel;
          }
      }

      toString() {
          return "channel(" + this.channel + ")";
      }
  }


  /**
   * This implementation of {@link LexerAction} is used for tracking input offsets
   * for position-dependent actions within a {@link LexerActionExecutor}.
   *
   * <p>This action is not serialized as part of the ATN, and is only required for
   * position-dependent lexer actions which appear at a location other than the
   * end of a rule. For more information about DFA optimizations employed for
   * lexer actions, see {@link LexerActionExecutor//append} and
   * {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>
   *
   * Constructs a new indexed custom action by associating a character offset
   * with a {@link LexerAction}.
   *
   * <p>Note: This class is only required for lexer actions for which
   * {@link LexerAction//isPositionDependent} returns {@code true}.</p>
   *
   * @param offset The offset into the input {@link CharStream}, relative to
   * the token start index, at which the specified lexer action should be
   * executed.
   * @param action The lexer action to execute at a particular offset in the
   * input {@link CharStream}.
   */
  class LexerIndexedCustomAction extends LexerAction {
      constructor(offset, action) {
          super(action.actionType);
          this.offset = offset;
          this.action = action;
          this.isPositionDependent = true;
      }

      /**
       * <p>This method calls {@link //execute} on the result of {@link //getAction}
       * using the provided {@code lexer}.</p>
       */
      execute(lexer) {
          // assume the input stream position was properly set by the calling code
          this.action.execute(lexer);
      }

      updateHashCode(hash) {
          hash.update(this.actionType, this.offset, this.action);
      }

      equals(other) {
          if (this === other) {
              return true;
          } else if (! (other instanceof LexerIndexedCustomAction)) {
              return false;
          } else {
              return this.offset === other.offset && this.action === other.action;
          }
      }
  }

  var LexerAction_1 = {
      LexerActionType,
      LexerSkipAction,
      LexerChannelAction,
      LexerCustomAction,
      LexerIndexedCustomAction,
      LexerMoreAction,
      LexerTypeAction,
      LexerPushModeAction,
      LexerPopModeAction,
      LexerModeAction
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$7} = Token_1;



  const {
      ATNState: ATNState$1,
      BasicState: BasicState$1,
      DecisionState: DecisionState$2,
      BlockStartState: BlockStartState$1,
      BlockEndState: BlockEndState$1,
      LoopEndState: LoopEndState$1,
      RuleStartState: RuleStartState$1,
      RuleStopState: RuleStopState$2,
      TokensStartState: TokensStartState$1,
      PlusLoopbackState: PlusLoopbackState$1,
      StarLoopbackState: StarLoopbackState$1,
      StarLoopEntryState: StarLoopEntryState$1,
      PlusBlockStartState: PlusBlockStartState$1,
      StarBlockStartState: StarBlockStartState$1,
      BasicBlockStartState: BasicBlockStartState$1
  } = ATNState_1;

  const {
      Transition: Transition$1,
      AtomTransition: AtomTransition$2,
      SetTransition: SetTransition$1,
      NotSetTransition: NotSetTransition$2,
      RuleTransition: RuleTransition$2,
      RangeTransition: RangeTransition$1,
      ActionTransition: ActionTransition$1,
      EpsilonTransition: EpsilonTransition$1,
      WildcardTransition: WildcardTransition$2,
      PredicateTransition: PredicateTransition$1,
      PrecedencePredicateTransition: PrecedencePredicateTransition$1
  } = Transition_1;

  const {IntervalSet: IntervalSet$4} = IntervalSet_1;


  const {
      LexerActionType: LexerActionType$1,
      LexerSkipAction: LexerSkipAction$1,
      LexerChannelAction: LexerChannelAction$1,
      LexerCustomAction: LexerCustomAction$1,
      LexerMoreAction: LexerMoreAction$1,
      LexerTypeAction: LexerTypeAction$1,
      LexerPushModeAction: LexerPushModeAction$1,
      LexerPopModeAction: LexerPopModeAction$1,
      LexerModeAction: LexerModeAction$1,
  } = LexerAction_1;

  // This is the earliest supported serialized UUID.
  // stick to serialized version for now, we don't need a UUID instance
  const BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

  //
  // This UUID indicates the serialized ATN contains two sets of
  // IntervalSets, where the second set's values are encoded as
  // 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
  //
  const ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

  // This list contains all of the currently supported UUIDs, ordered by when
  // the feature first appeared in this branch.
  const SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

  const SERIALIZED_VERSION = 3;

  // This is the current serialized UUID.
  const SERIALIZED_UUID = ADDED_UNICODE_SMP;

  function initArray( length, value) {
  	const tmp = [];
  	tmp[length-1] = value;
  	return tmp.map(function(i) {return value;});
  }

  class ATNDeserializer {
      constructor(options) {

          if ( options=== undefined || options === null ) {
              options = ATNDeserializationOptions_1.defaultOptions;
          }
          this.deserializationOptions = options;
          this.stateFactories = null;
          this.actionFactories = null;
      }

      /**
       * Determines if a particular serialized representation of an ATN supports
       * a particular feature, identified by the {@link UUID} used for serializing
       * the ATN at the time the feature was first introduced.
       *
       * @param feature The {@link UUID} marking the first time the feature was
       * supported in the serialized ATN.
       * @param actualUuid The {@link UUID} of the actual serialized ATN which is
       * currently being deserialized.
       * @return {@code true} if the {@code actualUuid} value represents a
       * serialized ATN at or after the feature identified by {@code feature} was
       * introduced; otherwise, {@code false}.
      */
      isFeatureSupported(feature, actualUuid) {
          const idx1 = SUPPORTED_UUIDS.indexOf(feature);
          if (idx1<0) {
              return false;
          }
          const idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
          return idx2 >= idx1;
      }

      deserialize(data) {
          this.reset(data);
          this.checkVersion();
          this.checkUUID();
          const atn = this.readATN();
          this.readStates(atn);
          this.readRules(atn);
          this.readModes(atn);
          const sets = [];
          // First, deserialize sets with 16-bit arguments <= U+FFFF.
          this.readSets(atn, sets, this.readInt.bind(this));
          // Next, if the ATN was serialized with the Unicode SMP feature,
          // deserialize sets with 32-bit arguments <= U+10FFFF.
          if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
              this.readSets(atn, sets, this.readInt32.bind(this));
          }
          this.readEdges(atn, sets);
          this.readDecisions(atn);
          this.readLexerActions(atn);
          this.markPrecedenceDecisions(atn);
          this.verifyATN(atn);
          if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
              this.generateRuleBypassTransitions(atn);
              // re-verify after modification
              this.verifyATN(atn);
          }
          return atn;
      }

      reset(data) {
          const adjust = function(c) {
              const v = c.charCodeAt(0);
              return v>1  ? v-2 : v + 65534;
          };
          const temp = data.split("").map(adjust);
          // don't adjust the first value since that's the version number
          temp[0] = data.charCodeAt(0);
          this.data = temp;
          this.pos = 0;
      }

      checkVersion() {
          const version = this.readInt();
          if ( version !== SERIALIZED_VERSION ) {
              throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
          }
      }

      checkUUID() {
          const uuid = this.readUUID();
          if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
              throw (SERIALIZED_UUID);
          }
          this.uuid = uuid;
      }

      readATN() {
          const grammarType = this.readInt();
          const maxTokenType = this.readInt();
          return new ATN_1(grammarType, maxTokenType);
      }

      readStates(atn) {
          let j, pair, stateNumber;
          const  loopBackStateNumbers = [];
          const  endStateNumbers = [];
          const  nstates = this.readInt();
          for(let i=0; i<nstates; i++) {
              const  stype = this.readInt();
              // ignore bad type of states
              if (stype===ATNState$1.INVALID_TYPE) {
                  atn.addState(null);
                  continue;
              }
              let ruleIndex = this.readInt();
              if (ruleIndex === 0xFFFF) {
                  ruleIndex = -1;
              }
              const  s = this.stateFactory(stype, ruleIndex);
              if (stype === ATNState$1.LOOP_END) { // special case
                  const  loopBackStateNumber = this.readInt();
                  loopBackStateNumbers.push([s, loopBackStateNumber]);
              } else if(s instanceof BlockStartState$1) {
                  const  endStateNumber = this.readInt();
                  endStateNumbers.push([s, endStateNumber]);
              }
              atn.addState(s);
          }
          // delay the assignment of loop back and end states until we know all the
          // state instances have been initialized
          for (j=0; j<loopBackStateNumbers.length; j++) {
              pair = loopBackStateNumbers[j];
              pair[0].loopBackState = atn.states[pair[1]];
          }

          for (j=0; j<endStateNumbers.length; j++) {
              pair = endStateNumbers[j];
              pair[0].endState = atn.states[pair[1]];
          }

          let numNonGreedyStates = this.readInt();
          for (j=0; j<numNonGreedyStates; j++) {
              stateNumber = this.readInt();
              atn.states[stateNumber].nonGreedy = true;
          }

          let numPrecedenceStates = this.readInt();
          for (j=0; j<numPrecedenceStates; j++) {
              stateNumber = this.readInt();
              atn.states[stateNumber].isPrecedenceRule = true;
          }
      }

      readRules(atn) {
          let i;
          const nrules = this.readInt();
          if (atn.grammarType === ATNType.LEXER ) {
              atn.ruleToTokenType = initArray(nrules, 0);
          }
          atn.ruleToStartState = initArray(nrules, 0);
          for (i=0; i<nrules; i++) {
              const s = this.readInt();
              atn.ruleToStartState[i] = atn.states[s];
              if ( atn.grammarType === ATNType.LEXER ) {
                  let tokenType = this.readInt();
                  if (tokenType === 0xFFFF) {
                      tokenType = Token$7.EOF;
                  }
                  atn.ruleToTokenType[i] = tokenType;
              }
          }
          atn.ruleToStopState = initArray(nrules, 0);
          for (i=0; i<atn.states.length; i++) {
              const state = atn.states[i];
              if (!(state instanceof RuleStopState$2)) {
                  continue;
              }
              atn.ruleToStopState[state.ruleIndex] = state;
              atn.ruleToStartState[state.ruleIndex].stopState = state;
          }
      }

      readModes(atn) {
          const nmodes = this.readInt();
          for (let i=0; i<nmodes; i++) {
              let s = this.readInt();
              atn.modeToStartState.push(atn.states[s]);
          }
      }

      readSets(atn, sets, readUnicode) {
          const m = this.readInt();
          for (let i=0; i<m; i++) {
              const iset = new IntervalSet$4();
              sets.push(iset);
              const n = this.readInt();
              const containsEof = this.readInt();
              if (containsEof!==0) {
                  iset.addOne(-1);
              }
              for (let j=0; j<n; j++) {
                  const i1 = readUnicode();
                  const i2 = readUnicode();
                  iset.addRange(i1, i2);
              }
          }
      }

      readEdges(atn, sets) {
          let i, j, state, trans, target;
          const nedges = this.readInt();
          for (i=0; i<nedges; i++) {
              const src = this.readInt();
              const trg = this.readInt();
              const ttype = this.readInt();
              const arg1 = this.readInt();
              const arg2 = this.readInt();
              const arg3 = this.readInt();
              trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
              const srcState = atn.states[src];
              srcState.addTransition(trans);
          }
          // edges for rule stop states can be derived, so they aren't serialized
          for (i=0; i<atn.states.length; i++) {
              state = atn.states[i];
              for (j=0; j<state.transitions.length; j++) {
                  const t = state.transitions[j];
                  if (!(t instanceof RuleTransition$2)) {
                      continue;
                  }
                  let outermostPrecedenceReturn = -1;
                  if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
                      if (t.precedence === 0) {
                          outermostPrecedenceReturn = t.target.ruleIndex;
                      }
                  }

                  trans = new EpsilonTransition$1(t.followState, outermostPrecedenceReturn);
                  atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
              }
          }

          for (i=0; i<atn.states.length; i++) {
              state = atn.states[i];
              if (state instanceof BlockStartState$1) {
                  // we need to know the end state to set its start state
                  if (state.endState === null) {
                      throw ("IllegalState");
                  }
                  // block end states can only be associated to a single block start
                  // state
                  if ( state.endState.startState !== null) {
                      throw ("IllegalState");
                  }
                  state.endState.startState = state;
              }
              if (state instanceof PlusLoopbackState$1) {
                  for (j=0; j<state.transitions.length; j++) {
                      target = state.transitions[j].target;
                      if (target instanceof PlusBlockStartState$1) {
                          target.loopBackState = state;
                      }
                  }
              } else if (state instanceof StarLoopbackState$1) {
                  for (j=0; j<state.transitions.length; j++) {
                      target = state.transitions[j].target;
                      if (target instanceof StarLoopEntryState$1) {
                          target.loopBackState = state;
                      }
                  }
              }
          }
      }

      readDecisions(atn) {
          const ndecisions = this.readInt();
          for (let i=0; i<ndecisions; i++) {
              const s = this.readInt();
              const decState = atn.states[s];
              atn.decisionToState.push(decState);
              decState.decision = i;
          }
      }

      readLexerActions(atn) {
          if (atn.grammarType === ATNType.LEXER) {
              const count = this.readInt();
              atn.lexerActions = initArray(count, null);
              for (let i=0; i<count; i++) {
                  const actionType = this.readInt();
                  let data1 = this.readInt();
                  if (data1 === 0xFFFF) {
                      data1 = -1;
                  }
                  let data2 = this.readInt();
                  if (data2 === 0xFFFF) {
                      data2 = -1;
                  }

                  atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);
              }
          }
      }

      generateRuleBypassTransitions(atn) {
          let i;
          const count = atn.ruleToStartState.length;
          for(i=0; i<count; i++) {
              atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
          }
          for(i=0; i<count; i++) {
              this.generateRuleBypassTransition(atn, i);
          }
      }

      generateRuleBypassTransition(atn, idx) {
          let i, state;
          const bypassStart = new BasicBlockStartState$1();
          bypassStart.ruleIndex = idx;
          atn.addState(bypassStart);

          const bypassStop = new BlockEndState$1();
          bypassStop.ruleIndex = idx;
          atn.addState(bypassStop);

          bypassStart.endState = bypassStop;
          atn.defineDecisionState(bypassStart);

          bypassStop.startState = bypassStart;

          let excludeTransition = null;
          let endState = null;

          if (atn.ruleToStartState[idx].isPrecedenceRule) {
              // wrap from the beginning of the rule to the StarLoopEntryState
              endState = null;
              for(i=0; i<atn.states.length; i++) {
                  state = atn.states[i];
                  if (this.stateIsEndStateFor(state, idx)) {
                      endState = state;
                      excludeTransition = state.loopBackState.transitions[0];
                      break;
                  }
              }
              if (excludeTransition === null) {
                  throw ("Couldn't identify final state of the precedence rule prefix section.");
              }
          } else {
              endState = atn.ruleToStopState[idx];
          }

          // all non-excluded transitions that currently target end state need to
          // target blockEnd instead
          for(i=0; i<atn.states.length; i++) {
              state = atn.states[i];
              for(let j=0; j<state.transitions.length; j++) {
                  const transition = state.transitions[j];
                  if (transition === excludeTransition) {
                      continue;
                  }
                  if (transition.target === endState) {
                      transition.target = bypassStop;
                  }
              }
          }

          // all transitions leaving the rule start state need to leave blockStart
          // instead
          const ruleToStartState = atn.ruleToStartState[idx];
          const count = ruleToStartState.transitions.length;
          while ( count > 0) {
              bypassStart.addTransition(ruleToStartState.transitions[count-1]);
              ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
          }
          // link the new states
          atn.ruleToStartState[idx].addTransition(new EpsilonTransition$1(bypassStart));
          bypassStop.addTransition(new EpsilonTransition$1(endState));

          const matchState = new BasicState$1();
          atn.addState(matchState);
          matchState.addTransition(new AtomTransition$2(bypassStop, atn.ruleToTokenType[idx]));
          bypassStart.addTransition(new EpsilonTransition$1(matchState));
      }

      stateIsEndStateFor(state, idx) {
          if ( state.ruleIndex !== idx) {
              return null;
          }
          if (!( state instanceof StarLoopEntryState$1)) {
              return null;
          }
          const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
          if (!( maybeLoopEndState instanceof LoopEndState$1)) {
              return null;
          }
          if (maybeLoopEndState.epsilonOnlyTransitions &&
              (maybeLoopEndState.transitions[0].target instanceof RuleStopState$2)) {
              return state;
          } else {
              return null;
          }
      }

      /**
       * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
       * the {@link StarLoopEntryState//isPrecedenceDecision} field to the
       * correct value.
       * @param atn The ATN.
       */
      markPrecedenceDecisions(atn) {
          for(let i=0; i<atn.states.length; i++) {
              const state = atn.states[i];
              if (!( state instanceof StarLoopEntryState$1)) {
                  continue;
              }
              // We analyze the ATN to determine if this ATN decision state is the
              // decision for the closure block that determines whether a
              // precedence rule should continue or complete.
              if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
                  const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
                  if (maybeLoopEndState instanceof LoopEndState$1) {
                      if ( maybeLoopEndState.epsilonOnlyTransitions &&
                              (maybeLoopEndState.transitions[0].target instanceof RuleStopState$2)) {
                          state.isPrecedenceDecision = true;
                      }
                  }
              }
          }
      }

      verifyATN(atn) {
          if (!this.deserializationOptions.verifyATN) {
              return;
          }
          // verify assumptions
          for(let i=0; i<atn.states.length; i++) {
              const state = atn.states[i];
              if (state === null) {
                  continue;
              }
              this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
              if (state instanceof PlusBlockStartState$1) {
                  this.checkCondition(state.loopBackState !== null);
              } else  if (state instanceof StarLoopEntryState$1) {
                  this.checkCondition(state.loopBackState !== null);
                  this.checkCondition(state.transitions.length === 2);
                  if (state.transitions[0].target instanceof StarBlockStartState$1) {
                      this.checkCondition(state.transitions[1].target instanceof LoopEndState$1);
                      this.checkCondition(!state.nonGreedy);
                  } else if (state.transitions[0].target instanceof LoopEndState$1) {
                      this.checkCondition(state.transitions[1].target instanceof StarBlockStartState$1);
                      this.checkCondition(state.nonGreedy);
                  } else {
                      throw("IllegalState");
                  }
              } else if (state instanceof StarLoopbackState$1) {
                  this.checkCondition(state.transitions.length === 1);
                  this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState$1);
              } else if (state instanceof LoopEndState$1) {
                  this.checkCondition(state.loopBackState !== null);
              } else if (state instanceof RuleStartState$1) {
                  this.checkCondition(state.stopState !== null);
              } else if (state instanceof BlockStartState$1) {
                  this.checkCondition(state.endState !== null);
              } else if (state instanceof BlockEndState$1) {
                  this.checkCondition(state.startState !== null);
              } else if (state instanceof DecisionState$2) {
                  this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
              } else {
                  this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState$2));
              }
          }
      }

      checkCondition(condition, message) {
          if (!condition) {
              if (message === undefined || message===null) {
                  message = "IllegalState";
              }
              throw (message);
          }
      }

      readInt() {
          return this.data[this.pos++];
      }

      readInt32() {
          const low = this.readInt();
          const high = this.readInt();
          return low | (high << 16);
      }

      readLong() {
          const low = this.readInt32();
          const high = this.readInt32();
          return (low & 0x00000000FFFFFFFF) | (high << 32);
      }

      readUUID() {
          const bb = [];
          for(let i=7;i>=0;i--) {
              const int = this.readInt();
              /* jshint bitwise: false */
              bb[(2*i)+1] = int & 0xFF;
              bb[2*i] = (int >> 8) & 0xFF;
          }
          return byteToHex[bb[0]] + byteToHex[bb[1]] +
          byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
          byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
          byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
          byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
          byteToHex[bb[10]] + byteToHex[bb[11]] +
          byteToHex[bb[12]] + byteToHex[bb[13]] +
          byteToHex[bb[14]] + byteToHex[bb[15]];
      }

      edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {
          const target = atn.states[trg];
          switch(type) {
          case Transition$1.EPSILON:
              return new EpsilonTransition$1(target);
          case Transition$1.RANGE:
              return arg3 !== 0 ? new RangeTransition$1(target, Token$7.EOF, arg2) : new RangeTransition$1(target, arg1, arg2);
          case Transition$1.RULE:
              return new RuleTransition$2(atn.states[arg1], arg2, arg3, target);
          case Transition$1.PREDICATE:
              return new PredicateTransition$1(target, arg1, arg2, arg3 !== 0);
          case Transition$1.PRECEDENCE:
              return new PrecedencePredicateTransition$1(target, arg1);
          case Transition$1.ATOM:
              return arg3 !== 0 ? new AtomTransition$2(target, Token$7.EOF) : new AtomTransition$2(target, arg1);
          case Transition$1.ACTION:
              return new ActionTransition$1(target, arg1, arg2, arg3 !== 0);
          case Transition$1.SET:
              return new SetTransition$1(target, sets[arg1]);
          case Transition$1.NOT_SET:
              return new NotSetTransition$2(target, sets[arg1]);
          case Transition$1.WILDCARD:
              return new WildcardTransition$2(target);
          default:
              throw "The specified transition type: " + type + " is not valid.";
          }
      }

      stateFactory(type, ruleIndex) {
          if (this.stateFactories === null) {
              const sf = [];
              sf[ATNState$1.INVALID_TYPE] = null;
              sf[ATNState$1.BASIC] = () => new BasicState$1();
              sf[ATNState$1.RULE_START] = () => new RuleStartState$1();
              sf[ATNState$1.BLOCK_START] = () => new BasicBlockStartState$1();
              sf[ATNState$1.PLUS_BLOCK_START] = () => new PlusBlockStartState$1();
              sf[ATNState$1.STAR_BLOCK_START] = () => new StarBlockStartState$1();
              sf[ATNState$1.TOKEN_START] = () => new TokensStartState$1();
              sf[ATNState$1.RULE_STOP] = () => new RuleStopState$2();
              sf[ATNState$1.BLOCK_END] = () => new BlockEndState$1();
              sf[ATNState$1.STAR_LOOP_BACK] = () => new StarLoopbackState$1();
              sf[ATNState$1.STAR_LOOP_ENTRY] = () => new StarLoopEntryState$1();
              sf[ATNState$1.PLUS_LOOP_BACK] = () => new PlusLoopbackState$1();
              sf[ATNState$1.LOOP_END] = () => new LoopEndState$1();
              this.stateFactories = sf;
          }
          if (type>this.stateFactories.length || this.stateFactories[type] === null) {
              throw("The specified state type " + type + " is not valid.");
          } else {
              const s = this.stateFactories[type]();
              if (s!==null) {
                  s.ruleIndex = ruleIndex;
                  return s;
              }
          }
      }

      lexerActionFactory(type, data1, data2) {
          if (this.actionFactories === null) {
              const af = [];
              af[LexerActionType$1.CHANNEL] = (data1, data2) => new LexerChannelAction$1(data1);
              af[LexerActionType$1.CUSTOM] = (data1, data2) => new LexerCustomAction$1(data1, data2);
              af[LexerActionType$1.MODE] = (data1, data2) => new LexerModeAction$1(data1);
              af[LexerActionType$1.MORE] = (data1, data2) => LexerMoreAction$1.INSTANCE;
              af[LexerActionType$1.POP_MODE] = (data1, data2) => LexerPopModeAction$1.INSTANCE;
              af[LexerActionType$1.PUSH_MODE] = (data1, data2) => new LexerPushModeAction$1(data1);
              af[LexerActionType$1.SKIP] = (data1, data2) => LexerSkipAction$1.INSTANCE;
              af[LexerActionType$1.TYPE] = (data1, data2) => new LexerTypeAction$1(data1);
              this.actionFactories = af;
          }
          if (type>this.actionFactories.length || this.actionFactories[type] === null) {
              throw("The specified lexer action type " + type + " is not valid.");
          } else {
              return this.actionFactories[type](data1, data2);
          }
      }
  }

  function createByteToHex() {
  	const bth = [];
  	for (let i = 0; i < 256; i++) {
  		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
  	}
  	return bth;
  }

  const byteToHex = createByteToHex();


  var ATNDeserializer_1 = ATNDeserializer;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */
  /**
   * Provides an empty default implementation of {@link ANTLRErrorListener}. The
   * default implementation of each method does nothing, but can be overridden as
   * necessary.
   */
  class ErrorListener {
      syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
      }

      reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
      }

      reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
      }

      reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
      }
  }

  /**
   * {@inheritDoc}
   *
   * <p>
   * This implementation prints messages to {@link System//err} containing the
   * values of {@code line}, {@code charPositionInLine}, and {@code msg} using
   * the following format.</p>
   *
   * <pre>
   * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
   * </pre>
   *
   */
  class ConsoleErrorListener extends ErrorListener {
      constructor() {
          super();
      }

      syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
          console.error("line " + line + ":" + column + " " + msg);
      }
  }


  /**
   * Provides a default instance of {@link ConsoleErrorListener}.
   */
  ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

  class ProxyErrorListener extends ErrorListener {
      constructor(delegates) {
          super();
          if (delegates===null) {
              throw "delegates";
          }
          this.delegates = delegates;
          return this;
      }

      syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
          this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));
      }

      reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
          this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));
      }

      reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
          this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));
      }

      reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
          this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));
      }
  }

  var ErrorListener_1 = {ErrorListener, ConsoleErrorListener, ProxyErrorListener};

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$8} = Token_1;
  const {ConsoleErrorListener: ConsoleErrorListener$1} = ErrorListener_1;
  const {ProxyErrorListener: ProxyErrorListener$1} = ErrorListener_1;

  class Recognizer {
      constructor() {
          this._listeners = [ ConsoleErrorListener$1.INSTANCE ];
          this._interp = null;
          this._stateNumber = -1;
      }

      checkVersion(toolVersion) {
          const runtimeVersion = "4.9";
          if (runtimeVersion!==toolVersion) {
              console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
          }
      }

      addErrorListener(listener) {
          this._listeners.push(listener);
      }

      removeErrorListeners() {
          this._listeners = [];
      }

      getTokenTypeMap() {
          const tokenNames = this.getTokenNames();
          if (tokenNames===null) {
              throw("The current recognizer does not provide a list of token names.");
          }
          let result = this.tokenTypeMapCache[tokenNames];
          if(result===undefined) {
              result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
              result.EOF = Token$8.EOF;
              this.tokenTypeMapCache[tokenNames] = result;
          }
          return result;
      }

      /**
       * Get a map from rule names to rule indexes.
       * <p>Used for XPath and tree pattern compilation.</p>
       */
      getRuleIndexMap() {
          const ruleNames = this.ruleNames;
          if (ruleNames===null) {
              throw("The current recognizer does not provide a list of rule names.");
          }
          let result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?
          if(result===undefined) {
              result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
              this.ruleIndexMapCache[ruleNames] = result;
          }
          return result;
      }

      getTokenType(tokenName) {
          const ttype = this.getTokenTypeMap()[tokenName];
          if (ttype !==undefined) {
              return ttype;
          } else {
              return Token$8.INVALID_TYPE;
          }
      }

      // What is the error header, normally line/character position information?
      getErrorHeader(e) {
          const line = e.getOffendingToken().line;
          const column = e.getOffendingToken().column;
          return "line " + line + ":" + column;
      }

      /**
       * How should a token be displayed in an error message? The default
       * is to display just the text, but during development you might
       * want to have a lot of information spit out.  Override in that case
       * to use t.toString() (which, for CommonToken, dumps everything about
       * the token). This is better than forcing you to override a method in
       * your token objects because you don't have to go modify your lexer
       * so that it creates a new Java type.
       *
       * @deprecated This method is not called by the ANTLR 4 Runtime. Specific
       * implementations of {@link ANTLRErrorStrategy} may provide a similar
       * feature when necessary. For example, see
       * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/
      getTokenErrorDisplay(t) {
          if (t===null) {
              return "<no token>";
          }
          let s = t.text;
          if (s===null) {
              if (t.type===Token$8.EOF) {
                  s = "<EOF>";
              } else {
                  s = "<" + t.type + ">";
              }
          }
          s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
          return "'" + s + "'";
      }

      getErrorListenerDispatch() {
          return new ProxyErrorListener$1(this._listeners);
      }

      /**
       * subclass needs to override these if there are sempreds or actions
       * that the ATN interp needs to execute
       */
      sempred(localctx, ruleIndex, actionIndex) {
          return true;
      }

      precpred(localctx , precedence) {
          return true;
      }

      get state(){
          return this._stateNumber;
      }

      set state(state) {
          this._stateNumber = state;
      }
  }

  Recognizer.tokenTypeMapCache = {};
  Recognizer.ruleIndexMapCache = {};

  var Recognizer_1 = Recognizer;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const CommonToken$1 = Token_1.CommonToken;

  class TokenFactory {}

  /**
   * This default implementation of {@link TokenFactory} creates
   * {@link CommonToken} objects.
   */
  class CommonTokenFactory extends TokenFactory {
      constructor(copyText) {
          super();
          /**
           * Indicates whether {@link CommonToken//setText} should be called after
           * constructing tokens to explicitly set the text. This is useful for cases
           * where the input stream might not be able to provide arbitrary substrings
           * of text from the input after the lexer creates a token (e.g. the
           * implementation of {@link CharStream//getText} in
           * {@link UnbufferedCharStream} throws an
           * {@link UnsupportedOperationException}). Explicitly setting the token text
           * allows {@link Token//getText} to be called at any time regardless of the
           * input stream implementation.
           *
           * <p>
           * The default value is {@code false} to avoid the performance and memory
           * overhead of copying text for every token unless explicitly requested.</p>
           */
          this.copyText = copyText===undefined ? false : copyText;
      }

      create(source, type, text, channel, start, stop, line, column) {
          const t = new CommonToken$1(source, type, channel, start, stop);
          t.line = line;
          t.column = column;
          if (text !==null) {
              t.text = text;
          } else if (this.copyText && source[1] !==null) {
              t.text = source[1].getText(start,stop);
          }
          return t;
      }

      createThin(type, text) {
          const t = new CommonToken$1(null, type);
          t.text = text;
          return t;
      }
  }

  /**
   * The default {@link CommonTokenFactory} instance.
   *
   * <p>
   * This token factory does not explicitly copy token text when constructing
   * tokens.</p>
   */
  CommonTokenFactory.DEFAULT = new CommonTokenFactory();

  var CommonTokenFactory_1 = CommonTokenFactory;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  /**
   * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
   *  3 kinds of errors: prediction errors, failed predicate errors, and
   *  mismatched input errors. In each case, the parser knows where it is
   *  in the input, where it is in the ATN, the rule invocation stack,
   *  and what kind of problem occurred.
   */

  const {PredicateTransition: PredicateTransition$2} = Transition_1;

  class RecognitionException extends Error {
      constructor(params) {
          super(params.message);
          if (!!Error.captureStackTrace) {
              Error.captureStackTrace(this, RecognitionException);
          }
          this.message = params.message;
          this.recognizer = params.recognizer;
          this.input = params.input;
          this.ctx = params.ctx;
          /**
           * The current {@link Token} when an error occurred. Since not all streams
           * support accessing symbols by index, we have to track the {@link Token}
           * instance itself
          */
          this.offendingToken = null;
          /**
           * Get the ATN state number the parser was in at the time the error
           * occurred. For {@link NoViableAltException} and
           * {@link LexerNoViableAltException} exceptions, this is the
           * {@link DecisionState} number. For others, it is the state whose outgoing
           * edge we couldn't match.
           */
          this.offendingState = -1;
          if (this.recognizer!==null) {
              this.offendingState = this.recognizer.state;
          }
      }

      /**
       * Gets the set of input symbols which could potentially follow the
       * previously matched symbol at the time this exception was thrown.
       *
       * <p>If the set of expected tokens is not known and could not be computed,
       * this method returns {@code null}.</p>
       *
       * @return The set of token types that could potentially follow the current
       * state in the ATN, or {@code null} if the information is not available.
       */
      getExpectedTokens() {
          if (this.recognizer!==null) {
              return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
          } else {
              return null;
          }
      }

      // <p>If the state number is not known, this method returns -1.</p>
      toString() {
          return this.message;
      }
  }

  class LexerNoViableAltException extends RecognitionException {
      constructor(lexer, input, startIndex, deadEndConfigs) {
          super({message: "", recognizer: lexer, input: input, ctx: null});
          this.startIndex = startIndex;
          this.deadEndConfigs = deadEndConfigs;
      }

      toString() {
          let symbol = "";
          if (this.startIndex >= 0 && this.startIndex < this.input.size) {
              symbol = this.input.getText((this.startIndex,this.startIndex));
          }
          return "LexerNoViableAltException" + symbol;
      }
  }


  /**
   * Indicates that the parser could not decide which of two or more paths
   * to take based upon the remaining input. It tracks the starting token
   * of the offending input and also knows where the parser was
   * in the various paths when the error. Reported by reportNoViableAlternative()
   */
  class NoViableAltException extends RecognitionException {
      constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
          ctx = ctx || recognizer._ctx;
          offendingToken = offendingToken || recognizer.getCurrentToken();
          startToken = startToken || recognizer.getCurrentToken();
          input = input || recognizer.getInputStream();
          super({message: "", recognizer: recognizer, input: input, ctx: ctx});
          // Which configurations did we try at input.index() that couldn't match
          // input.LT(1)?//
          this.deadEndConfigs = deadEndConfigs;
          // The token object at the start index; the input stream might
          // not be buffering tokens so get a reference to it. (At the
          // time the error occurred, of course the stream needs to keep a
          // buffer all of the tokens but later we might not have access to those.)
          this.startToken = startToken;
          this.offendingToken = offendingToken;
      }
  }

  /**
   * This signifies any kind of mismatched input exceptions such as
   * when the current input does not match the expected token.
  */
  class InputMismatchException extends RecognitionException {
      constructor(recognizer) {
          super({message: "", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});
          this.offendingToken = recognizer.getCurrentToken();
      }
  }

  function formatMessage(predicate, message) {
      if (message !==null) {
          return message;
      } else {
          return "failed predicate: {" + predicate + "}?";
      }
  }

  /**
   * A semantic predicate failed during validation. Validation of predicates
   * occurs when normally parsing the alternative just like matching a token.
   * Disambiguating predicate evaluation occurs when we test a predicate during
   * prediction.
  */
  class FailedPredicateException extends RecognitionException {
      constructor(recognizer, predicate, message) {
          super({
              message: formatMessage(predicate, message || null), recognizer: recognizer,
              input: recognizer.getInputStream(), ctx: recognizer._ctx
          });
          const s = recognizer._interp.atn.states[recognizer.state];
          const trans = s.transitions[0];
          if (trans instanceof PredicateTransition$2) {
              this.ruleIndex = trans.ruleIndex;
              this.predicateIndex = trans.predIndex;
          } else {
              this.ruleIndex = 0;
              this.predicateIndex = 0;
          }
          this.predicate = predicate;
          this.offendingToken = recognizer.getCurrentToken();
      }
  }


  class ParseCancellationException extends Error{
      constructor() {
          super();
          Error.captureStackTrace(this, ParseCancellationException);
      }
  }

  var Errors = {
      RecognitionException,
      NoViableAltException,
      LexerNoViableAltException,
      InputMismatchException,
      FailedPredicateException,
      ParseCancellationException
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$9} = Token_1;


  const {RecognitionException: RecognitionException$1} = Errors;
  const {LexerNoViableAltException: LexerNoViableAltException$1} = Errors;

  /**
   * A lexer is recognizer that draws input symbols from a character stream.
   * lexer grammars result in a subclass of this object. A Lexer object
   * uses simplified match() and error recovery mechanisms in the interest of speed.
   */
  class Lexer extends Recognizer_1 {
  	constructor(input) {
  		super();
  		this._input = input;
  		this._factory = CommonTokenFactory_1.DEFAULT;
  		this._tokenFactorySourcePair = [ this, input ];

  		this._interp = null; // child classes must populate this

  		/**
  		 * The goal of all lexer rules/methods is to create a token object.
  		 * this is an instance variable as multiple rules may collaborate to
  		 * create a single token. nextToken will return this object after
  		 * matching lexer rule(s). If you subclass to allow multiple token
  		 * emissions, then set this to the last token to be matched or
  		 * something nonnull so that the auto token emit mechanism will not
  		 * emit another token.
  		 */
  		this._token = null;

  		/**
  		 * What character index in the stream did the current token start at?
  		 * Needed, for example, to get the text for current token. Set at
  		 * the start of nextToken.
  		 */
  		this._tokenStartCharIndex = -1;

  		// The line on which the first character of the token resides///
  		this._tokenStartLine = -1;

  		// The character position of first character within the line///
  		this._tokenStartColumn = -1;

  		// Once we see EOF on char stream, next token will be EOF.
  		// If you have DONE : EOF ; then you see DONE EOF.
  		this._hitEOF = false;

  		// The channel number for the current token///
  		this._channel = Token$9.DEFAULT_CHANNEL;

  		// The token type for the current token///
  		this._type = Token$9.INVALID_TYPE;

  		this._modeStack = [];
  		this._mode = Lexer.DEFAULT_MODE;

  		/**
  		 * You can set the text for the current token to override what is in
  		 * the input char buffer. Use setText() or can set this instance var.
  		 */
  		this._text = null;
  	}

  	reset() {
  		// wack Lexer state variables
  		if (this._input !== null) {
  			this._input.seek(0); // rewind the input
  		}
  		this._token = null;
  		this._type = Token$9.INVALID_TYPE;
  		this._channel = Token$9.DEFAULT_CHANNEL;
  		this._tokenStartCharIndex = -1;
  		this._tokenStartColumn = -1;
  		this._tokenStartLine = -1;
  		this._text = null;

  		this._hitEOF = false;
  		this._mode = Lexer.DEFAULT_MODE;
  		this._modeStack = [];

  		this._interp.reset();
  	}

  // Return a token from this source; i.e., match a token on the char stream.
  	nextToken() {
  		if (this._input === null) {
  			throw "nextToken requires a non-null input stream.";
  		}

  		/**
  		 * Mark start location in char stream so unbuffered streams are
  		 * guaranteed at least have text of current token
  		 */
  		const tokenStartMarker = this._input.mark();
  		try {
  			while (true) {
  				if (this._hitEOF) {
  					this.emitEOF();
  					return this._token;
  				}
  				this._token = null;
  				this._channel = Token$9.DEFAULT_CHANNEL;
  				this._tokenStartCharIndex = this._input.index;
  				this._tokenStartColumn = this._interp.column;
  				this._tokenStartLine = this._interp.line;
  				this._text = null;
  				let continueOuter = false;
  				while (true) {
  					this._type = Token$9.INVALID_TYPE;
  					let ttype = Lexer.SKIP;
  					try {
  						ttype = this._interp.match(this._input, this._mode);
  					} catch (e) {
  						if(e instanceof RecognitionException$1) {
  							this.notifyListeners(e); // report error
  							this.recover(e);
  						} else {
  							console.log(e.stack);
  							throw e;
  						}
  					}
  					if (this._input.LA(1) === Token$9.EOF) {
  						this._hitEOF = true;
  					}
  					if (this._type === Token$9.INVALID_TYPE) {
  						this._type = ttype;
  					}
  					if (this._type === Lexer.SKIP) {
  						continueOuter = true;
  						break;
  					}
  					if (this._type !== Lexer.MORE) {
  						break;
  					}
  				}
  				if (continueOuter) {
  					continue;
  				}
  				if (this._token === null) {
  					this.emit();
  				}
  				return this._token;
  			}
  		} finally {
  			// make sure we release marker after match or
  			// unbuffered char stream will keep buffering
  			this._input.release(tokenStartMarker);
  		}
  	}

  	/**
  	 * Instruct the lexer to skip creating a token for current lexer rule
  	 * and look for another token. nextToken() knows to keep looking when
  	 * a lexer rule finishes with token set to SKIP_TOKEN. Recall that
  	 * if token==null at end of any token rule, it creates one for you
  	 * and emits it.
  	 */
  	skip() {
  		this._type = Lexer.SKIP;
  	}

  	more() {
  		this._type = Lexer.MORE;
  	}

  	mode(m) {
  		this._mode = m;
  	}

  	pushMode(m) {
  		if (this._interp.debug) {
  			console.log("pushMode " + m);
  		}
  		this._modeStack.push(this._mode);
  		this.mode(m);
  	}

  	popMode() {
  		if (this._modeStack.length === 0) {
  			throw "Empty Stack";
  		}
  		if (this._interp.debug) {
  			console.log("popMode back to " + this._modeStack.slice(0, -1));
  		}
  		this.mode(this._modeStack.pop());
  		return this._mode;
  	}

  	/**
  	 * By default does not support multiple emits per nextToken invocation
  	 * for efficiency reasons. Subclass and override this method, nextToken,
  	 * and getToken (to push tokens into a list and pull from that list
  	 * rather than a single variable as this implementation does).
  	 */
  	emitToken(token) {
  		this._token = token;
  	}

  	/**
  	 * The standard method called to automatically emit a token at the
  	 * outermost lexical rule. The token object should point into the
  	 * char buffer start..stop. If there is a text override in 'text',
  	 * use that to set the token's text. Override this method to emit
  	 * custom Token objects or provide a new factory.
  	 */
  	emit() {
  		const t = this._factory.create(this._tokenFactorySourcePair, this._type,
  				this._text, this._channel, this._tokenStartCharIndex, this
  						.getCharIndex() - 1, this._tokenStartLine,
  				this._tokenStartColumn);
  		this.emitToken(t);
  		return t;
  	}

  	emitEOF() {
  		const cpos = this.column;
  		const lpos = this.line;
  		const eof = this._factory.create(this._tokenFactorySourcePair, Token$9.EOF,
  				null, Token$9.DEFAULT_CHANNEL, this._input.index,
  				this._input.index - 1, lpos, cpos);
  		this.emitToken(eof);
  		return eof;
  	}

  // What is the index of the current character of lookahead?///
  	getCharIndex() {
  		return this._input.index;
  	}

  	/**
  	 * Return a list of all Token objects in input char stream.
  	 * Forces load of all tokens. Does not include EOF token.
  	 */
  	getAllTokens() {
  		const tokens = [];
  		let t = this.nextToken();
  		while (t.type !== Token$9.EOF) {
  			tokens.push(t);
  			t = this.nextToken();
  		}
  		return tokens;
  	}

  	notifyListeners(e) {
  		const start = this._tokenStartCharIndex;
  		const stop = this._input.index;
  		const text = this._input.getText(start, stop);
  		const msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
  		const listener = this.getErrorListenerDispatch();
  		listener.syntaxError(this, null, this._tokenStartLine,
  				this._tokenStartColumn, msg, e);
  	}

  	getErrorDisplay(s) {
  		const d = [];
  		for (let i = 0; i < s.length; i++) {
  			d.push(s[i]);
  		}
  		return d.join('');
  	}

  	getErrorDisplayForChar(c) {
  		if (c.charCodeAt(0) === Token$9.EOF) {
  			return "<EOF>";
  		} else if (c === '\n') {
  			return "\\n";
  		} else if (c === '\t') {
  			return "\\t";
  		} else if (c === '\r') {
  			return "\\r";
  		} else {
  			return c;
  		}
  	}

  	getCharErrorDisplay(c) {
  		return "'" + this.getErrorDisplayForChar(c) + "'";
  	}

  	/**
  	 * Lexers can normally match any char in it's vocabulary after matching
  	 * a token, so do the easy thing and just kill a character and hope
  	 * it all works out. You can instead use the rule invocation stack
  	 * to do sophisticated error recovery if you are in a fragment rule.
  	 */
  	recover(re) {
  		if (this._input.LA(1) !== Token$9.EOF) {
  			if (re instanceof LexerNoViableAltException$1) {
  				// skip a char and try again
  				this._interp.consume(this._input);
  			} else {
  				// TODO: Do we lose character or line position information?
  				this._input.consume();
  			}
  		}
  	}

  	get inputStream(){
  		return this._input;
  	}

  	set inputStream(input) {
  		this._input = null;
  		this._tokenFactorySourcePair = [ this, this._input ];
  		this.reset();
  		this._input = input;
  		this._tokenFactorySourcePair = [ this, this._input ];
  	}

  	get sourceName(){
  		return this._input.sourceName;
  	}

  	get type(){
  		return this.type;
  	}

  	set type(type) {
  		this._type = type;
  	}

  	get line(){
  		return this._interp.line;
  	}

  	set line(line) {
  		this._interp.line = line;
  	}

  	get column(){
  		return this._interp.column;
  	}

  	set column(column) {
  		this._interp.column = column;
  	}

  	get text(){
  		if (this._text !== null) {
  			return this._text;
  		} else {
  			return this._interp.getText(this._input);
  		}
  	}

  	set text(text) {
  		this._text = text;
  	}
  }




  Lexer.DEFAULT_MODE = 0;
  Lexer.MORE = -2;
  Lexer.SKIP = -3;

  Lexer.DEFAULT_TOKEN_CHANNEL = Token$9.DEFAULT_CHANNEL;
  Lexer.HIDDEN = Token$9.HIDDEN_CHANNEL;
  Lexer.MIN_CHAR_VALUE = 0x0000;
  Lexer.MAX_CHAR_VALUE = 0x10FFFF;

  // Set the char stream and reset the lexer


  var Lexer_1 = Lexer;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {SemanticContext: SemanticContext$2} = SemanticContext_1;
  const {merge: merge$1} = PredictionContext_1;

  function hashATNConfig(c) {
  	return c.hashCodeForConfigSet();
  }

  function equalATNConfigs(a, b) {
  	if ( a===b ) {
  		return true;
  	} else if ( a===null || b===null ) {
  		return false;
  	} else
         return a.equalsForConfigSet(b);
   }

  /**
   * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
   * info about the set, with support for combining similar configurations using a
   * graph-structured stack
   */
  class ATNConfigSet {
  	constructor(fullCtx) {
  		/**
  		 * The reason that we need this is because we don't want the hash map to use
  		 * the standard hash code and equals. We need all configurations with the
  		 * same
  		 * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
  		 * doubles
  		 * the number of objects associated with ATNConfigs. The other solution is
  		 * to
  		 * use a hash table that lets us specify the equals/hashcode operation.
  		 * All configs but hashed by (s, i, _, pi) not including context. Wiped out
  		 * when we go readonly as this set becomes a DFA state
  		 */
  		this.configLookup = new Utils.Set(hashATNConfig, equalATNConfigs);
  		/**
  		 * Indicates that this configuration set is part of a full context
  		 * LL prediction. It will be used to determine how to merge $. With SLL
  		 * it's a wildcard whereas it is not for LL context merge
  		 */
  		this.fullCtx = fullCtx === undefined ? true : fullCtx;
  		/**
  		 * Indicates that the set of configurations is read-only. Do not
  		 * allow any code to manipulate the set; DFA states will point at
  		 * the sets and they must not change. This does not protect the other
  		 * fields; in particular, conflictingAlts is set after
  		 * we've made this readonly
  		 */
  		this.readOnly = false;
  		// Track the elements as they are added to the set; supports get(i)///
  		this.configs = [];

  		// TODO: these fields make me pretty uncomfortable but nice to pack up info
  		// together, saves recomputation
  		// TODO: can we track conflicts as they are added to save scanning configs
  		// later?
  		this.uniqueAlt = 0;
  		this.conflictingAlts = null;

  		/**
  		 * Used in parser and lexer. In lexer, it indicates we hit a pred
  		 * while computing a closure operation. Don't make a DFA state from this
  		 */
  		this.hasSemanticContext = false;
  		this.dipsIntoOuterContext = false;

  		this.cachedHashCode = -1;
  	}

  	/**
  	 * Adding a new config means merging contexts with existing configs for
  	 * {@code (s, i, pi, _)}, where {@code s} is the
  	 * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
  	 * {@code pi} is the {@link ATNConfig//semanticContext}. We use
  	 * {@code (s,i,pi)} as key.
  	 *
  	 * <p>This method updates {@link //dipsIntoOuterContext} and
  	 * {@link //hasSemanticContext} when necessary.</p>
  	 */
  	add(config, mergeCache) {
  		if (mergeCache === undefined) {
  			mergeCache = null;
  		}
  		if (this.readOnly) {
  			throw "This set is readonly";
  		}
  		if (config.semanticContext !== SemanticContext$2.NONE) {
  			this.hasSemanticContext = true;
  		}
  		if (config.reachesIntoOuterContext > 0) {
  			this.dipsIntoOuterContext = true;
  		}
  		const existing = this.configLookup.add(config);
  		if (existing === config) {
  			this.cachedHashCode = -1;
  			this.configs.push(config); // track order here
  			return true;
  		}
  		// a previous (s,i,pi,_), merge with it and save result
  		const rootIsWildcard = !this.fullCtx;
  		const merged = merge$1(existing.context, config.context, rootIsWildcard, mergeCache);
  		/**
  		 * no need to check for existing.context, config.context in cache
  		 * since only way to create new graphs is "call rule" and here. We
  		 * cache at both places
  		 */
  		existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
  		// make sure to preserve the precedence filter suppression during the merge
  		if (config.precedenceFilterSuppressed) {
  			existing.precedenceFilterSuppressed = true;
  		}
  		existing.context = merged; // replace context; no need to alt mapping
  		return true;
  	}

  	getStates() {
  		const states = new Utils.Set();
  		for (let i = 0; i < this.configs.length; i++) {
  			states.add(this.configs[i].state);
  		}
  		return states;
  	}

  	getPredicates() {
  		const preds = [];
  		for (let i = 0; i < this.configs.length; i++) {
  			const c = this.configs[i].semanticContext;
  			if (c !== SemanticContext$2.NONE) {
  				preds.push(c.semanticContext);
  			}
  		}
  		return preds;
  	}

  	optimizeConfigs(interpreter) {
  		if (this.readOnly) {
  			throw "This set is readonly";
  		}
  		if (this.configLookup.length === 0) {
  			return;
  		}
  		for (let i = 0; i < this.configs.length; i++) {
  			const config = this.configs[i];
  			config.context = interpreter.getCachedContext(config.context);
  		}
  	}

  	addAll(coll) {
  		for (let i = 0; i < coll.length; i++) {
  			this.add(coll[i]);
  		}
  		return false;
  	}

  	equals(other) {
  		return this === other ||
  			(other instanceof ATNConfigSet &&
  			Utils.equalArrays(this.configs, other.configs) &&
  			this.fullCtx === other.fullCtx &&
  			this.uniqueAlt === other.uniqueAlt &&
  			this.conflictingAlts === other.conflictingAlts &&
  			this.hasSemanticContext === other.hasSemanticContext &&
  			this.dipsIntoOuterContext === other.dipsIntoOuterContext);
  	}

  	hashCode() {
  		const hash = new Utils.Hash();
  		hash.update(this.configs);
  		return hash.finish();
  	}

  	updateHashCode(hash) {
  		if (this.readOnly) {
  			if (this.cachedHashCode === -1) {
  				this.cachedHashCode = this.hashCode();
  			}
  			hash.update(this.cachedHashCode);
  		} else {
  			hash.update(this.hashCode());
  		}
  	}

  	isEmpty() {
  		return this.configs.length === 0;
  	}

  	contains(item) {
  		if (this.configLookup === null) {
  			throw "This method is not implemented for readonly sets.";
  		}
  		return this.configLookup.contains(item);
  	}

  	containsFast(item) {
  		if (this.configLookup === null) {
  			throw "This method is not implemented for readonly sets.";
  		}
  		return this.configLookup.containsFast(item);
  	}

  	clear() {
  		if (this.readOnly) {
  			throw "This set is readonly";
  		}
  		this.configs = [];
  		this.cachedHashCode = -1;
  		this.configLookup = new Utils.Set();
  	}

  	setReadonly(readOnly) {
  		this.readOnly = readOnly;
  		if (readOnly) {
  			this.configLookup = null; // can't mod, no need for lookup cache
  		}
  	}

  	toString() {
  		return Utils.arrayToString(this.configs) +
  			(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
  			(this.uniqueAlt !== ATN_1.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
  			(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
  			(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
  	}

  	get items(){
  		return this.configs;
  	}

  	get length(){
  		return this.configs.length;
  	}
  }


  class OrderedATNConfigSet extends ATNConfigSet {
  	constructor() {
  		super();
  		this.configLookup = new Utils.Set();
  	}
  }

  var ATNConfigSet_1 = {
  	ATNConfigSet,
  	OrderedATNConfigSet
  };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {ATNConfigSet: ATNConfigSet$1} = ATNConfigSet_1;
  const {Hash: Hash$5, Set: Set$3} = Utils;

  /**
   * Map a predicate to a predicted alternative.
   */
  class PredPrediction {
  	constructor(pred, alt) {
  		this.alt = alt;
  		this.pred = pred;
  	}

  	toString() {
  		return "(" + this.pred + ", " + this.alt + ")";
  	}
  }

  /**
   * A DFA state represents a set of possible ATN configurations.
   * As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
   * to keep track of all possible states the ATN can be in after
   * reading each input symbol. That is to say, after reading
   * input a1a2..an, the DFA is in a state that represents the
   * subset T of the states of the ATN that are reachable from the
   * ATN's start state along some path labeled a1a2..an."
   * In conventional NFA&rarr;DFA conversion, therefore, the subset T
   * would be a bitset representing the set of states the
   * ATN could be in. We need to track the alt predicted by each
   * state as well, however. More importantly, we need to maintain
   * a stack of states, tracking the closure operations as they
   * jump from rule to rule, emulating rule invocations (method calls).
   * I have to add a stack to simulate the proper lookahead sequences for
   * the underlying LL grammar from which the ATN was derived.
   *
   * <p>I use a set of ATNConfig objects not simple states. An ATNConfig
   * is both a state (ala normal conversion) and a RuleContext describing
   * the chain of rules (if any) followed to arrive at that state.</p>
   *
   * <p>A DFA state may have multiple references to a particular state,
   * but with different ATN contexts (with same or different alts)
   * meaning that state was reached via a different set of rule invocations.</p>
   */
  class DFAState {
  	constructor(stateNumber, configs) {
  		if (stateNumber === null) {
  			stateNumber = -1;
  		}
  		if (configs === null) {
  			configs = new ATNConfigSet$1();
  		}
  		this.stateNumber = stateNumber;
  		this.configs = configs;
  		/**
  		 * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
  		 * {@link Token//EOF} maps to {@code edges[0]}.
  		 */
  		this.edges = null;
  		this.isAcceptState = false;
  		/**
  		 * if accept state, what ttype do we match or alt do we predict?
  		 * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}
  		 * {@code !=null} or {@link //requiresFullContext}.
  		 */
  		this.prediction = 0;
  		this.lexerActionExecutor = null;
  		/**
  		 * Indicates that this state was created during SLL prediction that
  		 * discovered a conflict between the configurations in the state. Future
  		 * {@link ParserATNSimulator//execATN} invocations immediately jumped doing
  		 * full context prediction if this field is true.
  		 */
  		this.requiresFullContext = false;
  		/**
  		 * During SLL parsing, this is a list of predicates associated with the
  		 * ATN configurations of the DFA state. When we have predicates,
  		 * {@link //requiresFullContext} is {@code false} since full context
  		 * prediction evaluates predicates
  		 * on-the-fly. If this is not null, then {@link //prediction} is
  		 * {@link ATN//INVALID_ALT_NUMBER}.
  		 *
  		 * <p>We only use these for non-{@link //requiresFullContext} but
  		 * conflicting states. That
  		 * means we know from the context (it's $ or we don't dip into outer
  		 * context) that it's an ambiguity not a conflict.</p>
  		 *
  		 * <p>This list is computed by {@link
  		 * ParserATNSimulator//predicateDFAState}.</p>
  		 */
  		this.predicates = null;
  		return this;
  	}

  	/**
  	 * Get the set of all alts mentioned by all ATN configurations in this
  	 * DFA state.
  	 */
  	getAltSet() {
  		const alts = new Set$3();
  		if (this.configs !== null) {
  			for (let i = 0; i < this.configs.length; i++) {
  				const c = this.configs[i];
  				alts.add(c.alt);
  			}
  		}
  		if (alts.length === 0) {
  			return null;
  		} else {
  			return alts;
  		}
  	}

  	/**
  	 * Two {@link DFAState} instances are equal if their ATN configuration sets
  	 * are the same. This method is used to see if a state already exists.
  	 *
  	 * <p>Because the number of alternatives and number of ATN configurations are
  	 * finite, there is a finite number of DFA states that can be processed.
  	 * This is necessary to show that the algorithm terminates.</p>
  	 *
  	 * <p>Cannot test the DFA state numbers here because in
  	 * {@link ParserATNSimulator//addDFAState} we need to know if any other state
  	 * exists that has this exact set of ATN configurations. The
  	 * {@link //stateNumber} is irrelevant.</p>
  	 */
  	equals(other) {
  		// compare set of ATN configurations in this set with other
  		return this === other ||
  				(other instanceof DFAState &&
  					this.configs.equals(other.configs));
  	}

  	toString() {
  		let s = "" + this.stateNumber + ":" + this.configs;
  		if(this.isAcceptState) {
  			s = s + "=>";
  			if (this.predicates !== null)
  				s = s + this.predicates;
  			else
  				s = s + this.prediction;
  		}
  		return s;
  	}

  	hashCode() {
  		const hash = new Hash$5();
  		hash.update(this.configs);
  		return hash.finish();
  	}
  }

  var DFAState_1 = { DFAState, PredPrediction };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {DFAState: DFAState$1} = DFAState_1;
  const {ATNConfigSet: ATNConfigSet$2} = ATNConfigSet_1;
  const {getCachedPredictionContext: getCachedPredictionContext$1} = PredictionContext_1;
  const {Map: Map$3} = Utils;

  class ATNSimulator {
      constructor(atn, sharedContextCache) {
          /**
           * The context cache maps all PredictionContext objects that are ==
           * to a single cached copy. This cache is shared across all contexts
           * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
           * to use only cached nodes/graphs in addDFAState(). We don't want to
           * fill this during closure() since there are lots of contexts that
           * pop up but are not used ever again. It also greatly slows down closure().
           *
           * <p>This cache makes a huge difference in memory and a little bit in speed.
           * For the Java grammar on java.*, it dropped the memory requirements
           * at the end from 25M to 16M. We don't store any of the full context
           * graphs in the DFA because they are limited to local context only,
           * but apparently there's a lot of repetition there as well. We optimize
           * the config contexts before storing the config set in the DFA states
           * by literally rebuilding them with cached subgraphs only.</p>
           *
           * <p>I tried a cache for use during closure operations, that was
           * whacked after each adaptivePredict(). It cost a little bit
           * more time I think and doesn't save on the overall footprint
           * so it's not worth the complexity.</p>
           */
          this.atn = atn;
          this.sharedContextCache = sharedContextCache;
          return this;
      }

      getCachedContext(context) {
          if (this.sharedContextCache ===null) {
              return context;
          }
          const visited = new Map$3();
          return getCachedPredictionContext$1(context, this.sharedContextCache, visited);
      }
  }

  // Must distinguish between missing edge and edge we know leads nowhere///
  ATNSimulator.ERROR = new DFAState$1(0x7FFFFFFF, new ATNConfigSet$2());


  var ATNSimulator_1 = ATNSimulator;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {hashStuff: hashStuff$1} = Utils;
  const {LexerIndexedCustomAction: LexerIndexedCustomAction$1} = LexerAction_1;

  class LexerActionExecutor {
  	/**
  	 * Represents an executor for a sequence of lexer actions which traversed during
  	 * the matching operation of a lexer rule (token).
  	 *
  	 * <p>The executor tracks position information for position-dependent lexer actions
  	 * efficiently, ensuring that actions appearing only at the end of the rule do
  	 * not cause bloating of the {@link DFA} created for the lexer.</p>
  	 */
  	constructor(lexerActions) {
  		this.lexerActions = lexerActions === null ? [] : lexerActions;
  		/**
  		 * Caches the result of {@link //hashCode} since the hash code is an element
  		 * of the performance-critical {@link LexerATNConfig//hashCode} operation
  		 */
  		this.cachedHashCode = hashStuff$1(lexerActions); // "".join([str(la) for la in
  		// lexerActions]))
  		return this;
  	}

  	/**
  	 * Creates a {@link LexerActionExecutor} which encodes the current offset
  	 * for position-dependent lexer actions.
  	 *
  	 * <p>Normally, when the executor encounters lexer actions where
  	 * {@link LexerAction//isPositionDependent} returns {@code true}, it calls
  	 * {@link IntStream//seek} on the input {@link CharStream} to set the input
  	 * position to the <em>end</em> of the current token. This behavior provides
  	 * for efficient DFA representation of lexer actions which appear at the end
  	 * of a lexer rule, even when the lexer rule matches a variable number of
  	 * characters.</p>
  	 *
  	 * <p>Prior to traversing a match transition in the ATN, the current offset
  	 * from the token start index is assigned to all position-dependent lexer
  	 * actions which have not already been assigned a fixed offset. By storing
  	 * the offsets relative to the token start index, the DFA representation of
  	 * lexer actions which appear in the middle of tokens remains efficient due
  	 * to sharing among tokens of the same length, regardless of their absolute
  	 * position in the input stream.</p>
  	 *
  	 * <p>If the current executor already has offsets assigned to all
  	 * position-dependent lexer actions, the method returns {@code this}.</p>
  	 *
  	 * @param offset The current offset to assign to all position-dependent
  	 * lexer actions which do not already have offsets assigned.
  	 *
  	 * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets
  	 * for all position-dependent lexer actions.
  	 */
  	fixOffsetBeforeMatch(offset) {
  		let updatedLexerActions = null;
  		for (let i = 0; i < this.lexerActions.length; i++) {
  			if (this.lexerActions[i].isPositionDependent &&
  					!(this.lexerActions[i] instanceof LexerIndexedCustomAction$1)) {
  				if (updatedLexerActions === null) {
  					updatedLexerActions = this.lexerActions.concat([]);
  				}
  				updatedLexerActions[i] = new LexerIndexedCustomAction$1(offset,
  						this.lexerActions[i]);
  			}
  		}
  		if (updatedLexerActions === null) {
  			return this;
  		} else {
  			return new LexerActionExecutor(updatedLexerActions);
  		}
  	}

  	/**
  	 * Execute the actions encapsulated by this executor within the context of a
  	 * particular {@link Lexer}.
  	 *
  	 * <p>This method calls {@link IntStream//seek} to set the position of the
  	 * {@code input} {@link CharStream} prior to calling
  	 * {@link LexerAction//execute} on a position-dependent action. Before the
  	 * method returns, the input position will be restored to the same position
  	 * it was in when the method was invoked.</p>
  	 *
  	 * @param lexer The lexer instance.
  	 * @param input The input stream which is the source for the current token.
  	 * When this method is called, the current {@link IntStream//index} for
  	 * {@code input} should be the start of the following token, i.e. 1
  	 * character past the end of the current token.
  	 * @param startIndex The token start index. This value may be passed to
  	 * {@link IntStream//seek} to set the {@code input} position to the beginning
  	 * of the token.
  	 */
  	execute(lexer, input, startIndex) {
  		let requiresSeek = false;
  		const stopIndex = input.index;
  		try {
  			for (let i = 0; i < this.lexerActions.length; i++) {
  				let lexerAction = this.lexerActions[i];
  				if (lexerAction instanceof LexerIndexedCustomAction$1) {
  					const offset = lexerAction.offset;
  					input.seek(startIndex + offset);
  					lexerAction = lexerAction.action;
  					requiresSeek = (startIndex + offset) !== stopIndex;
  				} else if (lexerAction.isPositionDependent) {
  					input.seek(stopIndex);
  					requiresSeek = false;
  				}
  				lexerAction.execute(lexer);
  			}
  		} finally {
  			if (requiresSeek) {
  				input.seek(stopIndex);
  			}
  		}
  	}

  	hashCode() {
  		return this.cachedHashCode;
  	}

  	updateHashCode(hash) {
  		hash.update(this.cachedHashCode);
  	}

  	equals(other) {
  		if (this === other) {
  			return true;
  		} else if (!(other instanceof LexerActionExecutor)) {
  			return false;
  		} else if (this.cachedHashCode != other.cachedHashCode) {
  			return false;
  		} else if (this.lexerActions.length != other.lexerActions.length) {
  			return false;
  		} else {
  			const numActions = this.lexerActions.length;
  			for (let idx = 0; idx < numActions; ++idx) {
  				if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
  					return false;
  				}
  			}
  			return true;
  		}
  	}

  	/**
  	 * Creates a {@link LexerActionExecutor} which executes the actions for
  	 * the input {@code lexerActionExecutor} followed by a specified
  	 * {@code lexerAction}.
  	 *
  	 * @param lexerActionExecutor The executor for actions already traversed by
  	 * the lexer while matching a token within a particular
  	 * {@link LexerATNConfig}. If this is {@code null}, the method behaves as
  	 * though it were an empty executor.
  	 * @param lexerAction The lexer action to execute after the actions
  	 * specified in {@code lexerActionExecutor}.
  	 *
  	 * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions
  	 * of {@code lexerActionExecutor} and {@code lexerAction}.
  	 */
  	static append(lexerActionExecutor, lexerAction) {
  		if (lexerActionExecutor === null) {
  			return new LexerActionExecutor([ lexerAction ]);
  		}
  		const lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
  		return new LexerActionExecutor(lexerActions);
  	}
  }


  var LexerActionExecutor_1 = LexerActionExecutor;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$a} = Token_1;



  const {DFAState: DFAState$2} = DFAState_1;
  const {OrderedATNConfigSet: OrderedATNConfigSet$1} = ATNConfigSet_1;
  const {PredictionContext: PredictionContext$2} = PredictionContext_1;
  const {SingletonPredictionContext: SingletonPredictionContext$2} = PredictionContext_1;
  const {RuleStopState: RuleStopState$3} = ATNState_1;
  const {LexerATNConfig: LexerATNConfig$1} = ATNConfig_1;
  const {Transition: Transition$2} = Transition_1;

  const {LexerNoViableAltException: LexerNoViableAltException$2} = Errors;

  function resetSimState(sim) {
  	sim.index = -1;
  	sim.line = 0;
  	sim.column = -1;
  	sim.dfaState = null;
  }

  class SimState {
  	constructor() {
  		resetSimState(this);
  	}

  	reset() {
  		resetSimState(this);
  	}
  }

  class LexerATNSimulator extends ATNSimulator_1 {
  	/**
  	 * When we hit an accept state in either the DFA or the ATN, we
  	 * have to notify the character stream to start buffering characters
  	 * via {@link IntStream//mark} and record the current state. The current sim state
  	 * includes the current index into the input, the current line,
  	 * and current character position in that line. Note that the Lexer is
  	 * tracking the starting line and characterization of the token. These
  	 * variables track the "state" of the simulator when it hits an accept state.
  	 *
  	 * <p>We track these variables separately for the DFA and ATN simulation
  	 * because the DFA simulation often has to fail over to the ATN
  	 * simulation. If the ATN simulation fails, we need the DFA to fall
  	 * back to its previously accepted state, if any. If the ATN succeeds,
  	 * then the ATN does the accept and the DFA simulator that invoked it
  	 * can simply return the predicted token type.</p>
  	 */
  	constructor(recog, atn, decisionToDFA, sharedContextCache) {
  		super(atn, sharedContextCache);
  		this.decisionToDFA = decisionToDFA;
  		this.recog = recog;
  		/**
  		 * The current token's starting index into the character stream.
  		 * Shared across DFA to ATN simulation in case the ATN fails and the
  		 * DFA did not have a previous accept state. In this case, we use the
  		 * ATN-generated exception object
  		 */
  		this.startIndex = -1;
  		// line number 1..n within the input///
  		this.line = 1;
  		/**
  		 * The index of the character relative to the beginning of the line
  		 * 0..n-1
  		 */
  		this.column = 0;
  		this.mode = Lexer_1.DEFAULT_MODE;
  		/**
  		 * Used during DFA/ATN exec to record the most recent accept configuration
  		 * info
  		 */
  		this.prevAccept = new SimState();
  	}

  	copyState(simulator) {
  		this.column = simulator.column;
  		this.line = simulator.line;
  		this.mode = simulator.mode;
  		this.startIndex = simulator.startIndex;
  	}

  	match(input, mode) {
  		this.match_calls += 1;
  		this.mode = mode;
  		const mark = input.mark();
  		try {
  			this.startIndex = input.index;
  			this.prevAccept.reset();
  			const dfa = this.decisionToDFA[mode];
  			if (dfa.s0 === null) {
  				return this.matchATN(input);
  			} else {
  				return this.execATN(input, dfa.s0);
  			}
  		} finally {
  			input.release(mark);
  		}
  	}

  	reset() {
  		this.prevAccept.reset();
  		this.startIndex = -1;
  		this.line = 1;
  		this.column = 0;
  		this.mode = Lexer_1.DEFAULT_MODE;
  	}

  	matchATN(input) {
  		const startState = this.atn.modeToStartState[this.mode];

  		if (LexerATNSimulator.debug) {
  			console.log("matchATN mode " + this.mode + " start: " + startState);
  		}
  		const old_mode = this.mode;
  		const s0_closure = this.computeStartState(input, startState);
  		const suppressEdge = s0_closure.hasSemanticContext;
  		s0_closure.hasSemanticContext = false;

  		const next = this.addDFAState(s0_closure);
  		if (!suppressEdge) {
  			this.decisionToDFA[this.mode].s0 = next;
  		}

  		const predict = this.execATN(input, next);

  		if (LexerATNSimulator.debug) {
  			console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
  		}
  		return predict;
  	}

  	execATN(input, ds0) {
  		if (LexerATNSimulator.debug) {
  			console.log("start state closure=" + ds0.configs);
  		}
  		if (ds0.isAcceptState) {
  			// allow zero-length tokens
  			this.captureSimState(this.prevAccept, input, ds0);
  		}
  		let t = input.LA(1);
  		let s = ds0; // s is current/from DFA state

  		while (true) { // while more work
  			if (LexerATNSimulator.debug) {
  				console.log("execATN loop starting closure: " + s.configs);
  			}

  			/**
  			 * As we move src->trg, src->trg, we keep track of the previous trg to
  			 * avoid looking up the DFA state again, which is expensive.
  			 * If the previous target was already part of the DFA, we might
  			 * be able to avoid doing a reach operation upon t. If s!=null,
  			 * it means that semantic predicates didn't prevent us from
  			 * creating a DFA state. Once we know s!=null, we check to see if
  			 * the DFA state has an edge already for t. If so, we can just reuse
  			 * it's configuration set; there's no point in re-computing it.
  			 * This is kind of like doing DFA simulation within the ATN
  			 * simulation because DFA simulation is really just a way to avoid
  			 * computing reach/closure sets. Technically, once we know that
  			 * we have a previously added DFA state, we could jump over to
  			 * the DFA simulator. But, that would mean popping back and forth
  			 * a lot and making things more complicated algorithmically.
  			 * This optimization makes a lot of sense for loops within DFA.
  			 * A character will take us back to an existing DFA state
  			 * that already has lots of edges out of it. e.g., .* in comments.
  			 * print("Target for:" + str(s) + " and:" + str(t))
  			 */
  			let target = this.getExistingTargetState(s, t);
  			// print("Existing:" + str(target))
  			if (target === null) {
  				target = this.computeTargetState(input, s, t);
  				// print("Computed:" + str(target))
  			}
  			if (target === ATNSimulator_1.ERROR) {
  				break;
  			}
  			// If this is a consumable input element, make sure to consume before
  			// capturing the accept state so the input index, line, and char
  			// position accurately reflect the state of the interpreter at the
  			// end of the token.
  			if (t !== Token$a.EOF) {
  				this.consume(input);
  			}
  			if (target.isAcceptState) {
  				this.captureSimState(this.prevAccept, input, target);
  				if (t === Token$a.EOF) {
  					break;
  				}
  			}
  			t = input.LA(1);
  			s = target; // flip; current DFA target becomes new src/from state
  		}
  		return this.failOrAccept(this.prevAccept, input, s.configs, t);
  	}

  	/**
  	 * Get an existing target state for an edge in the DFA. If the target state
  	 * for the edge has not yet been computed or is otherwise not available,
  	 * this method returns {@code null}.
  	 *
  	 * @param s The current DFA state
  	 * @param t The next input symbol
  	 * @return The existing target DFA state for the given input symbol
  	 * {@code t}, or {@code null} if the target state for this edge is not
  	 * already cached
  	 */
  	getExistingTargetState(s, t) {
  		if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
  			return null;
  		}

  		let target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
  		if(target===undefined) {
  			target = null;
  		}
  		if (LexerATNSimulator.debug && target !== null) {
  			console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
  		}
  		return target;
  	}

  	/**
  	 * Compute a target state for an edge in the DFA, and attempt to add the
  	 * computed state and corresponding edge to the DFA.
  	 *
  	 * @param input The input stream
  	 * @param s The current DFA state
  	 * @param t The next input symbol
  	 *
  	 * @return The computed target DFA state for the given input symbol
  	 * {@code t}. If {@code t} does not lead to a valid DFA state, this method
  	 * returns {@link //ERROR}.
  	 */
  	computeTargetState(input, s, t) {
  		const reach = new OrderedATNConfigSet$1();
  		// if we don't find an existing DFA state
  		// Fill reach starting from closure, following t transitions
  		this.getReachableConfigSet(input, s.configs, reach, t);

  		if (reach.items.length === 0) { // we got nowhere on t from s
  			if (!reach.hasSemanticContext) {
  				// we got nowhere on t, don't throw out this knowledge; it'd
  				// cause a failover from DFA later.
  				this.addDFAEdge(s, t, ATNSimulator_1.ERROR);
  			}
  			// stop when we can't match any more char
  			return ATNSimulator_1.ERROR;
  		}
  		// Add an edge from s to target DFA found/created for reach
  		return this.addDFAEdge(s, t, null, reach);
  	}

  	failOrAccept(prevAccept, input, reach, t) {
  		if (this.prevAccept.dfaState !== null) {
  			const lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
  			this.accept(input, lexerActionExecutor, this.startIndex,
  					prevAccept.index, prevAccept.line, prevAccept.column);
  			return prevAccept.dfaState.prediction;
  		} else {
  			// if no accept and EOF is first char, return EOF
  			if (t === Token$a.EOF && input.index === this.startIndex) {
  				return Token$a.EOF;
  			}
  			throw new LexerNoViableAltException$2(this.recog, input, this.startIndex, reach);
  		}
  	}

  	/**
  	 * Given a starting configuration set, figure out all ATN configurations
  	 * we can reach upon input {@code t}. Parameter {@code reach} is a return
  	 * parameter.
  	 */
  	getReachableConfigSet(input, closure,
  			reach, t) {
  		// this is used to skip processing for configs which have a lower priority
  		// than a config that already reached an accept state for the same rule
  		let skipAlt = ATN_1.INVALID_ALT_NUMBER;
  		for (let i = 0; i < closure.items.length; i++) {
  			const cfg = closure.items[i];
  			const currentAltReachedAcceptState = (cfg.alt === skipAlt);
  			if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
  				continue;
  			}
  			if (LexerATNSimulator.debug) {
  				console.log("testing %s at %s\n", this.getTokenName(t), cfg
  						.toString(this.recog, true));
  			}
  			for (let j = 0; j < cfg.state.transitions.length; j++) {
  				const trans = cfg.state.transitions[j]; // for each transition
  				const target = this.getReachableTarget(trans, t);
  				if (target !== null) {
  					let lexerActionExecutor = cfg.lexerActionExecutor;
  					if (lexerActionExecutor !== null) {
  						lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
  					}
  					const treatEofAsEpsilon = (t === Token$a.EOF);
  					const config = new LexerATNConfig$1({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
  					if (this.closure(input, config, reach,
  							currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
  						// any remaining configs for this alt have a lower priority
  						// than the one that just reached an accept state.
  						skipAlt = cfg.alt;
  					}
  				}
  			}
  		}
  	}

  	accept(input, lexerActionExecutor,
  			   startIndex, index, line, charPos) {
  		   if (LexerATNSimulator.debug) {
  			   console.log("ACTION %s\n", lexerActionExecutor);
  		   }
  		   // seek to after last char in token
  		   input.seek(index);
  		   this.line = line;
  		   this.column = charPos;
  		   if (lexerActionExecutor !== null && this.recog !== null) {
  			   lexerActionExecutor.execute(this.recog, input, startIndex);
  		   }
  	   }

  	getReachableTarget(trans, t) {
  		if (trans.matches(t, 0, Lexer_1.MAX_CHAR_VALUE)) {
  			return trans.target;
  		} else {
  			return null;
  		}
  	}

  	computeStartState(input, p) {
  		const initialContext = PredictionContext$2.EMPTY;
  		const configs = new OrderedATNConfigSet$1();
  		for (let i = 0; i < p.transitions.length; i++) {
  			const target = p.transitions[i].target;
  			const cfg = new LexerATNConfig$1({state:target, alt:i+1, context:initialContext}, null);
  			this.closure(input, cfg, configs, false, false, false);
  		}
  		return configs;
  	}

  	/**
  	 * Since the alternatives within any lexer decision are ordered by
  	 * preference, this method stops pursuing the closure as soon as an accept
  	 * state is reached. After the first accept state is reached by depth-first
  	 * search from {@code config}, all other (potentially reachable) states for
  	 * this rule would have a lower priority.
  	 *
  	 * @return {Boolean} {@code true} if an accept state is reached, otherwise
  	 * {@code false}.
  	 */
  	closure(input, config, configs,
  			currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
  		let cfg = null;
  		if (LexerATNSimulator.debug) {
  			console.log("closure(" + config.toString(this.recog, true) + ")");
  		}
  		if (config.state instanceof RuleStopState$3) {
  			if (LexerATNSimulator.debug) {
  				if (this.recog !== null) {
  					console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
  				} else {
  					console.log("closure at rule stop %s\n", config);
  				}
  			}
  			if (config.context === null || config.context.hasEmptyPath()) {
  				if (config.context === null || config.context.isEmpty()) {
  					configs.add(config);
  					return true;
  				} else {
  					configs.add(new LexerATNConfig$1({ state:config.state, context:PredictionContext$2.EMPTY}, config));
  					currentAltReachedAcceptState = true;
  				}
  			}
  			if (config.context !== null && !config.context.isEmpty()) {
  				for (let i = 0; i < config.context.length; i++) {
  					if (config.context.getReturnState(i) !== PredictionContext$2.EMPTY_RETURN_STATE) {
  						const newContext = config.context.getParent(i); // "pop" return state
  						const returnState = this.atn.states[config.context.getReturnState(i)];
  						cfg = new LexerATNConfig$1({ state:returnState, context:newContext }, config);
  						currentAltReachedAcceptState = this.closure(input, cfg,
  								configs, currentAltReachedAcceptState, speculative,
  								treatEofAsEpsilon);
  					}
  				}
  			}
  			return currentAltReachedAcceptState;
  		}
  		// optimization
  		if (!config.state.epsilonOnlyTransitions) {
  			if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
  				configs.add(config);
  			}
  		}
  		for (let j = 0; j < config.state.transitions.length; j++) {
  			const trans = config.state.transitions[j];
  			cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
  			if (cfg !== null) {
  				currentAltReachedAcceptState = this.closure(input, cfg, configs,
  						currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
  			}
  		}
  		return currentAltReachedAcceptState;
  	}

  	// side-effect: can alter configs.hasSemanticContext
  	getEpsilonTarget(input, config, trans,
  			configs, speculative, treatEofAsEpsilon) {
  		let cfg = null;
  		if (trans.serializationType === Transition$2.RULE) {
  			const newContext = SingletonPredictionContext$2.create(config.context, trans.followState.stateNumber);
  			cfg = new LexerATNConfig$1( { state:trans.target, context:newContext}, config);
  		} else if (trans.serializationType === Transition$2.PRECEDENCE) {
  			throw "Precedence predicates are not supported in lexers.";
  		} else if (trans.serializationType === Transition$2.PREDICATE) {
  			// Track traversing semantic predicates. If we traverse,
  			// we cannot add a DFA state for this "reach" computation
  			// because the DFA would not test the predicate again in the
  			// future. Rather than creating collections of semantic predicates
  			// like v3 and testing them on prediction, v4 will test them on the
  			// fly all the time using the ATN not the DFA. This is slower but
  			// semantically it's not used that often. One of the key elements to
  			// this predicate mechanism is not adding DFA states that see
  			// predicates immediately afterwards in the ATN. For example,

  			// a : ID {p1}? | ID {p2}? ;

  			// should create the start state for rule 'a' (to save start state
  			// competition), but should not create target of ID state. The
  			// collection of ATN states the following ID references includes
  			// states reached by traversing predicates. Since this is when we
  			// test them, we cannot cash the DFA state target of ID.

  			if (LexerATNSimulator.debug) {
  				console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
  			}
  			configs.hasSemanticContext = true;
  			if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
  				cfg = new LexerATNConfig$1({ state:trans.target}, config);
  			}
  		} else if (trans.serializationType === Transition$2.ACTION) {
  			if (config.context === null || config.context.hasEmptyPath()) {
  				// execute actions anywhere in the start rule for a token.
  				//
  				// TODO: if the entry rule is invoked recursively, some
  				// actions may be executed during the recursive call. The
  				// problem can appear when hasEmptyPath() is true but
  				// isEmpty() is false. In this case, the config needs to be
  				// split into two contexts - one with just the empty path
  				// and another with everything but the empty path.
  				// Unfortunately, the current algorithm does not allow
  				// getEpsilonTarget to return two configurations, so
  				// additional modifications are needed before we can support
  				// the split operation.
  				const lexerActionExecutor = LexerActionExecutor_1.append(config.lexerActionExecutor,
  						this.atn.lexerActions[trans.actionIndex]);
  				cfg = new LexerATNConfig$1({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
  			} else {
  				// ignore actions in referenced rules
  				cfg = new LexerATNConfig$1( { state:trans.target}, config);
  			}
  		} else if (trans.serializationType === Transition$2.EPSILON) {
  			cfg = new LexerATNConfig$1({ state:trans.target}, config);
  		} else if (trans.serializationType === Transition$2.ATOM ||
  					trans.serializationType === Transition$2.RANGE ||
  					trans.serializationType === Transition$2.SET) {
  			if (treatEofAsEpsilon) {
  				if (trans.matches(Token$a.EOF, 0, Lexer_1.MAX_CHAR_VALUE)) {
  					cfg = new LexerATNConfig$1( { state:trans.target }, config);
  				}
  			}
  		}
  		return cfg;
  	}

  	/**
  	 * Evaluate a predicate specified in the lexer.
  	 *
  	 * <p>If {@code speculative} is {@code true}, this method was called before
  	 * {@link //consume} for the matched character. This method should call
  	 * {@link //consume} before evaluating the predicate to ensure position
  	 * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
  	 * and {@link Lexer//getcolumn}, properly reflect the current
  	 * lexer state. This method should restore {@code input} and the simulator
  	 * to the original state before returning (i.e. undo the actions made by the
  	 * call to {@link //consume}.</p>
  	 *
  	 * @param input The input stream.
  	 * @param ruleIndex The rule containing the predicate.
  	 * @param predIndex The index of the predicate within the rule.
  	 * @param speculative {@code true} if the current index in {@code input} is
  	 * one character before the predicate's location.
  	 *
  	 * @return {@code true} if the specified predicate evaluates to
  	 * {@code true}.
  	 */
  	evaluatePredicate(input, ruleIndex,
  			predIndex, speculative) {
  		// assume true if no recognizer was provided
  		if (this.recog === null) {
  			return true;
  		}
  		if (!speculative) {
  			return this.recog.sempred(null, ruleIndex, predIndex);
  		}
  		const savedcolumn = this.column;
  		const savedLine = this.line;
  		const index = input.index;
  		const marker = input.mark();
  		try {
  			this.consume(input);
  			return this.recog.sempred(null, ruleIndex, predIndex);
  		} finally {
  			this.column = savedcolumn;
  			this.line = savedLine;
  			input.seek(index);
  			input.release(marker);
  		}
  	}

  	captureSimState(settings, input, dfaState) {
  		settings.index = input.index;
  		settings.line = this.line;
  		settings.column = this.column;
  		settings.dfaState = dfaState;
  	}

  	addDFAEdge(from_, tk, to, cfgs) {
  		if (to === undefined) {
  			to = null;
  		}
  		if (cfgs === undefined) {
  			cfgs = null;
  		}
  		if (to === null && cfgs !== null) {
  			// leading to this call, ATNConfigSet.hasSemanticContext is used as a
  			// marker indicating dynamic predicate evaluation makes this edge
  			// dependent on the specific input sequence, so the static edge in the
  			// DFA should be omitted. The target DFAState is still created since
  			// execATN has the ability to resynchronize with the DFA state cache
  			// following the predicate evaluation step.
  			//
  			// TJP notes: next time through the DFA, we see a pred again and eval.
  			// If that gets us to a previously created (but dangling) DFA
  			// state, we can continue in pure DFA mode from there.
  			// /
  			const suppressEdge = cfgs.hasSemanticContext;
  			cfgs.hasSemanticContext = false;

  			to = this.addDFAState(cfgs);

  			if (suppressEdge) {
  				return to;
  			}
  		}
  		// add the edge
  		if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
  			// Only track edges within the DFA bounds
  			return to;
  		}
  		if (LexerATNSimulator.debug) {
  			console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
  		}
  		if (from_.edges === null) {
  			// make room for tokens 1..n and -1 masquerading as index 0
  			from_.edges = [];
  		}
  		from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

  		return to;
  	}

  	/**
  	 * Add a new DFA state if there isn't one with this set of
  	 * configurations already. This method also detects the first
  	 * configuration containing an ATN rule stop state. Later, when
  	 * traversing the DFA, we will know which rule to accept.
  	 */
  	addDFAState(configs) {
  		const proposed = new DFAState$2(null, configs);
  		let firstConfigWithRuleStopState = null;
  		for (let i = 0; i < configs.items.length; i++) {
  			const cfg = configs.items[i];
  			if (cfg.state instanceof RuleStopState$3) {
  				firstConfigWithRuleStopState = cfg;
  				break;
  			}
  		}
  		if (firstConfigWithRuleStopState !== null) {
  			proposed.isAcceptState = true;
  			proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
  			proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
  		}
  		const dfa = this.decisionToDFA[this.mode];
  		const existing = dfa.states.get(proposed);
  		if (existing!==null) {
  			return existing;
  		}
  		const newState = proposed;
  		newState.stateNumber = dfa.states.length;
  		configs.setReadonly(true);
  		newState.configs = configs;
  		dfa.states.add(newState);
  		return newState;
  	}

  	getDFA(mode) {
  		return this.decisionToDFA[mode];
  	}

  // Get the text matched so far for the current token.
  	getText(input) {
  		// index is first lookahead char, don't include.
  		return input.getText(this.startIndex, input.index - 1);
  	}

  	consume(input) {
  		const curChar = input.LA(1);
  		if (curChar === "\n".charCodeAt(0)) {
  			this.line += 1;
  			this.column = 0;
  		} else {
  			this.column += 1;
  		}
  		input.consume();
  	}

  	getTokenName(tt) {
  		if (tt === -1) {
  			return "EOF";
  		} else {
  			return "'" + String.fromCharCode(tt) + "'";
  		}
  	}
  }

  LexerATNSimulator.debug = false;
  LexerATNSimulator.dfa_debug = false;

  LexerATNSimulator.MIN_DFA_EDGE = 0;
  LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

  LexerATNSimulator.match_calls = 0;

  var LexerATNSimulator_1 = LexerATNSimulator;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Map: Map$4, BitSet: BitSet$2, AltDict: AltDict$1, hashStuff: hashStuff$2} = Utils;

  const {RuleStopState: RuleStopState$4} = ATNState_1;
  const {ATNConfigSet: ATNConfigSet$3} = ATNConfigSet_1;
  const {ATNConfig: ATNConfig$2} = ATNConfig_1;
  const {SemanticContext: SemanticContext$3} = SemanticContext_1;

  /**
   * This enumeration defines the prediction modes available in ANTLR 4 along with
   * utility methods for analyzing configuration sets for conflicts and/or
   * ambiguities.
   */
  const PredictionMode = {
      /**
       * The SLL(*) prediction mode. This prediction mode ignores the current
       * parser context when making predictions. This is the fastest prediction
       * mode, and provides correct results for many grammars. This prediction
       * mode is more powerful than the prediction mode provided by ANTLR 3, but
       * may result in syntax errors for grammar and input combinations which are
       * not SLL.
       *
       * <p>
       * When using this prediction mode, the parser will either return a correct
       * parse tree (i.e. the same parse tree that would be returned with the
       * {@link //LL} prediction mode), or it will report a syntax error. If a
       * syntax error is encountered when using the {@link //SLL} prediction mode,
       * it may be due to either an actual syntax error in the input or indicate
       * that the particular combination of grammar and input requires the more
       * powerful {@link //LL} prediction abilities to complete successfully.</p>
       *
       * <p>
       * This prediction mode does not provide any guarantees for prediction
       * behavior for syntactically-incorrect inputs.</p>
       */
      SLL: 0,

      /**
       * The LL(*) prediction mode. This prediction mode allows the current parser
       * context to be used for resolving SLL conflicts that occur during
       * prediction. This is the fastest prediction mode that guarantees correct
       * parse results for all combinations of grammars with syntactically correct
       * inputs.
       *
       * <p>
       * When using this prediction mode, the parser will make correct decisions
       * for all syntactically-correct grammar and input combinations. However, in
       * cases where the grammar is truly ambiguous this prediction mode might not
       * report a precise answer for <em>exactly which</em> alternatives are
       * ambiguous.</p>
       *
       * <p>
       * This prediction mode does not provide any guarantees for prediction
       * behavior for syntactically-incorrect inputs.</p>
       */
      LL: 1,

      /**
       *
       * The LL(*) prediction mode with exact ambiguity detection. In addition to
       * the correctness guarantees provided by the {@link //LL} prediction mode,
       * this prediction mode instructs the prediction algorithm to determine the
       * complete and exact set of ambiguous alternatives for every ambiguous
       * decision encountered while parsing.
       *
       * <p>
       * This prediction mode may be used for diagnosing ambiguities during
       * grammar development. Due to the performance overhead of calculating sets
       * of ambiguous alternatives, this prediction mode should be avoided when
       * the exact results are not necessary.</p>
       *
       * <p>
       * This prediction mode does not provide any guarantees for prediction
       * behavior for syntactically-incorrect inputs.</p>
       */
      LL_EXACT_AMBIG_DETECTION: 2,

      /**
       *
       * Computes the SLL prediction termination condition.
       *
       * <p>
       * This method computes the SLL prediction termination condition for both of
       * the following cases.</p>
       *
       * <ul>
       * <li>The usual SLL+LL fallback upon SLL conflict</li>
       * <li>Pure SLL without LL fallback</li>
       * </ul>
       *
       * <p><strong>COMBINED SLL+LL PARSING</strong></p>
       *
       * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
       * ensured regardless of how the termination condition is computed by this
       * method. Due to the substantially higher cost of LL prediction, the
       * prediction should only fall back to LL when the additional lookahead
       * cannot lead to a unique SLL prediction.</p>
       *
       * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
       * conflicting subsets should fall back to full LL, even if the
       * configuration sets don't resolve to the same alternative (e.g.
       * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
       * configuration, SLL could continue with the hopes that more lookahead will
       * resolve via one of those non-conflicting configurations.</p>
       *
       * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
       * stops when it sees only conflicting configuration subsets. In contrast,
       * full LL keeps going when there is uncertainty.</p>
       *
       * <p><strong>HEURISTIC</strong></p>
       *
       * <p>As a heuristic, we stop prediction when we see any conflicting subset
       * unless we see a state that only has one alternative associated with it.
       * The single-alt-state thing lets prediction continue upon rules like
       * (otherwise, it would admit defeat too soon):</p>
       *
       * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
       *
       * <p>When the ATN simulation reaches the state before {@code ';'}, it has a
       * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
       * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
       * processing this node because alternative to has another way to continue,
       * via {@code [6|2|[]]}.</p>
       *
       * <p>It also let's us continue for this rule:</p>
       *
       * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
       *
       * <p>After matching input A, we reach the stop state for rule A, state 1.
       * State 8 is the state right before B. Clearly alternatives 1 and 2
       * conflict and no amount of further lookahead will separate the two.
       * However, alternative 3 will be able to continue and so we do not stop
       * working on this state. In the previous example, we're concerned with
       * states associated with the conflicting alternatives. Here alt 3 is not
       * associated with the conflicting configs, but since we can continue
       * looking for input reasonably, don't declare the state done.</p>
       *
       * <p><strong>PURE SLL PARSING</strong></p>
       *
       * <p>To handle pure SLL parsing, all we have to do is make sure that we
       * combine stack contexts for configurations that differ only by semantic
       * predicate. From there, we can do the usual SLL termination heuristic.</p>
       *
       * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
       *
       * <p>SLL decisions don't evaluate predicates until after they reach DFA stop
       * states because they need to create the DFA cache that works in all
       * semantic situations. In contrast, full LL evaluates predicates collected
       * during start state computation so it can ignore predicates thereafter.
       * This means that SLL termination detection can totally ignore semantic
       * predicates.</p>
       *
       * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
       * semantic predicate contexts so we might see two configurations like the
       * following.</p>
       *
       * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
       *
       * <p>Before testing these configurations against others, we have to merge
       * {@code x} and {@code x'} (without modifying the existing configurations).
       * For example, we test {@code (x+x')==x''} when looking for conflicts in
       * the following configurations.</p>
       *
       * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
       *
       * <p>If the configuration set has predicates (as indicated by
       * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
       * the configurations to strip out all of the predicates so that a standard
       * {@link ATNConfigSet} will merge everything ignoring predicates.</p>
       */
      hasSLLConflictTerminatingPrediction: function( mode, configs) {
          // Configs in rule stop states indicate reaching the end of the decision
          // rule (local context) or end of start rule (full context). If all
          // configs meet this condition, then none of the configurations is able
          // to match additional input so we terminate prediction.
          //
          if (PredictionMode.allConfigsInRuleStopStates(configs)) {
              return true;
          }
          // pure SLL mode parsing
          if (mode === PredictionMode.SLL) {
              // Don't bother with combining configs from different semantic
              // contexts if we can fail over to full LL; costs more time
              // since we'll often fail over anyway.
              if (configs.hasSemanticContext) {
                  // dup configs, tossing out semantic predicates
                  const dup = new ATNConfigSet$3();
                  for(let i=0;i<configs.items.length;i++) {
                      let c = configs.items[i];
                      c = new ATNConfig$2({semanticContext:SemanticContext$3.NONE}, c);
                      dup.add(c);
                  }
                  configs = dup;
              }
              // now we have combined contexts for configs with dissimilar preds
          }
          // pure SLL or combined SLL+LL mode parsing
          const altsets = PredictionMode.getConflictingAltSubsets(configs);
          return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
      },

      /**
       * Checks if any configuration in {@code configs} is in a
       * {@link RuleStopState}. Configurations meeting this condition have reached
       * the end of the decision rule (local context) or end of start rule (full
       * context).
       *
       * @param configs the configuration set to test
       * @return {@code true} if any configuration in {@code configs} is in a
       * {@link RuleStopState}, otherwise {@code false}
       */
      hasConfigInRuleStopState: function(configs) {
          for(let i=0;i<configs.items.length;i++) {
              const c = configs.items[i];
              if (c.state instanceof RuleStopState$4) {
                  return true;
              }
          }
          return false;
      },

      /**
       * Checks if all configurations in {@code configs} are in a
       * {@link RuleStopState}. Configurations meeting this condition have reached
       * the end of the decision rule (local context) or end of start rule (full
       * context).
       *
       * @param configs the configuration set to test
       * @return {@code true} if all configurations in {@code configs} are in a
       * {@link RuleStopState}, otherwise {@code false}
       */
      allConfigsInRuleStopStates: function(configs) {
          for(let i=0;i<configs.items.length;i++) {
              const c = configs.items[i];
              if (!(c.state instanceof RuleStopState$4)) {
                  return false;
              }
          }
          return true;
      },

      /**
       *
       * Full LL prediction termination.
       *
       * <p>Can we stop looking ahead during ATN simulation or is there some
       * uncertainty as to which alternative we will ultimately pick, after
       * consuming more input? Even if there are partial conflicts, we might know
       * that everything is going to resolve to the same minimum alternative. That
       * means we can stop since no more lookahead will change that fact. On the
       * other hand, there might be multiple conflicts that resolve to different
       * minimums. That means we need more look ahead to decide which of those
       * alternatives we should predict.</p>
       *
       * <p>The basic idea is to split the set of configurations {@code C}, into
       * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
       * non-conflicting configurations. Two configurations conflict if they have
       * identical {@link ATNConfig//state} and {@link ATNConfig//context} values
       * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
       * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
       *
       * <p>Reduce these configuration subsets to the set of possible alternatives.
       * You can compute the alternative subsets in one pass as follows:</p>
       *
       * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
       * {@code C} holding {@code s} and {@code ctx} fixed.</p>
       *
       * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
       *
       * <pre>
       * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
       * alt and not pred
       * </pre>
       *
       * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
       *
       * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
       * {@code s} and {@code ctx}.</p>
       *
       * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
       * the union of these alternative subsets is a singleton, then no amount of
       * more lookahead will help us. We will always pick that alternative. If,
       * however, there is more than one alternative, then we are uncertain which
       * alternative to predict and must continue looking for resolution. We may
       * or may not discover an ambiguity in the future, even if there are no
       * conflicting subsets this round.</p>
       *
       * <p>The biggest sin is to terminate early because it means we've made a
       * decision but were uncertain as to the eventual outcome. We haven't used
       * enough lookahead. On the other hand, announcing a conflict too late is no
       * big deal; you will still have the conflict. It's just inefficient. It
       * might even look until the end of file.</p>
       *
       * <p>No special consideration for semantic predicates is required because
       * predicates are evaluated on-the-fly for full LL prediction, ensuring that
       * no configuration contains a semantic context during the termination
       * check.</p>
       *
       * <p><strong>CONFLICTING CONFIGS</strong></p>
       *
       * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
       * when {@code i!=j} but {@code x=x'}. Because we merge all
       * {@code (s, i, _)} configurations together, that means that there are at
       * most {@code n} configurations associated with state {@code s} for
       * {@code n} possible alternatives in the decision. The merged stacks
       * complicate the comparison of configuration contexts {@code x} and
       * {@code x'}. Sam checks to see if one is a subset of the other by calling
       * merge and checking to see if the merged result is either {@code x} or
       * {@code x'}. If the {@code x} associated with lowest alternative {@code i}
       * is the superset, then {@code i} is the only possible prediction since the
       * others resolve to {@code min(i)} as well. However, if {@code x} is
       * associated with {@code j>i} then at least one stack configuration for
       * {@code j} is not in conflict with alternative {@code i}. The algorithm
       * should keep going, looking for more lookahead due to the uncertainty.</p>
       *
       * <p>For simplicity, I'm doing a equality check between {@code x} and
       * {@code x'} that lets the algorithm continue to consume lookahead longer
       * than necessary. The reason I like the equality is of course the
       * simplicity but also because that is the test you need to detect the
       * alternatives that are actually in conflict.</p>
       *
       * <p><strong>CONTINUE/STOP RULE</strong></p>
       *
       * <p>Continue if union of resolved alternative sets from non-conflicting and
       * conflicting alternative subsets has more than one alternative. We are
       * uncertain about which alternative to predict.</p>
       *
       * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
       * alternatives are still in the running for the amount of input we've
       * consumed at this point. The conflicting sets let us to strip away
       * configurations that won't lead to more states because we resolve
       * conflicts to the configuration with a minimum alternate for the
       * conflicting set.</p>
       *
       * <p><strong>CASES</strong></p>
       *
       * <ul>
       *
       * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
       *
       * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
       * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
       * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
       * {@code {1,3}} =&gt; continue
       * </li>
       *
       * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
       * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
       * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
       * {@code {1}} =&gt; stop and predict 1</li>
       *
       * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
       * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
       * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
       * ambiguity {@code {1,2}}</li>
       *
       * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
       * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
       * {@code {2}} = {@code {1,2}} =&gt; continue</li>
       *
       * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
       * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
       * {@code {3}} = {@code {1,3}} =&gt; continue</li>
       *
       * </ul>
       *
       * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
       *
       * <p>If all states report the same conflicting set of alternatives, then we
       * know we have the exact ambiguity set.</p>
       *
       * <p><code>|A_<em>i</em>|&gt;1</code> and
       * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
       *
       * <p>In other words, we continue examining lookahead until all {@code A_i}
       * have more than one alternative and all {@code A_i} are the same. If
       * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
       * because the resolved set is {@code {1}}. To determine what the real
       * ambiguity is, we have to know whether the ambiguity is between one and
       * two or one and three so we keep going. We can only stop prediction when
       * we need exact ambiguity detection when the sets look like
       * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
       */
      resolvesToJustOneViableAlt: function(altsets) {
          return PredictionMode.getSingleViableAlt(altsets);
      },

      /**
       * Determines if every alternative subset in {@code altsets} contains more
       * than one alternative.
       *
       * @param altsets a collection of alternative subsets
       * @return {@code true} if every {@link BitSet} in {@code altsets} has
       * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
       */
      allSubsetsConflict: function(altsets) {
          return ! PredictionMode.hasNonConflictingAltSet(altsets);
      },
      /**
       * Determines if any single alternative subset in {@code altsets} contains
       * exactly one alternative.
       *
       * @param altsets a collection of alternative subsets
       * @return {@code true} if {@code altsets} contains a {@link BitSet} with
       * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
       */
      hasNonConflictingAltSet: function(altsets) {
          for(let i=0;i<altsets.length;i++) {
              const alts = altsets[i];
              if (alts.length===1) {
                  return true;
              }
          }
          return false;
      },


      /**
       * Determines if any single alternative subset in {@code altsets} contains
       * more than one alternative.
       *
       * @param altsets a collection of alternative subsets
       * @return {@code true} if {@code altsets} contains a {@link BitSet} with
       * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
       */
      hasConflictingAltSet: function(altsets) {
          for(let i=0;i<altsets.length;i++) {
              const alts = altsets[i];
              if (alts.length>1) {
                  return true;
              }
          }
          return false;
      },


      /**
       * Determines if every alternative subset in {@code altsets} is equivalent.
       *
       * @param altsets a collection of alternative subsets
       * @return {@code true} if every member of {@code altsets} is equal to the
       * others, otherwise {@code false}
       */
      allSubsetsEqual: function(altsets) {
          let first = null;
          for(let i=0;i<altsets.length;i++) {
              const alts = altsets[i];
              if (first === null) {
                  first = alts;
              } else if (alts!==first) {
                  return false;
              }
          }
          return true;
      },


      /**
       * Returns the unique alternative predicted by all alternative subsets in
       * {@code altsets}. If no such alternative exists, this method returns
       * {@link ATN//INVALID_ALT_NUMBER}.
       *
       * @param altsets a collection of alternative subsets
       */
      getUniqueAlt: function(altsets) {
          const all = PredictionMode.getAlts(altsets);
          if (all.length===1) {
              return all.minValue();
          } else {
              return ATN_1.INVALID_ALT_NUMBER;
          }
      },

      /**
       * Gets the complete set of represented alternatives for a collection of
       * alternative subsets. This method returns the union of each {@link BitSet}
       * in {@code altsets}.
       *
       * @param altsets a collection of alternative subsets
       * @return the set of represented alternatives in {@code altsets}
       */
      getAlts: function(altsets) {
          const all = new BitSet$2();
          altsets.map( function(alts) { all.or(alts); });
          return all;
      },

      /**
       * This function gets the conflicting alt subsets from a configuration set.
       * For each configuration {@code c} in {@code configs}:
       *
       * <pre>
       * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
       * alt and not pred
       * </pre>
       */
      getConflictingAltSubsets: function(configs) {
          const configToAlts = new Map$4();
          configToAlts.hashFunction = function(cfg) { hashStuff$2(cfg.state.stateNumber, cfg.context); };
          configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);};
          configs.items.map(function(cfg) {
              let alts = configToAlts.get(cfg);
              if (alts === null) {
                  alts = new BitSet$2();
                  configToAlts.put(cfg, alts);
              }
              alts.add(cfg.alt);
          });
          return configToAlts.getValues();
      },

      /**
       * Get a map from state to alt subset from a configuration set. For each
       * configuration {@code c} in {@code configs}:
       *
       * <pre>
       * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
       * </pre>
       */
      getStateToAltMap: function(configs) {
          const m = new AltDict$1();
          configs.items.map(function(c) {
              let alts = m.get(c.state);
              if (alts === null) {
                  alts = new BitSet$2();
                  m.put(c.state, alts);
              }
              alts.add(c.alt);
          });
          return m;
      },

      hasStateAssociatedWithOneAlt: function(configs) {
          const values = PredictionMode.getStateToAltMap(configs).values();
          for(let i=0;i<values.length;i++) {
              if (values[i].length===1) {
                  return true;
              }
          }
          return false;
      },

      getSingleViableAlt: function(altsets) {
          let result = null;
          for(let i=0;i<altsets.length;i++) {
              const alts = altsets[i];
              const minAlt = alts.minValue();
              if(result===null) {
                  result = minAlt;
              } else if(result!==minAlt) { // more than 1 viable alt
                  return ATN_1.INVALID_ALT_NUMBER;
              }
          }
          return result;
      }
  };

  var PredictionMode_1 = PredictionMode;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const INVALID_INTERVAL$2 = Tree_1.INVALID_INTERVAL;
  const TerminalNode$2 = Tree_1.TerminalNode;
  const TerminalNodeImpl$1 = Tree_1.TerminalNodeImpl;
  const ErrorNodeImpl$1 = Tree_1.ErrorNodeImpl;
  const Interval$2 = IntervalSet_1.Interval;

  /**
   * A rule invocation record for parsing.
   *
   *  Contains all of the information about the current rule not stored in the
   *  RuleContext. It handles parse tree children list, Any ATN state
   *  tracing, and the default values available for rule indications:
   *  start, stop, rule index, current alt number, current
   *  ATN state.
   *
   *  Subclasses made for each rule and grammar track the parameters,
   *  return values, locals, and labels specific to that rule. These
   *  are the objects that are returned from rules.
   *
   *  Note text is not an actual field of a rule return value; it is computed
   *  from start and stop using the input stream's toString() method.  I
   *  could add a ctor to this so that we can pass in and store the input
   *  stream, but I'm not sure we want to do that.  It would seem to be undefined
   *  to get the .text property anyway if the rule matches tokens from multiple
   *  input streams.
   *
   *  I do not use getters for fields of objects that are used simply to
   *  group values such as this aggregate.  The getters/setters are there to
   *  satisfy the superclass interface.
   */
  class ParserRuleContext extends RuleContext_1 {
  	constructor(parent, invokingStateNumber) {
  		parent = parent || null;
  		invokingStateNumber = invokingStateNumber || null;
  		super(parent, invokingStateNumber);
  		this.ruleIndex = -1;
  		/**
  		 * If we are debugging or building a parse tree for a visitor,
  		 * we need to track all of the tokens and rule invocations associated
  		 * with this rule's context. This is empty for parsing w/o tree constr.
  		 * operation because we don't the need to track the details about
  		 * how we parse this rule.
  		 */
  		this.children = null;
  		this.start = null;
  		this.stop = null;
  		/**
  		 * The exception that forced this rule to return. If the rule successfully
  		 * completed, this is {@code null}.
  		 */
  		this.exception = null;
  	}

  	// COPY a ctx (I'm deliberately not using copy constructor)
  	copyFrom(ctx) {
  		// from RuleContext
  		this.parentCtx = ctx.parentCtx;
  		this.invokingState = ctx.invokingState;
  		this.children = null;
  		this.start = ctx.start;
  		this.stop = ctx.stop;
  		// copy any error nodes to alt label node
  		if(ctx.children) {
  			this.children = [];
  			// reset parent pointer for any error nodes
  			ctx.children.map(function(child) {
  				if (child instanceof ErrorNodeImpl$1) {
  					this.children.push(child);
  					child.parentCtx = this;
  				}
  			}, this);
  		}
  	}

  	// Double dispatch methods for listeners
  	enterRule(listener) {
  	}

  	exitRule(listener) {
  	}

  	// Does not set parent link; other add methods do that
  	addChild(child) {
  		if (this.children === null) {
  			this.children = [];
  		}
  		this.children.push(child);
  		return child;
  	}

  	/** Used by enterOuterAlt to toss out a RuleContext previously added as
  	 * we entered a rule. If we have // label, we will need to remove
  	 * generic ruleContext object.
  	 */
  	removeLastChild() {
  		if (this.children !== null) {
  			this.children.pop();
  		}
  	}

  	addTokenNode(token) {
  		const node = new TerminalNodeImpl$1(token);
  		this.addChild(node);
  		node.parentCtx = this;
  		return node;
  	}

  	addErrorNode(badToken) {
  		const node = new ErrorNodeImpl$1(badToken);
  		this.addChild(node);
  		node.parentCtx = this;
  		return node;
  	}

  	getChild(i, type) {
  		type = type || null;
  		if (this.children === null || i < 0 || i >= this.children.length) {
  			return null;
  		}
  		if (type === null) {
  			return this.children[i];
  		} else {
  			for(let j=0; j<this.children.length; j++) {
  				const child = this.children[j];
  				if(child instanceof type) {
  					if(i===0) {
  						return child;
  					} else {
  						i -= 1;
  					}
  				}
  			}
  			return null;
  		}
  	}

  	getToken(ttype, i) {
  		if (this.children === null || i < 0 || i >= this.children.length) {
  			return null;
  		}
  		for(let j=0; j<this.children.length; j++) {
  			const child = this.children[j];
  			if (child instanceof TerminalNode$2) {
  				if (child.symbol.type === ttype) {
  					if(i===0) {
  						return child;
  					} else {
  						i -= 1;
  					}
  				}
  			}
  		}
  		return null;
  	}

  	getTokens(ttype ) {
  		if (this.children=== null) {
  			return [];
  		} else {
  			const tokens = [];
  			for(let j=0; j<this.children.length; j++) {
  				const child = this.children[j];
  				if (child instanceof TerminalNode$2) {
  					if (child.symbol.type === ttype) {
  						tokens.push(child);
  					}
  				}
  			}
  			return tokens;
  		}
  	}

  	getTypedRuleContext(ctxType, i) {
  		return this.getChild(i, ctxType);
  	}

  	getTypedRuleContexts(ctxType) {
  		if (this.children=== null) {
  			return [];
  		} else {
  			const contexts = [];
  			for(let j=0; j<this.children.length; j++) {
  				const child = this.children[j];
  				if (child instanceof ctxType) {
  					contexts.push(child);
  				}
  			}
  			return contexts;
  		}
  	}

  	getChildCount() {
  		if (this.children=== null) {
  			return 0;
  		} else {
  			return this.children.length;
  		}
  	}

  	getSourceInterval() {
  		if( this.start === null || this.stop === null) {
  			return INVALID_INTERVAL$2;
  		} else {
  			return new Interval$2(this.start.tokenIndex, this.stop.tokenIndex);
  		}
  	}
  }

  RuleContext_1.EMPTY = new ParserRuleContext();

  var ParserRuleContext_1 = ParserRuleContext;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Set: Set$4, BitSet: BitSet$3, DoubleDict: DoubleDict$1} = Utils;


  const {ATNState: ATNState$2, RuleStopState: RuleStopState$5} = ATNState_1;

  const {ATNConfig: ATNConfig$3} = ATNConfig_1;
  const {ATNConfigSet: ATNConfigSet$4} = ATNConfigSet_1;
  const {Token: Token$b} = Token_1;
  const {DFAState: DFAState$3, PredPrediction: PredPrediction$1} = DFAState_1;




  const {SemanticContext: SemanticContext$4} = SemanticContext_1;
  const {PredictionContext: PredictionContext$3} = PredictionContext_1;
  const {Interval: Interval$3} = IntervalSet_1;
  const {Transition: Transition$3, SetTransition: SetTransition$2, NotSetTransition: NotSetTransition$3, RuleTransition: RuleTransition$3, ActionTransition: ActionTransition$2} = Transition_1;
  const {NoViableAltException: NoViableAltException$1} = Errors;
  const {SingletonPredictionContext: SingletonPredictionContext$3, predictionContextFromRuleContext: predictionContextFromRuleContext$2} = PredictionContext_1;


  /**
   * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
   *
   * <p>
   * The basic complexity of the adaptive strategy makes it harder to understand.
   * We begin with ATN simulation to build paths in a DFA. Subsequent prediction
   * requests go through the DFA first. If they reach a state without an edge for
   * the current symbol, the algorithm fails over to the ATN simulation to
   * complete the DFA path for the current input (until it finds a conflict state
   * or uniquely predicting state).</p>
   *
   * <p>
   * All of that is done without using the outer context because we want to create
   * a DFA that is not dependent upon the rule invocation stack when we do a
   * prediction. One DFA works in all contexts. We avoid using context not
   * necessarily because it's slower, although it can be, but because of the DFA
   * caching problem. The closure routine only considers the rule invocation stack
   * created during prediction beginning in the decision rule. For example, if
   * prediction occurs without invoking another rule's ATN, there are no context
   * stacks in the configurations. When lack of context leads to a conflict, we
   * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
   * strategy (versus full LL(*)).</p>
   *
   * <p>
   * When SLL yields a configuration set with conflict, we rewind the input and
   * retry the ATN simulation, this time using full outer context without adding
   * to the DFA. Configuration context stacks will be the full invocation stacks
   * from the start rule. If we get a conflict using full context, then we can
   * definitively say we have a true ambiguity for that input sequence. If we
   * don't get a conflict, it implies that the decision is sensitive to the outer
   * context. (It is not context-sensitive in the sense of context-sensitive
   * grammars.)</p>
   *
   * <p>
   * The next time we reach this DFA state with an SLL conflict, through DFA
   * simulation, we will again retry the ATN simulation using full context mode.
   * This is slow because we can't save the results and have to "interpret" the
   * ATN each time we get that input.</p>
   *
   * <p>
   * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
   *
   * <p>
   * We could cache results from full context to predicted alternative easily and
   * that saves a lot of time but doesn't work in presence of predicates. The set
   * of visible predicates from the ATN start state changes depending on the
   * context, because closure can fall off the end of a rule. I tried to cache
   * tuples (stack context, semantic context, predicted alt) but it was slower
   * than interpreting and much more complicated. Also required a huge amount of
   * memory. The goal is not to create the world's fastest parser anyway. I'd like
   * to keep this algorithm simple. By launching multiple threads, we can improve
   * the speed of parsing across a large number of files.</p>
   *
   * <p>
   * There is no strict ordering between the amount of input used by SLL vs LL,
   * which makes it really hard to build a cache for full context. Let's say that
   * we have input A B C that leads to an SLL conflict with full context X. That
   * implies that using X we might only use A B but we could also use A B C D to
   * resolve conflict. Input A B C D could predict alternative 1 in one position
   * in the input and A B C E could predict alternative 2 in another position in
   * input. The conflicting SLL configurations could still be non-unique in the
   * full context prediction, which would lead us to requiring more input than the
   * original A B C.	To make a	prediction cache work, we have to track	the exact
   * input	used during the previous prediction. That amounts to a cache that maps
   * X to a specific DFA for that context.</p>
   *
   * <p>
   * Something should be done for left-recursive expression predictions. They are
   * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
   * with full LL thing Sam does.</p>
   *
   * <p>
   * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
   *
   * <p>
   * We avoid doing full context retry when the outer context is empty, we did not
   * dip into the outer context by falling off the end of the decision state rule,
   * or when we force SLL mode.</p>
   *
   * <p>
   * As an example of the not dip into outer context case, consider as super
   * constructor calls versus function calls. One grammar might look like
   * this:</p>
   *
   * <pre>
   * ctorBody
   *   : '{' superCall? stat* '}'
   *   ;
   * </pre>
   *
   * <p>
   * Or, you might see something like</p>
   *
   * <pre>
   * stat
   *   : superCall ';'
   *   | expression ';'
   *   | ...
   *   ;
   * </pre>
   *
   * <p>
   * In both cases I believe that no closure operations will dip into the outer
   * context. In the first case ctorBody in the worst case will stop at the '}'.
   * In the 2nd case it should stop at the ';'. Both cases should stay within the
   * entry rule and not dip into the outer context.</p>
   *
   * <p>
   * <strong>PREDICATES</strong></p>
   *
   * <p>
   * Predicates are always evaluated if present in either SLL or LL both. SLL and
   * LL simulation deals with predicates differently. SLL collects predicates as
   * it performs closure operations like ANTLR v3 did. It delays predicate
   * evaluation until it reaches and accept state. This allows us to cache the SLL
   * ATN simulation whereas, if we had evaluated predicates on-the-fly during
   * closure, the DFA state configuration sets would be different and we couldn't
   * build up a suitable DFA.</p>
   *
   * <p>
   * When building a DFA accept state during ATN simulation, we evaluate any
   * predicates and return the sole semantically valid alternative. If there is
   * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
   * we throw an exception. Alternatives without predicates act like they have
   * true predicates. The simple way to think about it is to strip away all
   * alternatives with false predicates and choose the minimum alternative that
   * remains.</p>
   *
   * <p>
   * When we start in the DFA and reach an accept state that's predicated, we test
   * those and return the minimum semantically viable alternative. If no
   * alternatives are viable, we throw an exception.</p>
   *
   * <p>
   * During full LL ATN simulation, closure always evaluates predicates and
   * on-the-fly. This is crucial to reducing the configuration set size during
   * closure. It hits a landmine when parsing with the Java grammar, for example,
   * without this on-the-fly evaluation.</p>
   *
   * <p>
   * <strong>SHARING DFA</strong></p>
   *
   * <p>
   * All instances of the same parser share the same decision DFAs through a
   * static field. Each instance gets its own ATN simulator but they share the
   * same {@link //decisionToDFA} field. They also share a
   * {@link PredictionContextCache} object that makes sure that all
   * {@link PredictionContext} objects are shared among the DFA states. This makes
   * a big size difference.</p>
   *
   * <p>
   * <strong>THREAD SAFETY</strong></p>
   *
   * <p>
   * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
   * it adds a new DFA object to that array. {@link //addDFAEdge}
   * locks on the DFA for the current decision when setting the
   * {@link DFAState//edges} field. {@link //addDFAState} locks on
   * the DFA for the current decision when looking up a DFA state to see if it
   * already exists. We must make sure that all requests to add DFA states that
   * are equivalent result in the same shared DFA object. This is because lots of
   * threads will be trying to update the DFA at once. The
   * {@link //addDFAState} method also locks inside the DFA lock
   * but this time on the shared context cache when it rebuilds the
   * configurations' {@link PredictionContext} objects using cached
   * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
   * safe as long as we can guarantee that all threads referencing
   * {@code s.edge[t]} get the same physical target {@link DFAState}, or
   * {@code null}. Once into the DFA, the DFA simulation does not reference the
   * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
   * targets. The DFA simulator will either find {@link DFAState//edges} to be
   * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
   * {@code dfa.edges[t]} to be non-null. The
   * {@link //addDFAEdge} method could be racing to set the field
   * but in either case the DFA simulator works; if {@code null}, and requests ATN
   * simulation. It could also race trying to get {@code dfa.edges[t]}, but either
   * way it will work because it's not doing a test and set operation.</p>
   *
   * <p>
   * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
   * Parsing)</strong></p>
   *
   * <p>
   * Sam pointed out that if SLL does not give a syntax error, then there is no
   * point in doing full LL, which is slower. We only have to try LL if we get a
   * syntax error. For maximum speed, Sam starts the parser set to pure SLL
   * mode with the {@link BailErrorStrategy}:</p>
   *
   * <pre>
   * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
   * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
   * </pre>
   *
   * <p>
   * If it does not get a syntax error, then we're done. If it does get a syntax
   * error, we need to retry with the combined SLL/LL strategy.</p>
   *
   * <p>
   * The reason this works is as follows. If there are no SLL conflicts, then the
   * grammar is SLL (at least for that input set). If there is an SLL conflict,
   * the full LL analysis must yield a set of viable alternatives which is a
   * subset of the alternatives reported by SLL. If the LL set is a singleton,
   * then the grammar is LL but not SLL. If the LL set is the same size as the SLL
   * set, the decision is SLL. If the LL set has size &gt; 1, then that decision
   * is truly ambiguous on the current input. If the LL set is smaller, then the
   * SLL conflict resolution might choose an alternative that the full LL would
   * rule out as a possibility based upon better context information. If that's
   * the case, then the SLL parse will definitely get an error because the full LL
   * analysis says it's not viable. If SLL conflict resolution chooses an
   * alternative within the LL set, them both SLL and LL would choose the same
   * alternative because they both choose the minimum of multiple conflicting
   * alternatives.</p>
   *
   * <p>
   * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
   * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
   * parsing will get an error because SLL will pursue alternative 1. If
   * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
   * choose the same alternative because alternative one is the minimum of either
   * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
   * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
   *
   * <p>
   * Of course, if the input is invalid, then we will get an error for sure in
   * both SLL and LL parsing. Erroneous input will therefore require 2 passes over
   * the input.</p>
   */
  class ParserATNSimulator extends ATNSimulator_1 {
      constructor(parser, atn, decisionToDFA, sharedContextCache) {
          super(atn, sharedContextCache);
          this.parser = parser;
          this.decisionToDFA = decisionToDFA;
          // SLL, LL, or LL + exact ambig detection?//
          this.predictionMode = PredictionMode_1.LL;
          // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
          this._input = null;
          this._startIndex = 0;
          this._outerContext = null;
          this._dfa = null;
          /**
           * Each prediction operation uses a cache for merge of prediction contexts.
           *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
           *  isn't synchronized but we're ok since two threads shouldn't reuse same
           *  parser/atnsim object because it can only handle one input at a time.
           *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
           *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
           *  also be examined during cache lookup.
           */
          this.mergeCache = null;
          this.debug = false;
          this.debug_closure = false;
          this.debug_add = false;
          this.debug_list_atn_decisions = false;
          this.dfa_debug = false;
          this.retry_debug = false;
      }

      reset() {}

      adaptivePredict(input, decision, outerContext) {
          if (this.debug || this.debug_list_atn_decisions) {
              console.log("adaptivePredict decision " + decision +
                                     " exec LA(1)==" + this.getLookaheadName(input) +
                                     " line " + input.LT(1).line + ":" +
                                     input.LT(1).column);
          }
          this._input = input;
          this._startIndex = input.index;
          this._outerContext = outerContext;

          const dfa = this.decisionToDFA[decision];
          this._dfa = dfa;
          const m = input.mark();
          const index = input.index;

          // Now we are certain to have a specific decision's DFA
          // But, do we still need an initial state?
          try {
              let s0;
              if (dfa.precedenceDfa) {
                  // the start state for a precedence DFA depends on the current
                  // parser precedence, and is provided by a DFA method.
                  s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
              } else {
                  // the start state for a "regular" DFA is just s0
                  s0 = dfa.s0;
              }
              if (s0===null) {
                  if (outerContext===null) {
                      outerContext = RuleContext_1.EMPTY;
                  }
                  if (this.debug || this.debug_list_atn_decisions) {
                      console.log("predictATN decision " + dfa.decision +
                                         " exec LA(1)==" + this.getLookaheadName(input) +
                                         ", outerContext=" + outerContext.toString(this.parser.ruleNames));
                  }

                  const fullCtx = false;
                  let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext_1.EMPTY, fullCtx);

                  if( dfa.precedenceDfa) {
                      // If this is a precedence DFA, we use applyPrecedenceFilter
                      // to convert the computed start state to a precedence start
                      // state. We then use DFA.setPrecedenceStartState to set the
                      // appropriate start state for the precedence level rather
                      // than simply setting DFA.s0.
                      //
                      dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                      s0_closure = this.applyPrecedenceFilter(s0_closure);
                      s0 = this.addDFAState(dfa, new DFAState$3(null, s0_closure));
                      dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
                  } else {
                      s0 = this.addDFAState(dfa, new DFAState$3(null, s0_closure));
                      dfa.s0 = s0;
                  }
              }
              const alt = this.execATN(dfa, s0, input, index, outerContext);
              if (this.debug) {
                  console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
              }
              return alt;
          } finally {
              this._dfa = null;
              this.mergeCache = null; // wack cache after each prediction
              input.seek(index);
              input.release(m);
          }
      }

      /**
       * Performs ATN simulation to compute a predicted alternative based
       *  upon the remaining input, but also updates the DFA cache to avoid
       *  having to traverse the ATN again for the same input sequence.
       *
       * There are some key conditions we're looking for after computing a new
       * set of ATN configs (proposed DFA state):
       *       if the set is empty, there is no viable alternative for current symbol
       *       does the state uniquely predict an alternative?
       *       does the state have a conflict that would prevent us from
       *         putting it on the work list?
       *
       * We also have some key operations to do:
       *       add an edge from previous DFA state to potentially new DFA state, D,
       *         upon current symbol but only if adding to work list, which means in all
       *         cases except no viable alternative (and possibly non-greedy decisions?)
       *       collecting predicates and adding semantic context to DFA accept states
       *       adding rule context to context-sensitive DFA accept states
       *       consuming an input symbol
       *       reporting a conflict
       *       reporting an ambiguity
       *       reporting a context sensitivity
       *       reporting insufficient predicates
       *
       * cover these cases:
       *    dead end
       *    single alt
       *    single alt + preds
       *    conflict
       *    conflict + preds
       *
       */
      execATN(dfa, s0, input, startIndex, outerContext ) {
          if (this.debug || this.debug_list_atn_decisions) {
              console.log("execATN decision " + dfa.decision +
                      " exec LA(1)==" + this.getLookaheadName(input) +
                      " line " + input.LT(1).line + ":" + input.LT(1).column);
          }
          let alt;
          let previousD = s0;

          if (this.debug) {
              console.log("s0 = " + s0);
          }
          let t = input.LA(1);
          while(true) { // while more work
              let D = this.getExistingTargetState(previousD, t);
              if(D===null) {
                  D = this.computeTargetState(dfa, previousD, t);
              }
              if(D===ATNSimulator_1.ERROR) {
                  // if any configs in previous dipped into outer context, that
                  // means that input up to t actually finished entry rule
                  // at least for SLL decision. Full LL doesn't dip into outer
                  // so don't need special case.
                  // We will get an error no matter what so delay until after
                  // decision; better error message. Also, no reachable target
                  // ATN states in SLL implies LL will also get nowhere.
                  // If conflict in states that dip out, choose min since we
                  // will get error no matter what.
                  const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
                  input.seek(startIndex);
                  alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
                  if(alt!==ATN_1.INVALID_ALT_NUMBER) {
                      return alt;
                  } else {
                      throw e;
                  }
              }
              if(D.requiresFullContext && this.predictionMode !== PredictionMode_1.SLL) {
                  // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
                  let conflictingAlts = null;
                  if (D.predicates!==null) {
                      if (this.debug) {
                          console.log("DFA state has preds in DFA sim LL failover");
                      }
                      const conflictIndex = input.index;
                      if(conflictIndex !== startIndex) {
                          input.seek(startIndex);
                      }
                      conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                      if (conflictingAlts.length===1) {
                          if(this.debug) {
                              console.log("Full LL avoided");
                          }
                          return conflictingAlts.minValue();
                      }
                      if (conflictIndex !== startIndex) {
                          // restore the index so reporting the fallback to full
                          // context occurs with the index at the correct spot
                          input.seek(conflictIndex);
                      }
                  }
                  if (this.dfa_debug) {
                      console.log("ctx sensitive state " + outerContext +" in " + D);
                  }
                  const fullCtx = true;
                  const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
                  this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
                  alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
                  return alt;
              }
              if (D.isAcceptState) {
                  if (D.predicates===null) {
                      return D.prediction;
                  }
                  const stopIndex = input.index;
                  input.seek(startIndex);
                  const alts = this.evalSemanticContext(D.predicates, outerContext, true);
                  if (alts.length===0) {
                      throw this.noViableAlt(input, outerContext, D.configs, startIndex);
                  } else if (alts.length===1) {
                      return alts.minValue();
                  } else {
                      // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                      this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                      return alts.minValue();
                  }
              }
              previousD = D;

              if (t !== Token$b.EOF) {
                  input.consume();
                  t = input.LA(1);
              }
          }
      }

      /**
       * Get an existing target state for an edge in the DFA. If the target state
       * for the edge has not yet been computed or is otherwise not available,
       * this method returns {@code null}.
       *
       * @param previousD The current DFA state
       * @param t The next input symbol
       * @return The existing target DFA state for the given input symbol
       * {@code t}, or {@code null} if the target state for this edge is not
       * already cached
       */
      getExistingTargetState(previousD, t) {
          const edges = previousD.edges;
          if (edges===null) {
              return null;
          } else {
              return edges[t + 1] || null;
          }
      }

      /**
       * Compute a target state for an edge in the DFA, and attempt to add the
       * computed state and corresponding edge to the DFA.
       *
       * @param dfa The DFA
       * @param previousD The current DFA state
       * @param t The next input symbol
       *
       * @return The computed target DFA state for the given input symbol
       * {@code t}. If {@code t} does not lead to a valid DFA state, this method
       * returns {@link //ERROR
       */
      computeTargetState(dfa, previousD, t) {
         const reach = this.computeReachSet(previousD.configs, t, false);
          if(reach===null) {
              this.addDFAEdge(dfa, previousD, t, ATNSimulator_1.ERROR);
              return ATNSimulator_1.ERROR;
          }
          // create new target state; we'll add to DFA after it's complete
          let D = new DFAState$3(null, reach);

          const predictedAlt = this.getUniqueAlt(reach);

          if (this.debug) {
              const altSubSets = PredictionMode_1.getConflictingAltSubsets(reach);
              console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                          ", previous=" + previousD.configs +
                          ", configs=" + reach +
                          ", predict=" + predictedAlt +
                          ", allSubsetsConflict=" +
                          PredictionMode_1.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                          this.getConflictingAlts(reach));
          }
          if (predictedAlt!==ATN_1.INVALID_ALT_NUMBER) {
              // NO CONFLICT, UNIQUELY PREDICTED ALT
              D.isAcceptState = true;
              D.configs.uniqueAlt = predictedAlt;
              D.prediction = predictedAlt;
          } else if (PredictionMode_1.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
              // MORE THAN ONE VIABLE ALTERNATIVE
              D.configs.conflictingAlts = this.getConflictingAlts(reach);
              D.requiresFullContext = true;
              // in SLL-only mode, we will stop at this state and return the minimum alt
              D.isAcceptState = true;
              D.prediction = D.configs.conflictingAlts.minValue();
          }
          if (D.isAcceptState && D.configs.hasSemanticContext) {
              this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
              if( D.predicates!==null) {
                  D.prediction = ATN_1.INVALID_ALT_NUMBER;
              }
          }
          // all adds to dfa are done after we've created full D state
          D = this.addDFAEdge(dfa, previousD, t, D);
          return D;
      }

      predicateDFAState(dfaState, decisionState) {
          // We need to test all predicates, even in DFA states that
          // uniquely predict alternative.
          const nalts = decisionState.transitions.length;
          // Update DFA so reach becomes accept state with (predicate,alt)
          // pairs if preds found for conflicting alts
          const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
          const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
          if (altToPred!==null) {
              dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
              dfaState.prediction = ATN_1.INVALID_ALT_NUMBER; // make sure we use preds
          } else {
              // There are preds in configs but they might go away
              // when OR'd together like {p}? || NONE == NONE. If neither
              // alt has preds, resolve to min alt
              dfaState.prediction = altsToCollectPredsFrom.minValue();
          }
      }

  // comes back with reach.uniqueAlt set to a valid alt
      execATNWithFullContext(dfa, D, // how far we got before failing over
                                           s0,
                                           input,
                                           startIndex,
                                           outerContext) {
          if (this.debug || this.debug_list_atn_decisions) {
              console.log("execATNWithFullContext "+s0);
          }
          const fullCtx = true;
          let foundExactAmbig = false;
          let reach = null;
          let previous = s0;
          input.seek(startIndex);
          let t = input.LA(1);
          let predictedAlt = -1;
          while (true) { // while more work
              reach = this.computeReachSet(previous, t, fullCtx);
              if (reach===null) {
                  // if any configs in previous dipped into outer context, that
                  // means that input up to t actually finished entry rule
                  // at least for LL decision. Full LL doesn't dip into outer
                  // so don't need special case.
                  // We will get an error no matter what so delay until after
                  // decision; better error message. Also, no reachable target
                  // ATN states in SLL implies LL will also get nowhere.
                  // If conflict in states that dip out, choose min since we
                  // will get error no matter what.
                  const e = this.noViableAlt(input, outerContext, previous, startIndex);
                  input.seek(startIndex);
                  const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
                  if(alt!==ATN_1.INVALID_ALT_NUMBER) {
                      return alt;
                  } else {
                      throw e;
                  }
              }
              const altSubSets = PredictionMode_1.getConflictingAltSubsets(reach);
              if(this.debug) {
                  console.log("LL altSubSets=" + altSubSets + ", predict=" +
                        PredictionMode_1.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                        PredictionMode_1.resolvesToJustOneViableAlt(altSubSets));
              }
              reach.uniqueAlt = this.getUniqueAlt(reach);
              // unique prediction?
              if(reach.uniqueAlt!==ATN_1.INVALID_ALT_NUMBER) {
                  predictedAlt = reach.uniqueAlt;
                  break;
              } else if (this.predictionMode !== PredictionMode_1.LL_EXACT_AMBIG_DETECTION) {
                  predictedAlt = PredictionMode_1.resolvesToJustOneViableAlt(altSubSets);
                  if(predictedAlt !== ATN_1.INVALID_ALT_NUMBER) {
                      break;
                  }
              } else {
                  // In exact ambiguity mode, we never try to terminate early.
                  // Just keeps scarfing until we know what the conflict is
                  if (PredictionMode_1.allSubsetsConflict(altSubSets) && PredictionMode_1.allSubsetsEqual(altSubSets)) {
                      foundExactAmbig = true;
                      predictedAlt = PredictionMode_1.getSingleViableAlt(altSubSets);
                      break;
                  }
                  // else there are multiple non-conflicting subsets or
                  // we're not sure what the ambiguity is yet.
                  // So, keep going.
              }
              previous = reach;
              if( t !== Token$b.EOF) {
                  input.consume();
                  t = input.LA(1);
              }
          }
          // If the configuration set uniquely predicts an alternative,
          // without conflict, then we know that it's a full LL decision
          // not SLL.
          if (reach.uniqueAlt !== ATN_1.INVALID_ALT_NUMBER ) {
              this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
              return predictedAlt;
          }
          // We do not check predicates here because we have checked them
          // on-the-fly when doing full context prediction.

          //
          // In non-exact ambiguity detection mode, we might	actually be able to
          // detect an exact ambiguity, but I'm not going to spend the cycles
          // needed to check. We only emit ambiguity warnings in exact ambiguity
          // mode.
          //
          // For example, we might know that we have conflicting configurations.
          // But, that does not mean that there is no way forward without a
          // conflict. It's possible to have nonconflicting alt subsets as in:

          // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

          // from
          //
          //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
          //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
          //
          // In this case, (17,1,[5 $]) indicates there is some next sequence that
          // would resolve this without conflict to alternative 1. Any other viable
          // next sequence, however, is associated with a conflict.  We stop
          // looking for input because no amount of further lookahead will alter
          // the fact that we should predict alternative 1.  We just can't say for
          // sure that there is an ambiguity without looking further.

          this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

          return predictedAlt;
      }

      computeReachSet(closure, t, fullCtx) {
          if (this.debug) {
              console.log("in computeReachSet, starting closure: " + closure);
          }
          if( this.mergeCache===null) {
              this.mergeCache = new DoubleDict$1();
          }
          const intermediate = new ATNConfigSet$4(fullCtx);

          // Configurations already in a rule stop state indicate reaching the end
          // of the decision rule (local context) or end of the start rule (full
          // context). Once reached, these configurations are never updated by a
          // closure operation, so they are handled separately for the performance
          // advantage of having a smaller intermediate set when calling closure.
          //
          // For full-context reach operations, separate handling is required to
          // ensure that the alternative matching the longest overall sequence is
          // chosen when multiple such configurations can match the input.

          let skippedStopStates = null;

          // First figure out where we can reach on input t
          for (let i=0; i<closure.items.length;i++) {
              const c = closure.items[i];
              if(this.debug_add) {
                  console.log("testing " + this.getTokenName(t) + " at " + c);
              }
              if (c.state instanceof RuleStopState$5) {
                  if (fullCtx || t === Token$b.EOF) {
                      if (skippedStopStates===null) {
                          skippedStopStates = [];
                      }
                      skippedStopStates.push(c);
                      if(this.debug_add) {
                          console.log("added " + c + " to skippedStopStates");
                      }
                  }
                  continue;
              }
              for(let j=0;j<c.state.transitions.length;j++) {
                  const trans = c.state.transitions[j];
                  const target = this.getReachableTarget(trans, t);
                  if (target!==null) {
                      const cfg = new ATNConfig$3({state:target}, c);
                      intermediate.add(cfg, this.mergeCache);
                      if(this.debug_add) {
                          console.log("added " + cfg + " to intermediate");
                      }
                  }
              }
          }
          // Now figure out where the reach operation can take us...
          let reach = null;

          // This block optimizes the reach operation for intermediate sets which
          // trivially indicate a termination state for the overall
          // adaptivePredict operation.
          //
          // The conditions assume that intermediate
          // contains all configurations relevant to the reach set, but this
          // condition is not true when one or more configurations have been
          // withheld in skippedStopStates, or when the current symbol is EOF.
          //
          if (skippedStopStates===null && t!==Token$b.EOF) {
              if (intermediate.items.length===1) {
                  // Don't pursue the closure if there is just one state.
                  // It can only have one alternative; just add to result
                  // Also don't pursue the closure if there is unique alternative
                  // among the configurations.
                  reach = intermediate;
              } else if (this.getUniqueAlt(intermediate)!==ATN_1.INVALID_ALT_NUMBER) {
                  // Also don't pursue the closure if there is unique alternative
                  // among the configurations.
                  reach = intermediate;
              }
          }
          // If the reach set could not be trivially determined, perform a closure
          // operation on the intermediate set to compute its initial value.
          //
          if (reach===null) {
              reach = new ATNConfigSet$4(fullCtx);
              const closureBusy = new Set$4();
              const treatEofAsEpsilon = t === Token$b.EOF;
              for (let k=0; k<intermediate.items.length;k++) {
                  this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
              }
          }
          if (t === Token$b.EOF) {
              // After consuming EOF no additional input is possible, so we are
              // only interested in configurations which reached the end of the
              // decision rule (local context) or end of the start rule (full
              // context). Update reach to contain only these configurations. This
              // handles both explicit EOF transitions in the grammar and implicit
              // EOF transitions following the end of the decision or start rule.
              //
              // When reach==intermediate, no closure operation was performed. In
              // this case, removeAllConfigsNotInRuleStopState needs to check for
              // reachable rule stop states as well as configurations already in
              // a rule stop state.
              //
              // This is handled before the configurations in skippedStopStates,
              // because any configurations potentially added from that list are
              // already guaranteed to meet this condition whether or not it's
              // required.
              //
              reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
          }
          // If skippedStopStates!==null, then it contains at least one
          // configuration. For full-context reach operations, these
          // configurations reached the end of the start rule, in which case we
          // only add them back to reach if no configuration during the current
          // closure operation reached such a state. This ensures adaptivePredict
          // chooses an alternative matching the longest overall sequence when
          // multiple alternatives are viable.
          //
          if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode_1.hasConfigInRuleStopState(reach)))) {
              for (let l=0; l<skippedStopStates.length;l++) {
                  reach.add(skippedStopStates[l], this.mergeCache);
              }
          }
          if (reach.items.length===0) {
              return null;
          } else {
              return reach;
          }
      }

      /**
       * Return a configuration set containing only the configurations from
       * {@code configs} which are in a {@link RuleStopState}. If all
       * configurations in {@code configs} are already in a rule stop state, this
       * method simply returns {@code configs}.
       *
       * <p>When {@code lookToEndOfRule} is true, this method uses
       * {@link ATN//nextTokens} for each configuration in {@code configs} which is
       * not already in a rule stop state to see if a rule stop state is reachable
       * from the configuration via epsilon-only transitions.</p>
       *
       * @param configs the configuration set to update
       * @param lookToEndOfRule when true, this method checks for rule stop states
       * reachable by epsilon-only transitions from each configuration in
       * {@code configs}.
       *
       * @return {@code configs} if all configurations in {@code configs} are in a
       * rule stop state, otherwise return a new configuration set containing only
       * the configurations from {@code configs} which are in a rule stop state
       */
      removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {
          if (PredictionMode_1.allConfigsInRuleStopStates(configs)) {
              return configs;
          }
          const result = new ATNConfigSet$4(configs.fullCtx);
          for(let i=0; i<configs.items.length;i++) {
              const config = configs.items[i];
              if (config.state instanceof RuleStopState$5) {
                  result.add(config, this.mergeCache);
                  continue;
              }
              if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
                  const nextTokens = this.atn.nextTokens(config.state);
                  if (nextTokens.contains(Token$b.EPSILON)) {
                      const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                      result.add(new ATNConfig$3({state:endOfRuleState}, config), this.mergeCache);
                  }
              }
          }
          return result;
      }

      computeStartState(p, ctx, fullCtx) {
          // always at least the implicit call to start rule
          const initialContext = predictionContextFromRuleContext$2(this.atn, ctx);
          const configs = new ATNConfigSet$4(fullCtx);
          for(let i=0;i<p.transitions.length;i++) {
              const target = p.transitions[i].target;
              const c = new ATNConfig$3({ state:target, alt:i+1, context:initialContext }, null);
              const closureBusy = new Set$4();
              this.closure(c, configs, closureBusy, true, fullCtx, false);
          }
          return configs;
      }

      /**
       * This method transforms the start state computed by
       * {@link //computeStartState} to the special start state used by a
       * precedence DFA for a particular precedence value. The transformation
       * process applies the following changes to the start state's configuration
       * set.
       *
       * <ol>
       * <li>Evaluate the precedence predicates for each configuration using
       * {@link SemanticContext//evalPrecedence}.</li>
       * <li>Remove all configurations which predict an alternative greater than
       * 1, for which another configuration that predicts alternative 1 is in the
       * same ATN state with the same prediction context. This transformation is
       * valid for the following reasons:
       * <ul>
       * <li>The closure block cannot contain any epsilon transitions which bypass
       * the body of the closure, so all states reachable via alternative 1 are
       * part of the precedence alternatives of the transformed left-recursive
       * rule.</li>
       * <li>The "primary" portion of a left recursive rule cannot contain an
       * epsilon transition, so the only way an alternative other than 1 can exist
       * in a state that is also reachable via alternative 1 is by nesting calls
       * to the left-recursive rule, with the outer calls not being at the
       * preferred precedence level.</li>
       * </ul>
       * </li>
       * </ol>
       *
       * <p>
       * The prediction context must be considered by this filter to address
       * situations like the following.
       * </p>
       * <code>
       * <pre>
       * grammar TA;
       * prog: statement* EOF;
       * statement: letterA | statement letterA 'b' ;
       * letterA: 'a';
       * </pre>
       * </code>
       * <p>
       * If the above grammar, the ATN state immediately before the token
       * reference {@code 'a'} in {@code letterA} is reachable from the left edge
       * of both the primary and closure blocks of the left-recursive rule
       * {@code statement}. The prediction context associated with each of these
       * configurations distinguishes between them, and prevents the alternative
       * which stepped out to {@code prog} (and then back in to {@code statement}
       * from being eliminated by the filter.
       * </p>
       *
       * @param configs The configuration set computed by
       * {@link //computeStartState} as the start state for the DFA.
       * @return The transformed configuration set representing the start state
       * for a precedence DFA at a particular precedence level (determined by
       * calling {@link Parser//getPrecedence})
       */
      applyPrecedenceFilter(configs) {
          let config;
          const statesFromAlt1 = [];
          const configSet = new ATNConfigSet$4(configs.fullCtx);
          for(let i=0; i<configs.items.length; i++) {
              config = configs.items[i];
              // handle alt 1 first
              if (config.alt !== 1) {
                  continue;
              }
              const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
              if (updatedContext===null) {
                  // the configuration was eliminated
                  continue;
              }
              statesFromAlt1[config.state.stateNumber] = config.context;
              if (updatedContext !== config.semanticContext) {
                  configSet.add(new ATNConfig$3({semanticContext:updatedContext}, config), this.mergeCache);
              } else {
                  configSet.add(config, this.mergeCache);
              }
          }
          for(let i=0; i<configs.items.length; i++) {
              config = configs.items[i];
              if (config.alt === 1) {
                  // already handled
                  continue;
              }
              // In the future, this elimination step could be updated to also
              // filter the prediction context for alternatives predicting alt>1
              // (basically a graph subtraction algorithm).
              if (!config.precedenceFilterSuppressed) {
                  const context = statesFromAlt1[config.state.stateNumber] || null;
                  if (context!==null && context.equals(config.context)) {
                      // eliminated
                      continue;
                  }
              }
              configSet.add(config, this.mergeCache);
          }
          return configSet;
      }

      getReachableTarget(trans, ttype) {
          if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
              return trans.target;
          } else {
              return null;
          }
      }

      getPredsForAmbigAlts(ambigAlts, configs, nalts) {
          // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
          // altToPred starts as an array of all null contexts. The entry at index i
          // corresponds to alternative i. altToPred[i] may have one of three values:
          //   1. null: no ATNConfig c is found such that c.alt==i
          //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
          //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
          //      alt i has at least one unpredicated config.
          //   3. Non-NONE Semantic Context: There exists at least one, and for all
          //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
          //
          // From this, it is clear that NONE||anything==NONE.
          //
          let altToPred = [];
          for(let i=0;i<configs.items.length;i++) {
              const c = configs.items[i];
              if(ambigAlts.contains( c.alt )) {
                  altToPred[c.alt] = SemanticContext$4.orContext(altToPred[c.alt] || null, c.semanticContext);
              }
          }
          let nPredAlts = 0;
          for (let i =1;i< nalts+1;i++) {
              const pred = altToPred[i] || null;
              if (pred===null) {
                  altToPred[i] = SemanticContext$4.NONE;
              } else if (pred !== SemanticContext$4.NONE) {
                  nPredAlts += 1;
              }
          }
          // nonambig alts are null in altToPred
          if (nPredAlts===0) {
              altToPred = null;
          }
          if (this.debug) {
              console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
          }
          return altToPred;
      }

      getPredicatePredictions(ambigAlts, altToPred) {
          const pairs = [];
          let containsPredicate = false;
          for (let i=1; i<altToPred.length;i++) {
              const pred = altToPred[i];
              // unpredicated is indicated by SemanticContext.NONE
              if( ambigAlts!==null && ambigAlts.contains( i )) {
                  pairs.push(new PredPrediction$1(pred, i));
              }
              if (pred !== SemanticContext$4.NONE) {
                  containsPredicate = true;
              }
          }
          if (! containsPredicate) {
              return null;
          }
          return pairs;
      }

      /**
       * This method is used to improve the localization of error messages by
       * choosing an alternative rather than throwing a
       * {@link NoViableAltException} in particular prediction scenarios where the
       * {@link //ERROR} state was reached during ATN simulation.
       *
       * <p>
       * The default implementation of this method uses the following
       * algorithm to identify an ATN configuration which successfully parsed the
       * decision entry rule. Choosing such an alternative ensures that the
       * {@link ParserRuleContext} returned by the calling rule will be complete
       * and valid, and the syntax error will be reported later at a more
       * localized location.</p>
       *
       * <ul>
       * <li>If a syntactically valid path or paths reach the end of the decision rule and
       * they are semantically valid if predicated, return the min associated alt.</li>
       * <li>Else, if a semantically invalid but syntactically valid path exist
       * or paths exist, return the minimum associated alt.
       * </li>
       * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
       * </ul>
       *
       * <p>
       * In some scenarios, the algorithm described above could predict an
       * alternative which will result in a {@link FailedPredicateException} in
       * the parser. Specifically, this could occur if the <em>only</em> configuration
       * capable of successfully parsing to the end of the decision rule is
       * blocked by a semantic predicate. By choosing this alternative within
       * {@link //adaptivePredict} instead of throwing a
       * {@link NoViableAltException}, the resulting
       * {@link FailedPredicateException} in the parser will identify the specific
       * predicate which is preventing the parser from successfully parsing the
       * decision rule, which helps developers identify and correct logic errors
       * in semantic predicates.
       * </p>
       *
       * @param configs The ATN configurations which were valid immediately before
       * the {@link //ERROR} state was reached
       * @param outerContext The is the \gamma_0 initial parser context from the paper
       * or the parser stack at the instant before prediction commences.
       *
       * @return The value to return from {@link //adaptivePredict}, or
       * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
       * identified and {@link //adaptivePredict} should report an error instead
       */
      getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {
          const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
          const semValidConfigs = cfgs[0];
          const semInvalidConfigs = cfgs[1];
          let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
          if (alt!==ATN_1.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
              return alt;
          }
          // Is there a syntactically valid path with a failed pred?
          if (semInvalidConfigs.items.length>0) {
              alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
              if (alt!==ATN_1.INVALID_ALT_NUMBER) { // syntactically viable path exists
                  return alt;
              }
          }
          return ATN_1.INVALID_ALT_NUMBER;
      }

      getAltThatFinishedDecisionEntryRule(configs) {
          const alts = [];
          for(let i=0;i<configs.items.length; i++) {
              const c = configs.items[i];
              if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState$5) && c.context.hasEmptyPath())) {
                  if(alts.indexOf(c.alt)<0) {
                      alts.push(c.alt);
                  }
              }
          }
          if (alts.length===0) {
              return ATN_1.INVALID_ALT_NUMBER;
          } else {
              return Math.min.apply(null, alts);
          }
      }

      /**
       * Walk the list of configurations and split them according to
       * those that have preds evaluating to true/false.  If no pred, assume
       * true pred and include in succeeded set.  Returns Pair of sets.
       *
       * Create a new set so as not to alter the incoming parameter.
       *
       * Assumption: the input stream has been restored to the starting point
       * prediction, which is where predicates need to evaluate.*/
      splitAccordingToSemanticValidity( configs, outerContext) {
          const succeeded = new ATNConfigSet$4(configs.fullCtx);
          const failed = new ATNConfigSet$4(configs.fullCtx);
          for(let i=0;i<configs.items.length; i++) {
              const c = configs.items[i];
              if (c.semanticContext !== SemanticContext$4.NONE) {
                  const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
                  if (predicateEvaluationResult) {
                      succeeded.add(c);
                  } else {
                      failed.add(c);
                  }
              } else {
                  succeeded.add(c);
              }
          }
          return [succeeded, failed];
      }

      /**
       * Look through a list of predicate/alt pairs, returning alts for the
       * pairs that win. A {@code NONE} predicate indicates an alt containing an
       * unpredicated config which behaves as "always true." If !complete
       * then we stop at the first predicate that evaluates to true. This
       * includes pairs with null predicates.
       */
      evalSemanticContext(predPredictions, outerContext, complete) {
          const predictions = new BitSet$3();
          for(let i=0;i<predPredictions.length;i++) {
              const pair = predPredictions[i];
              if (pair.pred === SemanticContext$4.NONE) {
                  predictions.add(pair.alt);
                  if (! complete) {
                      break;
                  }
                  continue;
              }
              const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
              if (this.debug || this.dfa_debug) {
                  console.log("eval pred " + pair + "=" + predicateEvaluationResult);
              }
              if (predicateEvaluationResult) {
                  if (this.debug || this.dfa_debug) {
                      console.log("PREDICT " + pair.alt);
                  }
                  predictions.add(pair.alt);
                  if (! complete) {
                      break;
                  }
              }
          }
          return predictions;
      }

  // TODO: If we are doing predicates, there is no point in pursuing
  //     closure operations if we reach a DFA state that uniquely predicts
  //     alternative. We will not be caching that DFA state and it is a
  //     waste to pursue the closure. Might have to advance when we do
  //     ambig detection thought :(
  //
      closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
          const initialDepth = 0;
          this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                                   fullCtx, initialDepth, treatEofAsEpsilon);
      }

      closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
          if (this.debug || this.debug_closure) {
              console.log("closure(" + config.toString(this.parser,true) + ")");
              // console.log("configs(" + configs.toString() + ")");
              if(config.reachesIntoOuterContext>50) {
                  throw "problem";
              }
          }
          if (config.state instanceof RuleStopState$5) {
              // We hit rule end. If we have context info, use it
              // run thru all possible stack tops in ctx
              if (! config.context.isEmpty()) {
                  for (let i =0; i<config.context.length; i++) {
                      if (config.context.getReturnState(i) === PredictionContext$3.EMPTY_RETURN_STATE) {
                          if (fullCtx) {
                              configs.add(new ATNConfig$3({state:config.state, context:PredictionContext$3.EMPTY}, config), this.mergeCache);
                              continue;
                          } else {
                              // we have no context info, just chase follow links (if greedy)
                              if (this.debug) {
                                  console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                              }
                              this.closure_(config, configs, closureBusy, collectPredicates,
                                       fullCtx, depth, treatEofAsEpsilon);
                          }
                          continue;
                      }
                      const returnState = this.atn.states[config.context.getReturnState(i)];
                      const newContext = config.context.getParent(i); // "pop" return state
                      const parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                      const c = new ATNConfig$3(parms, null);
                      // While we have context to pop back from, we may have
                      // gotten that context AFTER having falling off a rule.
                      // Make sure we track that we are now out of context.
                      c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                      this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
                  }
                  return;
              } else if( fullCtx) {
                  // reached end of start rule
                  configs.add(config, this.mergeCache);
                  return;
              } else {
                  // else if we have no context info, just chase follow links (if greedy)
                  if (this.debug) {
                      console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                  }
              }
          }
          this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
      }

      // Do the actual work of walking epsilon edges//
      closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
          const p = config.state;
          // optimization
          if (! p.epsilonOnlyTransitions) {
              configs.add(config, this.mergeCache);
              // make sure to not return here, because EOF transitions can act as
              // both epsilon transitions and non-epsilon transitions.
          }
          for(let i = 0;i<p.transitions.length; i++) {
              if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
                  continue;

              const t = p.transitions[i];
              const continueCollecting = collectPredicates && !(t instanceof ActionTransition$2);
              const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
              if (c!==null) {
                  let newDepth = depth;
                  if ( config.state instanceof RuleStopState$5) {
                      // target fell off end of rule; mark resulting c as having dipped into outer context
                      // We can't get here if incoming config was rule stop and we had context
                      // track how far we dip into outer context.  Might
                      // come in handy and we avoid evaluating context dependent
                      // preds if this is > 0.
                      if (this._dfa !== null && this._dfa.precedenceDfa) {
                          if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
                              c.precedenceFilterSuppressed = true;
                          }
                      }

                      c.reachesIntoOuterContext += 1;
                      if (closureBusy.add(c)!==c) {
                          // avoid infinite recursion for right-recursive rules
                          continue;
                      }
                      configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                      newDepth -= 1;
                      if (this.debug) {
                          console.log("dips into outer ctx: " + c);
                      }
                  } else {
                      if (!t.isEpsilon && closureBusy.add(c)!==c){
                          // avoid infinite recursion for EOF* and EOF+
                          continue;
                      }
                      if (t instanceof RuleTransition$3) {
                          // latch when newDepth goes negative - once we step out of the entry context we can't return
                          if (newDepth >= 0) {
                              newDepth += 1;
                          }
                      }
                  }
                  this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
              }
          }
      }

      canDropLoopEntryEdgeInLeftRecursiveRule(config) {
          // return False
          const p = config.state;
          // First check to see if we are in StarLoopEntryState generated during
          // left-recursion elimination. For efficiency, also check if
          // the context has an empty stack case. If so, it would mean
          // global FOLLOW so we can't perform optimization
          // Are we the special loop entry/exit state? or SLL wildcard
          if(p.stateType != ATNState$2.STAR_LOOP_ENTRY)
              return false;
          if(p.stateType != ATNState$2.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
                 config.context.isEmpty() || config.context.hasEmptyPath())
              return false;

          // Require all return states to return back to the same rule that p is in.
          const numCtxs = config.context.length;
          for(let i=0; i<numCtxs; i++) { // for each stack context
              const returnState = this.atn.states[config.context.getReturnState(i)];
              if (returnState.ruleIndex != p.ruleIndex)
                  return false;
          }

          const decisionStartState = p.transitions[0].target;
          const blockEndStateNum = decisionStartState.endState.stateNumber;
          const blockEndState = this.atn.states[blockEndStateNum];

          // Verify that the top of each stack context leads to loop entry/exit
          // state through epsilon edges and w/o leaving rule.
          for(let i=0; i<numCtxs; i++) { // for each stack context
              const returnStateNumber = config.context.getReturnState(i);
              const returnState = this.atn.states[returnStateNumber];
              // all states must have single outgoing epsilon edge
              if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
                  return false;

              // Look for prefix op case like 'not expr', (' type ')' expr
              const returnStateTarget = returnState.transitions[0].target;
              if ( returnState.stateType == ATNState$2.BLOCK_END && returnStateTarget == p )
                  continue;

              // Look for 'expr op expr' or case where expr's return state is block end
              // of (...)* internal block; the block end points to loop back
              // which points to p but we don't need to check that
              if ( returnState == blockEndState )
                  continue;

              // Look for ternary expr ? expr : expr. The return state points at block end,
              // which points at loop entry state
              if ( returnStateTarget == blockEndState )
                  continue;

              // Look for complex prefix 'between expr and expr' case where 2nd expr's
              // return state points at block end state of (...)* internal block
              if (returnStateTarget.stateType == ATNState$2.BLOCK_END && returnStateTarget.transitions.length == 1
                      && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
                  continue;

              // anything else ain't conforming
              return false;
          }
          return true;
      }

      getRuleName(index) {
          if (this.parser!==null && index>=0) {
              return this.parser.ruleNames[index];
          } else {
              return "<rule " + index + ">";
          }
      }

      getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
          switch(t.serializationType) {
          case Transition$3.RULE:
              return this.ruleTransition(config, t);
          case Transition$3.PRECEDENCE:
              return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
          case Transition$3.PREDICATE:
              return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
          case Transition$3.ACTION:
              return this.actionTransition(config, t);
          case Transition$3.EPSILON:
              return new ATNConfig$3({state:t.target}, config);
          case Transition$3.ATOM:
          case Transition$3.RANGE:
          case Transition$3.SET:
              // EOF transitions act like epsilon transitions after the first EOF
              // transition is traversed
              if (treatEofAsEpsilon) {
                  if (t.matches(Token$b.EOF, 0, 1)) {
                      return new ATNConfig$3({state: t.target}, config);
                  }
              }
              return null;
          default:
              return null;
          }
      }

      actionTransition(config, t) {
          if (this.debug) {
              const index = t.actionIndex==-1 ? 65535 : t.actionIndex;
              console.log("ACTION edge " + t.ruleIndex + ":" + index);
          }
          return new ATNConfig$3({state:t.target}, config);
      }

      precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {
          if (this.debug) {
              console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                      pt.precedence + ">=_p, ctx dependent=true");
              if (this.parser!==null) {
                  console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
              }
          }
          let c = null;
          if (collectPredicates && inContext) {
              if (fullCtx) {
                  // In full context mode, we can evaluate predicates on-the-fly
                  // during closure, which dramatically reduces the size of
                  // the config sets. It also obviates the need to test predicates
                  // later during conflict resolution.
                  const currentPosition = this._input.index;
                  this._input.seek(this._startIndex);
                  const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
                  this._input.seek(currentPosition);
                  if (predSucceeds) {
                      c = new ATNConfig$3({state:pt.target}, config); // no pred context
                  }
              } else {
                  const newSemCtx = SemanticContext$4.andContext(config.semanticContext, pt.getPredicate());
                  c = new ATNConfig$3({state:pt.target, semanticContext:newSemCtx}, config);
              }
          } else {
              c = new ATNConfig$3({state:pt.target}, config);
          }
          if (this.debug) {
              console.log("config from pred transition=" + c);
          }
          return c;
      }

      predTransition(config, pt, collectPredicates, inContext, fullCtx) {
          if (this.debug) {
              console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                      ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
              if (this.parser!==null) {
                  console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
              }
          }
          let c = null;
          if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
              if (fullCtx) {
                  // In full context mode, we can evaluate predicates on-the-fly
                  // during closure, which dramatically reduces the size of
                  // the config sets. It also obviates the need to test predicates
                  // later during conflict resolution.
                  const currentPosition = this._input.index;
                  this._input.seek(this._startIndex);
                  const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
                  this._input.seek(currentPosition);
                  if (predSucceeds) {
                      c = new ATNConfig$3({state:pt.target}, config); // no pred context
                  }
              } else {
                  const newSemCtx = SemanticContext$4.andContext(config.semanticContext, pt.getPredicate());
                  c = new ATNConfig$3({state:pt.target, semanticContext:newSemCtx}, config);
              }
          } else {
              c = new ATNConfig$3({state:pt.target}, config);
          }
          if (this.debug) {
              console.log("config from pred transition=" + c);
          }
          return c;
      }

      ruleTransition(config, t) {
          if (this.debug) {
              console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
          }
          const returnState = t.followState;
          const newContext = SingletonPredictionContext$3.create(config.context, returnState.stateNumber);
          return new ATNConfig$3({state:t.target, context:newContext}, config );
      }

      getConflictingAlts(configs) {
          const altsets = PredictionMode_1.getConflictingAltSubsets(configs);
          return PredictionMode_1.getAlts(altsets);
      }

      /**
       * Sam pointed out a problem with the previous definition, v3, of
       * ambiguous states. If we have another state associated with conflicting
       * alternatives, we should keep going. For example, the following grammar
       *
       * s : (ID | ID ID?) ';' ;
       *
       * When the ATN simulation reaches the state before ';', it has a DFA
       * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
       * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
       * because alternative to has another way to continue, via [6|2|[]].
       * The key is that we have a single state that has config's only associated
       * with a single alternative, 2, and crucially the state transitions
       * among the configurations are all non-epsilon transitions. That means
       * we don't consider any conflicts that include alternative 2. So, we
       * ignore the conflict between alts 1 and 2. We ignore a set of
       * conflicting alts when there is an intersection with an alternative
       * associated with a single alt state in the state&rarr;config-list map.
       *
       * It's also the case that we might have two conflicting configurations but
       * also a 3rd nonconflicting configuration for a different alternative:
       * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
       *
       * a : A | A | A B ;
       *
       * After matching input A, we reach the stop state for rule A, state 1.
       * State 8 is the state right before B. Clearly alternatives 1 and 2
       * conflict and no amount of further lookahead will separate the two.
       * However, alternative 3 will be able to continue and so we do not
       * stop working on this state. In the previous example, we're concerned
       * with states associated with the conflicting alternatives. Here alt
       * 3 is not associated with the conflicting configs, but since we can continue
       * looking for input reasonably, I don't declare the state done. We
       * ignore a set of conflicting alts when we have an alternative
       * that we still need to pursue
       */
      getConflictingAltsOrUniqueAlt(configs) {
          let conflictingAlts = null;
          if (configs.uniqueAlt!== ATN_1.INVALID_ALT_NUMBER) {
              conflictingAlts = new BitSet$3();
              conflictingAlts.add(configs.uniqueAlt);
          } else {
              conflictingAlts = configs.conflictingAlts;
          }
          return conflictingAlts;
      }

      getTokenName(t) {
          if (t===Token$b.EOF) {
              return "EOF";
          }
          if( this.parser!==null && this.parser.literalNames!==null) {
              if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
                  console.log("" + t + " ttype out of range: " + this.parser.literalNames);
                  console.log("" + this.parser.getInputStream().getTokens());
              } else {
                  const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
                  return name + "<" + t + ">";
              }
          }
          return "" + t;
      }

      getLookaheadName(input) {
          return this.getTokenName(input.LA(1));
      }

      /**
       * Used for debugging in adaptivePredict around execATN but I cut
       * it out for clarity now that alg. works well. We can leave this
       * "dead" code for a bit
       */
      dumpDeadEndConfigs(nvae) {
          console.log("dead end configs: ");
          const decs = nvae.getDeadEndConfigs();
          for(let i=0; i<decs.length; i++) {
              const c = decs[i];
              let trans = "no edges";
              if (c.state.transitions.length>0) {
                  const t = c.state.transitions[0];
                  if (t instanceof AtomTransition) {
                      trans = "Atom "+ this.getTokenName(t.label);
                  } else if (t instanceof SetTransition$2) {
                      const neg = (t instanceof NotSetTransition$3);
                      trans = (neg ? "~" : "") + "Set " + t.set;
                  }
              }
              console.error(c.toString(this.parser, true) + ":" + trans);
          }
      }

      noViableAlt(input, outerContext, configs, startIndex) {
          return new NoViableAltException$1(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
      }

      getUniqueAlt(configs) {
          let alt = ATN_1.INVALID_ALT_NUMBER;
          for(let i=0;i<configs.items.length;i++) {
              const c = configs.items[i];
              if (alt === ATN_1.INVALID_ALT_NUMBER) {
                  alt = c.alt; // found first alt
              } else if( c.alt!==alt) {
                  return ATN_1.INVALID_ALT_NUMBER;
              }
          }
          return alt;
      }

      /**
       * Add an edge to the DFA, if possible. This method calls
       * {@link //addDFAState} to ensure the {@code to} state is present in the
       * DFA. If {@code from} is {@code null}, or if {@code t} is outside the
       * range of edges that can be represented in the DFA tables, this method
       * returns without adding the edge to the DFA.
       *
       * <p>If {@code to} is {@code null}, this method returns {@code null}.
       * Otherwise, this method returns the {@link DFAState} returned by calling
       * {@link //addDFAState} for the {@code to} state.</p>
       *
       * @param dfa The DFA
       * @param from_ The source state for the edge
       * @param t The input symbol
       * @param to The target state for the edge
       *
       * @return If {@code to} is {@code null}, this method returns {@code null};
       * otherwise this method returns the result of calling {@link //addDFAState}
       * on {@code to}
       */
      addDFAEdge(dfa, from_, t, to) {
          if( this.debug) {
              console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
          }
          if (to===null) {
              return null;
          }
          to = this.addDFAState(dfa, to); // used existing if possible not incoming
          if (from_===null || t < -1 || t > this.atn.maxTokenType) {
              return to;
          }
          if (from_.edges===null) {
              from_.edges = [];
          }
          from_.edges[t+1] = to; // connect

          if (this.debug) {
              const literalNames = this.parser===null ? null : this.parser.literalNames;
              const symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
              console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
          }
          return to;
      }

      /**
       * Add state {@code D} to the DFA if it is not already present, and return
       * the actual instance stored in the DFA. If a state equivalent to {@code D}
       * is already in the DFA, the existing state is returned. Otherwise this
       * method returns {@code D} after adding it to the DFA.
       *
       * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
       * does not change the DFA.</p>
       *
       * @param dfa The dfa
       * @param D The DFA state to add
       * @return The state stored in the DFA. This will be either the existing
       * state if {@code D} is already in the DFA, or {@code D} itself if the
       * state was not already present
       */
      addDFAState(dfa, D) {
          if (D == ATNSimulator_1.ERROR) {
              return D;
          }
          const existing = dfa.states.get(D);
          if(existing!==null) {
              return existing;
          }
          D.stateNumber = dfa.states.length;
          if (! D.configs.readOnly) {
              D.configs.optimizeConfigs(this);
              D.configs.setReadonly(true);
          }
          dfa.states.add(D);
          if (this.debug) {
              console.log("adding new DFA state: " + D);
          }
          return D;
      }

      reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {
          if (this.debug || this.retry_debug) {
              const interval = new Interval$3(startIndex, stopIndex + 1);
              console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                                 ", input=" + this.parser.getTokenStream().getText(interval));
          }
          if (this.parser!==null) {
              this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
          }
      }

      reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {
          if (this.debug || this.retry_debug) {
              const interval = new Interval$3(startIndex, stopIndex + 1);
              console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                                 ", input=" + this.parser.getTokenStream().getText(interval));
          }
          if (this.parser!==null) {
              this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
          }
      }

      // If context sensitive parsing, we know it's ambiguity not conflict//
      reportAmbiguity(dfa, D, startIndex, stopIndex,
                                     exact, ambigAlts, configs ) {
          if (this.debug || this.retry_debug) {
              const interval = new Interval$3(startIndex, stopIndex + 1);
              console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                                 ", input=" + this.parser.getTokenStream().getText(interval));
          }
          if (this.parser!==null) {
              this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
          }
      }
  }

  var ParserATNSimulator_1 = ParserATNSimulator;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  var ATN$1 = ATN_1;
  var ATNDeserializer$1 = ATNDeserializer_1;
  var LexerATNSimulator$1 = LexerATNSimulator_1;
  var ParserATNSimulator$1 = ParserATNSimulator_1;
  var PredictionMode$1 = PredictionMode_1;

  var atn = {
  	ATN: ATN$1,
  	ATNDeserializer: ATNDeserializer$1,
  	LexerATNSimulator: LexerATNSimulator$1,
  	ParserATNSimulator: ParserATNSimulator$1,
  	PredictionMode: PredictionMode$1
  };

  /*! https://mths.be/codepointat v0.2.0 by @mathias */
  if (!String.prototype.codePointAt) {
  	(function() {
  		var defineProperty = (function() {
  			// IE 8 only supports `Object.defineProperty` on DOM elements
  			try {
  				var object = {};
  				var $defineProperty = Object.defineProperty;
  				var result = $defineProperty(object, object, object) && $defineProperty;
  			} catch(error) {}
  			return result;
  		}());
  		var codePointAt = function(position) {
  			if (this == null) {
  				throw TypeError();
  			}
  			var string = String(this);
  			var size = string.length;
  			// `ToInteger`
  			var index = position ? Number(position) : 0;
  			if (index != index) { // better `isNaN`
  				index = 0;
  			}
  			// Account for out-of-bounds indices:
  			if (index < 0 || index >= size) {
  				return undefined;
  			}
  			// Get the first code unit
  			var first = string.charCodeAt(index);
  			var second;
  			if ( // check if it’s the start of a surrogate pair
  				first >= 0xD800 && first <= 0xDBFF && // high surrogate
  				size > index + 1 // there is a next code unit
  			) {
  				second = string.charCodeAt(index + 1);
  				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
  					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
  					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
  				}
  			}
  			return first;
  		};
  		if (defineProperty) {
  			defineProperty(String.prototype, 'codePointAt', {
  				'value': codePointAt,
  				'configurable': true,
  				'writable': true
  			});
  		} else {
  			String.prototype.codePointAt = codePointAt;
  		}
  	}());
  }

  var codepointat = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */
  /**
   * A DFA walker that knows how to dump them to serialized strings.
   */
  class DFASerializer {
      constructor(dfa, literalNames, symbolicNames) {
          this.dfa = dfa;
          this.literalNames = literalNames || [];
          this.symbolicNames = symbolicNames || [];
      }

      toString() {
         if(this.dfa.s0 === null) {
             return null;
         }
         let buf = "";
         const states = this.dfa.sortedStates();
         for(let i=0; i<states.length; i++) {
             const s = states[i];
             if(s.edges!==null) {
                  const n = s.edges.length;
                  for(let j=0;j<n;j++) {
                      const t = s.edges[j] || null;
                      if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                          buf = buf.concat(this.getStateString(s));
                          buf = buf.concat("-");
                          buf = buf.concat(this.getEdgeLabel(j));
                          buf = buf.concat("->");
                          buf = buf.concat(this.getStateString(t));
                          buf = buf.concat('\n');
                      }
                  }
             }
         }
         return buf.length===0 ? null : buf;
      }

      getEdgeLabel(i) {
          if (i===0) {
              return "EOF";
          } else if(this.literalNames !==null || this.symbolicNames!==null) {
              return this.literalNames[i-1] || this.symbolicNames[i-1];
          } else {
              return String.fromCharCode(i-1);
          }
      }

      getStateString(s) {
          const baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
          if(s.isAcceptState) {
              if (s.predicates !== null) {
                  return baseStateStr + "=>" + s.predicates.toString();
              } else {
                  return baseStateStr + "=>" + s.prediction.toString();
              }
          } else {
              return baseStateStr;
          }
      }
  }

  class LexerDFASerializer extends DFASerializer {
      constructor(dfa) {
          super(dfa, null);
      }

      getEdgeLabel(i) {
          return "'" + String.fromCharCode(i) + "'";
      }
  }

  var DFASerializer_1 = { DFASerializer , LexerDFASerializer };

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Set: Set$5} = Utils;
  const {DFAState: DFAState$4} = DFAState_1;
  const {StarLoopEntryState: StarLoopEntryState$2} = ATNState_1;
  const {ATNConfigSet: ATNConfigSet$5} = ATNConfigSet_1;
  const {DFASerializer: DFASerializer$1} = DFASerializer_1;
  const {LexerDFASerializer: LexerDFASerializer$1} = DFASerializer_1;

  class DFA {
  	constructor(atnStartState, decision) {
  		if (decision === undefined) {
  			decision = 0;
  		}
  		/**
  		 * From which ATN state did we create this DFA?
  		 */
  		this.atnStartState = atnStartState;
  		this.decision = decision;
  		/**
  		 * A set of all DFA states. Use {@link Map} so we can get old state back
  		 * ({@link Set} only allows you to see if it's there).
  		 */
  		this._states = new Set$5();
  		this.s0 = null;
  		/**
  		 * {@code true} if this DFA is for a precedence decision; otherwise,
  		 * {@code false}. This is the backing field for {@link //isPrecedenceDfa},
  		 * {@link //setPrecedenceDfa}
  		 */
  		this.precedenceDfa = false;
  		if (atnStartState instanceof StarLoopEntryState$2)
  		{
  			if (atnStartState.isPrecedenceDecision) {
  				this.precedenceDfa = true;
  				const precedenceState = new DFAState$4(null, new ATNConfigSet$5());
  				precedenceState.edges = [];
  				precedenceState.isAcceptState = false;
  				precedenceState.requiresFullContext = false;
  				this.s0 = precedenceState;
  			}
  		}
  	}

  	/**
  	 * Get the start state for a specific precedence value.
  	 *
  	 * @param precedence The current precedence.
  	 * @return The start state corresponding to the specified precedence, or
  	 * {@code null} if no start state exists for the specified precedence.
  	 *
  	 * @throws IllegalStateException if this is not a precedence DFA.
  	 * @see //isPrecedenceDfa()
  	 */
  	getPrecedenceStartState(precedence) {
  		if (!(this.precedenceDfa)) {
  			throw ("Only precedence DFAs may contain a precedence start state.");
  		}
  		// s0.edges is never null for a precedence DFA
  		if (precedence < 0 || precedence >= this.s0.edges.length) {
  			return null;
  		}
  		return this.s0.edges[precedence] || null;
  	}

  	/**
  	 * Set the start state for a specific precedence value.
  	 *
  	 * @param precedence The current precedence.
  	 * @param startState The start state corresponding to the specified
  	 * precedence.
  	 *
  	 * @throws IllegalStateException if this is not a precedence DFA.
  	 * @see //isPrecedenceDfa()
  	 */
  	setPrecedenceStartState(precedence, startState) {
  		if (!(this.precedenceDfa)) {
  			throw ("Only precedence DFAs may contain a precedence start state.");
  		}
  		if (precedence < 0) {
  			return;
  		}

  		/**
  		 * synchronization on s0 here is ok. when the DFA is turned into a
  		 * precedence DFA, s0 will be initialized once and not updated again
  		 * s0.edges is never null for a precedence DFA
  		 */
  		this.s0.edges[precedence] = startState;
  	}

  	/**
  	 * Sets whether this is a precedence DFA. If the specified value differs
  	 * from the current DFA configuration, the following actions are taken;
  	 * otherwise no changes are made to the current DFA.
  	 *
  	 * <ul>
  	 * <li>The {@link //states} map is cleared</li>
  	 * <li>If {@code precedenceDfa} is {@code false}, the initial state
  	 * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
  	 * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
  	 * store the start states for individual precedence values.</li>
  	 * <li>The {@link //precedenceDfa} field is updated</li>
  	 * </ul>
  	 *
  	 * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
  	 * {@code false}
  	 */
  	setPrecedenceDfa(precedenceDfa) {
  		if (this.precedenceDfa!==precedenceDfa) {
  			this._states = new DFAStatesSet();
  			if (precedenceDfa) {
  				const precedenceState = new DFAState$4(null, new ATNConfigSet$5());
  				precedenceState.edges = [];
  				precedenceState.isAcceptState = false;
  				precedenceState.requiresFullContext = false;
  				this.s0 = precedenceState;
  			} else {
  				this.s0 = null;
  			}
  			this.precedenceDfa = precedenceDfa;
  		}
  	}

  	/**
  	 * Return a list of all states in this DFA, ordered by state number.
  	 */
  	sortedStates() {
  		const list = this._states.values();
  		return list.sort(function(a, b) {
  			return a.stateNumber - b.stateNumber;
  		});
  	}

  	toString(literalNames, symbolicNames) {
  		literalNames = literalNames || null;
  		symbolicNames = symbolicNames || null;
  		if (this.s0 === null) {
  			return "";
  		}
  		const serializer = new DFASerializer$1(this, literalNames, symbolicNames);
  		return serializer.toString();
  	}

  	toLexerString() {
  		if (this.s0 === null) {
  			return "";
  		}
  		const serializer = new LexerDFASerializer$1(this);
  		return serializer.toString();
  	}

  	get states(){
  		return this._states;
  	}
  }


  var DFA_1 = DFA;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  var DFA$1 = DFA_1;
  var DFASerializer$2 = DFASerializer_1.DFASerializer;
  var LexerDFASerializer$2 = DFASerializer_1.LexerDFASerializer;
  var PredPrediction$2 = DFAState_1.PredPrediction;

  var dfa = {
  	DFA: DFA$1,
  	DFASerializer: DFASerializer$2,
  	LexerDFASerializer: LexerDFASerializer$2,
  	PredPrediction: PredPrediction$2
  };

  /*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
  if (!String.fromCodePoint) {
  	(function() {
  		var defineProperty = (function() {
  			// IE 8 only supports `Object.defineProperty` on DOM elements
  			try {
  				var object = {};
  				var $defineProperty = Object.defineProperty;
  				var result = $defineProperty(object, object, object) && $defineProperty;
  			} catch(error) {}
  			return result;
  		}());
  		var stringFromCharCode = String.fromCharCode;
  		var floor = Math.floor;
  		var fromCodePoint = function(_) {
  			var MAX_SIZE = 0x4000;
  			var codeUnits = [];
  			var highSurrogate;
  			var lowSurrogate;
  			var index = -1;
  			var length = arguments.length;
  			if (!length) {
  				return '';
  			}
  			var result = '';
  			while (++index < length) {
  				var codePoint = Number(arguments[index]);
  				if (
  					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
  					codePoint < 0 || // not a valid Unicode code point
  					codePoint > 0x10FFFF || // not a valid Unicode code point
  					floor(codePoint) != codePoint // not an integer
  				) {
  					throw RangeError('Invalid code point: ' + codePoint);
  				}
  				if (codePoint <= 0xFFFF) { // BMP code point
  					codeUnits.push(codePoint);
  				} else { // Astral code point; split in surrogate halves
  					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
  					codePoint -= 0x10000;
  					highSurrogate = (codePoint >> 10) + 0xD800;
  					lowSurrogate = (codePoint % 0x400) + 0xDC00;
  					codeUnits.push(highSurrogate, lowSurrogate);
  				}
  				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
  					result += stringFromCharCode.apply(null, codeUnits);
  					codeUnits.length = 0;
  				}
  			}
  			return result;
  		};
  		if (defineProperty) {
  			defineProperty(String, 'fromCodePoint', {
  				'value': fromCodePoint,
  				'configurable': true,
  				'writable': true
  			});
  		} else {
  			String.fromCodePoint = fromCodePoint;
  		}
  	}());
  }

  var fromcodepoint = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  var tree = {...Tree_1, Trees: Trees_1};

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {BitSet: BitSet$4} = Utils;
  const {ErrorListener: ErrorListener$1} = ErrorListener_1;
  const {Interval: Interval$4} = IntervalSet_1;


  /**
   * This implementation of {@link ANTLRErrorListener} can be used to identify
   *  certain potential correctness and performance problems in grammars. "Reports"
   *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate
   *  message.
   *
   *  <ul>
   *  <li><b>Ambiguities</b>: These are cases where more than one path through the
   *  grammar can match the input.</li>
   *  <li><b>Weak context sensitivity</b>: These are cases where full-context
   *  prediction resolved an SLL conflict to a unique alternative which equaled the
   *  minimum alternative of the SLL conflict.</li>
   *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the
   *  full-context prediction resolved an SLL conflict to a unique alternative,
   *  <em>and</em> the minimum alternative of the SLL conflict was found to not be
   *  a truly viable alternative. Two-stage parsing cannot be used for inputs where
   *  this situation occurs.</li>
   *  </ul>
   */
  class DiagnosticErrorListener extends ErrorListener$1 {
  	constructor(exactOnly) {
  		super();
  		exactOnly = exactOnly || true;
  		// whether all ambiguities or only exact ambiguities are reported.
  		this.exactOnly = exactOnly;
  	}

  	reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
  		if (this.exactOnly && !exact) {
  			return;
  		}
  		const msg = "reportAmbiguity d=" +
  			this.getDecisionDescription(recognizer, dfa) +
  			": ambigAlts=" +
  			this.getConflictingAlts(ambigAlts, configs) +
  			", input='" +
  			recognizer.getTokenStream().getText(new Interval$4(startIndex, stopIndex)) + "'";
  		recognizer.notifyErrorListeners(msg);
  	}

  	reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
  		const msg = "reportAttemptingFullContext d=" +
  			this.getDecisionDescription(recognizer, dfa) +
  			", input='" +
  			recognizer.getTokenStream().getText(new Interval$4(startIndex, stopIndex)) + "'";
  		recognizer.notifyErrorListeners(msg);
  	}

  	reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
  		const msg = "reportContextSensitivity d=" +
  			this.getDecisionDescription(recognizer, dfa) +
  			", input='" +
  			recognizer.getTokenStream().getText(new Interval$4(startIndex, stopIndex)) + "'";
  		recognizer.notifyErrorListeners(msg);
  	}

  	getDecisionDescription(recognizer, dfa) {
  		const decision = dfa.decision;
  		const ruleIndex = dfa.atnStartState.ruleIndex;

  		const ruleNames = recognizer.ruleNames;
  		if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
  			return "" + decision;
  		}
  		const ruleName = ruleNames[ruleIndex] || null;
  		if (ruleName === null || ruleName.length === 0) {
  			return "" + decision;
  		}
  		return `${decision} (${ruleName})`;
  	}

  	/**
  	 * Computes the set of conflicting or ambiguous alternatives from a
  	 * configuration set, if that information was not already provided by the
  	 * parser.
  	 *
  	 * @param reportedAlts The set of conflicting or ambiguous alternatives, as
  	 * reported by the parser.
  	 * @param configs The conflicting or ambiguous configuration set.
  	 * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
  	 * returns the set of alternatives represented in {@code configs}.
       */
  	getConflictingAlts(reportedAlts, configs) {
  		if (reportedAlts !== null) {
  			return reportedAlts;
  		}
  		const result = new BitSet$4();
  		for (let i = 0; i < configs.items.length; i++) {
  			result.add(configs.items[i].alt);
  		}
  		return `{${result.values().join(", ")}}`;
  	}
  }

  var DiagnosticErrorListener_1 = DiagnosticErrorListener;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$c} = Token_1;
  const {NoViableAltException: NoViableAltException$2, InputMismatchException: InputMismatchException$1, FailedPredicateException: FailedPredicateException$1, ParseCancellationException: ParseCancellationException$1} = Errors;
  const {ATNState: ATNState$3} = ATNState_1;
  const {Interval: Interval$5, IntervalSet: IntervalSet$5} = IntervalSet_1;

  class ErrorStrategy {

      reset(recognizer) {
      }

      recoverInline(recognizer) {
      }

      recover(recognizer, e) {
      }

      sync(recognizer) {
      }

      inErrorRecoveryMode(recognizer) {
      }

      reportError(recognizer) {
      }
  }


  /**
   * This is the default implementation of {@link ANTLRErrorStrategy} used for
   * error reporting and recovery in ANTLR parsers.
  */
  class DefaultErrorStrategy extends ErrorStrategy {
      constructor() {
          super();
          /**
           * Indicates whether the error strategy is currently "recovering from an
           * error". This is used to suppress reporting multiple error messages while
           * attempting to recover from a detected syntax error.
           *
           * @see //inErrorRecoveryMode
           */
          this.errorRecoveryMode = false;

          /**
           * The index into the input stream where the last error occurred.
           * This is used to prevent infinite loops where an error is found
           * but no token is consumed during recovery...another error is found,
           * ad nauseum. This is a failsafe mechanism to guarantee that at least
           * one token/tree node is consumed for two errors.
           */
          this.lastErrorIndex = -1;
          this.lastErrorStates = null;
      }

      /**
       * <p>The default implementation simply calls {@link //endErrorCondition} to
       * ensure that the handler is not in error recovery mode.</p>
      */
      reset(recognizer) {
          this.endErrorCondition(recognizer);
      }

      /**
       * This method is called to enter error recovery mode when a recognition
       * exception is reported.
       *
       * @param recognizer the parser instance
      */
      beginErrorCondition(recognizer) {
          this.errorRecoveryMode = true;
      }

      inErrorRecoveryMode(recognizer) {
          return this.errorRecoveryMode;
      }

      /**
       * This method is called to leave error recovery mode after recovering from
       * a recognition exception.
       * @param recognizer
       */
      endErrorCondition(recognizer) {
          this.errorRecoveryMode = false;
          this.lastErrorStates = null;
          this.lastErrorIndex = -1;
      }

      /**
       * {@inheritDoc}
       * <p>The default implementation simply calls {@link //endErrorCondition}.</p>
       */
      reportMatch(recognizer) {
          this.endErrorCondition(recognizer);
      }

      /**
       * {@inheritDoc}
       *
       * <p>The default implementation returns immediately if the handler is already
       * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
       * and dispatches the reporting task based on the runtime type of {@code e}
       * according to the following table.</p>
       *
       * <ul>
       * <li>{@link NoViableAltException}: Dispatches the call to
       * {@link //reportNoViableAlternative}</li>
       * <li>{@link InputMismatchException}: Dispatches the call to
       * {@link //reportInputMismatch}</li>
       * <li>{@link FailedPredicateException}: Dispatches the call to
       * {@link //reportFailedPredicate}</li>
       * <li>All other types: calls {@link Parser//notifyErrorListeners} to report
       * the exception</li>
       * </ul>
       */
      reportError(recognizer, e) {
         // if we've already reported an error and have not matched a token
         // yet successfully, don't report any errors.
          if(this.inErrorRecoveryMode(recognizer)) {
              return; // don't report spurious errors
          }
          this.beginErrorCondition(recognizer);
          if ( e instanceof NoViableAltException$2 ) {
              this.reportNoViableAlternative(recognizer, e);
          } else if ( e instanceof InputMismatchException$1 ) {
              this.reportInputMismatch(recognizer, e);
          } else if ( e instanceof FailedPredicateException$1 ) {
              this.reportFailedPredicate(recognizer, e);
          } else {
              console.log("unknown recognition error type: " + e.constructor.name);
              console.log(e.stack);
              recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
          }
      }

      /**
       *
       * {@inheritDoc}
       *
       * <p>The default implementation resynchronizes the parser by consuming tokens
       * until we find one in the resynchronization set--loosely the set of tokens
       * that can follow the current rule.</p>
       *
       */
      recover(recognizer, e) {
          if (this.lastErrorIndex===recognizer.getInputStream().index &&
              this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
              // uh oh, another error at same token index and previously-visited
              // state in ATN; must be a case where LT(1) is in the recovery
              // token set so nothing got consumed. Consume a single token
              // at least to prevent an infinite loop; this is a failsafe.
              recognizer.consume();
          }
          this.lastErrorIndex = recognizer._input.index;
          if (this.lastErrorStates === null) {
              this.lastErrorStates = [];
          }
          this.lastErrorStates.push(recognizer.state);
          const followSet = this.getErrorRecoverySet(recognizer);
          this.consumeUntil(recognizer, followSet);
      }

      /**
       * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
       * that the current lookahead symbol is consistent with what were expecting
       * at this point in the ATN. You can call this anytime but ANTLR only
       * generates code to check before subrules/loops and each iteration.
       *
       * <p>Implements Jim Idle's magic sync mechanism in closures and optional
       * subrules. E.g.,</p>
       *
       * <pre>
       * a : sync ( stuff sync )* ;
       * sync : {consume to what can follow sync} ;
       * </pre>
       *
       * At the start of a sub rule upon error, {@link //sync} performs single
       * token deletion, if possible. If it can't do that, it bails on the current
       * rule and uses the default error recovery, which consumes until the
       * resynchronization set of the current rule.
       *
       * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
       * with an empty alternative), then the expected set includes what follows
       * the subrule.</p>
       *
       * <p>During loop iteration, it consumes until it sees a token that can start a
       * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
       * stay in the loop as long as possible.</p>
       *
       * <p><strong>ORIGINS</strong></p>
       *
       * <p>Previous versions of ANTLR did a poor job of their recovery within loops.
       * A single mismatch token or missing token would force the parser to bail
       * out of the entire rules surrounding the loop. So, for rule</p>
       *
       * <pre>
       * classDef : 'class' ID '{' member* '}'
       * </pre>
       *
       * input with an extra token between members would force the parser to
       * consume until it found the next class definition rather than the next
       * member definition of the current class.
       *
       * <p>This functionality cost a little bit of effort because the parser has to
       * compare token set at the start of the loop and at each iteration. If for
       * some reason speed is suffering for you, you can turn off this
       * functionality by simply overriding this method as a blank { }.</p>
       *
       */
      sync(recognizer) {
          // If already recovering, don't try to sync
          if (this.inErrorRecoveryMode(recognizer)) {
              return;
          }
          const s = recognizer._interp.atn.states[recognizer.state];
          const la = recognizer.getTokenStream().LA(1);
          // try cheaper subset first; might get lucky. seems to shave a wee bit off
          const nextTokens = recognizer.atn.nextTokens(s);
          if (nextTokens.contains(Token$c.EPSILON) || nextTokens.contains(la)) {
              return;
          }
          switch (s.stateType) {
          case ATNState$3.BLOCK_START:
          case ATNState$3.STAR_BLOCK_START:
          case ATNState$3.PLUS_BLOCK_START:
          case ATNState$3.STAR_LOOP_ENTRY:
             // report error and recover if possible
              if( this.singleTokenDeletion(recognizer) !== null) {
                  return;
              } else {
                  throw new InputMismatchException$1(recognizer);
              }
          case ATNState$3.PLUS_LOOP_BACK:
          case ATNState$3.STAR_LOOP_BACK:
              this.reportUnwantedToken(recognizer);
              const expecting = new IntervalSet$5();
              expecting.addSet(recognizer.getExpectedTokens());
              const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
              this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
              break;
              // do nothing if we can't identify the exact kind of ATN state
          }
      }

      /**
       * This is called by {@link //reportError} when the exception is a
       * {@link NoViableAltException}.
       *
       * @see //reportError
       *
       * @param recognizer the parser instance
       * @param e the recognition exception
       */
      reportNoViableAlternative(recognizer, e) {
          const tokens = recognizer.getTokenStream();
          let input;
          if(tokens !== null) {
              if (e.startToken.type===Token$c.EOF) {
                  input = "<EOF>";
              } else {
                  input = tokens.getText(new Interval$5(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
              }
          } else {
              input = "<unknown input>";
          }
          const msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
          recognizer.notifyErrorListeners(msg, e.offendingToken, e);
      }

      /**
       * This is called by {@link //reportError} when the exception is an
       * {@link InputMismatchException}.
       *
       * @see //reportError
       *
       * @param recognizer the parser instance
       * @param e the recognition exception
       */
      reportInputMismatch(recognizer, e) {
          const msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
              " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
          recognizer.notifyErrorListeners(msg, e.offendingToken, e);
      }

      /**
       * This is called by {@link //reportError} when the exception is a
       * {@link FailedPredicateException}.
       *
       * @see //reportError
       *
       * @param recognizer the parser instance
       * @param e the recognition exception
       */
      reportFailedPredicate(recognizer, e) {
          const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
          const msg = "rule " + ruleName + " " + e.message;
          recognizer.notifyErrorListeners(msg, e.offendingToken, e);
      }

      /**
       * This method is called to report a syntax error which requires the removal
       * of a token from the input stream. At the time this method is called, the
       * erroneous symbol is current {@code LT(1)} symbol and has not yet been
       * removed from the input stream. When this method returns,
       * {@code recognizer} is in error recovery mode.
       *
       * <p>This method is called when {@link //singleTokenDeletion} identifies
       * single-token deletion as a viable recovery strategy for a mismatched
       * input error.</p>
       *
       * <p>The default implementation simply returns if the handler is already in
       * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
       * enter error recovery mode, followed by calling
       * {@link Parser//notifyErrorListeners}.</p>
       *
       * @param recognizer the parser instance
       *
       */
      reportUnwantedToken(recognizer) {
          if (this.inErrorRecoveryMode(recognizer)) {
              return;
          }
          this.beginErrorCondition(recognizer);
          const t = recognizer.getCurrentToken();
          const tokenName = this.getTokenErrorDisplay(t);
          const expecting = this.getExpectedTokens(recognizer);
          const msg = "extraneous input " + tokenName + " expecting " +
              expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
          recognizer.notifyErrorListeners(msg, t, null);
      }

      /**
       * This method is called to report a syntax error which requires the
       * insertion of a missing token into the input stream. At the time this
       * method is called, the missing token has not yet been inserted. When this
       * method returns, {@code recognizer} is in error recovery mode.
       *
       * <p>This method is called when {@link //singleTokenInsertion} identifies
       * single-token insertion as a viable recovery strategy for a mismatched
       * input error.</p>
       *
       * <p>The default implementation simply returns if the handler is already in
       * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
       * enter error recovery mode, followed by calling
       * {@link Parser//notifyErrorListeners}.</p>
       *
       * @param recognizer the parser instance
       */
      reportMissingToken(recognizer) {
          if ( this.inErrorRecoveryMode(recognizer)) {
              return;
          }
          this.beginErrorCondition(recognizer);
          const t = recognizer.getCurrentToken();
          const expecting = this.getExpectedTokens(recognizer);
          const msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
              " at " + this.getTokenErrorDisplay(t);
          recognizer.notifyErrorListeners(msg, t, null);
      }

      /**
       * <p>The default implementation attempts to recover from the mismatched input
       * by using single token insertion and deletion as described below. If the
       * recovery attempt fails, this method throws an
       * {@link InputMismatchException}.</p>
       *
       * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
       *
       * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
       * right token, however, then assume {@code LA(1)} is some extra spurious
       * token and delete it. Then consume and return the next token (which was
       * the {@code LA(2)} token) as the successful result of the match operation.</p>
       *
       * <p>This recovery strategy is implemented by {@link
       * //singleTokenDeletion}.</p>
       *
       * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
       *
       * <p>If current token (at {@code LA(1)}) is consistent with what could come
       * after the expected {@code LA(1)} token, then assume the token is missing
       * and use the parser's {@link TokenFactory} to create it on the fly. The
       * "insertion" is performed by returning the created token as the successful
       * result of the match operation.</p>
       *
       * <p>This recovery strategy is implemented by {@link
       * //singleTokenInsertion}.</p>
       *
       * <p><strong>EXAMPLE</strong></p>
       *
       * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
       * the parser returns from the nested call to {@code expr}, it will have
       * call chain:</p>
       *
       * <pre>
       * stat &rarr; expr &rarr; atom
       * </pre>
       *
       * and it will be trying to match the {@code ')'} at this point in the
       * derivation:
       *
       * <pre>
       * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
       * ^
       * </pre>
       *
       * The attempt to match {@code ')'} will fail when it sees {@code ';'} and
       * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
       * is in the set of tokens that can follow the {@code ')'} token reference
       * in rule {@code atom}. It can assume that you forgot the {@code ')'}.
       */
      recoverInline(recognizer) {
          // SINGLE TOKEN DELETION
          const matchedSymbol = this.singleTokenDeletion(recognizer);
          if (matchedSymbol !== null) {
              // we have deleted the extra token.
              // now, move past ttype token as if all were ok
              recognizer.consume();
              return matchedSymbol;
          }
          // SINGLE TOKEN INSERTION
          if (this.singleTokenInsertion(recognizer)) {
              return this.getMissingSymbol(recognizer);
          }
          // even that didn't work; must throw the exception
          throw new InputMismatchException$1(recognizer);
      }

      /**
       * This method implements the single-token insertion inline error recovery
       * strategy. It is called by {@link //recoverInline} if the single-token
       * deletion strategy fails to recover from the mismatched input. If this
       * method returns {@code true}, {@code recognizer} will be in error recovery
       * mode.
       *
       * <p>This method determines whether or not single-token insertion is viable by
       * checking if the {@code LA(1)} input symbol could be successfully matched
       * if it were instead the {@code LA(2)} symbol. If this method returns
       * {@code true}, the caller is responsible for creating and inserting a
       * token with the correct type to produce this behavior.</p>
       *
       * @param recognizer the parser instance
       * @return {@code true} if single-token insertion is a viable recovery
       * strategy for the current mismatched input, otherwise {@code false}
       */
      singleTokenInsertion(recognizer) {
          const currentSymbolType = recognizer.getTokenStream().LA(1);
          // if current token is consistent with what could come after current
          // ATN state, then we know we're missing a token; error recovery
          // is free to conjure up and insert the missing token
          const atn = recognizer._interp.atn;
          const currentState = atn.states[recognizer.state];
          const next = currentState.transitions[0].target;
          const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
          if (expectingAtLL2.contains(currentSymbolType) ){
              this.reportMissingToken(recognizer);
              return true;
          } else {
              return false;
          }
      }

      /**
       * This method implements the single-token deletion inline error recovery
       * strategy. It is called by {@link //recoverInline} to attempt to recover
       * from mismatched input. If this method returns null, the parser and error
       * handler state will not have changed. If this method returns non-null,
       * {@code recognizer} will <em>not</em> be in error recovery mode since the
       * returned token was a successful match.
       *
       * <p>If the single-token deletion is successful, this method calls
       * {@link //reportUnwantedToken} to report the error, followed by
       * {@link Parser//consume} to actually "delete" the extraneous token. Then,
       * before returning {@link //reportMatch} is called to signal a successful
       * match.</p>
       *
       * @param recognizer the parser instance
       * @return the successfully matched {@link Token} instance if single-token
       * deletion successfully recovers from the mismatched input, otherwise
       * {@code null}
       */
      singleTokenDeletion(recognizer) {
          const nextTokenType = recognizer.getTokenStream().LA(2);
          const expecting = this.getExpectedTokens(recognizer);
          if (expecting.contains(nextTokenType)) {
              this.reportUnwantedToken(recognizer);
              // print("recoverFromMismatchedToken deleting " \
              // + str(recognizer.getTokenStream().LT(1)) \
              // + " since " + str(recognizer.getTokenStream().LT(2)) \
              // + " is what we want", file=sys.stderr)
              recognizer.consume(); // simply delete extra token
              // we want to return the token we're actually matching
              const matchedSymbol = recognizer.getCurrentToken();
              this.reportMatch(recognizer); // we know current token is correct
              return matchedSymbol;
          } else {
              return null;
          }
      }

      /**
       * Conjure up a missing token during error recovery.
       *
       * The recognizer attempts to recover from single missing
       * symbols. But, actions might refer to that missing symbol.
       * For example, x=ID {f($x);}. The action clearly assumes
       * that there has been an identifier matched previously and that
       * $x points at that token. If that token is missing, but
       * the next token in the stream is what we want we assume that
       * this token is missing and we keep going. Because we
       * have to return some token to replace the missing token,
       * we have to conjure one up. This method gives the user control
       * over the tokens returned for missing tokens. Mostly,
       * you will want to create something special for identifier
       * tokens. For literals such as '{' and ',', the default
       * action in the parser or tree parser works. It simply creates
       * a CommonToken of the appropriate type. The text will be the token.
       * If you change what tokens must be created by the lexer,
       * override this method to create the appropriate tokens.
       *
       */
      getMissingSymbol(recognizer) {
          const currentSymbol = recognizer.getCurrentToken();
          const expecting = this.getExpectedTokens(recognizer);
          const expectedTokenType = expecting.first(); // get any element
          let tokenText;
          if (expectedTokenType===Token$c.EOF) {
              tokenText = "<missing EOF>";
          } else {
              tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
          }
          let current = currentSymbol;
          const lookback = recognizer.getTokenStream().LT(-1);
          if (current.type===Token$c.EOF && lookback !== null) {
              current = lookback;
          }
          return recognizer.getTokenFactory().create(current.source,
              expectedTokenType, tokenText, Token$c.DEFAULT_CHANNEL,
              -1, -1, current.line, current.column);
      }

      getExpectedTokens(recognizer) {
          return recognizer.getExpectedTokens();
      }

      /**
       * How should a token be displayed in an error message? The default
       * is to display just the text, but during development you might
       * want to have a lot of information spit out. Override in that case
       * to use t.toString() (which, for CommonToken, dumps everything about
       * the token). This is better than forcing you to override a method in
       * your token objects because you don't have to go modify your lexer
       * so that it creates a new Java type.
       */
      getTokenErrorDisplay(t) {
          if (t === null) {
              return "<no token>";
          }
          let s = t.text;
          if (s === null) {
              if (t.type===Token$c.EOF) {
                  s = "<EOF>";
              } else {
                  s = "<" + t.type + ">";
              }
          }
          return this.escapeWSAndQuote(s);
      }

      escapeWSAndQuote(s) {
          s = s.replace(/\n/g,"\\n");
          s = s.replace(/\r/g,"\\r");
          s = s.replace(/\t/g,"\\t");
          return "'" + s + "'";
      }

      /**
       * Compute the error recovery set for the current rule. During
       * rule invocation, the parser pushes the set of tokens that can
       * follow that rule reference on the stack; this amounts to
       * computing FIRST of what follows the rule reference in the
       * enclosing rule. See LinearApproximator.FIRST().
       * This local follow set only includes tokens
       * from within the rule; i.e., the FIRST computation done by
       * ANTLR stops at the end of a rule.
       *
       * EXAMPLE
       *
       * When you find a "no viable alt exception", the input is not
       * consistent with any of the alternatives for rule r. The best
       * thing to do is to consume tokens until you see something that
       * can legally follow a call to r//or* any rule that called r.
       * You don't want the exact set of viable next tokens because the
       * input might just be missing a token--you might consume the
       * rest of the input looking for one of the missing tokens.
       *
       * Consider grammar:
       *
       * a : '[' b ']'
       * | '(' b ')'
       * ;
       * b : c '^' INT ;
       * c : ID
       * | INT
       * ;
       *
       * At each rule invocation, the set of tokens that could follow
       * that rule is pushed on a stack. Here are the various
       * context-sensitive follow sets:
       *
       * FOLLOW(b1_in_a) = FIRST(']') = ']'
       * FOLLOW(b2_in_a) = FIRST(')') = ')'
       * FOLLOW(c_in_b) = FIRST('^') = '^'
       *
       * Upon erroneous input "[]", the call chain is
       *
       * a -> b -> c
       *
       * and, hence, the follow context stack is:
       *
       * depth follow set start of rule execution
       * 0 <EOF> a (from main())
       * 1 ']' b
       * 2 '^' c
       *
       * Notice that ')' is not included, because b would have to have
       * been called from a different context in rule a for ')' to be
       * included.
       *
       * For error recovery, we cannot consider FOLLOW(c)
       * (context-sensitive or otherwise). We need the combined set of
       * all context-sensitive FOLLOW sets--the set of all tokens that
       * could follow any reference in the call chain. We need to
       * resync to one of those tokens. Note that FOLLOW(c)='^' and if
       * we resync'd to that token, we'd consume until EOF. We need to
       * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
       * In this case, for input "[]", LA(1) is ']' and in the set, so we would
       * not consume anything. After printing an error, rule c would
       * return normally. Rule b would not find the required '^' though.
       * At this point, it gets a mismatched token error and throws an
       * exception (since LA(1) is not in the viable following token
       * set). The rule exception handler tries to recover, but finds
       * the same recovery set and doesn't consume anything. Rule b
       * exits normally returning to rule a. Now it finds the ']' (and
       * with the successful match exits errorRecovery mode).
       *
       * So, you can see that the parser walks up the call chain looking
       * for the token that was a member of the recovery set.
       *
       * Errors are not generated in errorRecovery mode.
       *
       * ANTLR's error recovery mechanism is based upon original ideas:
       *
       * "Algorithms + Data Structures = Programs" by Niklaus Wirth
       *
       * and
       *
       * "A note on error recovery in recursive descent parsers":
       * http://portal.acm.org/citation.cfm?id=947902.947905
       *
       * Later, Josef Grosch had some good ideas:
       *
       * "Efficient and Comfortable Error Recovery in Recursive Descent
       * Parsers":
       * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
       *
       * Like Grosch I implement context-sensitive FOLLOW sets that are combined
       * at run-time upon error to avoid overhead during parsing.
       */
      getErrorRecoverySet(recognizer) {
          const atn = recognizer._interp.atn;
          let ctx = recognizer._ctx;
          const recoverSet = new IntervalSet$5();
          while (ctx !== null && ctx.invokingState>=0) {
              // compute what follows who invoked us
              const invokingState = atn.states[ctx.invokingState];
              const rt = invokingState.transitions[0];
              const follow = atn.nextTokens(rt.followState);
              recoverSet.addSet(follow);
              ctx = ctx.parentCtx;
          }
          recoverSet.removeOne(Token$c.EPSILON);
          return recoverSet;
      }

  // Consume tokens until one matches the given token set.//
      consumeUntil(recognizer, set) {
          let ttype = recognizer.getTokenStream().LA(1);
          while( ttype !== Token$c.EOF && !set.contains(ttype)) {
              recognizer.consume();
              ttype = recognizer.getTokenStream().LA(1);
          }
      }
  }


  /**
   * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
   * by immediately canceling the parse operation with a
   * {@link ParseCancellationException}. The implementation ensures that the
   * {@link ParserRuleContext//exception} field is set for all parse tree nodes
   * that were not completed prior to encountering the error.
   *
   * <p>
   * This error strategy is useful in the following scenarios.</p>
   *
   * <ul>
   * <li><strong>Two-stage parsing:</strong> This error strategy allows the first
   * stage of two-stage parsing to immediately terminate if an error is
   * encountered, and immediately fall back to the second stage. In addition to
   * avoiding wasted work by attempting to recover from errors here, the empty
   * implementation of {@link BailErrorStrategy//sync} improves the performance of
   * the first stage.</li>
   * <li><strong>Silent validation:</strong> When syntax errors are not being
   * reported or logged, and the parse result is simply ignored if errors occur,
   * the {@link BailErrorStrategy} avoids wasting work on recovering from errors
   * when the result will be ignored either way.</li>
   * </ul>
   *
   * <p>
   * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
   *
   * @see Parser//setErrorHandler(ANTLRErrorStrategy)
   * */
  class BailErrorStrategy extends DefaultErrorStrategy {
      constructor() {
          super();
      }

      /**
       * Instead of recovering from exception {@code e}, re-throw it wrapped
       * in a {@link ParseCancellationException} so it is not caught by the
       * rule function catches. Use {@link Exception//getCause()} to get the
       * original {@link RecognitionException}.
       */
      recover(recognizer, e) {
          let context = recognizer._ctx;
          while (context !== null) {
              context.exception = e;
              context = context.parentCtx;
          }
          throw new ParseCancellationException$1(e);
      }

      /**
       * Make sure we don't attempt to recover inline; if the parser
       * successfully recovers, it won't throw an exception.
       */
      recoverInline(recognizer) {
          this.recover(recognizer, new InputMismatchException$1(recognizer));
      }

  // Make sure we don't attempt to recover from problems in subrules.//
      sync(recognizer) {
          // pass
      }
  }


  var ErrorStrategy_1 = {BailErrorStrategy, DefaultErrorStrategy};

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  var RecognitionException$2 = Errors.RecognitionException;
  var NoViableAltException$3 = Errors.NoViableAltException;
  var LexerNoViableAltException$3 = Errors.LexerNoViableAltException;
  var InputMismatchException$2 = Errors.InputMismatchException;
  var FailedPredicateException$2 = Errors.FailedPredicateException;
  var DiagnosticErrorListener$1 = DiagnosticErrorListener_1;
  var BailErrorStrategy$1 = ErrorStrategy_1.BailErrorStrategy;
  var DefaultErrorStrategy$1 = ErrorStrategy_1.DefaultErrorStrategy;
  var ErrorListener$2 = ErrorListener_1.ErrorListener;

  var error = {
  	RecognitionException: RecognitionException$2,
  	NoViableAltException: NoViableAltException$3,
  	LexerNoViableAltException: LexerNoViableAltException$3,
  	InputMismatchException: InputMismatchException$2,
  	FailedPredicateException: FailedPredicateException$2,
  	DiagnosticErrorListener: DiagnosticErrorListener$1,
  	BailErrorStrategy: BailErrorStrategy$1,
  	DefaultErrorStrategy: DefaultErrorStrategy$1,
  	ErrorListener: ErrorListener$2
  };

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var require$$1 = /*@__PURE__*/getAugmentedNamespace(codepointat);

  var require$$3 = /*@__PURE__*/getAugmentedNamespace(fromcodepoint);

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$d} = Token_1;



  /**
   * If decodeToUnicodeCodePoints is true, the input is treated
   * as a series of Unicode code points.
   *
   * Otherwise, the input is treated as a series of 16-bit UTF-16 code
   * units.
   */
  class InputStream {
  	constructor(data, decodeToUnicodeCodePoints) {
  		this.name = "<empty>";
  		this.strdata = data;
  		this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
  		// _loadString - Vacuum all input from a string and then treat it like a buffer.
  		this._index = 0;
  		this.data = [];
  		if (this.decodeToUnicodeCodePoints) {
  			for (let i = 0; i < this.strdata.length; ) {
  				const codePoint = this.strdata.codePointAt(i);
  				this.data.push(codePoint);
  				i += codePoint <= 0xFFFF ? 1 : 2;
  			}
  		} else {
  			for (let i = 0; i < this.strdata.length; i++) {
  				const codeUnit = this.strdata.charCodeAt(i);
  				this.data.push(codeUnit);
  			}
  		}
  		this._size = this.data.length;
  	}

  	/**
  	 * Reset the stream so that it's in the same state it was
  	 * when the object was created *except* the data array is not
  	 * touched.
  	 */
  	reset() {
  		this._index = 0;
  	}

  	consume() {
  		if (this._index >= this._size) {
  			// assert this.LA(1) == Token.EOF
  			throw ("cannot consume EOF");
  		}
  		this._index += 1;
  	}

  	LA(offset) {
  		if (offset === 0) {
  			return 0; // undefined
  		}
  		if (offset < 0) {
  			offset += 1; // e.g., translate LA(-1) to use offset=0
  		}
  		const pos = this._index + offset - 1;
  		if (pos < 0 || pos >= this._size) { // invalid
  			return Token$d.EOF;
  		}
  		return this.data[pos];
  	}

  	LT(offset) {
  		return this.LA(offset);
  	}

  // mark/release do nothing; we have entire buffer
  	mark() {
  		return -1;
  	}

  	release(marker) {
  	}

  	/**
  	 * consume() ahead until p==_index; can't just set p=_index as we must
  	 * update line and column. If we seek backwards, just set p
  	 */
  	seek(_index) {
  		if (_index <= this._index) {
  			this._index = _index; // just jump; don't update stream state (line,
  									// ...)
  			return;
  		}
  		// seek forward
  		this._index = Math.min(_index, this._size);
  	}

  	getText(start, stop) {
  		if (stop >= this._size) {
  			stop = this._size - 1;
  		}
  		if (start >= this._size) {
  			return "";
  		} else {
  			if (this.decodeToUnicodeCodePoints) {
  				let result = "";
  				for (let i = start; i <= stop; i++) {
  					result += String.fromCodePoint(this.data[i]);
  				}
  				return result;
  			} else {
  				return this.strdata.slice(start, stop + 1);
  			}
  		}
  	}

  	toString() {
  		return this.strdata;
  	}

  	get index(){
  		return this._index;
  	}

  	get size(){
  		return this._size;
  	}
  }


  var InputStream_1 = InputStream;

  var empty = {};

  var empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': empty
  });

  var fs = /*@__PURE__*/getAugmentedNamespace(empty$1);

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {InputStream: InputStream$1} = InputStream_1;


  /**
   * Utility functions to create InputStreams from various sources.
   *
   * All returned InputStreams support the full range of Unicode
   * up to U+10FFFF (the default behavior of InputStream only supports
   * code points up to U+FFFF).
   */
  const CharStreams = {
    // Creates an InputStream from a string.
    fromString: function(str) {
      return new InputStream$1(str, true);
    },

    /**
     * Asynchronously creates an InputStream from a blob given the
     * encoding of the bytes in that blob (defaults to 'utf8' if
     * encoding is null).
     *
     * Invokes onLoad(result) on success, onError(error) on
     * failure.
     */
    fromBlob: function(blob, encoding, onLoad, onError) {
      const reader = new window.FileReader();
      reader.onload = function(e) {
        const is = new InputStream$1(e.target.result, true);
        onLoad(is);
      };
      reader.onerror = onError;
      reader.readAsText(blob, encoding);
    },

    /**
     * Creates an InputStream from a Buffer given the
     * encoding of the bytes in that buffer (defaults to 'utf8' if
     * encoding is null).
     */
    fromBuffer: function(buffer, encoding) {
      return new InputStream$1(buffer.toString(encoding), true);
    },

    /** Asynchronously creates an InputStream from a file on disk given
     * the encoding of the bytes in that file (defaults to 'utf8' if
     * encoding is null).
     *
     * Invokes callback(error, result) on completion.
     */
    fromPath: function(path, encoding, callback) {
      fs.readFile(path, encoding, function(err, data) {
        let is = null;
        if (data !== null) {
          is = new InputStream$1(data, true);
        }
        callback(err, is);
      });
    },

    /**
     * Synchronously creates an InputStream given a path to a file
     * on disk and the encoding of the bytes in that file (defaults to
     * 'utf8' if encoding is null).
     */
    fromPathSync: function(path, encoding) {
      const data = fs.readFileSync(path, encoding);
      return new InputStream$1(data, true);
    }
  };

  var CharStreams_1 = CharStreams;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  /**
   * This is an InputStream that is loaded from a file all at once
   * when you construct the object.
   */
  class FileStream extends InputStream_1 {
  	constructor(fileName, decodeToUnicodeCodePoints) {
  		const data = fs.readFileSync(fileName, "utf8");
  		super(data, decodeToUnicodeCodePoints);
  		this.fileName = fileName;
  	}
  }

  var FileStream_1 = FileStream;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$e} = Token_1;

  const {Interval: Interval$6} = IntervalSet_1;

  // this is just to keep meaningful parameter types to Parser
  class TokenStream {}

  /**
   * This implementation of {@link TokenStream} loads tokens from a
   * {@link TokenSource} on-demand, and places the tokens in a buffer to provide
   * access to any previous token by index.
   *
   * <p>
   * This token stream ignores the value of {@link Token//getChannel}. If your
   * parser requires the token stream filter tokens to only those on a particular
   * channel, such as {@link Token//DEFAULT_CHANNEL} or
   * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
   * {@link CommonTokenStream}.</p>
   */
  class BufferedTokenStream extends TokenStream {
  	constructor(tokenSource) {

  		super();
  		// The {@link TokenSource} from which tokens for this stream are fetched.
  		this.tokenSource = tokenSource;
  		/**
  		 * A collection of all tokens fetched from the token source. The list is
  		 * considered a complete view of the input once {@link //fetchedEOF} is set
  		 * to {@code true}.
  		 */
  		this.tokens = [];

  		/**
  		 * The index into {@link //tokens} of the current token (next token to
  		 * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
  		 * be
  		 * {@link //LT LT(1)}.
  		 *
  		 * <p>This field is set to -1 when the stream is first constructed or when
  		 * {@link //setTokenSource} is called, indicating that the first token has
  		 * not yet been fetched from the token source. For additional information,
  		 * see the documentation of {@link IntStream} for a description of
  		 * Initializing Methods.</p>
  		 */
  		this.index = -1;

  		/**
  		 * Indicates whether the {@link Token//EOF} token has been fetched from
  		 * {@link //tokenSource} and added to {@link //tokens}. This field improves
  		 * performance for the following cases:
  		 *
  		 * <ul>
  		 * <li>{@link //consume}: The lookahead check in {@link //consume} to
  		 * prevent
  		 * consuming the EOF symbol is optimized by checking the values of
  		 * {@link //fetchedEOF} and {@link //p} instead of calling {@link
  		 * //LA}.</li>
  		 * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
  		 * into
  		 * {@link //tokens} is trivial with this field.</li>
  		 * <ul>
  		 */
  		this.fetchedEOF = false;
  	}

  	mark() {
  		return 0;
  	}

  	release(marker) {
  		// no resources to release
  	}

  	reset() {
  		this.seek(0);
  	}

  	seek(index) {
  		this.lazyInit();
  		this.index = this.adjustSeekIndex(index);
  	}

  	get(index) {
  		this.lazyInit();
  		return this.tokens[index];
  	}

  	consume() {
  		let skipEofCheck = false;
  		if (this.index >= 0) {
  			if (this.fetchedEOF) {
  				// the last token in tokens is EOF. skip check if p indexes any
  				// fetched token except the last.
  				skipEofCheck = this.index < this.tokens.length - 1;
  			} else {
  				// no EOF token in tokens. skip check if p indexes a fetched token.
  				skipEofCheck = this.index < this.tokens.length;
  			}
  		} else {
  			// not yet initialized
  			skipEofCheck = false;
  		}
  		if (!skipEofCheck && this.LA(1) === Token$e.EOF) {
  			throw "cannot consume EOF";
  		}
  		if (this.sync(this.index + 1)) {
  			this.index = this.adjustSeekIndex(this.index + 1);
  		}
  	}

  	/**
  	 * Make sure index {@code i} in tokens has a token.
  	 *
  	 * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise
  	 * {@code false}.
  	 * @see //get(int i)
  	 */
  	sync(i) {
  		const n = i - this.tokens.length + 1; // how many more elements we need?
  		if (n > 0) {
  			const fetched = this.fetch(n);
  			return fetched >= n;
  		}
  		return true;
  	}

  	/**
  	 * Add {@code n} elements to buffer.
  	 *
  	 * @return {Number} The actual number of elements added to the buffer.
  	 */
  	fetch(n) {
  		if (this.fetchedEOF) {
  			return 0;
  		}
  		for (let i = 0; i < n; i++) {
  			const t = this.tokenSource.nextToken();
  			t.tokenIndex = this.tokens.length;
  			this.tokens.push(t);
  			if (t.type === Token$e.EOF) {
  				this.fetchedEOF = true;
  				return i + 1;
  			}
  		}
  		return n;
  	}

  // Get all tokens from start..stop inclusively///
  	getTokens(start, stop, types) {
  		if (types === undefined) {
  			types = null;
  		}
  		if (start < 0 || stop < 0) {
  			return null;
  		}
  		this.lazyInit();
  		const subset = [];
  		if (stop >= this.tokens.length) {
  			stop = this.tokens.length - 1;
  		}
  		for (let i = start; i < stop; i++) {
  			const t = this.tokens[i];
  			if (t.type === Token$e.EOF) {
  				break;
  			}
  			if (types === null || types.contains(t.type)) {
  				subset.push(t);
  			}
  		}
  		return subset;
  	}

  	LA(i) {
  		return this.LT(i).type;
  	}

  	LB(k) {
  		if (this.index - k < 0) {
  			return null;
  		}
  		return this.tokens[this.index - k];
  	}

  	LT(k) {
  		this.lazyInit();
  		if (k === 0) {
  			return null;
  		}
  		if (k < 0) {
  			return this.LB(-k);
  		}
  		const i = this.index + k - 1;
  		this.sync(i);
  		if (i >= this.tokens.length) { // return EOF token
  			// EOF must be last token
  			return this.tokens[this.tokens.length - 1];
  		}
  		return this.tokens[i];
  	}

  	/**
  	 * Allowed derived classes to modify the behavior of operations which change
  	 * the current stream position by adjusting the target token index of a seek
  	 * operation. The default implementation simply returns {@code i}. If an
  	 * exception is thrown in this method, the current stream index should not be
  	 * changed.
  	 *
  	 * <p>For example, {@link CommonTokenStream} overrides this method to ensure
  	 * that
  	 * the seek target is always an on-channel token.</p>
  	 *
  	 * @param {Number} i The target token index.
  	 * @return {Number} The adjusted target token index.
  	 */
  	adjustSeekIndex(i) {
  		return i;
  	}

  	lazyInit() {
  		if (this.index === -1) {
  			this.setup();
  		}
  	}

  	setup() {
  		this.sync(0);
  		this.index = this.adjustSeekIndex(0);
  	}

  // Reset this token stream by setting its token source.///
  	setTokenSource(tokenSource) {
  		this.tokenSource = tokenSource;
  		this.tokens = [];
  		this.index = -1;
  		this.fetchedEOF = false;
  	}

  	/**
  	 * Given a starting index, return the index of the next token on channel.
  	 * Return i if tokens[i] is on channel. Return -1 if there are no tokens
  	 * on channel between i and EOF.
  	 */
  	nextTokenOnChannel(i, channel) {
  		this.sync(i);
  		if (i >= this.tokens.length) {
  			return -1;
  		}
  		let token = this.tokens[i];
  		while (token.channel !== this.channel) {
  			if (token.type === Token$e.EOF) {
  				return -1;
  			}
  			i += 1;
  			this.sync(i);
  			token = this.tokens[i];
  		}
  		return i;
  	}

  	/**
  	 * Given a starting index, return the index of the previous token on channel.
  	 * Return i if tokens[i] is on channel. Return -1 if there are no tokens
  	 * on channel between i and 0.
  	 */
  	previousTokenOnChannel(i, channel) {
  		while (i >= 0 && this.tokens[i].channel !== channel) {
  			i -= 1;
  		}
  		return i;
  	}

  	/**
  	 * Collect all tokens on specified channel to the right of
  	 * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
  	 * EOF. If channel is -1, find any non default channel token.
  	 */
  	getHiddenTokensToRight(tokenIndex,
  			channel) {
  		if (channel === undefined) {
  			channel = -1;
  		}
  		this.lazyInit();
  		if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
  			throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
  		}
  		const nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer_1.DEFAULT_TOKEN_CHANNEL);
  		const from_ = tokenIndex + 1;
  		// if none onchannel to right, nextOnChannel=-1 so set to = last token
  		const to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
  		return this.filterForChannel(from_, to, channel);
  	}

  	/**
  	 * Collect all tokens on specified channel to the left of
  	 * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
  	 * If channel is -1, find any non default channel token.
  	 */
  	getHiddenTokensToLeft(tokenIndex,
  			channel) {
  		if (channel === undefined) {
  			channel = -1;
  		}
  		this.lazyInit();
  		if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
  			throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
  		}
  		const prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer_1.DEFAULT_TOKEN_CHANNEL);
  		if (prevOnChannel === tokenIndex - 1) {
  			return null;
  		}
  		// if none on channel to left, prevOnChannel=-1 then from=0
  		const from_ = prevOnChannel + 1;
  		const to = tokenIndex - 1;
  		return this.filterForChannel(from_, to, channel);
  	}

  	filterForChannel(left, right, channel) {
  		const hidden = [];
  		for (let i = left; i < right + 1; i++) {
  			const t = this.tokens[i];
  			if (channel === -1) {
  				if (t.channel !== Lexer_1.DEFAULT_TOKEN_CHANNEL) {
  					hidden.push(t);
  				}
  			} else if (t.channel === channel) {
  				hidden.push(t);
  			}
  		}
  		if (hidden.length === 0) {
  			return null;
  		}
  		return hidden;
  	}

  	getSourceName() {
  		return this.tokenSource.getSourceName();
  	}

  // Get the text of all tokens in this buffer.///
  	getText(interval) {
  		this.lazyInit();
  		this.fill();
  		if (interval === undefined || interval === null) {
  			interval = new Interval$6(0, this.tokens.length - 1);
  		}
  		let start = interval.start;
  		if (start instanceof Token$e) {
  			start = start.tokenIndex;
  		}
  		let stop = interval.stop;
  		if (stop instanceof Token$e) {
  			stop = stop.tokenIndex;
  		}
  		if (start === null || stop === null || start < 0 || stop < 0) {
  			return "";
  		}
  		if (stop >= this.tokens.length) {
  			stop = this.tokens.length - 1;
  		}
  		let s = "";
  		for (let i = start; i < stop + 1; i++) {
  			const t = this.tokens[i];
  			if (t.type === Token$e.EOF) {
  				break;
  			}
  			s = s + t.text;
  		}
  		return s;
  	}

  // Get all tokens from lexer until EOF///
  	fill() {
  		this.lazyInit();
  		while (this.fetch(1000) === 1000) {
  			continue;
  		}
  	}
  }


  var BufferedTokenStream_1 = BufferedTokenStream;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const Token$f = Token_1.Token;


  /**
   * This class extends {@link BufferedTokenStream} with functionality to filter
   * token streams to tokens on a particular channel (tokens where
   * {@link Token//getChannel} returns a particular value).
   *
   * <p>
   * This token stream provides access to all tokens by index or when calling
   * methods like {@link //getText}. The channel filtering is only used for code
   * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
   * {@link //LB}.</p>
   *
   * <p>
   * By default, tokens are placed on the default channel
   * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
   * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
   * call {@link Lexer//setChannel}.
   * </p>
   *
   * <p>
   * Note: lexer rules which use the {@code ->skip} lexer command or call
   * {@link Lexer//skip} do not produce tokens at all, so input text matched by
   * such a rule will not be available as part of the token stream, regardless of
   * channel.</p>
   */
  class CommonTokenStream extends BufferedTokenStream_1 {
      constructor(lexer, channel) {
          super(lexer);
          this.channel = channel===undefined ? Token$f.DEFAULT_CHANNEL : channel;
      }

      adjustSeekIndex(i) {
          return this.nextTokenOnChannel(i, this.channel);
      }

      LB(k) {
          if (k===0 || this.index-k<0) {
              return null;
          }
          let i = this.index;
          let n = 1;
          // find k good tokens looking backwards
          while (n <= k) {
              // skip off-channel tokens
              i = this.previousTokenOnChannel(i - 1, this.channel);
              n += 1;
          }
          if (i < 0) {
              return null;
          }
          return this.tokens[i];
      }

      LT(k) {
          this.lazyInit();
          if (k === 0) {
              return null;
          }
          if (k < 0) {
              return this.LB(-k);
          }
          let i = this.index;
          let n = 1; // we know tokens[pos] is a good one
          // find k good tokens
          while (n < k) {
              // skip off-channel tokens, but make sure to not look past EOF
              if (this.sync(i + 1)) {
                  i = this.nextTokenOnChannel(i + 1, this.channel);
              }
              n += 1;
          }
          return this.tokens[i];
      }

      // Count EOF just once.
      getNumberOfOnChannelTokens() {
          let n = 0;
          this.fill();
          for (let i =0; i< this.tokens.length;i++) {
              const t = this.tokens[i];
              if( t.channel===this.channel) {
                  n += 1;
              }
              if( t.type===Token$f.EOF) {
                  break;
              }
          }
          return n;
      }
  }

  var CommonTokenStream_1 = CommonTokenStream;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  const {Token: Token$g} = Token_1;
  const {ParseTreeListener: ParseTreeListener$1, TerminalNode: TerminalNode$3, ErrorNode: ErrorNode$2} = Tree_1;

  const {DefaultErrorStrategy: DefaultErrorStrategy$2} = ErrorStrategy_1;




  class TraceListener extends ParseTreeListener$1 {
  	constructor(parser) {
  		super();
  		this.parser = parser;
  	}

  	enterEveryRule(ctx) {
  		console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
  	}

  	visitTerminal(node) {
  		console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
  	}

  	exitEveryRule(ctx) {
  		console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
  	}
  }

  class Parser extends Recognizer_1 {
  	/**
  	 * this is all the parsing support code essentially; most of it is error
  	 * recovery stuff.
  	 */
  	constructor(input) {
  		super();
  		// The input stream.
  		this._input = null;
  		/**
  		 * The error handling strategy for the parser. The default value is a new
  		 * instance of {@link DefaultErrorStrategy}.
  		 */
  		this._errHandler = new DefaultErrorStrategy$2();
  		this._precedenceStack = [];
  		this._precedenceStack.push(0);
  		/**
  		 * The {@link ParserRuleContext} object for the currently executing rule.
  		 * this is always non-null during the parsing process.
  		 */
  		this._ctx = null;
  		/**
  		 * Specifies whether or not the parser should construct a parse tree during
  		 * the parsing process. The default value is {@code true}.
  		 */
  		this.buildParseTrees = true;
  		/**
  		 * When {@link //setTrace}{@code (true)} is called, a reference to the
  		 * {@link TraceListener} is stored here so it can be easily removed in a
  		 * later call to {@link //setTrace}{@code (false)}. The listener itself is
  		 * implemented as a parser listener so this field is not directly used by
  		 * other parser methods.
  		 */
  		this._tracer = null;
  		/**
  		 * The list of {@link ParseTreeListener} listeners registered to receive
  		 * events during the parse.
  		 */
  		this._parseListeners = null;
  		/**
  		 * The number of syntax errors reported during parsing. this value is
  		 * incremented each time {@link //notifyErrorListeners} is called.
  		 */
  		this._syntaxErrors = 0;
  		this.setInputStream(input);
  	}

  	// reset the parser's state
  	reset() {
  		if (this._input !== null) {
  			this._input.seek(0);
  		}
  		this._errHandler.reset(this);
  		this._ctx = null;
  		this._syntaxErrors = 0;
  		this.setTrace(false);
  		this._precedenceStack = [];
  		this._precedenceStack.push(0);
  		if (this._interp !== null) {
  			this._interp.reset();
  		}
  	}

  	/**
  	 * Match current input symbol against {@code ttype}. If the symbol type
  	 * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
  	 * called to complete the match process.
  	 *
  	 * <p>If the symbol type does not match,
  	 * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
  	 * strategy to attempt recovery. If {@link //getBuildParseTree} is
  	 * {@code true} and the token index of the symbol returned by
  	 * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
  	 * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
  	 *
  	 * @param ttype the token type to match
  	 * @return the matched symbol
  	 * @throws RecognitionException if the current input symbol did not match
  	 * {@code ttype} and the error strategy could not recover from the
  	 * mismatched symbol
  	 */
  	match(ttype) {
  		let t = this.getCurrentToken();
  		if (t.type === ttype) {
  			this._errHandler.reportMatch(this);
  			this.consume();
  		} else {
  			t = this._errHandler.recoverInline(this);
  			if (this.buildParseTrees && t.tokenIndex === -1) {
  				// we must have conjured up a new token during single token
  				// insertion
  				// if it's not the current symbol
  				this._ctx.addErrorNode(t);
  			}
  		}
  		return t;
  	}

  	/**
  	 * Match current input symbol as a wildcard. If the symbol type matches
  	 * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
  	 * and {@link //consume} are called to complete the match process.
  	 *
  	 * <p>If the symbol type does not match,
  	 * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
  	 * strategy to attempt recovery. If {@link //getBuildParseTree} is
  	 * {@code true} and the token index of the symbol returned by
  	 * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
  	 * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
  	 *
  	 * @return the matched symbol
  	 * @throws RecognitionException if the current input symbol did not match
  	 * a wildcard and the error strategy could not recover from the mismatched
  	 * symbol
  	 */
  	matchWildcard() {
  		let t = this.getCurrentToken();
  		if (t.type > 0) {
  			this._errHandler.reportMatch(this);
  			this.consume();
  		} else {
  			t = this._errHandler.recoverInline(this);
  			if (this._buildParseTrees && t.tokenIndex === -1) {
  				// we must have conjured up a new token during single token
  				// insertion
  				// if it's not the current symbol
  				this._ctx.addErrorNode(t);
  			}
  		}
  		return t;
  	}

  	getParseListeners() {
  		return this._parseListeners || [];
  	}

  	/**
  	 * Registers {@code listener} to receive events during the parsing process.
  	 *
  	 * <p>To support output-preserving grammar transformations (including but not
  	 * limited to left-recursion removal, automated left-factoring, and
  	 * optimized code generation), calls to listener methods during the parse
  	 * may differ substantially from calls made by
  	 * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
  	 * particular, rule entry and exit events may occur in a different order
  	 * during the parse than after the parser. In addition, calls to certain
  	 * rule entry methods may be omitted.</p>
  	 *
  	 * <p>With the following specific exceptions, calls to listener events are
  	 * <em>deterministic</em>, i.e. for identical input the calls to listener
  	 * methods will be the same.</p>
  	 *
  	 * <ul>
  	 * <li>Alterations to the grammar used to generate code may change the
  	 * behavior of the listener calls.</li>
  	 * <li>Alterations to the command line options passed to ANTLR 4 when
  	 * generating the parser may change the behavior of the listener calls.</li>
  	 * <li>Changing the version of the ANTLR Tool used to generate the parser
  	 * may change the behavior of the listener calls.</li>
  	 * </ul>
  	 *
  	 * @param listener the listener to add
  	 *
  	 * @throws NullPointerException if {@code} listener is {@code null}
  	 */
  	addParseListener(listener) {
  		if (listener === null) {
  			throw "listener";
  		}
  		if (this._parseListeners === null) {
  			this._parseListeners = [];
  		}
  		this._parseListeners.push(listener);
  	}

  	/**
  	 * Remove {@code listener} from the list of parse listeners.
  	 *
  	 * <p>If {@code listener} is {@code null} or has not been added as a parse
  	 * listener, this method does nothing.</p>
  	 * @param listener the listener to remove
  	 */
  	removeParseListener(listener) {
  		if (this._parseListeners !== null) {
  			const idx = this._parseListeners.indexOf(listener);
  			if (idx >= 0) {
  				this._parseListeners.splice(idx, 1);
  			}
  			if (this._parseListeners.length === 0) {
  				this._parseListeners = null;
  			}
  		}
  	}

  // Remove all parse listeners.
  	removeParseListeners() {
  		this._parseListeners = null;
  	}

  // Notify any parse listeners of an enter rule event.
  	triggerEnterRuleEvent() {
  		if (this._parseListeners !== null) {
  			const ctx = this._ctx;
  			this._parseListeners.map(function(listener) {
  				listener.enterEveryRule(ctx);
  				ctx.enterRule(listener);
  			});
  		}
  	}

  	/**
  	 * Notify any parse listeners of an exit rule event.
  	 * @see //addParseListener
  	 */
  	triggerExitRuleEvent() {
  		if (this._parseListeners !== null) {
  			// reverse order walk of listeners
  			const ctx = this._ctx;
  			this._parseListeners.slice(0).reverse().map(function(listener) {
  				ctx.exitRule(listener);
  				listener.exitEveryRule(ctx);
  			});
  		}
  	}

  	getTokenFactory() {
  		return this._input.tokenSource._factory;
  	}

  	// Tell our token source and error strategy about a new way to create tokens.
  	setTokenFactory(factory) {
  		this._input.tokenSource._factory = factory;
  	}

  	/**
  	 * The ATN with bypass alternatives is expensive to create so we create it
  	 * lazily.
  	 *
  	 * @throws UnsupportedOperationException if the current parser does not
  	 * implement the {@link //getSerializedATN()} method.
  	 */
  	getATNWithBypassAlts() {
  		const serializedAtn = this.getSerializedATN();
  		if (serializedAtn === null) {
  			throw "The current parser does not support an ATN with bypass alternatives.";
  		}
  		let result = this.bypassAltsAtnCache[serializedAtn];
  		if (result === null) {
  			const deserializationOptions = new ATNDeserializationOptions_1();
  			deserializationOptions.generateRuleBypassTransitions = true;
  			result = new ATNDeserializer_1(deserializationOptions)
  					.deserialize(serializedAtn);
  			this.bypassAltsAtnCache[serializedAtn] = result;
  		}
  		return result;
  	}

  	/**
  	 * The preferred method of getting a tree pattern. For example, here's a
  	 * sample use:
  	 *
  	 * <pre>
  	 * ParseTree t = parser.expr();
  	 * ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
  	 * MyParser.RULE_expr);
  	 * ParseTreeMatch m = p.match(t);
  	 * String id = m.get("ID");
  	 * </pre>
  	 */
  	compileParseTreePattern(pattern, patternRuleIndex, lexer) {
  		lexer = lexer || null;
  		if (lexer === null) {
  			if (this.getTokenStream() !== null) {
  				const tokenSource = this.getTokenStream().tokenSource;
  				if (tokenSource instanceof Lexer_1) {
  					lexer = tokenSource;
  				}
  			}
  		}
  		if (lexer === null) {
  			throw "Parser can't discover a lexer to use";
  		}
  		const m = new ParseTreePatternMatcher(lexer, this);
  		return m.compile(pattern, patternRuleIndex);
  	}

  	getInputStream() {
  		return this.getTokenStream();
  	}

  	setInputStream(input) {
  		this.setTokenStream(input);
  	}

  	getTokenStream() {
  		return this._input;
  	}

  	// Set the token stream and reset the parser.
  	setTokenStream(input) {
  		this._input = null;
  		this.reset();
  		this._input = input;
  	}

  	/**
  	 * Match needs to return the current input symbol, which gets put
  	 * into the label for the associated token ref; e.g., x=ID.
  	 */
  	getCurrentToken() {
  		return this._input.LT(1);
  	}

  	notifyErrorListeners(msg, offendingToken, err) {
  		offendingToken = offendingToken || null;
  		err = err || null;
  		if (offendingToken === null) {
  			offendingToken = this.getCurrentToken();
  		}
  		this._syntaxErrors += 1;
  		const line = offendingToken.line;
  		const column = offendingToken.column;
  		const listener = this.getErrorListenerDispatch();
  		listener.syntaxError(this, offendingToken, line, column, msg, err);
  	}

  	/**
  	 * Consume and return the {@linkplain //getCurrentToken current symbol}.
  	 *
  	 * <p>E.g., given the following input with {@code A} being the current
  	 * lookahead symbol, this function moves the cursor to {@code B} and returns
  	 * {@code A}.</p>
  	 *
  	 * <pre>
  	 * A B
  	 * ^
  	 * </pre>
  	 *
  	 * If the parser is not in error recovery mode, the consumed symbol is added
  	 * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
  	 * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
  	 * If the parser <em>is</em> in error recovery mode, the consumed symbol is
  	 * added to the parse tree using
  	 * {@link ParserRuleContext//addErrorNode(Token)}, and
  	 * {@link ParseTreeListener//visitErrorNode} is called on any parse
  	 * listeners.
  	 */
  	consume() {
  		const o = this.getCurrentToken();
  		if (o.type !== Token$g.EOF) {
  			this.getInputStream().consume();
  		}
  		const hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
  		if (this.buildParseTrees || hasListener) {
  			let node;
  			if (this._errHandler.inErrorRecoveryMode(this)) {
  				node = this._ctx.addErrorNode(o);
  			} else {
  				node = this._ctx.addTokenNode(o);
  			}
  			node.invokingState = this.state;
  			if (hasListener) {
  				this._parseListeners.map(function(listener) {
  					if (node instanceof ErrorNode$2 || (node.isErrorNode !== undefined && node.isErrorNode())) {
  						listener.visitErrorNode(node);
  					} else if (node instanceof TerminalNode$3) {
  						listener.visitTerminal(node);
  					}
  				});
  			}
  		}
  		return o;
  	}

  	addContextToParseTree() {
  		// add current context to parent if we have a parent
  		if (this._ctx.parentCtx !== null) {
  			this._ctx.parentCtx.addChild(this._ctx);
  		}
  	}

  	/**
  	 * Always called by generated parsers upon entry to a rule. Access field
  	 * {@link //_ctx} get the current context.
  	 */
  	enterRule(localctx, state, ruleIndex) {
  		this.state = state;
  		this._ctx = localctx;
  		this._ctx.start = this._input.LT(1);
  		if (this.buildParseTrees) {
  			this.addContextToParseTree();
  		}
  		if (this._parseListeners !== null) {
  			this.triggerEnterRuleEvent();
  		}
  	}

  	exitRule() {
  		this._ctx.stop = this._input.LT(-1);
  		// trigger event on _ctx, before it reverts to parent
  		if (this._parseListeners !== null) {
  			this.triggerExitRuleEvent();
  		}
  		this.state = this._ctx.invokingState;
  		this._ctx = this._ctx.parentCtx;
  	}

  	enterOuterAlt(localctx, altNum) {
  		localctx.setAltNumber(altNum);
  		// if we have new localctx, make sure we replace existing ctx
  		// that is previous child of parse tree
  		if (this.buildParseTrees && this._ctx !== localctx) {
  			if (this._ctx.parentCtx !== null) {
  				this._ctx.parentCtx.removeLastChild();
  				this._ctx.parentCtx.addChild(localctx);
  			}
  		}
  		this._ctx = localctx;
  	}

  	/**
  	 * Get the precedence level for the top-most precedence rule.
  	 *
  	 * @return The precedence level for the top-most precedence rule, or -1 if
  	 * the parser context is not nested within a precedence rule.
  	 */
  	getPrecedence() {
  		if (this._precedenceStack.length === 0) {
  			return -1;
  		} else {
  			return this._precedenceStack[this._precedenceStack.length-1];
  		}
  	}

  	enterRecursionRule(localctx, state, ruleIndex, precedence) {
  	   this.state = state;
  	   this._precedenceStack.push(precedence);
  	   this._ctx = localctx;
  	   this._ctx.start = this._input.LT(1);
  	   if (this._parseListeners !== null) {
  		   this.triggerEnterRuleEvent(); // simulates rule entry for
  		   									// left-recursive rules
  	   }
     }

  	// Like {@link //enterRule} but for recursive rules.
  	pushNewRecursionContext(localctx, state, ruleIndex) {
  		const previous = this._ctx;
  		previous.parentCtx = localctx;
  		previous.invokingState = state;
  		previous.stop = this._input.LT(-1);

  		this._ctx = localctx;
  		this._ctx.start = previous.start;
  		if (this.buildParseTrees) {
  			this._ctx.addChild(previous);
  		}
  		if (this._parseListeners !== null) {
  			this.triggerEnterRuleEvent(); // simulates rule entry for
  											// left-recursive rules
  		}
  	}

  	unrollRecursionContexts(parentCtx) {
  		this._precedenceStack.pop();
  		this._ctx.stop = this._input.LT(-1);
  		const retCtx = this._ctx; // save current ctx (return value)
  		// unroll so _ctx is as it was before call to recursive method
  		if (this._parseListeners !== null) {
  			while (this._ctx !== parentCtx) {
  				this.triggerExitRuleEvent();
  				this._ctx = this._ctx.parentCtx;
  			}
  		} else {
  			this._ctx = parentCtx;
  		}
  		// hook into tree
  		retCtx.parentCtx = parentCtx;
  		if (this.buildParseTrees && parentCtx !== null) {
  			// add return ctx into invoking rule's tree
  			parentCtx.addChild(retCtx);
  		}
  	}

  	getInvokingContext(ruleIndex) {
  		let ctx = this._ctx;
  		while (ctx !== null) {
  			if (ctx.ruleIndex === ruleIndex) {
  				return ctx;
  			}
  			ctx = ctx.parentCtx;
  		}
  		return null;
  	}

  	precpred(localctx, precedence) {
  		return precedence >= this._precedenceStack[this._precedenceStack.length-1];
  	}

  	inContext(context) {
  		// TODO: useful in parser?
  		return false;
  	}

  	/**
  	 * Checks whether or not {@code symbol} can follow the current state in the
  	 * ATN. The behavior of this method is equivalent to the following, but is
  	 * implemented such that the complete context-sensitive follow set does not
  	 * need to be explicitly constructed.
  	 *
  	 * <pre>
  	 * return getExpectedTokens().contains(symbol);
  	 * </pre>
  	 *
  	 * @param symbol the symbol type to check
  	 * @return {@code true} if {@code symbol} can follow the current state in
  	 * the ATN, otherwise {@code false}.
  	 */
  	isExpectedToken(symbol) {
  		const atn = this._interp.atn;
  		let ctx = this._ctx;
  		const s = atn.states[this.state];
  		let following = atn.nextTokens(s);
  		if (following.contains(symbol)) {
  			return true;
  		}
  		if (!following.contains(Token$g.EPSILON)) {
  			return false;
  		}
  		while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token$g.EPSILON)) {
  			const invokingState = atn.states[ctx.invokingState];
  			const rt = invokingState.transitions[0];
  			following = atn.nextTokens(rt.followState);
  			if (following.contains(symbol)) {
  				return true;
  			}
  			ctx = ctx.parentCtx;
  		}
  		if (following.contains(Token$g.EPSILON) && symbol === Token$g.EOF) {
  			return true;
  		} else {
  			return false;
  		}
  	}

  	/**
  	 * Computes the set of input symbols which could follow the current parser
  	 * state and context, as given by {@link //getState} and {@link //getContext},
  	 * respectively.
  	 *
  	 * @see ATN//getExpectedTokens(int, RuleContext)
  	 */
  	getExpectedTokens() {
  		return this._interp.atn.getExpectedTokens(this.state, this._ctx);
  	}

  	getExpectedTokensWithinCurrentRule() {
  		const atn = this._interp.atn;
  		const s = atn.states[this.state];
  		return atn.nextTokens(s);
  	}

  	// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.
  	getRuleIndex(ruleName) {
  		const ruleIndex = this.getRuleIndexMap()[ruleName];
  		if (ruleIndex !== null) {
  			return ruleIndex;
  		} else {
  			return -1;
  		}
  	}

  	/**
  	 * Return List&lt;String&gt; of the rule names in your parser instance
  	 * leading up to a call to the current rule. You could override if
  	 * you want more details such as the file/line info of where
  	 * in the ATN a rule is invoked.
  	 *
  	 * this is very useful for error messages.
  	 */
  	getRuleInvocationStack(p) {
  		p = p || null;
  		if (p === null) {
  			p = this._ctx;
  		}
  		const stack = [];
  		while (p !== null) {
  			// compute what follows who invoked us
  			const ruleIndex = p.ruleIndex;
  			if (ruleIndex < 0) {
  				stack.push("n/a");
  			} else {
  				stack.push(this.ruleNames[ruleIndex]);
  			}
  			p = p.parentCtx;
  		}
  		return stack;
  	}

  	// For debugging and other purposes.
  	getDFAStrings() {
  		return this._interp.decisionToDFA.toString();
  	}

  	// For debugging and other purposes.
  	dumpDFA() {
  		let seenOne = false;
  		for (let i = 0; i < this._interp.decisionToDFA.length; i++) {
  			const dfa = this._interp.decisionToDFA[i];
  			if (dfa.states.length > 0) {
  				if (seenOne) {
  					console.log();
  				}
  				this.printer.println("Decision " + dfa.decision + ":");
  				this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
  				seenOne = true;
  			}
  		}
  	}

  	/*
  		"			printer = function() {\r\n" +
  		"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
  		"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
  		"			};\r\n" +
  		*/
  	getSourceName() {
  		return this._input.sourceName;
  	}

  	/**
  	 * During a parse is sometimes useful to listen in on the rule entry and exit
  	 * events as well as token matches. this is for quick and dirty debugging.
  	 */
  	setTrace(trace) {
  		if (!trace) {
  			this.removeParseListener(this._tracer);
  			this._tracer = null;
  		} else {
  			if (this._tracer !== null) {
  				this.removeParseListener(this._tracer);
  			}
  			this._tracer = new TraceListener(this);
  			this.addParseListener(this._tracer);
  		}
  	}
  }

  /**
   * this field maps from the serialized ATN string to the deserialized {@link
   * ATN} with
   * bypass alternatives.
   *
   * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
   */
  Parser.bypassAltsAtnCache = {};

  var Parser_1 = Parser;

  /* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
   * Use of this file is governed by the BSD 3-clause license that
   * can be found in the LICENSE.txt file in the project root.
   */

  var atn$1 = atn;
  var codepointat$1 = require$$1;
  var dfa$1 = dfa;
  var fromcodepoint$1 = require$$3;
  var tree$1 = tree;
  var error$1 = error;
  var Token$h = Token_1.Token;
  var CharStreams$1 = CharStreams_1;
  var CommonToken$2 = Token_1.CommonToken;
  var InputStream$2 = InputStream_1;
  var FileStream$1 = FileStream_1;
  var CommonTokenStream$1 = CommonTokenStream_1;
  var Lexer$1 = Lexer_1;
  var Parser$1 = Parser_1;

  var PredictionContextCache$1 = PredictionContext_1.PredictionContextCache;
  var ParserRuleContext$1 = ParserRuleContext_1;
  var Interval$7 = IntervalSet_1.Interval;
  var IntervalSet$6 = IntervalSet_1.IntervalSet;
  var Utils$1 = Utils;
  var LL1Analyzer$1 = LL1Analyzer_1.LL1Analyzer;

  var antlr4 = {
  	atn: atn$1,
  	codepointat: codepointat$1,
  	dfa: dfa$1,
  	fromcodepoint: fromcodepoint$1,
  	tree: tree$1,
  	error: error$1,
  	Token: Token$h,
  	CharStreams: CharStreams$1,
  	CommonToken: CommonToken$2,
  	InputStream: InputStream$2,
  	FileStream: FileStream$1,
  	CommonTokenStream: CommonTokenStream$1,
  	Lexer: Lexer$1,
  	Parser: Parser$1,
  	PredictionContextCache: PredictionContextCache$1,
  	ParserRuleContext: ParserRuleContext$1,
  	Interval: Interval$7,
  	IntervalSet: IntervalSet$6,
  	Utils: Utils$1,
  	LL1Analyzer: LL1Analyzer$1
  };

  var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786", "\u5964\x02\x85\u072B\b\x01\x04\x02\t\x02\x04\x03\t\x03", "\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07", "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04", "\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10", "\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13", "\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17", "\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A", "\x04\x1B\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E", "\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#", "\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04", "*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x04", "1\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x04", "8\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04", "?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04", "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04", "M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04", "T\tT\x04U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04", "[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t`\x04a\ta\x04", "b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04", "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04", "p\tp\x04q\tq\x04r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04", "w\tw\x04x\tx\x04y\ty\x04z\tz\x04{\t{\x04|\t|\x04}\t}\x04", "~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81\x04", "\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t", "\x85\x04\x86\t\x86\x04\x87\t\x87\x04\x88\t\x88\x04", "\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B\x04\x8C\t", "\x8C\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03", "\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03", "\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03", "\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03", "\n\x03\x0B\x03\x0B\x03\f\x03\f\x03\f\x03\r\x03\r\x03", "\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F", "\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10", "\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13", "\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13", "\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14", "\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15", "\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15", "\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16", "\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17", "\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A", "\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B", "\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C", "\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D", "\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D", "\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E", "\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F", "\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F", "\x03 \x03 \x03 \x03 \x03 \x03 \x03!\x03!\x03!\x03", "!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03$\x03$\x03", "$\x03$\x03$\x03$\x03%\x03%\x03&\x03&\x03&\x03&\x03", "&\x03&\x03&\x03&\x03'\x03'\x03'\x03(\x03(\x03(", "\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03", ")\x03)\x03)\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03", "*\x03*\x03+\x03+\x03+\x03,\x03,\x03,\x03,\x03,\x03", "-\x03-\x03-\x03-\x03.\x03.\x03.\x03.\x03.\x03.\x03", "/\x03/\x03/\x03/\x03/\x03/\x030\x030\x030\x030\x03", "0\x030\x030\x030\x030\x030\x031\x031\x031\x031\x03", "1\x031\x031\x031\x031\x032\x032\x032\x033\x033\x03", "3\x033\x033\x033\x033\x034\x034\x034\x034\x034\x03", "4\x035\x035\x035\x035\x035\x036\x036\x036\x036\x03", "7\x037\x037\x037\x037\x038\x038\x038\x038\x038\x03", "8\x038\x039\x039\x039\x039\x039\x03:\x03:\x03:\x03", ";\x03;\x03;\x03<\x03<\x03<\x03<\x03=\x03=\x03>\x03", ">\x03?\x03?\x03@\x03@\x03@\x03@\x03@\x03@\x03A\x03", "A\x03A\x03A\x03A\x03A\x03A\x03B\x03B\x03C\x03C\x03", "C\x03D\x03D\x03E\x03E\x03F\x03F\x03F\x03G\x03G\x03", "G\x03H\x03H\x03I\x03I\x03J\x03J\x03J\x03K\x03K\x03", "K\x03L\x03L\x03L\x03M\x03M\x03N\x03N\x03N\x03O\x03", "O\x03O\x03P\x03P\x03P\x03Q\x03Q\x03Q\x03Q\x03R\x03", "R\x03R\x03R\x03S\x03S\x03S\x03T\x03T\x03T\x03U\x03", "U\x03U\x03V\x03V\x03V\x03W\x03W\x03W\x03X\x03X\x03", "X\x03X\x03Y\x03Y\x03Y\x03Z\x03Z\x03Z\x03[\x03[\x03", "[\x03[\x03[\x03[\x03[\x03\\\x03\\\x03\\\x03\\\x03", "\\\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03^\x03", "^\x03^\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03", "_\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x05a\u0378\na\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03", "b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x05b\u0451", "\nb\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03", "c\x05c\u052F\nc\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03", "d\x03d\x03d\x03d\x03d\x06d\u053D\nd\rd\x0Ed\u053E\x03", "d\x03d\x06d\u0543\nd\rd\x0Ed\u0544\x05d\u0547\nd\x03e\x03", "e\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03", "e\x03e\x03e\x06e\u0557\ne\re\x0Ee\u0558\x03e\x03e\x06", "e\u055D\ne\re\x0Ee\u055E\x05e\u0561\ne\x03f\x03f\x03f\x03", "f\x03f\x03f\x03f\x03f\x03f\x05f\u056C\nf\x03g\x03g\x05", "g\u0570\ng\x03g\x03g\x05g\u0574\ng\x03g\x03g\x05g\u0578", "\ng\x03h\x03h\x05h\u057C\nh\x03h\x07h\u057F\nh\fh\x0Eh\u0582", "\x0Bh\x03i\x03i\x03i\x03i\x03j\x03j\x05j\u058A\nj\x03", "j\x07j\u058D\nj\fj\x0Ej\u0590\x0Bj\x03k\x03k\x03k\x03", "k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03", "k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03", "k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03", "k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03", "k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03", "k\x03k\x03k\x05k\u05CA\nk\x03l\x03l\x03l\x03l\x03l\x03", "l\x05l\u05D2\nl\x03l\x03l\x03l\x05l\u05D7\nl\x03l\x05", "l\u05DA\nl\x03m\x03m\x03m\x03n\x03n\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03", "o\x03o\x03o\x03o\x03o\x05o\u0639\no\x03p\x03p\x03p\x03", "p\x03p\x03p\x03p\x03p\x03p\x03p\x03q\x03q\x03q\x03", "q\x03q\x03q\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03", "r\x03r\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03", "s\x03s\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03", "t\x03u\x03u\x03u\x03u\x03u\x03u\x03v\x03v\x03v\x03", "v\x03v\x03v\x03v\x03v\x03v\x03w\x03w\x03w\x03w\x03", "w\x03w\x03w\x03w\x03x\x03x\x03x\x03x\x03x\x03x\x03", "x\x03x\x03x\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03", "y\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03{\x03", "{\x03{\x03{\x03{\x03{\x03{\x03|\x03|\x03|\x03|\x03", "|\x03|\x03|\x03|\x03}\x03}\x03}\x03}\x03}\x03~\x03", "~\x03~\x03~\x03~\x03\x7F\x03\x7F\x03\x7F\x03\x7F", "\x03\x7F\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80", "\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80", "\x03\x80\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81", "\x03\x81\x03\x81\x03\x81\x03\x81\x03\x82\x03\x82", "\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82", "\x03\x83\x03\x83\x07\x83\u06D4\n\x83\f\x83\x0E\x83", "\u06D7\x0B\x83\x03\x84\x03\x84\x03\x85\x03\x85\x03", "\x86\x03\x86\x07\x86\u06DF\n\x86\f\x86\x0E\x86\u06E2", "\x0B\x86\x03\x86\x03\x86\x03\x86\x07\x86\u06E7\n", "\x86\f\x86\x0E\x86\u06EA\x0B\x86\x03\x86\x05\x86", "\u06ED\n\x86\x03\x87\x03\x87\x03\x87\x05\x87\u06F2", "\n\x87\x03\x88\x03\x88\x03\x88\x05\x88\u06F7\n\x88", "\x03\x89\x06\x89\u06FA\n\x89\r\x89\x0E\x89\u06FB\x03", "\x89\x03\x89\x06\x89\u0700\n\x89\r\x89\x0E\x89\u0701", "\x03\x89\x03\x89\x06\x89\u0706\n\x89\r\x89\x0E\x89", "\u0707\x05\x89\u070A\n\x89\x03\x8A\x06\x8A\u070D\n\x8A", "\r\x8A\x0E\x8A\u070E\x03\x8A\x03\x8A\x03\x8B\x03", "\x8B\x03\x8B\x03\x8B\x07\x8B\u0717\n\x8B\f\x8B\x0E", "\x8B\u071A\x0B\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B", "\x03\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x07\x8C", "\u0725\n\x8C\f\x8C\x0E\x8C\u0728\x0B\x8C\x03\x8C\x03", "\x8C\x03\u0718\x02\x8D\x03\x03\x05\x04\x07\x05\t", "\x06\x0B\x07\r\b\x0F\t\x11\n\x13\x0B\x15\f\x17\r\x19", "\x0E\x1B\x0F\x1D\x10\x1F\x11!\x12#\x13%\x14'\x15", ")\x16+\x17-\x18/\x191\x1A3\x1B5\x1C7\x1D9\x1E;\x1F", "= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o9q:s;u<w=y>{?}", "@\x7FA\x81B\x83C\x85D\x87E\x89F\x8BG\x8DH\x8FI\x91", "J\x93K\x95L\x97M\x99N\x9BO\x9DP\x9FQ\xA1R\xA3S\xA5", "T\xA7U\xA9V\xABW\xADX\xAFY\xB1Z\xB3[\xB5\\\xB7]\xB9", "^\xBB_\xBD`\xBFa\xC1b\xC3c\xC5d\xC7e\xC9f\xCBg\xCD", "h\xCF\x02\xD1i\xD3\x02\xD5j\xD7k\xD9\x02\xDB\x02", "\xDDl\xDFm\xE1n\xE3o\xE5p\xE7q\xE9r\xEBs\xEDt\xEF", "u\xF1v\xF3w\xF5x\xF7y\xF9z\xFB{\xFD|\xFF}\u0101~\u0103", "\x7F\u0105\x80\u0107\x02\u0109\x02\u010B\x81\u010D\x02\u010F", "\x02\u0111\x82\u0113\x83\u0115\x84\u0117\x85\x03\x02\f", "\x03\x022;\x04\x02GGgg\x04\x02ZZzz\x05\x022;CHch\x06", "\x02&&C\\aac|\x07\x02&&2;C\\aac|\x06\x02\f\f\x0F\x0F$", "$^^\x06\x02\f\f\x0F\x0F))^^\x05\x02\x0B\f\x0E\x0F", "\"\"\x04\x02\f\f\x0F\x0F\x02\u07BA\x02\x03\x03\x02", "\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02", "\x02\x02\x02\t\x03\x02\x02\x02\x02\x0B\x03\x02", "\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02", "\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02", "\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02", "\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02", "\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02", "\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02", "\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02", "\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02", "-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03", "\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02", "\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02", "\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02", "\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02", "C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03", "\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02", "\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02", "\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02", "\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02", "Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03", "\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02", "\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02", "\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02", "\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x02", "o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03", "\x02\x02\x02\x02u\x03\x02\x02\x02\x02w\x03\x02", "\x02\x02\x02y\x03\x02\x02\x02\x02{\x03\x02\x02", "\x02\x02}\x03\x02\x02\x02\x02\x7F\x03\x02\x02", "\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02", "\x02\x02\x85\x03\x02\x02\x02\x02\x87\x03\x02\x02", "\x02\x02\x89\x03\x02\x02\x02\x02\x8B\x03\x02\x02", "\x02\x02\x8D\x03\x02\x02\x02\x02\x8F\x03\x02\x02", "\x02\x02\x91\x03\x02\x02\x02\x02\x93\x03\x02\x02", "\x02\x02\x95\x03\x02\x02\x02\x02\x97\x03\x02\x02", "\x02\x02\x99\x03\x02\x02\x02\x02\x9B\x03\x02\x02", "\x02\x02\x9D\x03\x02\x02\x02\x02\x9F\x03\x02\x02", "\x02\x02\xA1\x03\x02\x02\x02\x02\xA3\x03\x02\x02", "\x02\x02\xA5\x03\x02\x02\x02\x02\xA7\x03\x02\x02", "\x02\x02\xA9\x03\x02\x02\x02\x02\xAB\x03\x02\x02", "\x02\x02\xAD\x03\x02\x02\x02\x02\xAF\x03\x02\x02", "\x02\x02\xB1\x03\x02\x02\x02\x02\xB3\x03\x02\x02", "\x02\x02\xB5\x03\x02\x02\x02\x02\xB7\x03\x02\x02", "\x02\x02\xB9\x03\x02\x02\x02\x02\xBB\x03\x02\x02", "\x02\x02\xBD\x03\x02\x02\x02\x02\xBF\x03\x02\x02", "\x02\x02\xC1\x03\x02\x02\x02\x02\xC3\x03\x02\x02", "\x02\x02\xC5\x03\x02\x02\x02\x02\xC7\x03\x02\x02", "\x02\x02\xC9\x03\x02\x02\x02\x02\xCB\x03\x02\x02", "\x02\x02\xCD\x03\x02\x02\x02\x02\xD1\x03\x02\x02", "\x02\x02\xD5\x03\x02\x02\x02\x02\xD7\x03\x02\x02", "\x02\x02\xDD\x03\x02\x02\x02\x02\xDF\x03\x02\x02", "\x02\x02\xE1\x03\x02\x02\x02\x02\xE3\x03\x02\x02", "\x02\x02\xE5\x03\x02\x02\x02\x02\xE7\x03\x02\x02", "\x02\x02\xE9\x03\x02\x02\x02\x02\xEB\x03\x02\x02", "\x02\x02\xED\x03\x02\x02\x02\x02\xEF\x03\x02\x02", "\x02\x02\xF1\x03\x02\x02\x02\x02\xF3\x03\x02\x02", "\x02\x02\xF5\x03\x02\x02\x02\x02\xF7\x03\x02\x02", "\x02\x02\xF9\x03\x02\x02\x02\x02\xFB\x03\x02\x02", "\x02\x02\xFD\x03\x02\x02\x02\x02\xFF\x03\x02\x02", "\x02\x02\u0101\x03\x02\x02\x02\x02\u0103\x03\x02\x02", "\x02\x02\u0105\x03\x02\x02\x02\x02\u010B\x03\x02\x02", "\x02\x02\u0111\x03\x02\x02\x02\x02\u0113\x03\x02\x02", "\x02\x02\u0115\x03\x02\x02\x02\x02\u0117\x03\x02\x02", "\x02\x03\u0119\x03\x02\x02\x02\x05\u0120\x03\x02\x02", "\x02\x07\u0122\x03\x02\x02\x02\t\u0125\x03\x02\x02", "\x02\x0B\u0127\x03\x02\x02\x02\r\u0129\x03\x02\x02", "\x02\x0F\u012C\x03\x02\x02\x02\x11\u012E\x03\x02\x02", "\x02\x13\u0130\x03\x02\x02\x02\x15\u0133\x03\x02\x02", "\x02\x17\u0135\x03\x02\x02\x02\x19\u0138\x03\x02\x02", "\x02\x1B\u013F\x03\x02\x02\x02\x1D\u0141\x03\x02\x02", "\x02\x1F\u0146\x03\x02\x02\x02!\u0148\x03\x02\x02", "\x02#\u014A\x03\x02\x02\x02%\u014C\x03\x02\x02\x02", "'\u0155\x03\x02\x02\x02)\u015E\x03\x02\x02\x02+\u0168", "\x03\x02\x02\x02-\u0170\x03\x02\x02\x02/\u0173\x03", "\x02\x02\x021\u0175\x03\x02\x02\x023\u0177\x03\x02", "\x02\x025\u017D\x03\x02\x02\x027\u0181\x03\x02\x02", "\x029\u0188\x03\x02\x02\x02;\u0191\x03\x02\x02\x02", "=\u019A\x03\x02\x02\x02?\u01A2\x03\x02\x02\x02A\u01A8", "\x03\x02\x02\x02C\u01AD\x03\x02\x02\x02E\u01AF\x03", "\x02\x02\x02G\u01B1\x03\x02\x02\x02I\u01B9\x03\x02", "\x02\x02K\u01BB\x03\x02\x02\x02M\u01C3\x03\x02\x02", "\x02O\u01C6\x03\x02\x02\x02Q\u01CD\x03\x02\x02\x02", "S\u01D5\x03\x02\x02\x02U\u01DE\x03\x02\x02\x02W\u01E1", "\x03\x02\x02\x02Y\u01E6\x03\x02\x02\x02[\u01EA\x03", "\x02\x02\x02]\u01F0\x03\x02\x02\x02_\u01F6\x03\x02", "\x02\x02a\u0200\x03\x02\x02\x02c\u0209\x03\x02\x02", "\x02e\u020C\x03\x02\x02\x02g\u0213\x03\x02\x02\x02", "i\u0219\x03\x02\x02\x02k\u021E\x03\x02\x02\x02m\u0222", "\x03\x02\x02\x02o\u0227\x03\x02\x02\x02q\u022E\x03", "\x02\x02\x02s\u0233\x03\x02\x02\x02u\u0236\x03\x02", "\x02\x02w\u0239\x03\x02\x02\x02y\u023D\x03\x02\x02", "\x02{\u023F\x03\x02\x02\x02}\u0241\x03\x02\x02\x02", "\x7F\u0243\x03\x02\x02\x02\x81\u0249\x03\x02\x02\x02", "\x83\u0250\x03\x02\x02\x02\x85\u0252\x03\x02\x02\x02", "\x87\u0255\x03\x02\x02\x02\x89\u0257\x03\x02\x02\x02", "\x8B\u0259\x03\x02\x02\x02\x8D\u025C\x03\x02\x02\x02", "\x8F\u025F\x03\x02\x02\x02\x91\u0261\x03\x02\x02\x02", "\x93\u0263\x03\x02\x02\x02\x95\u0266\x03\x02\x02\x02", "\x97\u0269\x03\x02\x02\x02\x99\u026C\x03\x02\x02\x02", "\x9B\u026E\x03\x02\x02\x02\x9D\u0271\x03\x02\x02\x02", "\x9F\u0274\x03\x02\x02\x02\xA1\u0277\x03\x02\x02\x02", "\xA3\u027B\x03\x02\x02\x02\xA5\u027F\x03\x02\x02\x02", "\xA7\u0282\x03\x02\x02\x02\xA9\u0285\x03\x02\x02\x02", "\xAB\u0288\x03\x02\x02\x02\xAD\u028B\x03\x02\x02\x02", "\xAF\u028E\x03\x02\x02\x02\xB1\u0292\x03\x02\x02\x02", "\xB3\u0295\x03\x02\x02\x02\xB5\u0298\x03\x02\x02\x02", "\xB7\u029F\x03\x02\x02\x02\xB9\u02A4\x03\x02\x02\x02", "\xBB\u02AC\x03\x02\x02\x02\xBD\u02AF\x03\x02\x02\x02", "\xBF\u02B8\x03\x02\x02\x02\xC1\u0377\x03\x02\x02\x02", "\xC3\u0450\x03\x02\x02\x02\xC5\u052E\x03\x02\x02\x02", "\xC7\u0546\x03\x02\x02\x02\xC9\u0560\x03\x02\x02\x02", "\xCB\u056B\x03\x02\x02\x02\xCD\u0573\x03\x02\x02\x02", "\xCF\u0579\x03\x02\x02\x02\xD1\u0583\x03\x02\x02\x02", "\xD3\u0587\x03\x02\x02\x02\xD5\u05C9\x03\x02\x02\x02", "\xD7\u05CB\x03\x02\x02\x02\xD9\u05DB\x03\x02\x02\x02", "\xDB\u05DE\x03\x02\x02\x02\xDD\u0638\x03\x02\x02\x02", "\xDF\u063A\x03\x02\x02\x02\xE1\u0644\x03\x02\x02\x02", "\xE3\u064A\x03\x02\x02\x02\xE5\u0653\x03\x02\x02\x02", "\xE7\u065D\x03\x02\x02\x02\xE9\u0666\x03\x02\x02\x02", "\xEB\u066C\x03\x02\x02\x02\xED\u0675\x03\x02\x02\x02", "\xEF\u067D\x03\x02\x02\x02\xF1\u0686\x03\x02\x02\x02", "\xF3\u068E\x03\x02\x02\x02\xF5\u0696\x03\x02\x02\x02", "\xF7\u069D\x03\x02\x02\x02\xF9\u06A5\x03\x02\x02\x02", "\xFB\u06AA\x03\x02\x02\x02\xFD\u06AF\x03\x02\x02\x02", "\xFF\u06B4\x03\x02\x02\x02\u0101\u06C0\x03\x02\x02\x02", "\u0103\u06C9\x03\x02\x02\x02\u0105\u06D1\x03\x02\x02\x02", "\u0107\u06D8\x03\x02\x02\x02\u0109\u06DA\x03\x02\x02\x02", "\u010B\u06EC\x03\x02\x02\x02\u010D\u06F1\x03\x02\x02\x02", "\u010F\u06F6\x03\x02\x02\x02\u0111\u06F9\x03\x02\x02\x02", "\u0113\u070C\x03\x02\x02\x02\u0115\u0712\x03\x02\x02\x02", "\u0117\u0720\x03\x02\x02\x02\u0119\u011A\x07r\x02\x02", "\u011A\u011B\x07t\x02\x02\u011B\u011C\x07c\x02\x02\u011C", "\u011D\x07i\x02\x02\u011D\u011E\x07o\x02\x02\u011E\u011F", "\x07c\x02\x02\u011F\x04\x03\x02\x02\x02\u0120\u0121", "\x07=\x02\x02\u0121\x06\x03\x02\x02\x02\u0122\u0123", "\x07~\x02\x02\u0123\u0124\x07~\x02\x02\u0124\b\x03\x02", "\x02\x02\u0125\u0126\x07`\x02\x02\u0126\n\x03\x02\x02", "\x02\u0127\u0128\x07\x80\x02\x02\u0128\f\x03\x02\x02", "\x02\u0129\u012A\x07@\x02\x02\u012A\u012B\x07?\x02\x02", "\u012B\x0E\x03\x02\x02\x02\u012C\u012D\x07@\x02\x02", "\u012D\x10\x03\x02\x02\x02\u012E\u012F\x07>\x02\x02", "\u012F\x12\x03\x02\x02\x02\u0130\u0131\x07>\x02\x02", "\u0131\u0132\x07?\x02\x02\u0132\x14\x03\x02\x02\x02", "\u0133\u0134\x07?\x02\x02\u0134\x16\x03\x02\x02\x02", "\u0135\u0136\x07c\x02\x02\u0136\u0137\x07u\x02\x02\u0137", "\x18\x03\x02\x02\x02\u0138\u0139\x07k\x02\x02\u0139", "\u013A\x07o\x02\x02\u013A\u013B\x07r\x02\x02\u013B\u013C", "\x07q\x02\x02\u013C\u013D\x07t\x02\x02\u013D\u013E\x07", "v\x02\x02\u013E\x1A\x03\x02\x02\x02\u013F\u0140\x07", ",\x02\x02\u0140\x1C\x03\x02\x02\x02\u0141\u0142\x07", "h\x02\x02\u0142\u0143\x07t\x02\x02\u0143\u0144\x07q\x02", "\x02\u0144\u0145\x07o\x02\x02\u0145\x1E\x03\x02\x02", "\x02\u0146\u0147\x07}\x02\x02\u0147 \x03\x02\x02\x02", "\u0148\u0149\x07.\x02\x02\u0149\"\x03\x02\x02\x02\u014A", "\u014B\x07\x7F\x02\x02\u014B$\x03\x02\x02\x02\u014C", "\u014D\x07c\x02\x02\u014D\u014E\x07d\x02\x02\u014E\u014F", "\x07u\x02\x02\u014F\u0150\x07v\x02\x02\u0150\u0151\x07", "t\x02\x02\u0151\u0152\x07c\x02\x02\u0152\u0153\x07e\x02", "\x02\u0153\u0154\x07v\x02\x02\u0154&\x03\x02\x02\x02", "\u0155\u0156\x07e\x02\x02\u0156\u0157\x07q\x02\x02\u0157", "\u0158\x07p\x02\x02\u0158\u0159\x07v\x02\x02\u0159\u015A", "\x07t\x02\x02\u015A\u015B\x07c\x02\x02\u015B\u015C\x07", "e\x02\x02\u015C\u015D\x07v\x02\x02\u015D(\x03\x02\x02", "\x02\u015E\u015F\x07k\x02\x02\u015F\u0160\x07p\x02\x02", "\u0160\u0161\x07v\x02\x02\u0161\u0162\x07g\x02\x02\u0162", "\u0163\x07t\x02\x02\u0163\u0164\x07h\x02\x02\u0164\u0165", "\x07c\x02\x02\u0165\u0166\x07e\x02\x02\u0166\u0167\x07", "g\x02\x02\u0167*\x03\x02\x02\x02\u0168\u0169\x07n\x02", "\x02\u0169\u016A\x07k\x02\x02\u016A\u016B\x07d\x02\x02", "\u016B\u016C\x07t\x02\x02\u016C\u016D\x07c\x02\x02\u016D", "\u016E\x07t\x02\x02\u016E\u016F\x07{\x02\x02\u016F,\x03", "\x02\x02\x02\u0170\u0171\x07k\x02\x02\u0171\u0172\x07", "u\x02\x02\u0172.\x03\x02\x02\x02\u0173\u0174\x07*\x02", "\x02\u01740\x03\x02\x02\x02\u0175\u0176\x07+\x02\x02", "\u01762\x03\x02\x02\x02\u0177\u0178\x07w\x02\x02\u0178", "\u0179\x07u\x02\x02\u0179\u017A\x07k\x02\x02\u017A\u017B", "\x07p\x02\x02\u017B\u017C\x07i\x02\x02\u017C4\x03\x02", "\x02\x02\u017D\u017E\x07h\x02\x02\u017E\u017F\x07q\x02", "\x02\u017F\u0180\x07t\x02\x02\u01806\x03\x02\x02\x02", "\u0181\u0182\x07u\x02\x02\u0182\u0183\x07v\x02\x02\u0183", "\u0184\x07t\x02\x02\u0184\u0185\x07w\x02\x02\u0185\u0186", "\x07e\x02\x02\u0186\u0187\x07v\x02\x02\u01878\x03\x02", "\x02\x02\u0188\u0189\x07o\x02\x02\u0189\u018A\x07q\x02", "\x02\u018A\u018B\x07f\x02\x02\u018B\u018C\x07k\x02\x02", "\u018C\u018D\x07h\x02\x02\u018D\u018E\x07k\x02\x02\u018E", "\u018F\x07g\x02\x02\u018F\u0190\x07t\x02\x02\u0190:\x03", "\x02\x02\x02\u0191\u0192\x07h\x02\x02\u0192\u0193\x07", "w\x02\x02\u0193\u0194\x07p\x02\x02\u0194\u0195\x07e\x02", "\x02\u0195\u0196\x07v\x02\x02\u0196\u0197\x07k\x02\x02", "\u0197\u0198\x07q\x02\x02\u0198\u0199\x07p\x02\x02\u0199", "<\x03\x02\x02\x02\u019A\u019B\x07t\x02\x02\u019B\u019C", "\x07g\x02\x02\u019C\u019D\x07v\x02\x02\u019D\u019E\x07", "w\x02\x02\u019E\u019F\x07t\x02\x02\u019F\u01A0\x07p\x02", "\x02\u01A0\u01A1\x07u\x02\x02\u01A1>\x03\x02\x02\x02", "\u01A2\u01A3\x07g\x02\x02\u01A3\u01A4\x07x\x02\x02\u01A4", "\u01A5\x07g\x02\x02\u01A5\u01A6\x07p\x02\x02\u01A6\u01A7", "\x07v\x02\x02\u01A7@\x03\x02\x02\x02\u01A8\u01A9\x07", "g\x02\x02\u01A9\u01AA\x07p\x02\x02\u01AA\u01AB\x07w\x02", "\x02\u01AB\u01AC\x07o\x02\x02\u01ACB\x03\x02\x02\x02", "\u01AD\u01AE\x07]\x02\x02\u01AED\x03\x02\x02\x02\u01AF", "\u01B0\x07_\x02\x02\u01B0F\x03\x02\x02\x02\u01B1\u01B2", "\x07c\x02\x02\u01B2\u01B3\x07f\x02\x02\u01B3\u01B4\x07", "f\x02\x02\u01B4\u01B5\x07t\x02\x02\u01B5\u01B6\x07g\x02", "\x02\u01B6\u01B7\x07u\x02\x02\u01B7\u01B8\x07u\x02\x02", "\u01B8H\x03\x02\x02\x02\u01B9\u01BA\x070\x02\x02\u01BA", "J\x03\x02\x02\x02\u01BB\u01BC\x07o\x02\x02\u01BC\u01BD", "\x07c\x02\x02\u01BD\u01BE\x07r\x02\x02\u01BE\u01BF\x07", "r\x02\x02\u01BF\u01C0\x07k\x02\x02\u01C0\u01C1\x07p\x02", "\x02\u01C1\u01C2\x07i\x02\x02\u01C2L\x03\x02\x02\x02", "\u01C3\u01C4\x07?\x02\x02\u01C4\u01C5\x07@\x02\x02\u01C5", "N\x03\x02\x02\x02\u01C6\u01C7\x07o\x02\x02\u01C7\u01C8", "\x07g\x02\x02\u01C8\u01C9\x07o\x02\x02\u01C9\u01CA\x07", "q\x02\x02\u01CA\u01CB\x07t\x02\x02\u01CB\u01CC\x07{\x02", "\x02\u01CCP\x03\x02\x02\x02\u01CD\u01CE\x07u\x02\x02", "\u01CE\u01CF\x07v\x02\x02\u01CF\u01D0\x07q\x02\x02\u01D0", "\u01D1\x07t\x02\x02\u01D1\u01D2\x07c\x02\x02\u01D2\u01D3", "\x07i\x02\x02\u01D3\u01D4\x07g\x02\x02\u01D4R\x03\x02", "\x02\x02\u01D5\u01D6\x07e\x02\x02\u01D6\u01D7\x07c\x02", "\x02\u01D7\u01D8\x07n\x02\x02\u01D8\u01D9\x07n\x02\x02", "\u01D9\u01DA\x07f\x02\x02\u01DA\u01DB\x07c\x02\x02\u01DB", "\u01DC\x07v\x02\x02\u01DC\u01DD\x07c\x02\x02\u01DDT\x03", "\x02\x02\x02\u01DE\u01DF\x07k\x02\x02\u01DF\u01E0\x07", "h\x02\x02\u01E0V\x03\x02\x02\x02\u01E1\u01E2\x07g\x02", "\x02\u01E2\u01E3\x07n\x02\x02\u01E3\u01E4\x07u\x02\x02", "\u01E4\u01E5\x07g\x02\x02\u01E5X\x03\x02\x02\x02\u01E6", "\u01E7\x07v\x02\x02\u01E7\u01E8\x07t\x02\x02\u01E8\u01E9", "\x07{\x02\x02\u01E9Z\x03\x02\x02\x02\u01EA\u01EB\x07", "e\x02\x02\u01EB\u01EC\x07c\x02\x02\u01EC\u01ED\x07v\x02", "\x02\u01ED\u01EE\x07e\x02\x02\u01EE\u01EF\x07j\x02\x02", "\u01EF\\\x03\x02\x02\x02\u01F0\u01F1\x07y\x02\x02\u01F1", "\u01F2\x07j\x02\x02\u01F2\u01F3\x07k\x02\x02\u01F3\u01F4", "\x07n\x02\x02\u01F4\u01F5\x07g\x02\x02\u01F5^\x03\x02", "\x02\x02\u01F6\u01F7\x07w\x02\x02\u01F7\u01F8\x07p\x02", "\x02\u01F8\u01F9\x07e\x02\x02\u01F9\u01FA\x07j\x02\x02", "\u01FA\u01FB\x07g\x02\x02\u01FB\u01FC\x07e\x02\x02\u01FC", "\u01FD\x07m\x02\x02\u01FD\u01FE\x07g\x02\x02\u01FE\u01FF", "\x07f\x02\x02\u01FF`\x03\x02\x02\x02\u0200\u0201\x07", "c\x02\x02\u0201\u0202\x07u\x02\x02\u0202\u0203\x07u\x02", "\x02\u0203\u0204\x07g\x02\x02\u0204\u0205\x07o\x02\x02", "\u0205\u0206\x07d\x02\x02\u0206\u0207\x07n\x02\x02\u0207", "\u0208\x07{\x02\x02\u0208b\x03\x02\x02\x02\u0209\u020A", "\x07f\x02\x02\u020A\u020B\x07q\x02\x02\u020Bd\x03\x02", "\x02\x02\u020C\u020D\x07t\x02\x02\u020D\u020E\x07g\x02", "\x02\u020E\u020F\x07v\x02\x02\u020F\u0210\x07w\x02\x02", "\u0210\u0211\x07t\x02\x02\u0211\u0212\x07p\x02\x02\u0212", "f\x03\x02\x02\x02\u0213\u0214\x07v\x02\x02\u0214\u0215", "\x07j\x02\x02\u0215\u0216\x07t\x02\x02\u0216\u0217\x07", "q\x02\x02\u0217\u0218\x07y\x02\x02\u0218h\x03\x02\x02", "\x02\u0219\u021A\x07g\x02\x02\u021A\u021B\x07o\x02\x02", "\u021B\u021C\x07k\x02\x02\u021C\u021D\x07v\x02\x02\u021D", "j\x03\x02\x02\x02\u021E\u021F\x07x\x02\x02\u021F\u0220", "\x07c\x02\x02\u0220\u0221\x07t\x02\x02\u0221l\x03\x02", "\x02\x02\u0222\u0223\x07d\x02\x02\u0223\u0224\x07q\x02", "\x02\u0224\u0225\x07q\x02\x02\u0225\u0226\x07n\x02\x02", "\u0226n\x03\x02\x02\x02\u0227\u0228\x07u\x02\x02\u0228", "\u0229\x07v\x02\x02\u0229\u022A\x07t\x02\x02\u022A\u022B", "\x07k\x02\x02\u022B\u022C\x07p\x02\x02\u022C\u022D\x07", "i\x02\x02\u022Dp\x03\x02\x02\x02\u022E\u022F\x07d\x02", "\x02\u022F\u0230\x07{\x02\x02\u0230\u0231\x07v\x02\x02", "\u0231\u0232\x07g\x02\x02\u0232r\x03\x02\x02\x02\u0233", "\u0234\x07-\x02\x02\u0234\u0235\x07-\x02\x02\u0235t\x03", "\x02\x02\x02\u0236\u0237\x07/\x02\x02\u0237\u0238\x07", "/\x02\x02\u0238v\x03\x02\x02\x02\u0239\u023A\x07p\x02", "\x02\u023A\u023B\x07g\x02\x02\u023B\u023C\x07y\x02\x02", "\u023Cx\x03\x02\x02\x02\u023D\u023E\x07<\x02\x02\u023E", "z\x03\x02\x02\x02\u023F\u0240\x07-\x02\x02\u0240|\x03", "\x02\x02\x02\u0241\u0242\x07/\x02\x02\u0242~\x03\x02", "\x02\x02\u0243\u0244\x07c\x02\x02\u0244\u0245\x07h\x02", "\x02\u0245\u0246\x07v\x02\x02\u0246\u0247\x07g\x02\x02", "\u0247\u0248\x07t\x02\x02\u0248\x80\x03\x02\x02\x02", "\u0249\u024A\x07f\x02\x02\u024A\u024B\x07g\x02\x02\u024B", "\u024C\x07n\x02\x02\u024C\u024D\x07g\x02\x02\u024D\u024E", "\x07v\x02\x02\u024E\u024F\x07g\x02\x02\u024F\x82\x03", "\x02\x02\x02\u0250\u0251\x07#\x02\x02\u0251\x84\x03", "\x02\x02\x02\u0252\u0253\x07,\x02\x02\u0253\u0254\x07", ",\x02\x02\u0254\x86\x03\x02\x02\x02\u0255\u0256\x07", "1\x02\x02\u0256\x88\x03\x02\x02\x02\u0257\u0258\x07", "'\x02\x02\u0258\x8A\x03\x02\x02\x02\u0259\u025A\x07", ">\x02\x02\u025A\u025B\x07>\x02\x02\u025B\x8C\x03\x02", "\x02\x02\u025C\u025D\x07@\x02\x02\u025D\u025E\x07@\x02", "\x02\u025E\x8E\x03\x02\x02\x02\u025F\u0260\x07(\x02", "\x02\u0260\x90\x03\x02\x02\x02\u0261\u0262\x07~\x02", "\x02\u0262\x92\x03\x02\x02\x02\u0263\u0264\x07?\x02", "\x02\u0264\u0265\x07?\x02\x02\u0265\x94\x03\x02\x02", "\x02\u0266\u0267\x07#\x02\x02\u0267\u0268\x07?\x02\x02", "\u0268\x96\x03\x02\x02\x02\u0269\u026A\x07(\x02\x02", "\u026A\u026B\x07(\x02\x02\u026B\x98\x03\x02\x02\x02", "\u026C\u026D\x07A\x02\x02\u026D\x9A\x03\x02\x02\x02", "\u026E\u026F\x07~\x02\x02\u026F\u0270\x07?\x02\x02\u0270", "\x9C\x03\x02\x02\x02\u0271\u0272\x07`\x02\x02\u0272", "\u0273\x07?\x02\x02\u0273\x9E\x03\x02\x02\x02\u0274", "\u0275\x07(\x02\x02\u0275\u0276\x07?\x02\x02\u0276\xA0", "\x03\x02\x02\x02\u0277\u0278\x07>\x02\x02\u0278\u0279", "\x07>\x02\x02\u0279\u027A\x07?\x02\x02\u027A\xA2\x03", "\x02\x02\x02\u027B\u027C\x07@\x02\x02\u027C\u027D\x07", "@\x02\x02\u027D\u027E\x07?\x02\x02\u027E\xA4\x03\x02", "\x02\x02\u027F\u0280\x07-\x02\x02\u0280\u0281\x07?\x02", "\x02\u0281\xA6\x03\x02\x02\x02\u0282\u0283\x07/\x02", "\x02\u0283\u0284\x07?\x02\x02\u0284\xA8\x03\x02\x02", "\x02\u0285\u0286\x07,\x02\x02\u0286\u0287\x07?\x02\x02", "\u0287\xAA\x03\x02\x02\x02\u0288\u0289\x071\x02\x02", "\u0289\u028A\x07?\x02\x02\u028A\xAC\x03\x02\x02\x02", "\u028B\u028C\x07'\x02\x02\u028C\u028D\x07?\x02\x02\u028D", "\xAE\x03\x02\x02\x02\u028E\u028F\x07n\x02\x02\u028F", "\u0290\x07g\x02\x02\u0290\u0291\x07v\x02\x02\u0291\xB0", "\x03\x02\x02\x02\u0292\u0293\x07<\x02\x02\u0293\u0294", "\x07?\x02\x02\u0294\xB2\x03\x02\x02\x02\u0295\u0296", "\x07?\x02\x02\u0296\u0297\x07<\x02\x02\u0297\xB4\x03", "\x02\x02\x02\u0298\u0299\x07u\x02\x02\u0299\u029A\x07", "y\x02\x02\u029A\u029B\x07k\x02\x02\u029B\u029C\x07v\x02", "\x02\u029C\u029D\x07e\x02\x02\u029D\u029E\x07j\x02\x02", "\u029E\xB6\x03\x02\x02\x02\u029F\u02A0\x07e\x02\x02", "\u02A0\u02A1\x07c\x02\x02\u02A1\u02A2\x07u\x02\x02\u02A2", "\u02A3\x07g\x02\x02\u02A3\xB8\x03\x02\x02\x02\u02A4", "\u02A5\x07f\x02\x02\u02A5\u02A6\x07g\x02\x02\u02A6\u02A7", "\x07h\x02\x02\u02A7\u02A8\x07c\x02\x02\u02A8\u02A9\x07", "w\x02\x02\u02A9\u02AA\x07n\x02\x02\u02AA\u02AB\x07v\x02", "\x02\u02AB\xBA\x03\x02\x02\x02\u02AC\u02AD\x07/\x02", "\x02\u02AD\u02AE\x07@\x02\x02\u02AE\xBC\x03\x02\x02", "\x02\u02AF\u02B0\x07e\x02\x02\u02B0\u02B1\x07c\x02\x02", "\u02B1\u02B2\x07n\x02\x02\u02B2\u02B3\x07n\x02\x02\u02B3", "\u02B4\x07d\x02\x02\u02B4\u02B5\x07c\x02\x02\u02B5\u02B6", "\x07e\x02\x02\u02B6\u02B7\x07m\x02\x02\u02B7\xBE\x03", "\x02\x02\x02\u02B8\u02B9\x07q\x02\x02\u02B9\u02BA\x07", "x\x02\x02\u02BA\u02BB\x07g\x02\x02\u02BB\u02BC\x07t\x02", "\x02\u02BC\u02BD\x07t\x02\x02\u02BD\u02BE\x07k\x02\x02", "\u02BE\u02BF\x07f\x02\x02\u02BF\u02C0\x07g\x02\x02\u02C0", "\xC0\x03\x02\x02\x02\u02C1\u02C2\x07k\x02\x02\u02C2", "\u02C3\x07p\x02\x02\u02C3\u0378\x07v\x02\x02\u02C4\u02C5", "\x07k\x02\x02\u02C5\u02C6\x07p\x02\x02\u02C6\u02C7\x07", "v\x02\x02\u02C7\u0378\x07:\x02\x02\u02C8\u02C9\x07k\x02", "\x02\u02C9\u02CA\x07p\x02\x02\u02CA\u02CB\x07v\x02\x02", "\u02CB\u02CC\x073\x02\x02\u02CC\u0378\x078\x02\x02\u02CD", "\u02CE\x07k\x02\x02\u02CE\u02CF\x07p\x02\x02\u02CF\u02D0", "\x07v\x02\x02\u02D0\u02D1\x074\x02\x02\u02D1\u0378\x07", "6\x02\x02\u02D2\u02D3\x07k\x02\x02\u02D3\u02D4\x07p\x02", "\x02\u02D4\u02D5\x07v\x02\x02\u02D5\u02D6\x075\x02\x02", "\u02D6\u0378\x074\x02\x02\u02D7\u02D8\x07k\x02\x02\u02D8", "\u02D9\x07p\x02\x02\u02D9\u02DA\x07v\x02\x02\u02DA\u02DB", "\x076\x02\x02\u02DB\u0378\x072\x02\x02\u02DC\u02DD\x07", "k\x02\x02\u02DD\u02DE\x07p\x02\x02\u02DE\u02DF\x07v\x02", "\x02\u02DF\u02E0\x076\x02\x02\u02E0\u0378\x07:\x02\x02", "\u02E1\u02E2\x07k\x02\x02\u02E2\u02E3\x07p\x02\x02\u02E3", "\u02E4\x07v\x02\x02\u02E4\u02E5\x077\x02\x02\u02E5\u0378", "\x078\x02\x02\u02E6\u02E7\x07k\x02\x02\u02E7\u02E8\x07", "p\x02\x02\u02E8\u02E9\x07v\x02\x02\u02E9\u02EA\x078\x02", "\x02\u02EA\u0378\x076\x02\x02\u02EB\u02EC\x07k\x02\x02", "\u02EC\u02ED\x07p\x02\x02\u02ED\u02EE\x07v\x02\x02\u02EE", "\u02EF\x079\x02\x02\u02EF\u0378\x074\x02\x02\u02F0\u02F1", "\x07k\x02\x02\u02F1\u02F2\x07p\x02\x02\u02F2\u02F3\x07", "v\x02\x02\u02F3\u02F4\x07:\x02\x02\u02F4\u0378\x072\x02", "\x02\u02F5\u02F6\x07k\x02\x02\u02F6\u02F7\x07p\x02\x02", "\u02F7\u02F8\x07v\x02\x02\u02F8\u02F9\x07:\x02\x02\u02F9", "\u0378\x07:\x02\x02\u02FA\u02FB\x07k\x02\x02\u02FB\u02FC", "\x07p\x02\x02\u02FC\u02FD\x07v\x02\x02\u02FD\u02FE\x07", ";\x02\x02\u02FE\u0378\x078\x02\x02\u02FF\u0300\x07k\x02", "\x02\u0300\u0301\x07p\x02\x02\u0301\u0302\x07v\x02\x02", "\u0302\u0303\x073\x02\x02\u0303\u0304\x072\x02\x02\u0304", "\u0378\x076\x02\x02\u0305\u0306\x07k\x02\x02\u0306\u0307", "\x07p\x02\x02\u0307\u0308\x07v\x02\x02\u0308\u0309\x07", "3\x02\x02\u0309\u030A\x073\x02\x02\u030A\u0378\x074\x02", "\x02\u030B\u030C\x07k\x02\x02\u030C\u030D\x07p\x02\x02", "\u030D\u030E\x07v\x02\x02\u030E\u030F\x073\x02\x02\u030F", "\u0310\x074\x02\x02\u0310\u0378\x072\x02\x02\u0311\u0312", "\x07k\x02\x02\u0312\u0313\x07p\x02\x02\u0313\u0314\x07", "v\x02\x02\u0314\u0315\x073\x02\x02\u0315\u0316\x074\x02", "\x02\u0316\u0378\x07:\x02\x02\u0317\u0318\x07k\x02\x02", "\u0318\u0319\x07p\x02\x02\u0319\u031A\x07v\x02\x02\u031A", "\u031B\x073\x02\x02\u031B\u031C\x075\x02\x02\u031C\u0378", "\x078\x02\x02\u031D\u031E\x07k\x02\x02\u031E\u031F\x07", "p\x02\x02\u031F\u0320\x07v\x02\x02\u0320\u0321\x073\x02", "\x02\u0321\u0322\x076\x02\x02\u0322\u0378\x076\x02\x02", "\u0323\u0324\x07k\x02\x02\u0324\u0325\x07p\x02\x02\u0325", "\u0326\x07v\x02\x02\u0326\u0327\x073\x02\x02\u0327\u0328", "\x077\x02\x02\u0328\u0378\x074\x02\x02\u0329\u032A\x07", "k\x02\x02\u032A\u032B\x07p\x02\x02\u032B\u032C\x07v\x02", "\x02\u032C\u032D\x073\x02\x02\u032D\u032E\x078\x02\x02", "\u032E\u0378\x072\x02\x02\u032F\u0330\x07k\x02\x02\u0330", "\u0331\x07p\x02\x02\u0331\u0332\x07v\x02\x02\u0332\u0333", "\x073\x02\x02\u0333\u0334\x078\x02\x02\u0334\u0378\x07", ":\x02\x02\u0335\u0336\x07k\x02\x02\u0336\u0337\x07p\x02", "\x02\u0337\u0338\x07v\x02\x02\u0338\u0339\x073\x02\x02", "\u0339\u033A\x079\x02\x02\u033A\u0378\x078\x02\x02\u033B", "\u033C\x07k\x02\x02\u033C\u033D\x07p\x02\x02\u033D\u033E", "\x07v\x02\x02\u033E\u033F\x073\x02\x02\u033F\u0340\x07", ":\x02\x02\u0340\u0378\x076\x02\x02\u0341\u0342\x07k\x02", "\x02\u0342\u0343\x07p\x02\x02\u0343\u0344\x07v\x02\x02", "\u0344\u0345\x073\x02\x02\u0345\u0346\x07;\x02\x02\u0346", "\u0378\x074\x02\x02\u0347\u0348\x07k\x02\x02\u0348\u0349", "\x07p\x02\x02\u0349\u034A\x07v\x02\x02\u034A\u034B\x07", "4\x02\x02\u034B\u034C\x072\x02\x02\u034C\u0378\x072\x02", "\x02\u034D\u034E\x07k\x02\x02\u034E\u034F\x07p\x02\x02", "\u034F\u0350\x07v\x02\x02\u0350\u0351\x074\x02\x02\u0351", "\u0352\x072\x02\x02\u0352\u0378\x07:\x02\x02\u0353\u0354", "\x07k\x02\x02\u0354\u0355\x07p\x02\x02\u0355\u0356\x07", "v\x02\x02\u0356\u0357\x074\x02\x02\u0357\u0358\x073\x02", "\x02\u0358\u0378\x078\x02\x02\u0359\u035A\x07k\x02\x02", "\u035A\u035B\x07p\x02\x02\u035B\u035C\x07v\x02\x02\u035C", "\u035D\x074\x02\x02\u035D\u035E\x074\x02\x02\u035E\u0378", "\x076\x02\x02\u035F\u0360\x07k\x02\x02\u0360\u0361\x07", "p\x02\x02\u0361\u0362\x07v\x02\x02\u0362\u0363\x074\x02", "\x02\u0363\u0364\x075\x02\x02\u0364\u0378\x074\x02\x02", "\u0365\u0366\x07k\x02\x02\u0366\u0367\x07p\x02\x02\u0367", "\u0368\x07v\x02\x02\u0368\u0369\x074\x02\x02\u0369\u036A", "\x076\x02\x02\u036A\u0378\x072\x02\x02\u036B\u036C\x07", "k\x02\x02\u036C\u036D\x07p\x02\x02\u036D\u036E\x07v\x02", "\x02\u036E\u036F\x074\x02\x02\u036F\u0370\x076\x02\x02", "\u0370\u0378\x07:\x02\x02\u0371\u0372\x07k\x02\x02\u0372", "\u0373\x07p\x02\x02\u0373\u0374\x07v\x02\x02\u0374\u0375", "\x074\x02\x02\u0375\u0376\x077\x02\x02\u0376\u0378\x07", "8\x02\x02\u0377\u02C1\x03\x02\x02\x02\u0377\u02C4\x03", "\x02\x02\x02\u0377\u02C8\x03\x02\x02\x02\u0377\u02CD\x03", "\x02\x02\x02\u0377\u02D2\x03\x02\x02\x02\u0377\u02D7\x03", "\x02\x02\x02\u0377\u02DC\x03\x02\x02\x02\u0377\u02E1\x03", "\x02\x02\x02\u0377\u02E6\x03\x02\x02\x02\u0377\u02EB\x03", "\x02\x02\x02\u0377\u02F0\x03\x02\x02\x02\u0377\u02F5\x03", "\x02\x02\x02\u0377\u02FA\x03\x02\x02\x02\u0377\u02FF\x03", "\x02\x02\x02\u0377\u0305\x03\x02\x02\x02\u0377\u030B\x03", "\x02\x02\x02\u0377\u0311\x03\x02\x02\x02\u0377\u0317\x03", "\x02\x02\x02\u0377\u031D\x03\x02\x02\x02\u0377\u0323\x03", "\x02\x02\x02\u0377\u0329\x03\x02\x02\x02\u0377\u032F\x03", "\x02\x02\x02\u0377\u0335\x03\x02\x02\x02\u0377\u033B\x03", "\x02\x02\x02\u0377\u0341\x03\x02\x02\x02\u0377\u0347\x03", "\x02\x02\x02\u0377\u034D\x03\x02\x02\x02\u0377\u0353\x03", "\x02\x02\x02\u0377\u0359\x03\x02\x02\x02\u0377\u035F\x03", "\x02\x02\x02\u0377\u0365\x03\x02\x02\x02\u0377\u036B\x03", "\x02\x02\x02\u0377\u0371\x03\x02\x02\x02\u0378\xC2\x03", "\x02\x02\x02\u0379\u037A\x07w\x02\x02\u037A\u037B\x07", "k\x02\x02\u037B\u037C\x07p\x02\x02\u037C\u0451\x07v\x02", "\x02\u037D\u037E\x07w\x02\x02\u037E\u037F\x07k\x02\x02", "\u037F\u0380\x07p\x02\x02\u0380\u0381\x07v\x02\x02\u0381", "\u0451\x07:\x02\x02\u0382\u0383\x07w\x02\x02\u0383\u0384", "\x07k\x02\x02\u0384\u0385\x07p\x02\x02\u0385\u0386\x07", "v\x02\x02\u0386\u0387\x073\x02\x02\u0387\u0451\x078\x02", "\x02\u0388\u0389\x07w\x02\x02\u0389\u038A\x07k\x02\x02", "\u038A\u038B\x07p\x02\x02\u038B\u038C\x07v\x02\x02\u038C", "\u038D\x074\x02\x02\u038D\u0451\x076\x02\x02\u038E\u038F", "\x07w\x02\x02\u038F\u0390\x07k\x02\x02\u0390\u0391\x07", "p\x02\x02\u0391\u0392\x07v\x02\x02\u0392\u0393\x075\x02", "\x02\u0393\u0451\x074\x02\x02\u0394\u0395\x07w\x02\x02", "\u0395\u0396\x07k\x02\x02\u0396\u0397\x07p\x02\x02\u0397", "\u0398\x07v\x02\x02\u0398\u0399\x076\x02\x02\u0399\u0451", "\x072\x02\x02\u039A\u039B\x07w\x02\x02\u039B\u039C\x07", "k\x02\x02\u039C\u039D\x07p\x02\x02\u039D\u039E\x07v\x02", "\x02\u039E\u039F\x076\x02\x02\u039F\u0451\x07:\x02\x02", "\u03A0\u03A1\x07w\x02\x02\u03A1\u03A2\x07k\x02\x02\u03A2", "\u03A3\x07p\x02\x02\u03A3\u03A4\x07v\x02\x02\u03A4\u03A5", "\x077\x02\x02\u03A5\u0451\x078\x02\x02\u03A6\u03A7\x07", "w\x02\x02\u03A7\u03A8\x07k\x02\x02\u03A8\u03A9\x07p\x02", "\x02\u03A9\u03AA\x07v\x02\x02\u03AA\u03AB\x078\x02\x02", "\u03AB\u0451\x076\x02\x02\u03AC\u03AD\x07w\x02\x02\u03AD", "\u03AE\x07k\x02\x02\u03AE\u03AF\x07p\x02\x02\u03AF\u03B0", "\x07v\x02\x02\u03B0\u03B1\x079\x02\x02\u03B1\u0451\x07", "4\x02\x02\u03B2\u03B3\x07w\x02\x02\u03B3\u03B4\x07k\x02", "\x02\u03B4\u03B5\x07p\x02\x02\u03B5\u03B6\x07v\x02\x02", "\u03B6\u03B7\x07:\x02\x02\u03B7\u0451\x072\x02\x02\u03B8", "\u03B9\x07w\x02\x02\u03B9\u03BA\x07k\x02\x02\u03BA\u03BB", "\x07p\x02\x02\u03BB\u03BC\x07v\x02\x02\u03BC\u03BD\x07", ":\x02\x02\u03BD\u0451\x07:\x02\x02\u03BE\u03BF\x07w\x02", "\x02\u03BF\u03C0\x07k\x02\x02\u03C0\u03C1\x07p\x02\x02", "\u03C1\u03C2\x07v\x02\x02\u03C2\u03C3\x07;\x02\x02\u03C3", "\u0451\x078\x02\x02\u03C4\u03C5\x07w\x02\x02\u03C5\u03C6", "\x07k\x02\x02\u03C6\u03C7\x07p\x02\x02\u03C7\u03C8\x07", "v\x02\x02\u03C8\u03C9\x073\x02\x02\u03C9\u03CA\x072\x02", "\x02\u03CA\u0451\x076\x02\x02\u03CB\u03CC\x07w\x02\x02", "\u03CC\u03CD\x07k\x02\x02\u03CD\u03CE\x07p\x02\x02\u03CE", "\u03CF\x07v\x02\x02\u03CF\u03D0\x073\x02\x02\u03D0\u03D1", "\x073\x02\x02\u03D1\u0451\x074\x02\x02\u03D2\u03D3\x07", "w\x02\x02\u03D3\u03D4\x07k\x02\x02\u03D4\u03D5\x07p\x02", "\x02\u03D5\u03D6\x07v\x02\x02\u03D6\u03D7\x073\x02\x02", "\u03D7\u03D8\x074\x02\x02\u03D8\u0451\x072\x02\x02\u03D9", "\u03DA\x07w\x02\x02\u03DA\u03DB\x07k\x02\x02\u03DB\u03DC", "\x07p\x02\x02\u03DC\u03DD\x07v\x02\x02\u03DD\u03DE\x07", "3\x02\x02\u03DE\u03DF\x074\x02\x02\u03DF\u0451\x07:\x02", "\x02\u03E0\u03E1\x07w\x02\x02\u03E1\u03E2\x07k\x02\x02", "\u03E2\u03E3\x07p\x02\x02\u03E3\u03E4\x07v\x02\x02\u03E4", "\u03E5\x073\x02\x02\u03E5\u03E6\x075\x02\x02\u03E6\u0451", "\x078\x02\x02\u03E7\u03E8\x07w\x02\x02\u03E8\u03E9\x07", "k\x02\x02\u03E9\u03EA\x07p\x02\x02\u03EA\u03EB\x07v\x02", "\x02\u03EB\u03EC\x073\x02\x02\u03EC\u03ED\x076\x02\x02", "\u03ED\u0451\x076\x02\x02\u03EE\u03EF\x07w\x02\x02\u03EF", "\u03F0\x07k\x02\x02\u03F0\u03F1\x07p\x02\x02\u03F1\u03F2", "\x07v\x02\x02\u03F2\u03F3\x073\x02\x02\u03F3\u03F4\x07", "7\x02\x02\u03F4\u0451\x074\x02\x02\u03F5\u03F6\x07w\x02", "\x02\u03F6\u03F7\x07k\x02\x02\u03F7\u03F8\x07p\x02\x02", "\u03F8\u03F9\x07v\x02\x02\u03F9\u03FA\x073\x02\x02\u03FA", "\u03FB\x078\x02\x02\u03FB\u0451\x072\x02\x02\u03FC\u03FD", "\x07w\x02\x02\u03FD\u03FE\x07k\x02\x02\u03FE\u03FF\x07", "p\x02\x02\u03FF\u0400\x07v\x02\x02\u0400\u0401\x073\x02", "\x02\u0401\u0402\x078\x02\x02\u0402\u0451\x07:\x02\x02", "\u0403\u0404\x07w\x02\x02\u0404\u0405\x07k\x02\x02\u0405", "\u0406\x07p\x02\x02\u0406\u0407\x07v\x02\x02\u0407\u0408", "\x073\x02\x02\u0408\u0409\x079\x02\x02\u0409\u0451\x07", "8\x02\x02\u040A\u040B\x07w\x02\x02\u040B\u040C\x07k\x02", "\x02\u040C\u040D\x07p\x02\x02\u040D\u040E\x07v\x02\x02", "\u040E\u040F\x073\x02\x02\u040F\u0410\x07:\x02\x02\u0410", "\u0451\x076\x02\x02\u0411\u0412\x07w\x02\x02\u0412\u0413", "\x07k\x02\x02\u0413\u0414\x07p\x02\x02\u0414\u0415\x07", "v\x02\x02\u0415\u0416\x073\x02\x02\u0416\u0417\x07;\x02", "\x02\u0417\u0451\x074\x02\x02\u0418\u0419\x07w\x02\x02", "\u0419\u041A\x07k\x02\x02\u041A\u041B\x07p\x02\x02\u041B", "\u041C\x07v\x02\x02\u041C\u041D\x074\x02\x02\u041D\u041E", "\x072\x02\x02\u041E\u0451\x072\x02\x02\u041F\u0420\x07", "w\x02\x02\u0420\u0421\x07k\x02\x02\u0421\u0422\x07p\x02", "\x02\u0422\u0423\x07v\x02\x02\u0423\u0424\x074\x02\x02", "\u0424\u0425\x072\x02\x02\u0425\u0451\x07:\x02\x02\u0426", "\u0427\x07w\x02\x02\u0427\u0428\x07k\x02\x02\u0428\u0429", "\x07p\x02\x02\u0429\u042A\x07v\x02\x02\u042A\u042B\x07", "4\x02\x02\u042B\u042C\x073\x02\x02\u042C\u0451\x078\x02", "\x02\u042D\u042E\x07w\x02\x02\u042E\u042F\x07k\x02\x02", "\u042F\u0430\x07p\x02\x02\u0430\u0431\x07v\x02\x02\u0431", "\u0432\x074\x02\x02\u0432\u0433\x074\x02\x02\u0433\u0451", "\x076\x02\x02\u0434\u0435\x07w\x02\x02\u0435\u0436\x07", "k\x02\x02\u0436\u0437\x07p\x02\x02\u0437\u0438\x07v\x02", "\x02\u0438\u0439\x074\x02\x02\u0439\u043A\x075\x02\x02", "\u043A\u0451\x074\x02\x02\u043B\u043C\x07w\x02\x02\u043C", "\u043D\x07k\x02\x02\u043D\u043E\x07p\x02\x02\u043E\u043F", "\x07v\x02\x02\u043F\u0440\x074\x02\x02\u0440\u0441\x07", "6\x02\x02\u0441\u0451\x072\x02\x02\u0442\u0443\x07w\x02", "\x02\u0443\u0444\x07k\x02\x02\u0444\u0445\x07p\x02\x02", "\u0445\u0446\x07v\x02\x02\u0446\u0447\x074\x02\x02\u0447", "\u0448\x076\x02\x02\u0448\u0451\x07:\x02\x02\u0449\u044A", "\x07w\x02\x02\u044A\u044B\x07k\x02\x02\u044B\u044C\x07", "p\x02\x02\u044C\u044D\x07v\x02\x02\u044D\u044E\x074\x02", "\x02\u044E\u044F\x077\x02\x02\u044F\u0451\x078\x02\x02", "\u0450\u0379\x03\x02\x02\x02\u0450\u037D\x03\x02\x02\x02", "\u0450\u0382\x03\x02\x02\x02\u0450\u0388\x03\x02\x02\x02", "\u0450\u038E\x03\x02\x02\x02\u0450\u0394\x03\x02\x02\x02", "\u0450\u039A\x03\x02\x02\x02\u0450\u03A0\x03\x02\x02\x02", "\u0450\u03A6\x03\x02\x02\x02\u0450\u03AC\x03\x02\x02\x02", "\u0450\u03B2\x03\x02\x02\x02\u0450\u03B8\x03\x02\x02\x02", "\u0450\u03BE\x03\x02\x02\x02\u0450\u03C4\x03\x02\x02\x02", "\u0450\u03CB\x03\x02\x02\x02\u0450\u03D2\x03\x02\x02\x02", "\u0450\u03D9\x03\x02\x02\x02\u0450\u03E0\x03\x02\x02\x02", "\u0450\u03E7\x03\x02\x02\x02\u0450\u03EE\x03\x02\x02\x02", "\u0450\u03F5\x03\x02\x02\x02\u0450\u03FC\x03\x02\x02\x02", "\u0450\u0403\x03\x02\x02\x02\u0450\u040A\x03\x02\x02\x02", "\u0450\u0411\x03\x02\x02\x02\u0450\u0418\x03\x02\x02\x02", "\u0450\u041F\x03\x02\x02\x02\u0450\u0426\x03\x02\x02\x02", "\u0450\u042D\x03\x02\x02\x02\u0450\u0434\x03\x02\x02\x02", "\u0450\u043B\x03\x02\x02\x02\u0450\u0442\x03\x02\x02\x02", "\u0450\u0449\x03\x02\x02\x02\u0451\xC4\x03\x02\x02\x02", "\u0452\u0453\x07d\x02\x02\u0453\u0454\x07{\x02\x02\u0454", "\u0455\x07v\x02\x02\u0455\u0456\x07g\x02\x02\u0456\u052F", "\x07u\x02\x02\u0457\u0458\x07d\x02\x02\u0458\u0459\x07", "{\x02\x02\u0459\u045A\x07v\x02\x02\u045A\u045B\x07g\x02", "\x02\u045B\u045C\x07u\x02\x02\u045C\u052F\x073\x02\x02", "\u045D\u045E\x07d\x02\x02\u045E\u045F\x07{\x02\x02\u045F", "\u0460\x07v\x02\x02\u0460\u0461\x07g\x02\x02\u0461\u0462", "\x07u\x02\x02\u0462\u052F\x074\x02\x02\u0463\u0464\x07", "d\x02\x02\u0464\u0465\x07{\x02\x02\u0465\u0466\x07v\x02", "\x02\u0466\u0467\x07g\x02\x02\u0467\u0468\x07u\x02\x02", "\u0468\u052F\x075\x02\x02\u0469\u046A\x07d\x02\x02\u046A", "\u046B\x07{\x02\x02\u046B\u046C\x07v\x02\x02\u046C\u046D", "\x07g\x02\x02\u046D\u046E\x07u\x02\x02\u046E\u052F\x07", "6\x02\x02\u046F\u0470\x07d\x02\x02\u0470\u0471\x07{\x02", "\x02\u0471\u0472\x07v\x02\x02\u0472\u0473\x07g\x02\x02", "\u0473\u0474\x07u\x02\x02\u0474\u052F\x077\x02\x02\u0475", "\u0476\x07d\x02\x02\u0476\u0477\x07{\x02\x02\u0477\u0478", "\x07v\x02\x02\u0478\u0479\x07g\x02\x02\u0479\u047A\x07", "u\x02\x02\u047A\u052F\x078\x02\x02\u047B\u047C\x07d\x02", "\x02\u047C\u047D\x07{\x02\x02\u047D\u047E\x07v\x02\x02", "\u047E\u047F\x07g\x02\x02\u047F\u0480\x07u\x02\x02\u0480", "\u052F\x079\x02\x02\u0481\u0482\x07d\x02\x02\u0482\u0483", "\x07{\x02\x02\u0483\u0484\x07v\x02\x02\u0484\u0485\x07", "g\x02\x02\u0485\u0486\x07u\x02\x02\u0486\u052F\x07:\x02", "\x02\u0487\u0488\x07d\x02\x02\u0488\u0489\x07{\x02\x02", "\u0489\u048A\x07v\x02\x02\u048A\u048B\x07g\x02\x02\u048B", "\u048C\x07u\x02\x02\u048C\u052F\x07;\x02\x02\u048D\u048E", "\x07d\x02\x02\u048E\u048F\x07{\x02\x02\u048F\u0490\x07", "v\x02\x02\u0490\u0491\x07g\x02\x02\u0491\u0492\x07u\x02", "\x02\u0492\u0493\x073\x02\x02\u0493\u052F\x072\x02\x02", "\u0494\u0495\x07d\x02\x02\u0495\u0496\x07{\x02\x02\u0496", "\u0497\x07v\x02\x02\u0497\u0498\x07g\x02\x02\u0498\u0499", "\x07u\x02\x02\u0499\u049A\x073\x02\x02\u049A\u052F\x07", "3\x02\x02\u049B\u049C\x07d\x02\x02\u049C\u049D\x07{\x02", "\x02\u049D\u049E\x07v\x02\x02\u049E\u049F\x07g\x02\x02", "\u049F\u04A0\x07u\x02\x02\u04A0\u04A1\x073\x02\x02\u04A1", "\u052F\x074\x02\x02\u04A2\u04A3\x07d\x02\x02\u04A3\u04A4", "\x07{\x02\x02\u04A4\u04A5\x07v\x02\x02\u04A5\u04A6\x07", "g\x02\x02\u04A6\u04A7\x07u\x02\x02\u04A7\u04A8\x073\x02", "\x02\u04A8\u052F\x075\x02\x02\u04A9\u04AA\x07d\x02\x02", "\u04AA\u04AB\x07{\x02\x02\u04AB\u04AC\x07v\x02\x02\u04AC", "\u04AD\x07g\x02\x02\u04AD\u04AE\x07u\x02\x02\u04AE\u04AF", "\x073\x02\x02\u04AF\u052F\x076\x02\x02\u04B0\u04B1\x07", "d\x02\x02\u04B1\u04B2\x07{\x02\x02\u04B2\u04B3\x07v\x02", "\x02\u04B3\u04B4\x07g\x02\x02\u04B4\u04B5\x07u\x02\x02", "\u04B5\u04B6\x073\x02\x02\u04B6\u052F\x077\x02\x02\u04B7", "\u04B8\x07d\x02\x02\u04B8\u04B9\x07{\x02\x02\u04B9\u04BA", "\x07v\x02\x02\u04BA\u04BB\x07g\x02\x02\u04BB\u04BC\x07", "u\x02\x02\u04BC\u04BD\x073\x02\x02\u04BD\u052F\x078\x02", "\x02\u04BE\u04BF\x07d\x02\x02\u04BF\u04C0\x07{\x02\x02", "\u04C0\u04C1\x07v\x02\x02\u04C1\u04C2\x07g\x02\x02\u04C2", "\u04C3\x07u\x02\x02\u04C3\u04C4\x073\x02\x02\u04C4\u052F", "\x079\x02\x02\u04C5\u04C6\x07d\x02\x02\u04C6\u04C7\x07", "{\x02\x02\u04C7\u04C8\x07v\x02\x02\u04C8\u04C9\x07g\x02", "\x02\u04C9\u04CA\x07u\x02\x02\u04CA\u04CB\x073\x02\x02", "\u04CB\u052F\x07:\x02\x02\u04CC\u04CD\x07d\x02\x02\u04CD", "\u04CE\x07{\x02\x02\u04CE\u04CF\x07v\x02\x02\u04CF\u04D0", "\x07g\x02\x02\u04D0\u04D1\x07u\x02\x02\u04D1\u04D2\x07", "3\x02\x02\u04D2\u052F\x07;\x02\x02\u04D3\u04D4\x07d\x02", "\x02\u04D4\u04D5\x07{\x02\x02\u04D5\u04D6\x07v\x02\x02", "\u04D6\u04D7\x07g\x02\x02\u04D7\u04D8\x07u\x02\x02\u04D8", "\u04D9\x074\x02\x02\u04D9\u052F\x072\x02\x02\u04DA\u04DB", "\x07d\x02\x02\u04DB\u04DC\x07{\x02\x02\u04DC\u04DD\x07", "v\x02\x02\u04DD\u04DE\x07g\x02\x02\u04DE\u04DF\x07u\x02", "\x02\u04DF\u04E0\x074\x02\x02\u04E0\u052F\x073\x02\x02", "\u04E1\u04E2\x07d\x02\x02\u04E2\u04E3\x07{\x02\x02\u04E3", "\u04E4\x07v\x02\x02\u04E4\u04E5\x07g\x02\x02\u04E5\u04E6", "\x07u\x02\x02\u04E6\u04E7\x074\x02\x02\u04E7\u052F\x07", "4\x02\x02\u04E8\u04E9\x07d\x02\x02\u04E9\u04EA\x07{\x02", "\x02\u04EA\u04EB\x07v\x02\x02\u04EB\u04EC\x07g\x02\x02", "\u04EC\u04ED\x07u\x02\x02\u04ED\u04EE\x074\x02\x02\u04EE", "\u052F\x075\x02\x02\u04EF\u04F0\x07d\x02\x02\u04F0\u04F1", "\x07{\x02\x02\u04F1\u04F2\x07v\x02\x02\u04F2\u04F3\x07", "g\x02\x02\u04F3\u04F4\x07u\x02\x02\u04F4\u04F5\x074\x02", "\x02\u04F5\u052F\x076\x02\x02\u04F6\u04F7\x07d\x02\x02", "\u04F7\u04F8\x07{\x02\x02\u04F8\u04F9\x07v\x02\x02\u04F9", "\u04FA\x07g\x02\x02\u04FA\u04FB\x07u\x02\x02\u04FB\u04FC", "\x074\x02\x02\u04FC\u052F\x077\x02\x02\u04FD\u04FE\x07", "d\x02\x02\u04FE\u04FF\x07{\x02\x02\u04FF\u0500\x07v\x02", "\x02\u0500\u0501\x07g\x02\x02\u0501\u0502\x07u\x02\x02", "\u0502\u0503\x074\x02\x02\u0503\u052F\x078\x02\x02\u0504", "\u0505\x07d\x02\x02\u0505\u0506\x07{\x02\x02\u0506\u0507", "\x07v\x02\x02\u0507\u0508\x07g\x02\x02\u0508\u0509\x07", "u\x02\x02\u0509\u050A\x074\x02\x02\u050A\u052F\x079\x02", "\x02\u050B\u050C\x07d\x02\x02\u050C\u050D\x07{\x02\x02", "\u050D\u050E\x07v\x02\x02\u050E\u050F\x07g\x02\x02\u050F", "\u0510\x07u\x02\x02\u0510\u0511\x074\x02\x02\u0511\u052F", "\x07:\x02\x02\u0512\u0513\x07d\x02\x02\u0513\u0514\x07", "{\x02\x02\u0514\u0515\x07v\x02\x02\u0515\u0516\x07g\x02", "\x02\u0516\u0517\x07u\x02\x02\u0517\u0518\x074\x02\x02", "\u0518\u052F\x07;\x02\x02\u0519\u051A\x07d\x02\x02\u051A", "\u051B\x07{\x02\x02\u051B\u051C\x07v\x02\x02\u051C\u051D", "\x07g\x02\x02\u051D\u051E\x07u\x02\x02\u051E\u051F\x07", "5\x02\x02\u051F\u052F\x072\x02\x02\u0520\u0521\x07d\x02", "\x02\u0521\u0522\x07{\x02\x02\u0522\u0523\x07v\x02\x02", "\u0523\u0524\x07g\x02\x02\u0524\u0525\x07u\x02\x02\u0525", "\u0526\x075\x02\x02\u0526\u052F\x073\x02\x02\u0527\u0528", "\x07d\x02\x02\u0528\u0529\x07{\x02\x02\u0529\u052A\x07", "v\x02\x02\u052A\u052B\x07g\x02\x02\u052B\u052C\x07u\x02", "\x02\u052C\u052D\x075\x02\x02\u052D\u052F\x074\x02\x02", "\u052E\u0452\x03\x02\x02\x02\u052E\u0457\x03\x02\x02\x02", "\u052E\u045D\x03\x02\x02\x02\u052E\u0463\x03\x02\x02\x02", "\u052E\u0469\x03\x02\x02\x02\u052E\u046F\x03\x02\x02\x02", "\u052E\u0475\x03\x02\x02\x02\u052E\u047B\x03\x02\x02\x02", "\u052E\u0481\x03\x02\x02\x02\u052E\u0487\x03\x02\x02\x02", "\u052E\u048D\x03\x02\x02\x02\u052E\u0494\x03\x02\x02\x02", "\u052E\u049B\x03\x02\x02\x02\u052E\u04A2\x03\x02\x02\x02", "\u052E\u04A9\x03\x02\x02\x02\u052E\u04B0\x03\x02\x02\x02", "\u052E\u04B7\x03\x02\x02\x02\u052E\u04BE\x03\x02\x02\x02", "\u052E\u04C5\x03\x02\x02\x02\u052E\u04CC\x03\x02\x02\x02", "\u052E\u04D3\x03\x02\x02\x02\u052E\u04DA\x03\x02\x02\x02", "\u052E\u04E1\x03\x02\x02\x02\u052E\u04E8\x03\x02\x02\x02", "\u052E\u04EF\x03\x02\x02\x02\u052E\u04F6\x03\x02\x02\x02", "\u052E\u04FD\x03\x02\x02\x02\u052E\u0504\x03\x02\x02\x02", "\u052E\u050B\x03\x02\x02\x02\u052E\u0512\x03\x02\x02\x02", "\u052E\u0519\x03\x02\x02\x02\u052E\u0520\x03\x02\x02\x02", "\u052E\u0527\x03\x02\x02\x02\u052F\xC6\x03\x02\x02\x02", "\u0530\u0531\x07h\x02\x02\u0531\u0532\x07k\x02\x02\u0532", "\u0533\x07z\x02\x02\u0533\u0534\x07g\x02\x02\u0534\u0547", "\x07f\x02\x02\u0535\u0536\x07h\x02\x02\u0536\u0537\x07", "k\x02\x02\u0537\u0538\x07z\x02\x02\u0538\u0539\x07g\x02", "\x02\u0539\u053A\x07f\x02\x02\u053A\u053C\x03\x02\x02", "\x02\u053B\u053D\t\x02\x02\x02\u053C\u053B\x03\x02\x02", "\x02\u053D\u053E\x03\x02\x02\x02\u053E\u053C\x03\x02\x02", "\x02\u053E\u053F\x03\x02\x02\x02\u053F\u0540\x03\x02\x02", "\x02\u0540\u0542\x07z\x02\x02\u0541\u0543\t\x02\x02\x02", "\u0542\u0541\x03\x02\x02\x02\u0543\u0544\x03\x02\x02\x02", "\u0544\u0542\x03\x02\x02\x02\u0544\u0545\x03\x02\x02\x02", "\u0545\u0547\x03\x02\x02\x02\u0546\u0530\x03\x02\x02\x02", "\u0546\u0535\x03\x02\x02\x02\u0547\xC8\x03\x02\x02\x02", "\u0548\u0549\x07w\x02\x02\u0549\u054A\x07h\x02\x02\u054A", "\u054B\x07k\x02\x02\u054B\u054C\x07z\x02\x02\u054C\u054D", "\x07g\x02\x02\u054D\u0561\x07f\x02\x02\u054E\u054F\x07", "w\x02\x02\u054F\u0550\x07h\x02\x02\u0550\u0551\x07k\x02", "\x02\u0551\u0552\x07z\x02\x02\u0552\u0553\x07g\x02\x02", "\u0553\u0554\x07f\x02\x02\u0554\u0556\x03\x02\x02\x02", "\u0555\u0557\t\x02\x02\x02\u0556\u0555\x03\x02\x02\x02", "\u0557\u0558\x03\x02\x02\x02\u0558\u0556\x03\x02\x02\x02", "\u0558\u0559\x03\x02\x02\x02\u0559\u055A\x03\x02\x02\x02", "\u055A\u055C\x07z\x02\x02\u055B\u055D\t\x02\x02\x02\u055C", "\u055B\x03\x02\x02\x02\u055D\u055E\x03\x02\x02\x02\u055E", "\u055C\x03\x02\x02\x02\u055E\u055F\x03\x02\x02\x02\u055F", "\u0561\x03\x02\x02\x02\u0560\u0548\x03\x02\x02\x02\u0560", "\u054E\x03\x02\x02\x02\u0561\xCA\x03\x02\x02\x02\u0562", "\u0563\x07v\x02\x02\u0563\u0564\x07t\x02\x02\u0564\u0565", "\x07w\x02\x02\u0565\u056C\x07g\x02\x02\u0566\u0567\x07", "h\x02\x02\u0567\u0568\x07c\x02\x02\u0568\u0569\x07n\x02", "\x02\u0569\u056A\x07u\x02\x02\u056A\u056C\x07g\x02\x02", "\u056B\u0562\x03\x02\x02\x02\u056B\u0566\x03\x02\x02\x02", "\u056C\xCC\x03\x02\x02\x02\u056D\u0574\x05\xCFh\x02", "\u056E\u0570\x05\xCFh\x02\u056F\u056E\x03\x02\x02\x02", "\u056F\u0570\x03\x02\x02\x02\u0570\u0571\x03\x02\x02\x02", "\u0571\u0572\x070\x02\x02\u0572\u0574\x05\xCFh\x02\u0573", "\u056D\x03\x02\x02\x02\u0573\u056F\x03\x02\x02\x02\u0574", "\u0577\x03\x02\x02\x02\u0575\u0576\t\x03\x02\x02\u0576", "\u0578\x05\xCFh\x02\u0577\u0575\x03\x02\x02\x02\u0577", "\u0578\x03\x02\x02\x02\u0578\xCE\x03\x02\x02\x02\u0579", "\u0580\t\x02\x02\x02\u057A\u057C\x07a\x02\x02\u057B\u057A", "\x03\x02\x02\x02\u057B\u057C\x03\x02\x02\x02\u057C\u057D", "\x03\x02\x02\x02\u057D\u057F\t\x02\x02\x02\u057E\u057B", "\x03\x02\x02\x02\u057F\u0582\x03\x02\x02\x02\u0580\u057E", "\x03\x02\x02\x02\u0580\u0581\x03\x02\x02\x02\u0581\xD0", "\x03\x02\x02\x02\u0582\u0580\x03\x02\x02\x02\u0583\u0584", "\x072\x02\x02\u0584\u0585\t\x04\x02\x02\u0585\u0586\x05", "\xD3j\x02\u0586\xD2\x03\x02\x02\x02\u0587\u058E\x05", "\xDBn\x02\u0588\u058A\x07a\x02\x02\u0589\u0588\x03\x02", "\x02\x02\u0589\u058A\x03\x02\x02\x02\u058A\u058B\x03\x02", "\x02\x02\u058B\u058D\x05\xDBn\x02\u058C\u0589\x03\x02", "\x02\x02\u058D\u0590\x03\x02\x02\x02\u058E\u058C\x03\x02", "\x02\x02\u058E\u058F\x03\x02\x02\x02\u058F\xD4\x03\x02", "\x02\x02\u0590\u058E\x03\x02\x02\x02\u0591\u0592\x07y", "\x02\x02\u0592\u0593\x07g\x02\x02\u0593\u05CA\x07k\x02", "\x02\u0594\u0595\x07i\x02\x02\u0595\u0596\x07y\x02\x02", "\u0596\u0597\x07g\x02\x02\u0597\u05CA\x07k\x02\x02\u0598", "\u0599\x07u\x02\x02\u0599\u059A\x07|\x02\x02\u059A\u059B", "\x07c\x02\x02\u059B\u059C\x07d\x02\x02\u059C\u05CA\x07", "q\x02\x02\u059D\u059E\x07h\x02\x02\u059E\u059F\x07k\x02", "\x02\u059F\u05A0\x07p\x02\x02\u05A0\u05A1\x07p\x02\x02", "\u05A1\u05A2\x07g\x02\x02\u05A2\u05CA\x07{\x02\x02\u05A3", "\u05A4\x07g\x02\x02\u05A4\u05A5\x07v\x02\x02\u05A5\u05A6", "\x07j\x02\x02\u05A6\u05A7\x07g\x02\x02\u05A7\u05CA\x07", "t\x02\x02\u05A8\u05A9\x07u\x02\x02\u05A9\u05AA\x07g\x02", "\x02\u05AA\u05AB\x07e\x02\x02\u05AB\u05AC\x07q\x02\x02", "\u05AC\u05AD\x07p\x02\x02\u05AD\u05AE\x07f\x02\x02\u05AE", "\u05CA\x07u\x02\x02\u05AF\u05B0\x07o\x02\x02\u05B0\u05B1", "\x07k\x02\x02\u05B1\u05B2\x07p\x02\x02\u05B2\u05B3\x07", "w\x02\x02\u05B3\u05B4\x07v\x02\x02\u05B4\u05B5\x07g\x02", "\x02\u05B5\u05CA\x07u\x02\x02\u05B6\u05B7\x07j\x02\x02", "\u05B7\u05B8\x07q\x02\x02\u05B8\u05B9\x07w\x02\x02\u05B9", "\u05BA\x07t\x02\x02\u05BA\u05CA\x07u\x02\x02\u05BB\u05BC", "\x07f\x02\x02\u05BC\u05BD\x07c\x02\x02\u05BD\u05BE\x07", "{\x02\x02\u05BE\u05CA\x07u\x02\x02\u05BF\u05C0\x07y\x02", "\x02\u05C0\u05C1\x07g\x02\x02\u05C1\u05C2\x07g\x02\x02", "\u05C2\u05C3\x07m\x02\x02\u05C3\u05CA\x07u\x02\x02\u05C4", "\u05C5\x07{\x02\x02\u05C5\u05C6\x07g\x02\x02\u05C6\u05C7", "\x07c\x02\x02\u05C7\u05C8\x07t\x02\x02\u05C8\u05CA\x07", "u\x02\x02\u05C9\u0591\x03\x02\x02\x02\u05C9\u0594\x03", "\x02\x02\x02\u05C9\u0598\x03\x02\x02\x02\u05C9\u059D\x03", "\x02\x02\x02\u05C9\u05A3\x03\x02\x02\x02\u05C9\u05A8\x03", "\x02\x02\x02\u05C9\u05AF\x03\x02\x02\x02\u05C9\u05B6\x03", "\x02\x02\x02\u05C9\u05BB\x03\x02\x02\x02\u05C9\u05BF\x03", "\x02\x02\x02\u05C9\u05C4\x03\x02\x02\x02\u05CA\xD6\x03", "\x02\x02\x02\u05CB\u05CC\x07j\x02\x02\u05CC\u05CD\x07", "g\x02\x02\u05CD\u05CE\x07z\x02\x02\u05CE\u05D9\x03\x02", "\x02\x02\u05CF\u05D1\x07$\x02\x02\u05D0\u05D2\x05\xD3", "j\x02\u05D1\u05D0\x03\x02\x02\x02\u05D1\u05D2\x03\x02", "\x02\x02\u05D2\u05D3\x03\x02\x02\x02\u05D3\u05DA\x07$", "\x02\x02\u05D4\u05D6\x07)\x02\x02\u05D5\u05D7\x05\xD3", "j\x02\u05D6\u05D5\x03\x02\x02\x02\u05D6\u05D7\x03\x02", "\x02\x02\u05D7\u05D8\x03\x02\x02\x02\u05D8\u05DA\x07)", "\x02\x02\u05D9\u05CF\x03\x02\x02\x02\u05D9\u05D4\x03\x02", "\x02\x02\u05DA\xD8\x03\x02\x02\x02\u05DB\u05DC\x05\xDB", "n\x02\u05DC\u05DD\x05\xDBn\x02\u05DD\xDA\x03\x02\x02", "\x02\u05DE\u05DF\t\x05\x02\x02\u05DF\xDC\x03\x02\x02", "\x02\u05E0\u05E1\x07c\x02\x02\u05E1\u05E2\x07d\x02\x02", "\u05E2\u05E3\x07u\x02\x02\u05E3\u05E4\x07v\x02\x02\u05E4", "\u05E5\x07t\x02\x02\u05E5\u05E6\x07c\x02\x02\u05E6\u05E7", "\x07e\x02\x02\u05E7\u0639\x07v\x02\x02\u05E8\u05E9\x07", "c\x02\x02\u05E9\u05EA\x07h\x02\x02\u05EA\u05EB\x07v\x02", "\x02\u05EB\u05EC\x07g\x02\x02\u05EC\u0639\x07t\x02\x02", "\u05ED\u05EE\x07e\x02\x02\u05EE\u05EF\x07c\x02\x02\u05EF", "\u05F0\x07u\x02\x02\u05F0\u0639\x07g\x02\x02\u05F1\u05F2", "\x07e\x02\x02\u05F2\u05F3\x07c\x02\x02\u05F3\u05F4\x07", "v\x02\x02\u05F4\u05F5\x07e\x02\x02\u05F5\u0639\x07j\x02", "\x02\u05F6\u05F7\x07f\x02\x02\u05F7\u05F8\x07g\x02\x02", "\u05F8\u05F9\x07h\x02\x02\u05F9\u05FA\x07c\x02\x02\u05FA", "\u05FB\x07w\x02\x02\u05FB\u05FC\x07n\x02\x02\u05FC\u0639", "\x07v\x02\x02\u05FD\u05FE\x07h\x02\x02\u05FE\u05FF\x07", "k\x02\x02\u05FF\u0600\x07p\x02\x02\u0600\u0601\x07c\x02", "\x02\u0601\u0639\x07n\x02\x02\u0602\u0603\x07k\x02\x02", "\u0603\u0639\x07p\x02\x02\u0604\u0605\x07k\x02\x02\u0605", "\u0606\x07p\x02\x02\u0606\u0607\x07n\x02\x02\u0607\u0608", "\x07k\x02\x02\u0608\u0609\x07p\x02\x02\u0609\u0639\x07", "g\x02\x02\u060A\u060B\x07n\x02\x02\u060B\u060C\x07g\x02", "\x02\u060C\u0639\x07v\x02\x02\u060D\u060E\x07o\x02\x02", "\u060E\u060F\x07c\x02\x02\u060F\u0610\x07v\x02\x02\u0610", "\u0611\x07e\x02\x02\u0611\u0639\x07j\x02\x02\u0612\u0613", "\x07p\x02\x02\u0613\u0614\x07w\x02\x02\u0614\u0615\x07", "n\x02\x02\u0615\u0639\x07n\x02\x02\u0616\u0617\x07q\x02", "\x02\u0617\u0639\x07h\x02\x02\u0618\u0619\x07t\x02\x02", "\u0619\u061A\x07g\x02\x02\u061A\u061B\x07n\x02\x02\u061B", "\u061C\x07q\x02\x02\u061C\u061D\x07e\x02\x02\u061D\u061E", "\x07c\x02\x02\u061E\u061F\x07v\x02\x02\u061F\u0620\x07", "c\x02\x02\u0620\u0621\x07d\x02\x02\u0621\u0622\x07n\x02", "\x02\u0622\u0639\x07g\x02\x02\u0623\u0624\x07u\x02\x02", "\u0624\u0625\x07v\x02\x02\u0625\u0626\x07c\x02\x02\u0626", "\u0627\x07v\x02\x02\u0627\u0628\x07k\x02\x02\u0628\u0639", "\x07e\x02\x02\u0629\u062A\x07u\x02\x02\u062A\u062B\x07", "y\x02\x02\u062B\u062C\x07k\x02\x02\u062C\u062D\x07v\x02", "\x02\u062D\u062E\x07e\x02\x02\u062E\u0639\x07j\x02\x02", "\u062F\u0630\x07v\x02\x02\u0630\u0631\x07t\x02\x02\u0631", "\u0639\x07{\x02\x02\u0632\u0633\x07v\x02\x02\u0633\u0634", "\x07{\x02\x02\u0634\u0635\x07r\x02\x02\u0635\u0636\x07", "g\x02\x02\u0636\u0637\x07q\x02\x02\u0637\u0639\x07h\x02", "\x02\u0638\u05E0\x03\x02\x02\x02\u0638\u05E8\x03\x02\x02", "\x02\u0638\u05ED\x03\x02\x02\x02\u0638\u05F1\x03\x02\x02", "\x02\u0638\u05F6\x03\x02\x02\x02\u0638\u05FD\x03\x02\x02", "\x02\u0638\u0602\x03\x02\x02\x02\u0638\u0604\x03\x02\x02", "\x02\u0638\u060A\x03\x02\x02\x02\u0638\u060D\x03\x02\x02", "\x02\u0638\u0612\x03\x02\x02\x02\u0638\u0616\x03\x02\x02", "\x02\u0638\u0618\x03\x02\x02\x02\u0638\u0623\x03\x02\x02", "\x02\u0638\u0629\x03\x02\x02\x02\u0638\u062F\x03\x02\x02", "\x02\u0638\u0632\x03\x02\x02\x02\u0639\xDE\x03\x02\x02", "\x02\u063A\u063B\x07c\x02\x02\u063B\u063C\x07p\x02\x02", "\u063C\u063D\x07q\x02\x02\u063D\u063E\x07p\x02\x02\u063E", "\u063F\x07{\x02\x02\u063F\u0640\x07o\x02\x02\u0640\u0641", "\x07q\x02\x02\u0641\u0642\x07w\x02\x02\u0642\u0643\x07", "u\x02\x02\u0643\xE0\x03\x02\x02\x02\u0644\u0645\x07", "d\x02\x02\u0645\u0646\x07t\x02\x02\u0646\u0647\x07g\x02", "\x02\u0647\u0648\x07c\x02\x02\u0648\u0649\x07m\x02\x02", "\u0649\xE2\x03\x02\x02\x02\u064A\u064B\x07e\x02\x02", "\u064B\u064C\x07q\x02\x02\u064C\u064D\x07p\x02\x02\u064D", "\u064E\x07u\x02\x02\u064E\u064F\x07v\x02\x02\u064F\u0650", "\x07c\x02\x02\u0650\u0651\x07p\x02\x02\u0651\u0652\x07", "v\x02\x02\u0652\xE4\x03\x02\x02\x02\u0653\u0654\x07", "k\x02\x02\u0654\u0655\x07o\x02\x02\u0655\u0656\x07o\x02", "\x02\u0656\u0657\x07w\x02\x02\u0657\u0658\x07v\x02\x02", "\u0658\u0659\x07c\x02\x02\u0659\u065A\x07d\x02\x02\u065A", "\u065B\x07n\x02\x02\u065B\u065C\x07g\x02\x02\u065C\xE6", "\x03\x02\x02\x02\u065D\u065E\x07e\x02\x02\u065E\u065F", "\x07q\x02\x02\u065F\u0660\x07p\x02\x02\u0660\u0661\x07", "v\x02\x02\u0661\u0662\x07k\x02\x02\u0662\u0663\x07p\x02", "\x02\u0663\u0664\x07w\x02\x02\u0664\u0665\x07g\x02\x02", "\u0665\xE8\x03\x02\x02\x02\u0666\u0667\x07n\x02\x02", "\u0667\u0668\x07g\x02\x02\u0668\u0669\x07c\x02\x02\u0669", "\u066A\x07x\x02\x02\u066A\u066B\x07g\x02\x02\u066B\xEA", "\x03\x02\x02\x02\u066C\u066D\x07g\x02\x02\u066D\u066E", "\x07z\x02\x02\u066E\u066F\x07v\x02\x02\u066F\u0670\x07", "g\x02\x02\u0670\u0671\x07t\x02\x02\u0671\u0672\x07p\x02", "\x02\u0672\u0673\x07c\x02\x02\u0673\u0674\x07n\x02\x02", "\u0674\xEC\x03\x02\x02\x02\u0675\u0676\x07k\x02\x02", "\u0676\u0677\x07p\x02\x02\u0677\u0678\x07f\x02\x02\u0678", "\u0679\x07g\x02\x02\u0679\u067A\x07z\x02\x02\u067A\u067B", "\x07g\x02\x02\u067B\u067C\x07f\x02\x02\u067C\xEE\x03", "\x02\x02\x02\u067D\u067E\x07k\x02\x02\u067E\u067F\x07", "p\x02\x02\u067F\u0680\x07v\x02\x02\u0680\u0681\x07g\x02", "\x02\u0681\u0682\x07t\x02\x02\u0682\u0683\x07p\x02\x02", "\u0683\u0684\x07c\x02\x02\u0684\u0685\x07n\x02\x02\u0685", "\xF0\x03\x02\x02\x02\u0686\u0687\x07r\x02\x02\u0687", "\u0688\x07c\x02\x02\u0688\u0689\x07{\x02\x02\u0689\u068A", "\x07c\x02\x02\u068A\u068B\x07d\x02\x02\u068B\u068C\x07", "n\x02\x02\u068C\u068D\x07g\x02\x02\u068D\xF2\x03\x02", "\x02\x02\u068E\u068F\x07r\x02\x02\u068F\u0690\x07t\x02", "\x02\u0690\u0691\x07k\x02\x02\u0691\u0692\x07x\x02\x02", "\u0692\u0693\x07c\x02\x02\u0693\u0694\x07v\x02\x02\u0694", "\u0695\x07g\x02\x02\u0695\xF4\x03\x02\x02\x02\u0696", "\u0697\x07r\x02\x02\u0697\u0698\x07w\x02\x02\u0698\u0699", "\x07d\x02\x02\u0699\u069A\x07n\x02\x02\u069A\u069B\x07", "k\x02\x02\u069B\u069C\x07e\x02\x02\u069C\xF6\x03\x02", "\x02\x02\u069D\u069E\x07x\x02\x02\u069E\u069F\x07k\x02", "\x02\u069F\u06A0\x07t\x02\x02\u06A0\u06A1\x07v\x02\x02", "\u06A1\u06A2\x07w\x02\x02\u06A2\u06A3\x07c\x02\x02\u06A3", "\u06A4\x07n\x02\x02\u06A4\xF8\x03\x02\x02\x02\u06A5", "\u06A6\x07r\x02\x02\u06A6\u06A7\x07w\x02\x02\u06A7\u06A8", "\x07t\x02\x02\u06A8\u06A9\x07g\x02\x02\u06A9\xFA\x03", "\x02\x02\x02\u06AA\u06AB\x07v\x02\x02\u06AB\u06AC\x07", "{\x02\x02\u06AC\u06AD\x07r\x02\x02\u06AD\u06AE\x07g\x02", "\x02\u06AE\xFC\x03\x02\x02\x02\u06AF\u06B0\x07x\x02", "\x02\u06B0\u06B1\x07k\x02\x02\u06B1\u06B2\x07g\x02\x02", "\u06B2\u06B3\x07y\x02\x02\u06B3\xFE\x03\x02\x02\x02", "\u06B4\u06B5\x07e\x02\x02\u06B5\u06B6\x07q\x02\x02\u06B6", "\u06B7\x07p\x02\x02\u06B7\u06B8\x07u\x02\x02\u06B8\u06B9", "\x07v\x02\x02\u06B9\u06BA\x07t\x02\x02\u06BA\u06BB\x07", "w\x02\x02\u06BB\u06BC\x07e\x02\x02\u06BC\u06BD\x07v\x02", "\x02\u06BD\u06BE\x07q\x02\x02\u06BE\u06BF\x07t\x02\x02", "\u06BF\u0100\x03\x02\x02\x02\u06C0\u06C1\x07h\x02\x02", "\u06C1\u06C2\x07c\x02\x02\u06C2\u06C3\x07n\x02\x02\u06C3", "\u06C4\x07n\x02\x02\u06C4\u06C5\x07d\x02\x02\u06C5\u06C6", "\x07c\x02\x02\u06C6\u06C7\x07e\x02\x02\u06C7\u06C8\x07", "m\x02\x02\u06C8\u0102\x03\x02\x02\x02\u06C9\u06CA\x07", "t\x02\x02\u06CA\u06CB\x07g\x02\x02\u06CB\u06CC\x07e\x02", "\x02\u06CC\u06CD\x07g\x02\x02\u06CD\u06CE\x07k\x02\x02", "\u06CE\u06CF\x07x\x02\x02\u06CF\u06D0\x07g\x02\x02\u06D0", "\u0104\x03\x02\x02\x02\u06D1\u06D5\x05\u0107\x84\x02\u06D2", "\u06D4\x05\u0109\x85\x02\u06D3\u06D2\x03\x02\x02\x02\u06D4", "\u06D7\x03\x02\x02\x02\u06D5\u06D3\x03\x02\x02\x02\u06D5", "\u06D6\x03\x02\x02\x02\u06D6\u0106\x03\x02\x02\x02\u06D7", "\u06D5\x03\x02\x02\x02\u06D8\u06D9\t\x06\x02\x02\u06D9", "\u0108\x03\x02\x02\x02\u06DA\u06DB\t\x07\x02\x02\u06DB", "\u010A\x03\x02\x02\x02\u06DC\u06E0\x07$\x02\x02\u06DD", "\u06DF\x05\u010D\x87\x02\u06DE\u06DD\x03\x02\x02\x02\u06DF", "\u06E2\x03\x02\x02\x02\u06E0\u06DE\x03\x02\x02\x02\u06E0", "\u06E1\x03\x02\x02\x02\u06E1\u06E3\x03\x02\x02\x02\u06E2", "\u06E0\x03\x02\x02\x02\u06E3\u06ED\x07$\x02\x02\u06E4", "\u06E8\x07)\x02\x02\u06E5\u06E7\x05\u010F\x88\x02\u06E6", "\u06E5\x03\x02\x02\x02\u06E7\u06EA\x03\x02\x02\x02\u06E8", "\u06E6\x03\x02\x02\x02\u06E8\u06E9\x03\x02\x02\x02\u06E9", "\u06EB\x03\x02\x02\x02\u06EA\u06E8\x03\x02\x02\x02\u06EB", "\u06ED\x07)\x02\x02\u06EC\u06DC\x03\x02\x02\x02\u06EC", "\u06E4\x03\x02\x02\x02\u06ED\u010C\x03\x02\x02\x02\u06EE", "\u06F2\n\b\x02\x02\u06EF\u06F0\x07^\x02\x02\u06F0\u06F2\x0B", "\x02\x02\x02\u06F1\u06EE\x03\x02\x02\x02\u06F1\u06EF\x03", "\x02\x02\x02\u06F2\u010E\x03\x02\x02\x02\u06F3\u06F7\n", "\t\x02\x02\u06F4\u06F5\x07^\x02\x02\u06F5\u06F7\x0B\x02", "\x02\x02\u06F6\u06F3\x03\x02\x02\x02\u06F6\u06F4\x03\x02", "\x02\x02\u06F7\u0110\x03\x02\x02\x02\u06F8\u06FA\t\x02", "\x02\x02\u06F9\u06F8\x03\x02\x02\x02\u06FA\u06FB\x03\x02", "\x02\x02\u06FB\u06F9\x03\x02\x02\x02\u06FB\u06FC\x03\x02", "\x02\x02\u06FC\u06FD\x03\x02\x02\x02\u06FD\u06FF\x070", "\x02\x02\u06FE\u0700\t\x02\x02\x02\u06FF\u06FE\x03\x02", "\x02\x02\u0700\u0701\x03\x02\x02\x02\u0701\u06FF\x03\x02", "\x02\x02\u0701\u0702\x03\x02\x02\x02\u0702\u0709\x03\x02", "\x02\x02\u0703\u0705\x070\x02\x02\u0704\u0706\t\x02\x02", "\x02\u0705\u0704\x03\x02\x02\x02\u0706\u0707\x03\x02\x02", "\x02\u0707\u0705\x03\x02\x02\x02\u0707\u0708\x03\x02\x02", "\x02\u0708\u070A\x03\x02\x02\x02\u0709\u0703\x03\x02\x02", "\x02\u0709\u070A\x03\x02\x02\x02\u070A\u0112\x03\x02\x02", "\x02\u070B\u070D\t\n\x02\x02\u070C\u070B\x03\x02\x02\x02", "\u070D\u070E\x03\x02\x02\x02\u070E\u070C\x03\x02\x02\x02", "\u070E\u070F\x03\x02\x02\x02\u070F\u0710\x03\x02\x02\x02", "\u0710\u0711\b\x8A\x02\x02\u0711\u0114\x03\x02\x02\x02", "\u0712\u0713\x071\x02\x02\u0713\u0714\x07,\x02\x02\u0714", "\u0718\x03\x02\x02\x02\u0715\u0717\x0B\x02\x02\x02\u0716", "\u0715\x03\x02\x02\x02\u0717\u071A\x03\x02\x02\x02\u0718", "\u0719\x03\x02\x02\x02\u0718\u0716\x03\x02\x02\x02\u0719", "\u071B\x03\x02\x02\x02\u071A\u0718\x03\x02\x02\x02\u071B", "\u071C\x07,\x02\x02\u071C\u071D\x071\x02\x02\u071D\u071E", "\x03\x02\x02\x02\u071E\u071F\b\x8B\x03\x02\u071F\u0116", "\x03\x02\x02\x02\u0720\u0721\x071\x02\x02\u0721\u0722", "\x071\x02\x02\u0722\u0726\x03\x02\x02\x02\u0723\u0725", "\n\x0B\x02\x02\u0724\u0723\x03\x02\x02\x02\u0725\u0728", "\x03\x02\x02\x02\u0726\u0724\x03\x02\x02\x02\u0726\u0727", "\x03\x02\x02\x02\u0727\u0729\x03\x02\x02\x02\u0728\u0726", "\x03\x02\x02\x02\u0729\u072A\b\x8C\x03\x02\u072A\u0118", "\x03\x02\x02\x02&\x02\u0377\u0450\u052E\u053E\u0544\u0546", "\u0558\u055E\u0560\u056B\u056F\u0573\u0577\u057B\u0580\u0589\u058E\u05C9", "\u05D1\u05D6\u05D9\u0638\u06D5\u06E0\u06E8\u06EC\u06F1\u06F6\u06FB\u0701", "\u0707\u0709\u070E\u0718\u0726\x04\b\x02\x02\x02\x03\x02"].join("");
  var atn$2 = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
  var decisionsToDFA = atn$2.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
  });

  var SolidityLexer = /*#__PURE__*/function (_antlr4$Lexer) {
    _inherits(SolidityLexer, _antlr4$Lexer);

    var _super = _createSuper(SolidityLexer);

    function SolidityLexer(input) {
      var _this;

      _classCallCheck(this, SolidityLexer);

      _this = _super.call(this, input);
      _this._interp = new antlr4.atn.LexerATNSimulator(_assertThisInitialized(_this), atn$2, decisionsToDFA, new antlr4.PredictionContextCache());
      return _this;
    }

    _createClass(SolidityLexer, [{
      key: "atn",
      get: function get() {
        return atn$2;
      }
    }]);

    return SolidityLexer;
  }(antlr4.Lexer);

  _defineProperty(SolidityLexer, "grammarFileName", "Solidity.g4");

  _defineProperty(SolidityLexer, "channelNames", ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"]);

  _defineProperty(SolidityLexer, "modeNames", ["DEFAULT_MODE"]);

  _defineProperty(SolidityLexer, "literalNames", [null, "'pragma'", "';'", "'||'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", "'interface'", "'library'", "'is'", "'('", "')'", "'using'", "'for'", "'struct'", "'modifier'", "'function'", "'returns'", "'event'", "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'try'", "'catch'", "'while'", "'unchecked'", "'assembly'", "'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", "'&&'", "'?'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", "'->'", "'callback'", "'override'", null, null, null, null, null, null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", "'immutable'", "'continue'", "'leave'", "'external'", "'indexed'", "'internal'", "'payable'", "'private'", "'public'", "'virtual'", "'pure'", "'type'", "'view'", "'constructor'", "'fallback'", "'receive'"]);

  _defineProperty(SolidityLexer, "symbolicNames", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Int", "Uint", "Byte", "Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", "HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", "PrivateKeyword", "PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", "Identifier", "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", "LINE_COMMENT"]);

  _defineProperty(SolidityLexer, "ruleNames", ["T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", "T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "T__64", "T__65", "T__66", "T__67", "T__68", "T__69", "T__70", "T__71", "T__72", "T__73", "T__74", "T__75", "T__76", "T__77", "T__78", "T__79", "T__80", "T__81", "T__82", "T__83", "T__84", "T__85", "T__86", "T__87", "T__88", "T__89", "T__90", "T__91", "T__92", "T__93", "T__94", "Int", "Uint", "Byte", "Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", "DecimalDigits", "HexNumber", "HexDigits", "NumberUnit", "HexLiteralFragment", "HexPair", "HexCharacter", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", "PrivateKeyword", "PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", "Identifier", "IdentifierStart", "IdentifierPart", "StringLiteralFragment", "DoubleQuotedStringCharacter", "SingleQuotedStringCharacter", "VersionLiteral", "WS", "COMMENT", "LINE_COMMENT"]);
  SolidityLexer.EOF = antlr4.Token.EOF;
  SolidityLexer.T__0 = 1;
  SolidityLexer.T__1 = 2;
  SolidityLexer.T__2 = 3;
  SolidityLexer.T__3 = 4;
  SolidityLexer.T__4 = 5;
  SolidityLexer.T__5 = 6;
  SolidityLexer.T__6 = 7;
  SolidityLexer.T__7 = 8;
  SolidityLexer.T__8 = 9;
  SolidityLexer.T__9 = 10;
  SolidityLexer.T__10 = 11;
  SolidityLexer.T__11 = 12;
  SolidityLexer.T__12 = 13;
  SolidityLexer.T__13 = 14;
  SolidityLexer.T__14 = 15;
  SolidityLexer.T__15 = 16;
  SolidityLexer.T__16 = 17;
  SolidityLexer.T__17 = 18;
  SolidityLexer.T__18 = 19;
  SolidityLexer.T__19 = 20;
  SolidityLexer.T__20 = 21;
  SolidityLexer.T__21 = 22;
  SolidityLexer.T__22 = 23;
  SolidityLexer.T__23 = 24;
  SolidityLexer.T__24 = 25;
  SolidityLexer.T__25 = 26;
  SolidityLexer.T__26 = 27;
  SolidityLexer.T__27 = 28;
  SolidityLexer.T__28 = 29;
  SolidityLexer.T__29 = 30;
  SolidityLexer.T__30 = 31;
  SolidityLexer.T__31 = 32;
  SolidityLexer.T__32 = 33;
  SolidityLexer.T__33 = 34;
  SolidityLexer.T__34 = 35;
  SolidityLexer.T__35 = 36;
  SolidityLexer.T__36 = 37;
  SolidityLexer.T__37 = 38;
  SolidityLexer.T__38 = 39;
  SolidityLexer.T__39 = 40;
  SolidityLexer.T__40 = 41;
  SolidityLexer.T__41 = 42;
  SolidityLexer.T__42 = 43;
  SolidityLexer.T__43 = 44;
  SolidityLexer.T__44 = 45;
  SolidityLexer.T__45 = 46;
  SolidityLexer.T__46 = 47;
  SolidityLexer.T__47 = 48;
  SolidityLexer.T__48 = 49;
  SolidityLexer.T__49 = 50;
  SolidityLexer.T__50 = 51;
  SolidityLexer.T__51 = 52;
  SolidityLexer.T__52 = 53;
  SolidityLexer.T__53 = 54;
  SolidityLexer.T__54 = 55;
  SolidityLexer.T__55 = 56;
  SolidityLexer.T__56 = 57;
  SolidityLexer.T__57 = 58;
  SolidityLexer.T__58 = 59;
  SolidityLexer.T__59 = 60;
  SolidityLexer.T__60 = 61;
  SolidityLexer.T__61 = 62;
  SolidityLexer.T__62 = 63;
  SolidityLexer.T__63 = 64;
  SolidityLexer.T__64 = 65;
  SolidityLexer.T__65 = 66;
  SolidityLexer.T__66 = 67;
  SolidityLexer.T__67 = 68;
  SolidityLexer.T__68 = 69;
  SolidityLexer.T__69 = 70;
  SolidityLexer.T__70 = 71;
  SolidityLexer.T__71 = 72;
  SolidityLexer.T__72 = 73;
  SolidityLexer.T__73 = 74;
  SolidityLexer.T__74 = 75;
  SolidityLexer.T__75 = 76;
  SolidityLexer.T__76 = 77;
  SolidityLexer.T__77 = 78;
  SolidityLexer.T__78 = 79;
  SolidityLexer.T__79 = 80;
  SolidityLexer.T__80 = 81;
  SolidityLexer.T__81 = 82;
  SolidityLexer.T__82 = 83;
  SolidityLexer.T__83 = 84;
  SolidityLexer.T__84 = 85;
  SolidityLexer.T__85 = 86;
  SolidityLexer.T__86 = 87;
  SolidityLexer.T__87 = 88;
  SolidityLexer.T__88 = 89;
  SolidityLexer.T__89 = 90;
  SolidityLexer.T__90 = 91;
  SolidityLexer.T__91 = 92;
  SolidityLexer.T__92 = 93;
  SolidityLexer.T__93 = 94;
  SolidityLexer.T__94 = 95;
  SolidityLexer.Int = 96;
  SolidityLexer.Uint = 97;
  SolidityLexer.Byte = 98;
  SolidityLexer.Fixed = 99;
  SolidityLexer.Ufixed = 100;
  SolidityLexer.BooleanLiteral = 101;
  SolidityLexer.DecimalNumber = 102;
  SolidityLexer.HexNumber = 103;
  SolidityLexer.NumberUnit = 104;
  SolidityLexer.HexLiteralFragment = 105;
  SolidityLexer.ReservedKeyword = 106;
  SolidityLexer.AnonymousKeyword = 107;
  SolidityLexer.BreakKeyword = 108;
  SolidityLexer.ConstantKeyword = 109;
  SolidityLexer.ImmutableKeyword = 110;
  SolidityLexer.ContinueKeyword = 111;
  SolidityLexer.LeaveKeyword = 112;
  SolidityLexer.ExternalKeyword = 113;
  SolidityLexer.IndexedKeyword = 114;
  SolidityLexer.InternalKeyword = 115;
  SolidityLexer.PayableKeyword = 116;
  SolidityLexer.PrivateKeyword = 117;
  SolidityLexer.PublicKeyword = 118;
  SolidityLexer.VirtualKeyword = 119;
  SolidityLexer.PureKeyword = 120;
  SolidityLexer.TypeKeyword = 121;
  SolidityLexer.ViewKeyword = 122;
  SolidityLexer.ConstructorKeyword = 123;
  SolidityLexer.FallbackKeyword = 124;
  SolidityLexer.ReceiveKeyword = 125;
  SolidityLexer.Identifier = 126;
  SolidityLexer.StringLiteralFragment = 127;
  SolidityLexer.VersionLiteral = 128;
  SolidityLexer.WS = 129;
  SolidityLexer.COMMENT = 130;
  SolidityLexer.LINE_COMMENT = 131;

  var SolidityListener = /*#__PURE__*/function (_antlr4$tree$ParseTre) {
    _inherits(SolidityListener, _antlr4$tree$ParseTre);

    var _super = _createSuper(SolidityListener);

    function SolidityListener() {
      _classCallCheck(this, SolidityListener);

      return _super.apply(this, arguments);
    }

    _createClass(SolidityListener, [{
      key: "enterSourceUnit",
      // Enter a parse tree produced by SolidityParser#sourceUnit.
      value: function enterSourceUnit(ctx) {} // Exit a parse tree produced by SolidityParser#sourceUnit.

    }, {
      key: "exitSourceUnit",
      value: function exitSourceUnit(ctx) {} // Enter a parse tree produced by SolidityParser#pragmaDirective.

    }, {
      key: "enterPragmaDirective",
      value: function enterPragmaDirective(ctx) {} // Exit a parse tree produced by SolidityParser#pragmaDirective.

    }, {
      key: "exitPragmaDirective",
      value: function exitPragmaDirective(ctx) {} // Enter a parse tree produced by SolidityParser#pragmaName.

    }, {
      key: "enterPragmaName",
      value: function enterPragmaName(ctx) {} // Exit a parse tree produced by SolidityParser#pragmaName.

    }, {
      key: "exitPragmaName",
      value: function exitPragmaName(ctx) {} // Enter a parse tree produced by SolidityParser#pragmaValue.

    }, {
      key: "enterPragmaValue",
      value: function enterPragmaValue(ctx) {} // Exit a parse tree produced by SolidityParser#pragmaValue.

    }, {
      key: "exitPragmaValue",
      value: function exitPragmaValue(ctx) {} // Enter a parse tree produced by SolidityParser#version.

    }, {
      key: "enterVersion",
      value: function enterVersion(ctx) {} // Exit a parse tree produced by SolidityParser#version.

    }, {
      key: "exitVersion",
      value: function exitVersion(ctx) {} // Enter a parse tree produced by SolidityParser#versionOperator.

    }, {
      key: "enterVersionOperator",
      value: function enterVersionOperator(ctx) {} // Exit a parse tree produced by SolidityParser#versionOperator.

    }, {
      key: "exitVersionOperator",
      value: function exitVersionOperator(ctx) {} // Enter a parse tree produced by SolidityParser#versionConstraint.

    }, {
      key: "enterVersionConstraint",
      value: function enterVersionConstraint(ctx) {} // Exit a parse tree produced by SolidityParser#versionConstraint.

    }, {
      key: "exitVersionConstraint",
      value: function exitVersionConstraint(ctx) {} // Enter a parse tree produced by SolidityParser#importDeclaration.

    }, {
      key: "enterImportDeclaration",
      value: function enterImportDeclaration(ctx) {} // Exit a parse tree produced by SolidityParser#importDeclaration.

    }, {
      key: "exitImportDeclaration",
      value: function exitImportDeclaration(ctx) {} // Enter a parse tree produced by SolidityParser#importDirective.

    }, {
      key: "enterImportDirective",
      value: function enterImportDirective(ctx) {} // Exit a parse tree produced by SolidityParser#importDirective.

    }, {
      key: "exitImportDirective",
      value: function exitImportDirective(ctx) {} // Enter a parse tree produced by SolidityParser#contractDefinition.

    }, {
      key: "enterContractDefinition",
      value: function enterContractDefinition(ctx) {} // Exit a parse tree produced by SolidityParser#contractDefinition.

    }, {
      key: "exitContractDefinition",
      value: function exitContractDefinition(ctx) {} // Enter a parse tree produced by SolidityParser#inheritanceSpecifier.

    }, {
      key: "enterInheritanceSpecifier",
      value: function enterInheritanceSpecifier(ctx) {} // Exit a parse tree produced by SolidityParser#inheritanceSpecifier.

    }, {
      key: "exitInheritanceSpecifier",
      value: function exitInheritanceSpecifier(ctx) {} // Enter a parse tree produced by SolidityParser#contractPart.

    }, {
      key: "enterContractPart",
      value: function enterContractPart(ctx) {} // Exit a parse tree produced by SolidityParser#contractPart.

    }, {
      key: "exitContractPart",
      value: function exitContractPart(ctx) {} // Enter a parse tree produced by SolidityParser#stateVariableDeclaration.

    }, {
      key: "enterStateVariableDeclaration",
      value: function enterStateVariableDeclaration(ctx) {} // Exit a parse tree produced by SolidityParser#stateVariableDeclaration.

    }, {
      key: "exitStateVariableDeclaration",
      value: function exitStateVariableDeclaration(ctx) {} // Enter a parse tree produced by SolidityParser#fileLevelConstant.

    }, {
      key: "enterFileLevelConstant",
      value: function enterFileLevelConstant(ctx) {} // Exit a parse tree produced by SolidityParser#fileLevelConstant.

    }, {
      key: "exitFileLevelConstant",
      value: function exitFileLevelConstant(ctx) {} // Enter a parse tree produced by SolidityParser#usingForDeclaration.

    }, {
      key: "enterUsingForDeclaration",
      value: function enterUsingForDeclaration(ctx) {} // Exit a parse tree produced by SolidityParser#usingForDeclaration.

    }, {
      key: "exitUsingForDeclaration",
      value: function exitUsingForDeclaration(ctx) {} // Enter a parse tree produced by SolidityParser#structDefinition.

    }, {
      key: "enterStructDefinition",
      value: function enterStructDefinition(ctx) {} // Exit a parse tree produced by SolidityParser#structDefinition.

    }, {
      key: "exitStructDefinition",
      value: function exitStructDefinition(ctx) {} // Enter a parse tree produced by SolidityParser#modifierDefinition.

    }, {
      key: "enterModifierDefinition",
      value: function enterModifierDefinition(ctx) {} // Exit a parse tree produced by SolidityParser#modifierDefinition.

    }, {
      key: "exitModifierDefinition",
      value: function exitModifierDefinition(ctx) {} // Enter a parse tree produced by SolidityParser#modifierInvocation.

    }, {
      key: "enterModifierInvocation",
      value: function enterModifierInvocation(ctx) {} // Exit a parse tree produced by SolidityParser#modifierInvocation.

    }, {
      key: "exitModifierInvocation",
      value: function exitModifierInvocation(ctx) {} // Enter a parse tree produced by SolidityParser#functionDefinition.

    }, {
      key: "enterFunctionDefinition",
      value: function enterFunctionDefinition(ctx) {} // Exit a parse tree produced by SolidityParser#functionDefinition.

    }, {
      key: "exitFunctionDefinition",
      value: function exitFunctionDefinition(ctx) {} // Enter a parse tree produced by SolidityParser#functionDescriptor.

    }, {
      key: "enterFunctionDescriptor",
      value: function enterFunctionDescriptor(ctx) {} // Exit a parse tree produced by SolidityParser#functionDescriptor.

    }, {
      key: "exitFunctionDescriptor",
      value: function exitFunctionDescriptor(ctx) {} // Enter a parse tree produced by SolidityParser#returnParameters.

    }, {
      key: "enterReturnParameters",
      value: function enterReturnParameters(ctx) {} // Exit a parse tree produced by SolidityParser#returnParameters.

    }, {
      key: "exitReturnParameters",
      value: function exitReturnParameters(ctx) {} // Enter a parse tree produced by SolidityParser#modifierList.

    }, {
      key: "enterModifierList",
      value: function enterModifierList(ctx) {} // Exit a parse tree produced by SolidityParser#modifierList.

    }, {
      key: "exitModifierList",
      value: function exitModifierList(ctx) {} // Enter a parse tree produced by SolidityParser#eventDefinition.

    }, {
      key: "enterEventDefinition",
      value: function enterEventDefinition(ctx) {} // Exit a parse tree produced by SolidityParser#eventDefinition.

    }, {
      key: "exitEventDefinition",
      value: function exitEventDefinition(ctx) {} // Enter a parse tree produced by SolidityParser#enumValue.

    }, {
      key: "enterEnumValue",
      value: function enterEnumValue(ctx) {} // Exit a parse tree produced by SolidityParser#enumValue.

    }, {
      key: "exitEnumValue",
      value: function exitEnumValue(ctx) {} // Enter a parse tree produced by SolidityParser#enumDefinition.

    }, {
      key: "enterEnumDefinition",
      value: function enterEnumDefinition(ctx) {} // Exit a parse tree produced by SolidityParser#enumDefinition.

    }, {
      key: "exitEnumDefinition",
      value: function exitEnumDefinition(ctx) {} // Enter a parse tree produced by SolidityParser#parameterList.

    }, {
      key: "enterParameterList",
      value: function enterParameterList(ctx) {} // Exit a parse tree produced by SolidityParser#parameterList.

    }, {
      key: "exitParameterList",
      value: function exitParameterList(ctx) {} // Enter a parse tree produced by SolidityParser#parameter.

    }, {
      key: "enterParameter",
      value: function enterParameter(ctx) {} // Exit a parse tree produced by SolidityParser#parameter.

    }, {
      key: "exitParameter",
      value: function exitParameter(ctx) {} // Enter a parse tree produced by SolidityParser#eventParameterList.

    }, {
      key: "enterEventParameterList",
      value: function enterEventParameterList(ctx) {} // Exit a parse tree produced by SolidityParser#eventParameterList.

    }, {
      key: "exitEventParameterList",
      value: function exitEventParameterList(ctx) {} // Enter a parse tree produced by SolidityParser#eventParameter.

    }, {
      key: "enterEventParameter",
      value: function enterEventParameter(ctx) {} // Exit a parse tree produced by SolidityParser#eventParameter.

    }, {
      key: "exitEventParameter",
      value: function exitEventParameter(ctx) {} // Enter a parse tree produced by SolidityParser#functionTypeParameterList.

    }, {
      key: "enterFunctionTypeParameterList",
      value: function enterFunctionTypeParameterList(ctx) {} // Exit a parse tree produced by SolidityParser#functionTypeParameterList.

    }, {
      key: "exitFunctionTypeParameterList",
      value: function exitFunctionTypeParameterList(ctx) {} // Enter a parse tree produced by SolidityParser#functionTypeParameter.

    }, {
      key: "enterFunctionTypeParameter",
      value: function enterFunctionTypeParameter(ctx) {} // Exit a parse tree produced by SolidityParser#functionTypeParameter.

    }, {
      key: "exitFunctionTypeParameter",
      value: function exitFunctionTypeParameter(ctx) {} // Enter a parse tree produced by SolidityParser#variableDeclaration.

    }, {
      key: "enterVariableDeclaration",
      value: function enterVariableDeclaration(ctx) {} // Exit a parse tree produced by SolidityParser#variableDeclaration.

    }, {
      key: "exitVariableDeclaration",
      value: function exitVariableDeclaration(ctx) {} // Enter a parse tree produced by SolidityParser#typeName.

    }, {
      key: "enterTypeName",
      value: function enterTypeName(ctx) {} // Exit a parse tree produced by SolidityParser#typeName.

    }, {
      key: "exitTypeName",
      value: function exitTypeName(ctx) {} // Enter a parse tree produced by SolidityParser#userDefinedTypeName.

    }, {
      key: "enterUserDefinedTypeName",
      value: function enterUserDefinedTypeName(ctx) {} // Exit a parse tree produced by SolidityParser#userDefinedTypeName.

    }, {
      key: "exitUserDefinedTypeName",
      value: function exitUserDefinedTypeName(ctx) {} // Enter a parse tree produced by SolidityParser#mappingKey.

    }, {
      key: "enterMappingKey",
      value: function enterMappingKey(ctx) {} // Exit a parse tree produced by SolidityParser#mappingKey.

    }, {
      key: "exitMappingKey",
      value: function exitMappingKey(ctx) {} // Enter a parse tree produced by SolidityParser#mapping.

    }, {
      key: "enterMapping",
      value: function enterMapping(ctx) {} // Exit a parse tree produced by SolidityParser#mapping.

    }, {
      key: "exitMapping",
      value: function exitMapping(ctx) {} // Enter a parse tree produced by SolidityParser#functionTypeName.

    }, {
      key: "enterFunctionTypeName",
      value: function enterFunctionTypeName(ctx) {} // Exit a parse tree produced by SolidityParser#functionTypeName.

    }, {
      key: "exitFunctionTypeName",
      value: function exitFunctionTypeName(ctx) {} // Enter a parse tree produced by SolidityParser#storageLocation.

    }, {
      key: "enterStorageLocation",
      value: function enterStorageLocation(ctx) {} // Exit a parse tree produced by SolidityParser#storageLocation.

    }, {
      key: "exitStorageLocation",
      value: function exitStorageLocation(ctx) {} // Enter a parse tree produced by SolidityParser#stateMutability.

    }, {
      key: "enterStateMutability",
      value: function enterStateMutability(ctx) {} // Exit a parse tree produced by SolidityParser#stateMutability.

    }, {
      key: "exitStateMutability",
      value: function exitStateMutability(ctx) {} // Enter a parse tree produced by SolidityParser#block.

    }, {
      key: "enterBlock",
      value: function enterBlock(ctx) {} // Exit a parse tree produced by SolidityParser#block.

    }, {
      key: "exitBlock",
      value: function exitBlock(ctx) {} // Enter a parse tree produced by SolidityParser#statement.

    }, {
      key: "enterStatement",
      value: function enterStatement(ctx) {} // Exit a parse tree produced by SolidityParser#statement.

    }, {
      key: "exitStatement",
      value: function exitStatement(ctx) {} // Enter a parse tree produced by SolidityParser#expressionStatement.

    }, {
      key: "enterExpressionStatement",
      value: function enterExpressionStatement(ctx) {} // Exit a parse tree produced by SolidityParser#expressionStatement.

    }, {
      key: "exitExpressionStatement",
      value: function exitExpressionStatement(ctx) {} // Enter a parse tree produced by SolidityParser#ifStatement.

    }, {
      key: "enterIfStatement",
      value: function enterIfStatement(ctx) {} // Exit a parse tree produced by SolidityParser#ifStatement.

    }, {
      key: "exitIfStatement",
      value: function exitIfStatement(ctx) {} // Enter a parse tree produced by SolidityParser#tryStatement.

    }, {
      key: "enterTryStatement",
      value: function enterTryStatement(ctx) {} // Exit a parse tree produced by SolidityParser#tryStatement.

    }, {
      key: "exitTryStatement",
      value: function exitTryStatement(ctx) {} // Enter a parse tree produced by SolidityParser#catchClause.

    }, {
      key: "enterCatchClause",
      value: function enterCatchClause(ctx) {} // Exit a parse tree produced by SolidityParser#catchClause.

    }, {
      key: "exitCatchClause",
      value: function exitCatchClause(ctx) {} // Enter a parse tree produced by SolidityParser#whileStatement.

    }, {
      key: "enterWhileStatement",
      value: function enterWhileStatement(ctx) {} // Exit a parse tree produced by SolidityParser#whileStatement.

    }, {
      key: "exitWhileStatement",
      value: function exitWhileStatement(ctx) {} // Enter a parse tree produced by SolidityParser#simpleStatement.

    }, {
      key: "enterSimpleStatement",
      value: function enterSimpleStatement(ctx) {} // Exit a parse tree produced by SolidityParser#simpleStatement.

    }, {
      key: "exitSimpleStatement",
      value: function exitSimpleStatement(ctx) {} // Enter a parse tree produced by SolidityParser#uncheckedStatement.

    }, {
      key: "enterUncheckedStatement",
      value: function enterUncheckedStatement(ctx) {} // Exit a parse tree produced by SolidityParser#uncheckedStatement.

    }, {
      key: "exitUncheckedStatement",
      value: function exitUncheckedStatement(ctx) {} // Enter a parse tree produced by SolidityParser#forStatement.

    }, {
      key: "enterForStatement",
      value: function enterForStatement(ctx) {} // Exit a parse tree produced by SolidityParser#forStatement.

    }, {
      key: "exitForStatement",
      value: function exitForStatement(ctx) {} // Enter a parse tree produced by SolidityParser#inlineAssemblyStatement.

    }, {
      key: "enterInlineAssemblyStatement",
      value: function enterInlineAssemblyStatement(ctx) {} // Exit a parse tree produced by SolidityParser#inlineAssemblyStatement.

    }, {
      key: "exitInlineAssemblyStatement",
      value: function exitInlineAssemblyStatement(ctx) {} // Enter a parse tree produced by SolidityParser#doWhileStatement.

    }, {
      key: "enterDoWhileStatement",
      value: function enterDoWhileStatement(ctx) {} // Exit a parse tree produced by SolidityParser#doWhileStatement.

    }, {
      key: "exitDoWhileStatement",
      value: function exitDoWhileStatement(ctx) {} // Enter a parse tree produced by SolidityParser#continueStatement.

    }, {
      key: "enterContinueStatement",
      value: function enterContinueStatement(ctx) {} // Exit a parse tree produced by SolidityParser#continueStatement.

    }, {
      key: "exitContinueStatement",
      value: function exitContinueStatement(ctx) {} // Enter a parse tree produced by SolidityParser#breakStatement.

    }, {
      key: "enterBreakStatement",
      value: function enterBreakStatement(ctx) {} // Exit a parse tree produced by SolidityParser#breakStatement.

    }, {
      key: "exitBreakStatement",
      value: function exitBreakStatement(ctx) {} // Enter a parse tree produced by SolidityParser#returnStatement.

    }, {
      key: "enterReturnStatement",
      value: function enterReturnStatement(ctx) {} // Exit a parse tree produced by SolidityParser#returnStatement.

    }, {
      key: "exitReturnStatement",
      value: function exitReturnStatement(ctx) {} // Enter a parse tree produced by SolidityParser#throwStatement.

    }, {
      key: "enterThrowStatement",
      value: function enterThrowStatement(ctx) {} // Exit a parse tree produced by SolidityParser#throwStatement.

    }, {
      key: "exitThrowStatement",
      value: function exitThrowStatement(ctx) {} // Enter a parse tree produced by SolidityParser#emitStatement.

    }, {
      key: "enterEmitStatement",
      value: function enterEmitStatement(ctx) {} // Exit a parse tree produced by SolidityParser#emitStatement.

    }, {
      key: "exitEmitStatement",
      value: function exitEmitStatement(ctx) {} // Enter a parse tree produced by SolidityParser#variableDeclarationStatement.

    }, {
      key: "enterVariableDeclarationStatement",
      value: function enterVariableDeclarationStatement(ctx) {} // Exit a parse tree produced by SolidityParser#variableDeclarationStatement.

    }, {
      key: "exitVariableDeclarationStatement",
      value: function exitVariableDeclarationStatement(ctx) {} // Enter a parse tree produced by SolidityParser#variableDeclarationList.

    }, {
      key: "enterVariableDeclarationList",
      value: function enterVariableDeclarationList(ctx) {} // Exit a parse tree produced by SolidityParser#variableDeclarationList.

    }, {
      key: "exitVariableDeclarationList",
      value: function exitVariableDeclarationList(ctx) {} // Enter a parse tree produced by SolidityParser#identifierList.

    }, {
      key: "enterIdentifierList",
      value: function enterIdentifierList(ctx) {} // Exit a parse tree produced by SolidityParser#identifierList.

    }, {
      key: "exitIdentifierList",
      value: function exitIdentifierList(ctx) {} // Enter a parse tree produced by SolidityParser#elementaryTypeName.

    }, {
      key: "enterElementaryTypeName",
      value: function enterElementaryTypeName(ctx) {} // Exit a parse tree produced by SolidityParser#elementaryTypeName.

    }, {
      key: "exitElementaryTypeName",
      value: function exitElementaryTypeName(ctx) {} // Enter a parse tree produced by SolidityParser#expression.

    }, {
      key: "enterExpression",
      value: function enterExpression(ctx) {} // Exit a parse tree produced by SolidityParser#expression.

    }, {
      key: "exitExpression",
      value: function exitExpression(ctx) {} // Enter a parse tree produced by SolidityParser#primaryExpression.

    }, {
      key: "enterPrimaryExpression",
      value: function enterPrimaryExpression(ctx) {} // Exit a parse tree produced by SolidityParser#primaryExpression.

    }, {
      key: "exitPrimaryExpression",
      value: function exitPrimaryExpression(ctx) {} // Enter a parse tree produced by SolidityParser#expressionList.

    }, {
      key: "enterExpressionList",
      value: function enterExpressionList(ctx) {} // Exit a parse tree produced by SolidityParser#expressionList.

    }, {
      key: "exitExpressionList",
      value: function exitExpressionList(ctx) {} // Enter a parse tree produced by SolidityParser#nameValueList.

    }, {
      key: "enterNameValueList",
      value: function enterNameValueList(ctx) {} // Exit a parse tree produced by SolidityParser#nameValueList.

    }, {
      key: "exitNameValueList",
      value: function exitNameValueList(ctx) {} // Enter a parse tree produced by SolidityParser#nameValue.

    }, {
      key: "enterNameValue",
      value: function enterNameValue(ctx) {} // Exit a parse tree produced by SolidityParser#nameValue.

    }, {
      key: "exitNameValue",
      value: function exitNameValue(ctx) {} // Enter a parse tree produced by SolidityParser#functionCallArguments.

    }, {
      key: "enterFunctionCallArguments",
      value: function enterFunctionCallArguments(ctx) {} // Exit a parse tree produced by SolidityParser#functionCallArguments.

    }, {
      key: "exitFunctionCallArguments",
      value: function exitFunctionCallArguments(ctx) {} // Enter a parse tree produced by SolidityParser#functionCall.

    }, {
      key: "enterFunctionCall",
      value: function enterFunctionCall(ctx) {} // Exit a parse tree produced by SolidityParser#functionCall.

    }, {
      key: "exitFunctionCall",
      value: function exitFunctionCall(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyBlock.

    }, {
      key: "enterAssemblyBlock",
      value: function enterAssemblyBlock(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyBlock.

    }, {
      key: "exitAssemblyBlock",
      value: function exitAssemblyBlock(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyItem.

    }, {
      key: "enterAssemblyItem",
      value: function enterAssemblyItem(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyItem.

    }, {
      key: "exitAssemblyItem",
      value: function exitAssemblyItem(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyExpression.

    }, {
      key: "enterAssemblyExpression",
      value: function enterAssemblyExpression(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyExpression.

    }, {
      key: "exitAssemblyExpression",
      value: function exitAssemblyExpression(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyMember.

    }, {
      key: "enterAssemblyMember",
      value: function enterAssemblyMember(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyMember.

    }, {
      key: "exitAssemblyMember",
      value: function exitAssemblyMember(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyCall.

    }, {
      key: "enterAssemblyCall",
      value: function enterAssemblyCall(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyCall.

    }, {
      key: "exitAssemblyCall",
      value: function exitAssemblyCall(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyLocalDefinition.

    }, {
      key: "enterAssemblyLocalDefinition",
      value: function enterAssemblyLocalDefinition(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyLocalDefinition.

    }, {
      key: "exitAssemblyLocalDefinition",
      value: function exitAssemblyLocalDefinition(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyAssignment.

    }, {
      key: "enterAssemblyAssignment",
      value: function enterAssemblyAssignment(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyAssignment.

    }, {
      key: "exitAssemblyAssignment",
      value: function exitAssemblyAssignment(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyIdentifierOrList.

    }, {
      key: "enterAssemblyIdentifierOrList",
      value: function enterAssemblyIdentifierOrList(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyIdentifierOrList.

    }, {
      key: "exitAssemblyIdentifierOrList",
      value: function exitAssemblyIdentifierOrList(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyIdentifierList.

    }, {
      key: "enterAssemblyIdentifierList",
      value: function enterAssemblyIdentifierList(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyIdentifierList.

    }, {
      key: "exitAssemblyIdentifierList",
      value: function exitAssemblyIdentifierList(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyStackAssignment.

    }, {
      key: "enterAssemblyStackAssignment",
      value: function enterAssemblyStackAssignment(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyStackAssignment.

    }, {
      key: "exitAssemblyStackAssignment",
      value: function exitAssemblyStackAssignment(ctx) {} // Enter a parse tree produced by SolidityParser#labelDefinition.

    }, {
      key: "enterLabelDefinition",
      value: function enterLabelDefinition(ctx) {} // Exit a parse tree produced by SolidityParser#labelDefinition.

    }, {
      key: "exitLabelDefinition",
      value: function exitLabelDefinition(ctx) {} // Enter a parse tree produced by SolidityParser#assemblySwitch.

    }, {
      key: "enterAssemblySwitch",
      value: function enterAssemblySwitch(ctx) {} // Exit a parse tree produced by SolidityParser#assemblySwitch.

    }, {
      key: "exitAssemblySwitch",
      value: function exitAssemblySwitch(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyCase.

    }, {
      key: "enterAssemblyCase",
      value: function enterAssemblyCase(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyCase.

    }, {
      key: "exitAssemblyCase",
      value: function exitAssemblyCase(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyFunctionDefinition.

    }, {
      key: "enterAssemblyFunctionDefinition",
      value: function enterAssemblyFunctionDefinition(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyFunctionDefinition.

    }, {
      key: "exitAssemblyFunctionDefinition",
      value: function exitAssemblyFunctionDefinition(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyFunctionReturns.

    }, {
      key: "enterAssemblyFunctionReturns",
      value: function enterAssemblyFunctionReturns(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyFunctionReturns.

    }, {
      key: "exitAssemblyFunctionReturns",
      value: function exitAssemblyFunctionReturns(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyFor.

    }, {
      key: "enterAssemblyFor",
      value: function enterAssemblyFor(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyFor.

    }, {
      key: "exitAssemblyFor",
      value: function exitAssemblyFor(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyIf.

    }, {
      key: "enterAssemblyIf",
      value: function enterAssemblyIf(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyIf.

    }, {
      key: "exitAssemblyIf",
      value: function exitAssemblyIf(ctx) {} // Enter a parse tree produced by SolidityParser#assemblyLiteral.

    }, {
      key: "enterAssemblyLiteral",
      value: function enterAssemblyLiteral(ctx) {} // Exit a parse tree produced by SolidityParser#assemblyLiteral.

    }, {
      key: "exitAssemblyLiteral",
      value: function exitAssemblyLiteral(ctx) {} // Enter a parse tree produced by SolidityParser#subAssembly.

    }, {
      key: "enterSubAssembly",
      value: function enterSubAssembly(ctx) {} // Exit a parse tree produced by SolidityParser#subAssembly.

    }, {
      key: "exitSubAssembly",
      value: function exitSubAssembly(ctx) {} // Enter a parse tree produced by SolidityParser#tupleExpression.

    }, {
      key: "enterTupleExpression",
      value: function enterTupleExpression(ctx) {} // Exit a parse tree produced by SolidityParser#tupleExpression.

    }, {
      key: "exitTupleExpression",
      value: function exitTupleExpression(ctx) {} // Enter a parse tree produced by SolidityParser#typeNameExpression.

    }, {
      key: "enterTypeNameExpression",
      value: function enterTypeNameExpression(ctx) {} // Exit a parse tree produced by SolidityParser#typeNameExpression.

    }, {
      key: "exitTypeNameExpression",
      value: function exitTypeNameExpression(ctx) {} // Enter a parse tree produced by SolidityParser#numberLiteral.

    }, {
      key: "enterNumberLiteral",
      value: function enterNumberLiteral(ctx) {} // Exit a parse tree produced by SolidityParser#numberLiteral.

    }, {
      key: "exitNumberLiteral",
      value: function exitNumberLiteral(ctx) {} // Enter a parse tree produced by SolidityParser#identifier.

    }, {
      key: "enterIdentifier",
      value: function enterIdentifier(ctx) {} // Exit a parse tree produced by SolidityParser#identifier.

    }, {
      key: "exitIdentifier",
      value: function exitIdentifier(ctx) {} // Enter a parse tree produced by SolidityParser#hexLiteral.

    }, {
      key: "enterHexLiteral",
      value: function enterHexLiteral(ctx) {} // Exit a parse tree produced by SolidityParser#hexLiteral.

    }, {
      key: "exitHexLiteral",
      value: function exitHexLiteral(ctx) {} // Enter a parse tree produced by SolidityParser#overrideSpecifier.

    }, {
      key: "enterOverrideSpecifier",
      value: function enterOverrideSpecifier(ctx) {} // Exit a parse tree produced by SolidityParser#overrideSpecifier.

    }, {
      key: "exitOverrideSpecifier",
      value: function exitOverrideSpecifier(ctx) {} // Enter a parse tree produced by SolidityParser#stringLiteral.

    }, {
      key: "enterStringLiteral",
      value: function enterStringLiteral(ctx) {} // Exit a parse tree produced by SolidityParser#stringLiteral.

    }, {
      key: "exitStringLiteral",
      value: function exitStringLiteral(ctx) {}
    }]);

    return SolidityListener;
  }(antlr4.tree.ParseTreeListener);

  var serializedATN$1 = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786", "\u5964\x03\x85\u044C\x04\x02\t\x02\x04\x03\t\x03\x04", "\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t", "\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04", "\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10", "\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13", "\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17", "\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A", "\x04\x1B\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E", "\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#", "\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04", "*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x04", "1\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x04", "8\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04", "?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04", "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04", "M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04", "T\tT\x04U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04", "[\t[\x04\\\t\\\x04]\t]\x04^\t^\x03\x02\x03\x02\x03\x02", "\x03\x02\x03\x02\x03\x02\x03\x02\x07\x02\xC4\n", "\x02\f\x02\x0E\x02\xC7\x0B\x02\x03\x02\x03\x02", "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04", "\x03\x04\x03\x05\x03\x05\x05\x05\xD4\n\x05\x03", "\x06\x03\x06\x05\x06\xD8\n\x06\x03\x06\x07\x06", "\xDB\n\x06\f\x06\x0E\x06\xDE\x0B\x06\x03\x07\x03", "\x07\x03\b\x05\b\xE3\n\b\x03\b\x03\b\x05\b\xE7\n\b\x03", "\b\x05\b\xEA\n\b\x03\t\x03\t\x03\t\x05\t\xEF\n\t\x03", "\n\x03\n\x03\n\x03\n\x05\n\xF5\n\n\x03\n\x03\n\x03\n", "\x03\n\x05\n\xFB\n\n\x03\n\x03\n\x05\n\xFF\n\n\x03\n", "\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x07\n\u0109", "\n\n\f\n\x0E\n\u010C\x0B\n\x03\n\x03\n\x03\n\x03\n\x03", "\n\x05\n\u0113\n\n\x03\x0B\x05\x0B\u0116\n\x0B\x03\x0B", "\x03\x0B\x03\x0B\x03\x0B\x03\x0B\x03\x0B\x07\x0B", "\u011E\n\x0B\f\x0B\x0E\x0B\u0121\x0B\x0B\x05\x0B\u0123", "\n\x0B\x03\x0B\x03\x0B\x07\x0B\u0127\n\x0B\f\x0B\x0E", "\x0B\u012A\x0B\x0B\x03\x0B\x03\x0B\x03\f\x03\f\x03", "\f\x05\f\u0131\n\f\x03\f\x05\f\u0134\n\f\x03\r\x03\r\x03", "\r\x03\r\x03\r\x03\r\x03\r\x05\r\u013D\n\r\x03\x0E\x03", "\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x07", "\x0E\u0146\n\x0E\f\x0E\x0E\x0E\u0149\x0B\x0E\x03\x0E", "\x03\x0E\x03\x0E\x05\x0E\u014E\n\x0E\x03\x0E\x03", "\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03", "\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03", "\x10\x05\x10\u015E\n\x10\x03\x10\x03\x10\x03\x11", "\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11", "\x03\x11\x07\x11\u016A\n\x11\f\x11\x0E\x11\u016D\x0B", "\x11\x05\x11\u016F\n\x11\x03\x11\x03\x11\x03\x12", "\x03\x12\x03\x12\x05\x12\u0176\n\x12\x03\x12\x03", "\x12\x07\x12\u017A\n\x12\f\x12\x0E\x12\u017D\x0B\x12", "\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x05\x13", "\u0184\n\x13\x03\x13\x05\x13\u0187\n\x13\x03\x14\x03", "\x14\x03\x14\x03\x14\x05\x14\u018D\n\x14\x03\x14", "\x03\x14\x05\x14\u0191\n\x14\x03\x15\x03\x15\x05", "\x15\u0195\n\x15\x03\x15\x03\x15\x03\x15\x05\x15", "\u019A\n\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03", "\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03", "\x17\x07\x17\u01A7\n\x17\f\x17\x0E\x17\u01AA\x0B\x17", "\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\u01B0\n", "\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03", "\x1A\x03\x1A\x03\x1A\x05\x1A\u01BA\n\x1A\x03\x1A", "\x03\x1A\x07\x1A\u01BE\n\x1A\f\x1A\x0E\x1A\u01C1\x0B", "\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03", "\x1B\x07\x1B\u01C9\n\x1B\f\x1B\x0E\x1B\u01CC\x0B\x1B", "\x05\x1B\u01CE\n\x1B\x03\x1B\x03\x1B\x03\x1C\x03", "\x1C\x05\x1C\u01D4\n\x1C\x03\x1C\x05\x1C\u01D7\n\x1C", "\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u01DD\n", "\x1D\f\x1D\x0E\x1D\u01E0\x0B\x1D\x05\x1D\u01E2\n\x1D", "\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x05\x1E\u01E8\n", "\x1E\x03\x1E\x05\x1E\u01EB\n\x1E\x03\x1F\x03\x1F", "\x03\x1F\x03\x1F\x07\x1F\u01F1\n\x1F\f\x1F\x0E\x1F", "\u01F4\x0B\x1F\x05\x1F\u01F6\n\x1F\x03\x1F\x03\x1F", "\x03 \x03 \x05 \u01FC\n \x03!\x03!\x05!\u0200\n!\x03!", "\x03!\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x05", "\"\u020B\n\"\x03\"\x03\"\x03\"\x05\"\u0210\n\"\x03\"\x07", "\"\u0213\n\"\f\"\x0E\"\u0216\x0B\"\x03#\x03#\x03#\x07#\u021B", "\n#\f#\x0E#\u021E\x0B#\x03$\x03$\x05$\u0222\n$\x03%\x03", "%\x03%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03", "&\x07&\u0230\n&\f&\x0E&\u0233\x0B&\x03&\x03&\x05&\u0237", "\n&\x03'\x03'\x03(\x03(\x03)\x03)\x07)\u023F\n)\f)\x0E", ")\u0242\x0B)\x03)\x03)\x03*\x03*\x03*\x03*\x03*\x03", "*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x05*\u0254", "\n*\x03+\x03+\x03+\x03,\x03,\x03,\x03,\x03,\x03,\x03", ",\x05,\u0260\n,\x03-\x03-\x03-\x05-\u0265\n-\x03-\x03", "-\x06-\u0269\n-\r-\x0E-\u026A\x03.\x03.\x05.\u026F\n.\x03", ".\x05.\u0272\n.\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03", "/\x030\x030\x050\u027E\n0\x031\x031\x031\x032\x032\x03", "2\x032\x052\u0287\n2\x032\x032\x052\u028B\n2\x032\x05", "2\u028E\n2\x032\x032\x032\x033\x033\x053\u0295\n3\x03", "3\x033\x034\x034\x034\x034\x034\x034\x034\x034\x03", "5\x035\x035\x036\x036\x036\x037\x037\x057\u02A9\n7\x03", "7\x037\x038\x038\x038\x039\x039\x039\x039\x03:\x03", ":\x03:\x03:\x03:\x03:\x03:\x05:\u02BB\n:\x03:\x03:\x05", ":\u02BF\n:\x03:\x03:\x03;\x05;\u02C4\n;\x03;\x03;\x05", ";\u02C8\n;\x07;\u02CA\n;\f;\x0E;\u02CD\x0B;\x03<\x03<\x05", "<\u02D1\n<\x03<\x07<\u02D4\n<\f<\x0E<\u02D7\x0B<\x03<\x05", "<\u02DA\n<\x03<\x03<\x03=\x03=\x03>\x03>\x03>\x03>\x03", ">\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03", ">\x03>\x03>\x03>\x05>\u02F2\n>\x03>\x03>\x03>\x03>\x03", ">\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03", ">\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03", ">\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03", ">\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03", ">\x03>\x03>\x05>\u0323\n>\x03>\x03>\x03>\x03>\x05>\u0329", "\n>\x03>\x03>\x05>\u032D\n>\x03>\x03>\x03>\x03>\x03", ">\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x07", ">\u033D\n>\f>\x0E>\u0340\x0B>\x03?\x03?\x03?\x03?\x03", "?\x03?\x03?\x05?\u0349\n?\x03?\x03?\x03?\x03?\x03?\x03", "?\x05?\u0351\n?\x05?\u0353\n?\x03@\x03@\x03@\x07@\u0358", "\n@\f@\x0E@\u035B\x0B@\x03A\x03A\x03A\x07A\u0360\nA\fA\x0E", "A\u0363\x0BA\x03A\x05A\u0366\nA\x03B\x03B\x03B\x03B\x03", "C\x03C\x05C\u036E\nC\x03C\x03C\x05C\u0372\nC\x05C\u0374", "\nC\x03D\x03D\x03D\x03D\x03D\x03E\x03E\x07E\u037D\n", "E\fE\x0EE\u0380\x0BE\x03E\x03E\x03F\x03F\x03F\x03F\x03", "F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03", "F\x03F\x03F\x03F\x05F\u0396\nF\x03G\x03G\x03G\x05G\u039B", "\nG\x03H\x03H\x03H\x03H\x03I\x03I\x03I\x03I\x05I\u03A5", "\nI\x03I\x03I\x05I\u03A9\nI\x03I\x03I\x07I\u03AD\nI\fI\x0E", "I\u03B0\x0BI\x03I\x05I\u03B3\nI\x03J\x03J\x03J\x03J\x05", "J\u03B9\nJ\x03K\x03K\x03K\x03K\x03L\x03L\x03L\x03L\x03", "L\x03L\x05L\u03C5\nL\x03M\x03M\x03M\x07M\u03CA\nM\fM\x0E", "M\u03CD\x0BM\x03N\x03N\x03N\x03O\x03O\x03O\x03P\x03", "P\x03P\x07P\u03D8\nP\fP\x0EP\u03DB\x0BP\x03Q\x03Q\x03", "Q\x03Q\x03Q\x03Q\x05Q\u03E3\nQ\x03R\x03R\x03R\x03R\x05", "R\u03E9\nR\x03R\x03R\x05R\u03ED\nR\x03R\x03R\x03S\x03", "S\x03S\x03T\x03T\x03T\x05T\u03F7\nT\x03T\x03T\x03T\x05", "T\u03FC\nT\x03T\x03T\x03U\x03U\x03U\x03U\x03V\x03V\x03", "V\x03V\x05V\u0408\nV\x03W\x03W\x03W\x03W\x03X\x03X\x05", "X\u0410\nX\x03X\x03X\x05X\u0414\nX\x07X\u0416\nX\fX\x0EX\u0419", "\x0BX\x03X\x03X\x03X\x03X\x03X\x07X\u0420\nX\fX\x0E", "X\u0423\x0BX\x05X\u0425\nX\x03X\x05X\u0428\nX\x03Y\x03Y", "\x05Y\u042C\nY\x03Z\x03Z\x05Z\u0430\nZ\x03[\x03[\x03\\", "\x06\\\u0435\n\\\r\\\x0E\\\u0436\x03]\x03]\x03]\x03]\x03", "]\x07]\u043E\n]\f]\x0E]\u0441\x0B]\x03]\x03]\x05]\u0445", "\n]\x03^\x06^\u0448\n^\r^\x0E^\u0449\x03^\x02\x04Bz_\x02", "\x04\x06\b\n\f\x0E\x10\x12\x14\x16\x18\x1A\x1C\x1E", " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\x80\x82\x84", "\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C", "\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4", "\xB6\xB8\xBA\x02\x11\x03\x02\x06\f\x03\x02\x15", "\x17\x03\x02)+\x06\x02oovvzz||\x05\x02%%7:bf\x03\x02", ";<\x03\x02?@\x03\x02AB\x04\x02\x0F\x0FEF\x03\x02", "GH\x03\x02\b\x0B\x03\x02KL\x04\x02\f\fOX\x03\x02h", "i\b\x02\x10\x10++``rrvv\x7F\x80\x02\u04C8\x02\xC5\x03", "\x02\x02\x02\x04\xCA\x03\x02\x02\x02\x06\xCF\x03", "\x02\x02\x02\b\xD3\x03\x02\x02\x02\n\xD5\x03\x02", "\x02\x02\f\xDF\x03\x02\x02\x02\x0E\xE9\x03\x02", "\x02\x02\x10\xEB\x03\x02\x02\x02\x12\u0112\x03\x02", "\x02\x02\x14\u0115\x03\x02\x02\x02\x16\u012D\x03\x02", "\x02\x02\x18\u013C\x03\x02\x02\x02\x1A\u013E\x03\x02", "\x02\x02\x1C\u0151\x03\x02\x02\x02\x1E\u0158\x03\x02", "\x02\x02 \u0161\x03\x02\x02\x02\"\u0172\x03\x02\x02", "\x02$\u0180\x03\x02\x02\x02&\u0188\x03\x02\x02\x02", "(\u0199\x03\x02\x02\x02*\u019B\x03\x02\x02\x02,\u01A8", "\x03\x02\x02\x02.\u01AB\x03\x02\x02\x020\u01B3\x03", "\x02\x02\x022\u01B5\x03\x02\x02\x024\u01C4\x03\x02", "\x02\x026\u01D1\x03\x02\x02\x028\u01D8\x03\x02\x02", "\x02:\u01E5\x03\x02\x02\x02<\u01EC\x03\x02\x02\x02", ">\u01F9\x03\x02\x02\x02@\u01FD\x03\x02\x02\x02B\u020A", "\x03\x02\x02\x02D\u0217\x03\x02\x02\x02F\u0221\x03", "\x02\x02\x02H\u0223\x03\x02\x02\x02J\u022A\x03\x02", "\x02\x02L\u0238\x03\x02\x02\x02N\u023A\x03\x02\x02", "\x02P\u023C\x03\x02\x02\x02R\u0253\x03\x02\x02\x02", "T\u0255\x03\x02\x02\x02V\u0258\x03\x02\x02\x02X\u0261", "\x03\x02\x02\x02Z\u026C\x03\x02\x02\x02\\\u0275\x03", "\x02\x02\x02^\u027D\x03\x02\x02\x02`\u027F\x03\x02", "\x02\x02b\u0282\x03\x02\x02\x02d\u0292\x03\x02\x02", "\x02f\u0298\x03\x02\x02\x02h\u02A0\x03\x02\x02\x02", "j\u02A3\x03\x02\x02\x02l\u02A6\x03\x02\x02\x02n\u02AC", "\x03\x02\x02\x02p\u02AF\x03\x02\x02\x02r\u02BA\x03", "\x02\x02\x02t\u02C3\x03\x02\x02\x02v\u02CE\x03\x02", "\x02\x02x\u02DD\x03\x02\x02\x02z\u02F1\x03\x02\x02", "\x02|\u0352\x03\x02\x02\x02~\u0354\x03\x02\x02\x02", "\x80\u035C\x03\x02\x02\x02\x82\u0367\x03\x02\x02\x02", "\x84\u0373\x03\x02\x02\x02\x86\u0375\x03\x02\x02\x02", "\x88\u037A\x03\x02\x02\x02\x8A\u0395\x03\x02\x02\x02", "\x8C\u039A\x03\x02\x02\x02\x8E\u039C\x03\x02\x02\x02", "\x90\u03A4\x03\x02\x02\x02\x92\u03B4\x03\x02\x02\x02", "\x94\u03BA\x03\x02\x02\x02\x96\u03C4\x03\x02\x02\x02", "\x98\u03C6\x03\x02\x02\x02\x9A\u03CE\x03\x02\x02\x02", "\x9C\u03D1\x03\x02\x02\x02\x9E\u03D4\x03\x02\x02\x02", "\xA0\u03E2\x03\x02\x02\x02\xA2\u03E4\x03\x02\x02\x02", "\xA4\u03F0\x03\x02\x02\x02\xA6\u03F3\x03\x02\x02\x02", "\xA8\u03FF\x03\x02\x02\x02\xAA\u0407\x03\x02\x02\x02", "\xAC\u0409\x03\x02\x02\x02\xAE\u0427\x03\x02\x02\x02", "\xB0\u042B\x03\x02\x02\x02\xB2\u042D\x03\x02\x02\x02", "\xB4\u0431\x03\x02\x02\x02\xB6\u0434\x03\x02\x02\x02", "\xB8\u0438\x03\x02\x02\x02\xBA\u0447\x03\x02\x02\x02", "\xBC\xC4\x05\x04\x03\x02\xBD\xC4\x05\x12\n\x02", "\xBE\xC4\x05\x14\x0B\x02\xBF\xC4\x052\x1A\x02", "\xC0\xC4\x05 \x11\x02\xC1\xC4\x05&\x14\x02\xC2", "\xC4\x05\x1C\x0F\x02\xC3\xBC\x03\x02\x02\x02\xC3", "\xBD\x03\x02\x02\x02\xC3\xBE\x03\x02\x02\x02\xC3", "\xBF\x03\x02\x02\x02\xC3\xC0\x03\x02\x02\x02\xC3", "\xC1\x03\x02\x02\x02\xC3\xC2\x03\x02\x02\x02\xC4", "\xC7\x03\x02\x02\x02\xC5\xC3\x03\x02\x02\x02\xC5", "\xC6\x03\x02\x02\x02\xC6\xC8\x03\x02\x02\x02\xC7", "\xC5\x03\x02\x02\x02\xC8\xC9\x07\x02\x02\x03\xC9", "\x03\x03\x02\x02\x02\xCA\xCB\x07\x03\x02\x02\xCB", "\xCC\x05\x06\x04\x02\xCC\xCD\x05\b\x05\x02\xCD", "\xCE\x07\x04\x02\x02\xCE\x05\x03\x02\x02\x02\xCF", "\xD0\x05\xB4[\x02\xD0\x07\x03\x02\x02\x02\xD1", "\xD4\x05\n\x06\x02\xD2\xD4\x05z>\x02\xD3\xD1\x03", "\x02\x02\x02\xD3\xD2\x03\x02\x02\x02\xD4\t\x03", "\x02\x02\x02\xD5\xDC\x05\x0E\b\x02\xD6\xD8\x07", "\x05\x02\x02\xD7\xD6\x03\x02\x02\x02\xD7\xD8\x03", "\x02\x02\x02\xD8\xD9\x03\x02\x02\x02\xD9\xDB\x05", "\x0E\b\x02\xDA\xD7\x03\x02\x02\x02\xDB\xDE\x03", "\x02\x02\x02\xDC\xDA\x03\x02\x02\x02\xDC\xDD\x03", "\x02\x02\x02\xDD\x0B\x03\x02\x02\x02\xDE\xDC\x03", "\x02\x02\x02\xDF\xE0\t\x02\x02\x02\xE0\r\x03\x02", "\x02\x02\xE1\xE3\x05\f\x07\x02\xE2\xE1\x03\x02", "\x02\x02\xE2\xE3\x03\x02\x02\x02\xE3\xE4\x03\x02", "\x02\x02\xE4\xEA\x07\x82\x02\x02\xE5\xE7\x05\f", "\x07\x02\xE6\xE5\x03\x02\x02\x02\xE6\xE7\x03\x02", "\x02\x02\xE7\xE8\x03\x02\x02\x02\xE8\xEA\x07h", "\x02\x02\xE9\xE2\x03\x02\x02\x02\xE9\xE6\x03\x02", "\x02\x02\xEA\x0F\x03\x02\x02\x02\xEB\xEE\x05\xB4", "[\x02\xEC\xED\x07\r\x02\x02\xED\xEF\x05\xB4[\x02", "\xEE\xEC\x03\x02\x02\x02\xEE\xEF\x03\x02\x02\x02", "\xEF\x11\x03\x02\x02\x02\xF0\xF1\x07\x0E\x02\x02", "\xF1\xF4\x07\x81\x02\x02\xF2\xF3\x07\r\x02\x02", "\xF3\xF5\x05\xB4[\x02\xF4\xF2\x03\x02\x02\x02", "\xF4\xF5\x03\x02\x02\x02\xF5\xF6\x03\x02\x02\x02", "\xF6\u0113\x07\x04\x02\x02\xF7\xFA\x07\x0E\x02\x02", "\xF8\xFB\x07\x0F\x02\x02\xF9\xFB\x05\xB4[\x02", "\xFA\xF8\x03\x02\x02\x02\xFA\xF9\x03\x02\x02\x02", "\xFB\xFE\x03\x02\x02\x02\xFC\xFD\x07\r\x02\x02", "\xFD\xFF\x05\xB4[\x02\xFE\xFC\x03\x02\x02\x02", "\xFE\xFF\x03\x02\x02\x02\xFF\u0100\x03\x02\x02\x02", "\u0100\u0101\x07\x10\x02\x02\u0101\u0102\x07\x81\x02\x02", "\u0102\u0113\x07\x04\x02\x02\u0103\u0104\x07\x0E\x02\x02", "\u0104\u0105\x07\x11\x02\x02\u0105\u010A\x05\x10\t\x02", "\u0106\u0107\x07\x12\x02\x02\u0107\u0109\x05\x10\t\x02", "\u0108\u0106\x03\x02\x02\x02\u0109\u010C\x03\x02\x02\x02", "\u010A\u0108\x03\x02\x02\x02\u010A\u010B\x03\x02\x02\x02", "\u010B\u010D\x03\x02\x02\x02\u010C\u010A\x03\x02\x02\x02", "\u010D\u010E\x07\x13\x02\x02\u010E\u010F\x07\x10\x02\x02", "\u010F\u0110\x07\x81\x02\x02\u0110\u0111\x07\x04\x02\x02", "\u0111\u0113\x03\x02\x02\x02\u0112\xF0\x03\x02\x02\x02", "\u0112\xF7\x03\x02\x02\x02\u0112\u0103\x03\x02\x02\x02", "\u0113\x13\x03\x02\x02\x02\u0114\u0116\x07\x14\x02\x02", "\u0115\u0114\x03\x02\x02\x02\u0115\u0116\x03\x02\x02\x02", "\u0116\u0117\x03\x02\x02\x02\u0117\u0118\t\x03\x02\x02", "\u0118\u0122\x05\xB4[\x02\u0119\u011A\x07\x18\x02\x02", "\u011A\u011F\x05\x16\f\x02\u011B\u011C\x07\x12\x02\x02", "\u011C\u011E\x05\x16\f\x02\u011D\u011B\x03\x02\x02\x02", "\u011E\u0121\x03\x02\x02\x02\u011F\u011D\x03\x02\x02\x02", "\u011F\u0120\x03\x02\x02\x02\u0120\u0123\x03\x02\x02\x02", "\u0121\u011F\x03\x02\x02\x02\u0122\u0119\x03\x02\x02\x02", "\u0122\u0123\x03\x02\x02\x02\u0123\u0124\x03\x02\x02\x02", "\u0124\u0128\x07\x11\x02\x02\u0125\u0127\x05\x18\r\x02", "\u0126\u0125\x03\x02\x02\x02\u0127\u012A\x03\x02\x02\x02", "\u0128\u0126\x03\x02\x02\x02\u0128\u0129\x03\x02\x02\x02", "\u0129\u012B\x03\x02\x02\x02\u012A\u0128\x03\x02\x02\x02", "\u012B\u012C\x07\x13\x02\x02\u012C\x15\x03\x02\x02\x02", "\u012D\u0133\x05D#\x02\u012E\u0130\x07\x19\x02\x02\u012F", "\u0131\x05~@\x02\u0130\u012F\x03\x02\x02\x02\u0130\u0131", "\x03\x02\x02\x02\u0131\u0132\x03\x02\x02\x02\u0132\u0134", "\x07\x1A\x02\x02\u0133\u012E\x03\x02\x02\x02\u0133\u0134", "\x03\x02\x02\x02\u0134\x17\x03\x02\x02\x02\u0135\u013D", "\x05\x1A\x0E\x02\u0136\u013D\x05\x1E\x10\x02\u0137\u013D", "\x05 \x11\x02\u0138\u013D\x05\"\x12\x02\u0139\u013D\x05", "&\x14\x02\u013A\u013D\x05.\x18\x02\u013B\u013D\x052\x1A", "\x02\u013C\u0135\x03\x02\x02\x02\u013C\u0136\x03\x02\x02", "\x02\u013C\u0137\x03\x02\x02\x02\u013C\u0138\x03\x02\x02", "\x02\u013C\u0139\x03\x02\x02\x02\u013C\u013A\x03\x02\x02", "\x02\u013C\u013B\x03\x02\x02\x02\u013D\x19\x03\x02\x02", "\x02\u013E\u0147\x05B\"\x02\u013F\u0146\x07x\x02\x02\u0140", "\u0146\x07u\x02\x02\u0141\u0146\x07w\x02\x02\u0142\u0146", "\x07o\x02\x02\u0143\u0146\x07p\x02\x02\u0144\u0146\x05", "\xB8]\x02\u0145\u013F\x03\x02\x02\x02\u0145\u0140\x03", "\x02\x02\x02\u0145\u0141\x03\x02\x02\x02\u0145\u0142\x03", "\x02\x02\x02\u0145\u0143\x03\x02\x02\x02\u0145\u0144\x03", "\x02\x02\x02\u0146\u0149\x03\x02\x02\x02\u0147\u0145\x03", "\x02\x02\x02\u0147\u0148\x03\x02\x02\x02\u0148\u014A\x03", "\x02\x02\x02\u0149\u0147\x03\x02\x02\x02\u014A\u014D\x05", "\xB4[\x02\u014B\u014C\x07\f\x02\x02\u014C\u014E\x05z>\x02", "\u014D\u014B\x03\x02\x02\x02\u014D\u014E\x03\x02\x02\x02", "\u014E\u014F\x03\x02\x02\x02\u014F\u0150\x07\x04\x02\x02", "\u0150\x1B\x03\x02\x02\x02\u0151\u0152\x05B\"\x02\u0152", "\u0153\x07o\x02\x02\u0153\u0154\x05\xB4[\x02\u0154\u0155", "\x07\f\x02\x02\u0155\u0156\x05z>\x02\u0156\u0157\x07\x04", "\x02\x02\u0157\x1D\x03\x02\x02\x02\u0158\u0159\x07\x1B", "\x02\x02\u0159\u015A\x05\xB4[\x02\u015A\u015D\x07\x1C", "\x02\x02\u015B\u015E\x07\x0F\x02\x02\u015C\u015E\x05B", "\"\x02\u015D\u015B\x03\x02\x02\x02\u015D\u015C\x03\x02", "\x02\x02\u015E\u015F\x03\x02\x02\x02\u015F\u0160\x07\x04", "\x02\x02\u0160\x1F\x03\x02\x02\x02\u0161\u0162\x07\x1D", "\x02\x02\u0162\u0163\x05\xB4[\x02\u0163\u016E\x07\x11", "\x02\x02\u0164\u0165\x05@!\x02\u0165\u016B\x07\x04\x02", "\x02\u0166\u0167\x05@!\x02\u0167\u0168\x07\x04\x02\x02", "\u0168\u016A\x03\x02\x02\x02\u0169\u0166\x03\x02\x02\x02", "\u016A\u016D\x03\x02\x02\x02\u016B\u0169\x03\x02\x02\x02", "\u016B\u016C\x03\x02\x02\x02\u016C\u016F\x03\x02\x02\x02", "\u016D\u016B\x03\x02\x02\x02\u016E\u0164\x03\x02\x02\x02", "\u016E\u016F\x03\x02\x02\x02\u016F\u0170\x03\x02\x02\x02", "\u0170\u0171\x07\x13\x02\x02\u0171!\x03\x02\x02\x02", "\u0172\u0173\x07\x1E\x02\x02\u0173\u0175\x05\xB4[\x02", "\u0174\u0176\x054\x1B\x02\u0175\u0174\x03\x02\x02\x02", "\u0175\u0176\x03\x02\x02\x02\u0176\u017B\x03\x02\x02\x02", "\u0177\u017A\x07y\x02\x02\u0178\u017A\x05\xB8]\x02\u0179", "\u0177\x03\x02\x02\x02\u0179\u0178\x03\x02\x02\x02\u017A", "\u017D\x03\x02\x02\x02\u017B\u0179\x03\x02\x02\x02\u017B", "\u017C\x03\x02\x02\x02\u017C\u017E\x03\x02\x02\x02\u017D", "\u017B\x03\x02\x02\x02\u017E\u017F\x05P)\x02\u017F#\x03", "\x02\x02\x02\u0180\u0186\x05\xB4[\x02\u0181\u0183\x07", "\x19\x02\x02\u0182\u0184\x05~@\x02\u0183\u0182\x03\x02", "\x02\x02\u0183\u0184\x03\x02\x02\x02\u0184\u0185\x03\x02", "\x02\x02\u0185\u0187\x07\x1A\x02\x02\u0186\u0181\x03\x02", "\x02\x02\u0186\u0187\x03\x02\x02\x02\u0187%\x03\x02", "\x02\x02\u0188\u0189\x05(\x15\x02\u0189\u018A\x054\x1B", "\x02\u018A\u018C\x05,\x17\x02\u018B\u018D\x05*\x16\x02", "\u018C\u018B\x03\x02\x02\x02\u018C\u018D\x03\x02\x02\x02", "\u018D\u0190\x03\x02\x02\x02\u018E\u0191\x07\x04\x02\x02", "\u018F\u0191\x05P)\x02\u0190\u018E\x03\x02\x02\x02\u0190", "\u018F\x03\x02\x02\x02\u0191'\x03\x02\x02\x02\u0192", "\u0194\x07\x1F\x02\x02\u0193\u0195\x05\xB4[\x02\u0194", "\u0193\x03\x02\x02\x02\u0194\u0195\x03\x02\x02\x02\u0195", "\u019A\x03\x02\x02\x02\u0196\u019A\x07}\x02\x02\u0197", "\u019A\x07~\x02\x02\u0198\u019A\x07\x7F\x02\x02\u0199", "\u0192\x03\x02\x02\x02\u0199\u0196\x03\x02\x02\x02\u0199", "\u0197\x03\x02\x02\x02\u0199\u0198\x03\x02\x02\x02\u019A", ")\x03\x02\x02\x02\u019B\u019C\x07 \x02\x02\u019C\u019D", "\x054\x1B\x02\u019D+\x03\x02\x02\x02\u019E\u01A7\x07", "s\x02\x02\u019F\u01A7\x07x\x02\x02\u01A0\u01A7\x07u\x02", "\x02\u01A1\u01A7\x07w\x02\x02\u01A2\u01A7\x07y\x02\x02", "\u01A3\u01A7\x05N(\x02\u01A4\u01A7\x05$\x13\x02\u01A5\u01A7", "\x05\xB8]\x02\u01A6\u019E\x03\x02\x02\x02\u01A6\u019F", "\x03\x02\x02\x02\u01A6\u01A0\x03\x02\x02\x02\u01A6\u01A1", "\x03\x02\x02\x02\u01A6\u01A2\x03\x02\x02\x02\u01A6\u01A3", "\x03\x02\x02\x02\u01A6\u01A4\x03\x02\x02\x02\u01A6\u01A5", "\x03\x02\x02\x02\u01A7\u01AA\x03\x02\x02\x02\u01A8\u01A6", "\x03\x02\x02\x02\u01A8\u01A9\x03\x02\x02\x02\u01A9-", "\x03\x02\x02\x02\u01AA\u01A8\x03\x02\x02\x02\u01AB\u01AC", "\x07!\x02\x02\u01AC\u01AD\x05\xB4[\x02\u01AD\u01AF\x05", "8\x1D\x02\u01AE\u01B0\x07m\x02\x02\u01AF\u01AE\x03\x02", "\x02\x02\u01AF\u01B0\x03\x02\x02\x02\u01B0\u01B1\x03\x02", "\x02\x02\u01B1\u01B2\x07\x04\x02\x02\u01B2/\x03\x02", "\x02\x02\u01B3\u01B4\x05\xB4[\x02\u01B41\x03\x02\x02", "\x02\u01B5\u01B6\x07\"\x02\x02\u01B6\u01B7\x05\xB4[\x02", "\u01B7\u01B9\x07\x11\x02\x02\u01B8\u01BA\x050\x19\x02", "\u01B9\u01B8\x03\x02\x02\x02\u01B9\u01BA\x03\x02\x02\x02", "\u01BA\u01BF\x03\x02\x02\x02\u01BB\u01BC\x07\x12\x02\x02", "\u01BC\u01BE\x050\x19\x02\u01BD\u01BB\x03\x02\x02\x02", "\u01BE\u01C1\x03\x02\x02\x02\u01BF\u01BD\x03\x02\x02\x02", "\u01BF\u01C0\x03\x02\x02\x02\u01C0\u01C2\x03\x02\x02\x02", "\u01C1\u01BF\x03\x02\x02\x02\u01C2\u01C3\x07\x13\x02\x02", "\u01C33\x03\x02\x02\x02\u01C4\u01CD\x07\x19\x02\x02", "\u01C5\u01CA\x056\x1C\x02\u01C6\u01C7\x07\x12\x02\x02", "\u01C7\u01C9\x056\x1C\x02\u01C8\u01C6\x03\x02\x02\x02", "\u01C9\u01CC\x03\x02\x02\x02\u01CA\u01C8\x03\x02\x02\x02", "\u01CA\u01CB\x03\x02\x02\x02\u01CB\u01CE\x03\x02\x02\x02", "\u01CC\u01CA\x03\x02\x02\x02\u01CD\u01C5\x03\x02\x02\x02", "\u01CD\u01CE\x03\x02\x02\x02\u01CE\u01CF\x03\x02\x02\x02", "\u01CF\u01D0\x07\x1A\x02\x02\u01D05\x03\x02\x02\x02", "\u01D1\u01D3\x05B\"\x02\u01D2\u01D4\x05L'\x02\u01D3\u01D2\x03", "\x02\x02\x02\u01D3\u01D4\x03\x02\x02\x02\u01D4\u01D6\x03", "\x02\x02\x02\u01D5\u01D7\x05\xB4[\x02\u01D6\u01D5\x03", "\x02\x02\x02\u01D6\u01D7\x03\x02\x02\x02\u01D77\x03", "\x02\x02\x02\u01D8\u01E1\x07\x19\x02\x02\u01D9\u01DE\x05", ":\x1E\x02\u01DA\u01DB\x07\x12\x02\x02\u01DB\u01DD\x05", ":\x1E\x02\u01DC\u01DA\x03\x02\x02\x02\u01DD\u01E0\x03", "\x02\x02\x02\u01DE\u01DC\x03\x02\x02\x02\u01DE\u01DF\x03", "\x02\x02\x02\u01DF\u01E2\x03\x02\x02\x02\u01E0\u01DE\x03", "\x02\x02\x02\u01E1\u01D9\x03\x02\x02\x02\u01E1\u01E2\x03", "\x02\x02\x02\u01E2\u01E3\x03\x02\x02\x02\u01E3\u01E4\x07", "\x1A\x02\x02\u01E49\x03\x02\x02\x02\u01E5\u01E7\x05", "B\"\x02\u01E6\u01E8\x07t\x02\x02\u01E7\u01E6\x03\x02\x02", "\x02\u01E7\u01E8\x03\x02\x02\x02\u01E8\u01EA\x03\x02\x02", "\x02\u01E9\u01EB\x05\xB4[\x02\u01EA\u01E9\x03\x02\x02", "\x02\u01EA\u01EB\x03\x02\x02\x02\u01EB;\x03\x02\x02", "\x02\u01EC\u01F5\x07\x19\x02\x02\u01ED\u01F2\x05> \x02", "\u01EE\u01EF\x07\x12\x02\x02\u01EF\u01F1\x05> \x02\u01F0", "\u01EE\x03\x02\x02\x02\u01F1\u01F4\x03\x02\x02\x02\u01F2", "\u01F0\x03\x02\x02\x02\u01F2\u01F3\x03\x02\x02\x02\u01F3", "\u01F6\x03\x02\x02\x02\u01F4\u01F2\x03\x02\x02\x02\u01F5", "\u01ED\x03\x02\x02\x02\u01F5\u01F6\x03\x02\x02\x02\u01F6", "\u01F7\x03\x02\x02\x02\u01F7\u01F8\x07\x1A\x02\x02\u01F8", "=\x03\x02\x02\x02\u01F9\u01FB\x05B\"\x02\u01FA\u01FC\x05", "L'\x02\u01FB\u01FA\x03\x02\x02\x02\u01FB\u01FC\x03\x02", "\x02\x02\u01FC?\x03\x02\x02\x02\u01FD\u01FF\x05B\"\x02", "\u01FE\u0200\x05L'\x02\u01FF\u01FE\x03\x02\x02\x02\u01FF", "\u0200\x03\x02\x02\x02\u0200\u0201\x03\x02\x02\x02\u0201", "\u0202\x05\xB4[\x02\u0202A\x03\x02\x02\x02\u0203\u0204", "\b\"\x01\x02\u0204\u020B\x05x=\x02\u0205\u020B\x05D#\x02", "\u0206\u020B\x05H%\x02\u0207\u020B\x05J&\x02\u0208\u0209\x07", "%\x02\x02\u0209\u020B\x07v\x02\x02\u020A\u0203\x03\x02", "\x02\x02\u020A\u0205\x03\x02\x02\x02\u020A\u0206\x03\x02", "\x02\x02\u020A\u0207\x03\x02\x02\x02\u020A\u0208\x03\x02", "\x02\x02\u020B\u0214\x03\x02\x02\x02\u020C\u020D\f\x05", "\x02\x02\u020D\u020F\x07#\x02\x02\u020E\u0210\x05z>\x02", "\u020F\u020E\x03\x02\x02\x02\u020F\u0210\x03\x02\x02\x02", "\u0210\u0211\x03\x02\x02\x02\u0211\u0213\x07$\x02\x02", "\u0212\u020C\x03\x02\x02\x02\u0213\u0216\x03\x02\x02\x02", "\u0214\u0212\x03\x02\x02\x02\u0214\u0215\x03\x02\x02\x02", "\u0215C\x03\x02\x02\x02\u0216\u0214\x03\x02\x02\x02", "\u0217\u021C\x05\xB4[\x02\u0218\u0219\x07&\x02\x02\u0219", "\u021B\x05\xB4[\x02\u021A\u0218\x03\x02\x02\x02\u021B", "\u021E\x03\x02\x02\x02\u021C\u021A\x03\x02\x02\x02\u021C", "\u021D\x03\x02\x02\x02\u021DE\x03\x02\x02\x02\u021E", "\u021C\x03\x02\x02\x02\u021F\u0222\x05x=\x02\u0220\u0222", "\x05D#\x02\u0221\u021F\x03\x02\x02\x02\u0221\u0220\x03", "\x02\x02\x02\u0222G\x03\x02\x02\x02\u0223\u0224\x07", "'\x02\x02\u0224\u0225\x07\x19\x02\x02\u0225\u0226\x05", "F$\x02\u0226\u0227\x07(\x02\x02\u0227\u0228\x05B\"\x02\u0228", "\u0229\x07\x1A\x02\x02\u0229I\x03\x02\x02\x02\u022A", "\u022B\x07\x1F\x02\x02\u022B\u0231\x05<\x1F\x02\u022C", "\u0230\x07u\x02\x02\u022D\u0230\x07s\x02\x02\u022E\u0230", "\x05N(\x02\u022F\u022C\x03\x02\x02\x02\u022F\u022D\x03", "\x02\x02\x02\u022F\u022E\x03\x02\x02\x02\u0230\u0233\x03", "\x02\x02\x02\u0231\u022F\x03\x02\x02\x02\u0231\u0232\x03", "\x02\x02\x02\u0232\u0236\x03\x02\x02\x02\u0233\u0231\x03", "\x02\x02\x02\u0234\u0235\x07 \x02\x02\u0235\u0237\x05", "<\x1F\x02\u0236\u0234\x03\x02\x02\x02\u0236\u0237\x03", "\x02\x02\x02\u0237K\x03\x02\x02\x02\u0238\u0239\t\x04", "\x02\x02\u0239M\x03\x02\x02\x02\u023A\u023B\t\x05\x02", "\x02\u023BO\x03\x02\x02\x02\u023C\u0240\x07\x11\x02", "\x02\u023D\u023F\x05R*\x02\u023E\u023D\x03\x02\x02\x02", "\u023F\u0242\x03\x02\x02\x02\u0240\u023E\x03\x02\x02\x02", "\u0240\u0241\x03\x02\x02\x02\u0241\u0243\x03\x02\x02\x02", "\u0242\u0240\x03\x02\x02\x02\u0243\u0244\x07\x13\x02\x02", "\u0244Q\x03\x02\x02\x02\u0245\u0254\x05V,\x02\u0246\u0254", "\x05X-\x02\u0247\u0254\x05\\/\x02\u0248\u0254\x05b2\x02", "\u0249\u0254\x05P)\x02\u024A\u0254\x05d3\x02\u024B\u0254\x05", "f4\x02\u024C\u0254\x05h5\x02\u024D\u0254\x05j6\x02\u024E\u0254", "\x05l7\x02\u024F\u0254\x05n8\x02\u0250\u0254\x05p9\x02\u0251", "\u0254\x05^0\x02\u0252\u0254\x05`1\x02\u0253\u0245\x03\x02", "\x02\x02\u0253\u0246\x03\x02\x02\x02\u0253\u0247\x03\x02", "\x02\x02\u0253\u0248\x03\x02\x02\x02\u0253\u0249\x03\x02", "\x02\x02\u0253\u024A\x03\x02\x02\x02\u0253\u024B\x03\x02", "\x02\x02\u0253\u024C\x03\x02\x02\x02\u0253\u024D\x03\x02", "\x02\x02\u0253\u024E\x03\x02\x02\x02\u0253\u024F\x03\x02", "\x02\x02\u0253\u0250\x03\x02\x02\x02\u0253\u0251\x03\x02", "\x02\x02\u0253\u0252\x03\x02\x02\x02\u0254S\x03\x02", "\x02\x02\u0255\u0256\x05z>\x02\u0256\u0257\x07\x04\x02", "\x02\u0257U\x03\x02\x02\x02\u0258\u0259\x07,\x02\x02", "\u0259\u025A\x07\x19\x02\x02\u025A\u025B\x05z>\x02\u025B", "\u025C\x07\x1A\x02\x02\u025C\u025F\x05R*\x02\u025D\u025E", "\x07-\x02\x02\u025E\u0260\x05R*\x02\u025F\u025D\x03\x02", "\x02\x02\u025F\u0260\x03\x02\x02\x02\u0260W\x03\x02", "\x02\x02\u0261\u0262\x07.\x02\x02\u0262\u0264\x05z>\x02", "\u0263\u0265\x05*\x16\x02\u0264\u0263\x03\x02\x02\x02", "\u0264\u0265\x03\x02\x02\x02\u0265\u0266\x03\x02\x02\x02", "\u0266\u0268\x05P)\x02\u0267\u0269\x05Z.\x02\u0268\u0267\x03", "\x02\x02\x02\u0269\u026A\x03\x02\x02\x02\u026A\u0268\x03", "\x02\x02\x02\u026A\u026B\x03\x02\x02\x02\u026BY\x03", "\x02\x02\x02\u026C\u0271\x07/\x02\x02\u026D\u026F\x05", "\xB4[\x02\u026E\u026D\x03\x02\x02\x02\u026E\u026F\x03", "\x02\x02\x02\u026F\u0270\x03\x02\x02\x02\u0270\u0272\x05", "4\x1B\x02\u0271\u026E\x03\x02\x02\x02\u0271\u0272\x03", "\x02\x02\x02\u0272\u0273\x03\x02\x02\x02\u0273\u0274\x05", "P)\x02\u0274[\x03\x02\x02\x02\u0275\u0276\x070\x02\x02", "\u0276\u0277\x07\x19\x02\x02\u0277\u0278\x05z>\x02\u0278", "\u0279\x07\x1A\x02\x02\u0279\u027A\x05R*\x02\u027A]\x03", "\x02\x02\x02\u027B\u027E\x05r:\x02\u027C\u027E\x05T+\x02", "\u027D\u027B\x03\x02\x02\x02\u027D\u027C\x03\x02\x02\x02", "\u027E_\x03\x02\x02\x02\u027F\u0280\x071\x02\x02\u0280", "\u0281\x05P)\x02\u0281a\x03\x02\x02\x02\u0282\u0283\x07", "\x1C\x02\x02\u0283\u0286\x07\x19\x02\x02\u0284\u0287\x05", "^0\x02\u0285\u0287\x07\x04\x02\x02\u0286\u0284\x03\x02", "\x02\x02\u0286\u0285\x03\x02\x02\x02\u0287\u028A\x03\x02", "\x02\x02\u0288\u028B\x05T+\x02\u0289\u028B\x07\x04\x02", "\x02\u028A\u0288\x03\x02\x02\x02\u028A\u0289\x03\x02\x02", "\x02\u028B\u028D\x03\x02\x02\x02\u028C\u028E\x05z>\x02", "\u028D\u028C\x03\x02\x02\x02\u028D\u028E\x03\x02\x02\x02", "\u028E\u028F\x03\x02\x02\x02\u028F\u0290\x07\x1A\x02\x02", "\u0290\u0291\x05R*\x02\u0291c\x03\x02\x02\x02\u0292\u0294", "\x072\x02\x02\u0293\u0295\x07\x81\x02\x02\u0294\u0293", "\x03\x02\x02\x02\u0294\u0295\x03\x02\x02\x02\u0295\u0296", "\x03\x02\x02\x02\u0296\u0297\x05\x88E\x02\u0297e\x03", "\x02\x02\x02\u0298\u0299\x073\x02\x02\u0299\u029A\x05", "R*\x02\u029A\u029B\x070\x02\x02\u029B\u029C\x07\x19\x02", "\x02\u029C\u029D\x05z>\x02\u029D\u029E\x07\x1A\x02\x02", "\u029E\u029F\x07\x04\x02\x02\u029Fg\x03\x02\x02\x02", "\u02A0\u02A1\x07q\x02\x02\u02A1\u02A2\x07\x04\x02\x02", "\u02A2i\x03\x02\x02\x02\u02A3\u02A4\x07n\x02\x02\u02A4", "\u02A5\x07\x04\x02\x02\u02A5k\x03\x02\x02\x02\u02A6", "\u02A8\x074\x02\x02\u02A7\u02A9\x05z>\x02\u02A8\u02A7\x03", "\x02\x02\x02\u02A8\u02A9\x03\x02\x02\x02\u02A9\u02AA\x03", "\x02\x02\x02\u02AA\u02AB\x07\x04\x02\x02\u02ABm\x03", "\x02\x02\x02\u02AC\u02AD\x075\x02\x02\u02AD\u02AE\x07", "\x04\x02\x02\u02AEo\x03\x02\x02\x02\u02AF\u02B0\x07", "6\x02\x02\u02B0\u02B1\x05\x86D\x02\u02B1\u02B2\x07\x04", "\x02\x02\u02B2q\x03\x02\x02\x02\u02B3\u02B4\x077\x02", "\x02\u02B4\u02BB\x05v<\x02\u02B5\u02BB\x05@!\x02\u02B6\u02B7", "\x07\x19\x02\x02\u02B7\u02B8\x05t;\x02\u02B8\u02B9\x07", "\x1A\x02\x02\u02B9\u02BB\x03\x02\x02\x02\u02BA\u02B3\x03", "\x02\x02\x02\u02BA\u02B5\x03\x02\x02\x02\u02BA\u02B6\x03", "\x02\x02\x02\u02BB\u02BE\x03\x02\x02\x02\u02BC\u02BD\x07", "\f\x02\x02\u02BD\u02BF\x05z>\x02\u02BE\u02BC\x03\x02\x02", "\x02\u02BE\u02BF\x03\x02\x02\x02\u02BF\u02C0\x03\x02\x02", "\x02\u02C0\u02C1\x07\x04\x02\x02\u02C1s\x03\x02\x02", "\x02\u02C2\u02C4\x05@!\x02\u02C3\u02C2\x03\x02\x02\x02", "\u02C3\u02C4\x03\x02\x02\x02\u02C4\u02CB\x03\x02\x02\x02", "\u02C5\u02C7\x07\x12\x02\x02\u02C6\u02C8\x05@!\x02\u02C7", "\u02C6\x03\x02\x02\x02\u02C7\u02C8\x03\x02\x02\x02\u02C8", "\u02CA\x03\x02\x02\x02\u02C9\u02C5\x03\x02\x02\x02\u02CA", "\u02CD\x03\x02\x02\x02\u02CB\u02C9\x03\x02\x02\x02\u02CB", "\u02CC\x03\x02\x02\x02\u02CCu\x03\x02\x02\x02\u02CD", "\u02CB\x03\x02\x02\x02\u02CE\u02D5\x07\x19\x02\x02\u02CF", "\u02D1\x05\xB4[\x02\u02D0\u02CF\x03\x02\x02\x02\u02D0", "\u02D1\x03\x02\x02\x02\u02D1\u02D2\x03\x02\x02\x02\u02D2", "\u02D4\x07\x12\x02\x02\u02D3\u02D0\x03\x02\x02\x02\u02D4", "\u02D7\x03\x02\x02\x02\u02D5\u02D3\x03\x02\x02\x02\u02D5", "\u02D6\x03\x02\x02\x02\u02D6\u02D9\x03\x02\x02\x02\u02D7", "\u02D5\x03\x02\x02\x02\u02D8\u02DA\x05\xB4[\x02\u02D9", "\u02D8\x03\x02\x02\x02\u02D9\u02DA\x03\x02\x02\x02\u02DA", "\u02DB\x03\x02\x02\x02\u02DB\u02DC\x07\x1A\x02\x02\u02DC", "w\x03\x02\x02\x02\u02DD\u02DE\t\x06\x02\x02\u02DEy\x03", "\x02\x02\x02\u02DF\u02E0\b>\x01\x02\u02E0\u02E1\x07=\x02", "\x02\u02E1\u02F2\x05B\"\x02\u02E2\u02E3\x07\x19\x02\x02", "\u02E3\u02E4\x05z>\x02\u02E4\u02E5\x07\x1A\x02\x02\u02E5", "\u02F2\x03\x02\x02\x02\u02E6\u02E7\t\x07\x02\x02\u02E7", "\u02F2\x05z>\x15\u02E8\u02E9\t\b\x02\x02\u02E9\u02F2\x05z", ">\x14\u02EA\u02EB\t\t\x02\x02\u02EB\u02F2\x05z>\x13\u02EC", "\u02ED\x07C\x02\x02\u02ED\u02F2\x05z>\x12\u02EE\u02EF\x07", "\x07\x02\x02\u02EF\u02F2\x05z>\x11\u02F0\u02F2\x05|?\x02", "\u02F1\u02DF\x03\x02\x02\x02\u02F1\u02E2\x03\x02\x02\x02", "\u02F1\u02E6\x03\x02\x02\x02\u02F1\u02E8\x03\x02\x02\x02", "\u02F1\u02EA\x03\x02\x02\x02\u02F1\u02EC\x03\x02\x02\x02", "\u02F1\u02EE\x03\x02\x02\x02\u02F1\u02F0\x03\x02\x02\x02", "\u02F2\u033E\x03\x02\x02\x02\u02F3\u02F4\f\x10\x02\x02", "\u02F4\u02F5\x07D\x02\x02\u02F5\u033D\x05z>\x11\u02F6\u02F7", "\f\x0F\x02\x02\u02F7\u02F8\t\n\x02\x02\u02F8\u033D\x05z", ">\x10\u02F9\u02FA\f\x0E\x02\x02\u02FA\u02FB\t\b\x02\x02", "\u02FB\u033D\x05z>\x0F\u02FC\u02FD\f\r\x02\x02\u02FD\u02FE\t", "\x0B\x02\x02\u02FE\u033D\x05z>\x0E\u02FF\u0300\f\f\x02\x02", "\u0300\u0301\x07I\x02\x02\u0301\u033D\x05z>\r\u0302\u0303\f", "\x0B\x02\x02\u0303\u0304\x07\x06\x02\x02\u0304\u033D\x05", "z>\f\u0305\u0306\f\n\x02\x02\u0306\u0307\x07J\x02\x02\u0307", "\u033D\x05z>\x0B\u0308\u0309\f\t\x02\x02\u0309\u030A\t\f\x02", "\x02\u030A\u033D\x05z>\n\u030B\u030C\f\b\x02\x02\u030C\u030D", "\t\r\x02\x02\u030D\u033D\x05z>\t\u030E\u030F\f\x07\x02\x02", "\u030F\u0310\x07M\x02\x02\u0310\u033D\x05z>\b\u0311\u0312\f", "\x06\x02\x02\u0312\u0313\x07\x05\x02\x02\u0313\u033D\x05", "z>\x07\u0314\u0315\f\x05\x02\x02\u0315\u0316\x07N\x02\x02", "\u0316\u0317\x05z>\x02\u0317\u0318\x07>\x02\x02\u0318\u0319", "\x05z>\x06\u0319\u033D\x03\x02\x02\x02\u031A\u031B\f\x04", "\x02\x02\u031B\u031C\t\x0E\x02\x02\u031C\u033D\x05z>\x05", "\u031D\u031E\f\x1D\x02\x02\u031E\u033D\t\x07\x02\x02\u031F", "\u0320\f\x1B\x02\x02\u0320\u0322\x07#\x02\x02\u0321\u0323", "\x05z>\x02\u0322\u0321\x03\x02\x02\x02\u0322\u0323\x03", "\x02\x02\x02\u0323\u0324\x03\x02\x02\x02\u0324\u033D\x07", "$\x02\x02\u0325\u0326\f\x1A\x02\x02\u0326\u0328\x07#\x02", "\x02\u0327\u0329\x05z>\x02\u0328\u0327\x03\x02\x02\x02", "\u0328\u0329\x03\x02\x02\x02\u0329\u032A\x03\x02\x02\x02", "\u032A\u032C\x07>\x02\x02\u032B\u032D\x05z>\x02\u032C\u032B", "\x03\x02\x02\x02\u032C\u032D\x03\x02\x02\x02\u032D\u032E", "\x03\x02\x02\x02\u032E\u033D\x07$\x02\x02\u032F\u0330", "\f\x19\x02\x02\u0330\u0331\x07&\x02\x02\u0331\u033D\x05", "\xB4[\x02\u0332\u0333\f\x18\x02\x02\u0333\u0334\x07\x11", "\x02\x02\u0334\u0335\x05\x80A\x02\u0335\u0336\x07\x13", "\x02\x02\u0336\u033D\x03\x02\x02\x02\u0337\u0338\f\x17", "\x02\x02\u0338\u0339\x07\x19\x02\x02\u0339\u033A\x05\x84", "C\x02\u033A\u033B\x07\x1A\x02\x02\u033B\u033D\x03\x02", "\x02\x02\u033C\u02F3\x03\x02\x02\x02\u033C\u02F6\x03\x02", "\x02\x02\u033C\u02F9\x03\x02\x02\x02\u033C\u02FC\x03\x02", "\x02\x02\u033C\u02FF\x03\x02\x02\x02\u033C\u0302\x03\x02", "\x02\x02\u033C\u0305\x03\x02\x02\x02\u033C\u0308\x03\x02", "\x02\x02\u033C\u030B\x03\x02\x02\x02\u033C\u030E\x03\x02", "\x02\x02\u033C\u0311\x03\x02\x02\x02\u033C\u0314\x03\x02", "\x02\x02\u033C\u031A\x03\x02\x02\x02\u033C\u031D\x03\x02", "\x02\x02\u033C\u031F\x03\x02\x02\x02\u033C\u0325\x03\x02", "\x02\x02\u033C\u032F\x03\x02\x02\x02\u033C\u0332\x03\x02", "\x02\x02\u033C\u0337\x03\x02\x02\x02\u033D\u0340\x03\x02", "\x02\x02\u033E\u033C\x03\x02\x02\x02\u033E\u033F\x03\x02", "\x02\x02\u033F{\x03\x02\x02\x02\u0340\u033E\x03\x02", "\x02\x02\u0341\u0353\x07g\x02\x02\u0342\u0353\x05\xB2", "Z\x02\u0343\u0353\x05\xB6\\\x02\u0344\u0353\x05\xBA^\x02", "\u0345\u0348\x05\xB4[\x02\u0346\u0347\x07#\x02\x02\u0347", "\u0349\x07$\x02\x02\u0348\u0346\x03\x02\x02\x02\u0348", "\u0349\x03\x02\x02\x02\u0349\u0353\x03\x02\x02\x02\u034A", "\u0353\x07{\x02\x02\u034B\u0353\x07v\x02\x02\u034C\u0353", "\x05\xAEX\x02\u034D\u0350\x05\xB0Y\x02\u034E\u034F\x07", "#\x02\x02\u034F\u0351\x07$\x02\x02\u0350\u034E\x03\x02", "\x02\x02\u0350\u0351\x03\x02\x02\x02\u0351\u0353\x03\x02", "\x02\x02\u0352\u0341\x03\x02\x02\x02\u0352\u0342\x03\x02", "\x02\x02\u0352\u0343\x03\x02\x02\x02\u0352\u0344\x03\x02", "\x02\x02\u0352\u0345\x03\x02\x02\x02\u0352\u034A\x03\x02", "\x02\x02\u0352\u034B\x03\x02\x02\x02\u0352\u034C\x03\x02", "\x02\x02\u0352\u034D\x03\x02\x02\x02\u0353}\x03\x02", "\x02\x02\u0354\u0359\x05z>\x02\u0355\u0356\x07\x12\x02", "\x02\u0356\u0358\x05z>\x02\u0357\u0355\x03\x02\x02\x02", "\u0358\u035B\x03\x02\x02\x02\u0359\u0357\x03\x02\x02\x02", "\u0359\u035A\x03\x02\x02\x02\u035A\x7F\x03\x02\x02\x02", "\u035B\u0359\x03\x02\x02\x02\u035C\u0361\x05\x82B\x02", "\u035D\u035E\x07\x12\x02\x02\u035E\u0360\x05\x82B\x02", "\u035F\u035D\x03\x02\x02\x02\u0360\u0363\x03\x02\x02\x02", "\u0361\u035F\x03\x02\x02\x02\u0361\u0362\x03\x02\x02\x02", "\u0362\u0365\x03\x02\x02\x02\u0363\u0361\x03\x02\x02\x02", "\u0364\u0366\x07\x12\x02\x02\u0365\u0364\x03\x02\x02\x02", "\u0365\u0366\x03\x02\x02\x02\u0366\x81\x03\x02\x02\x02", "\u0367\u0368\x05\xB4[\x02\u0368\u0369\x07>\x02\x02\u0369", "\u036A\x05z>\x02\u036A\x83\x03\x02\x02\x02\u036B\u036D", "\x07\x11\x02\x02\u036C\u036E\x05\x80A\x02\u036D\u036C", "\x03\x02\x02\x02\u036D\u036E\x03\x02\x02\x02\u036E\u036F", "\x03\x02\x02\x02\u036F\u0374\x07\x13\x02\x02\u0370\u0372", "\x05~@\x02\u0371\u0370\x03\x02\x02\x02\u0371\u0372\x03", "\x02\x02\x02\u0372\u0374\x03\x02\x02\x02\u0373\u036B\x03", "\x02\x02\x02\u0373\u0371\x03\x02\x02\x02\u0374\x85\x03", "\x02\x02\x02\u0375\u0376\x05z>\x02\u0376\u0377\x07\x19", "\x02\x02\u0377\u0378\x05\x84C\x02\u0378\u0379\x07\x1A", "\x02\x02\u0379\x87\x03\x02\x02\x02\u037A\u037E\x07\x11", "\x02\x02\u037B\u037D\x05\x8AF\x02\u037C\u037B\x03\x02", "\x02\x02\u037D\u0380\x03\x02\x02\x02\u037E\u037C\x03\x02", "\x02\x02\u037E\u037F\x03\x02\x02\x02\u037F\u0381\x03\x02", "\x02\x02\u0380\u037E\x03\x02\x02\x02\u0381\u0382\x07\x13", "\x02\x02\u0382\x89\x03\x02\x02\x02\u0383\u0396\x05\xB4", "[\x02\u0384\u0396\x05\x88E\x02\u0385\u0396\x05\x8CG\x02", "\u0386\u0396\x05\x92J\x02\u0387\u0396\x05\x94K\x02\u0388", "\u0396\x05\x9AN\x02\u0389\u0396\x05\x9CO\x02\u038A\u0396", "\x05\x9EP\x02\u038B\u0396\x05\xA2R\x02\u038C\u0396\x05", "\xA6T\x02\u038D\u0396\x05\xA8U\x02\u038E\u0396\x07n\x02", "\x02\u038F\u0396\x07q\x02\x02\u0390\u0396\x07r\x02\x02", "\u0391\u0396\x05\xACW\x02\u0392\u0396\x05\xB2Z\x02\u0393", "\u0396\x05\xBA^\x02\u0394\u0396\x05\xB6\\\x02\u0395\u0383", "\x03\x02\x02\x02\u0395\u0384\x03\x02\x02\x02\u0395\u0385", "\x03\x02\x02\x02\u0395\u0386\x03\x02\x02\x02\u0395\u0387", "\x03\x02\x02\x02\u0395\u0388\x03\x02\x02\x02\u0395\u0389", "\x03\x02\x02\x02\u0395\u038A\x03\x02\x02\x02\u0395\u038B", "\x03\x02\x02\x02\u0395\u038C\x03\x02\x02\x02\u0395\u038D", "\x03\x02\x02\x02\u0395\u038E\x03\x02\x02\x02\u0395\u038F", "\x03\x02\x02\x02\u0395\u0390\x03\x02\x02\x02\u0395\u0391", "\x03\x02\x02\x02\u0395\u0392\x03\x02\x02\x02\u0395\u0393", "\x03\x02\x02\x02\u0395\u0394\x03\x02\x02\x02\u0396\x8B", "\x03\x02\x02\x02\u0397\u039B\x05\x90I\x02\u0398\u039B", "\x05\xAAV\x02\u0399\u039B\x05\x8EH\x02\u039A\u0397\x03", "\x02\x02\x02\u039A\u0398\x03\x02\x02\x02\u039A\u0399\x03", "\x02\x02\x02\u039B\x8D\x03\x02\x02\x02\u039C\u039D\x05", "\xB4[\x02\u039D\u039E\x07&\x02\x02\u039E\u039F\x05\xB4", "[\x02\u039F\x8F\x03\x02\x02\x02\u03A0\u03A5\x074\x02", "\x02\u03A1\u03A5\x07%\x02\x02\u03A2\u03A5\x07:\x02\x02", "\u03A3\u03A5\x05\xB4[\x02\u03A4\u03A0\x03\x02\x02\x02", "\u03A4\u03A1\x03\x02\x02\x02\u03A4\u03A2\x03\x02\x02\x02", "\u03A4\u03A3\x03\x02\x02\x02\u03A5\u03B2\x03\x02\x02\x02", "\u03A6\u03A8\x07\x19\x02\x02\u03A7\u03A9\x05\x8CG\x02", "\u03A8\u03A7\x03\x02\x02\x02\u03A8\u03A9\x03\x02\x02\x02", "\u03A9\u03AE\x03\x02\x02\x02\u03AA\u03AB\x07\x12\x02\x02", "\u03AB\u03AD\x05\x8CG\x02\u03AC\u03AA\x03\x02\x02\x02", "\u03AD\u03B0\x03\x02\x02\x02\u03AE\u03AC\x03\x02\x02\x02", "\u03AE\u03AF\x03\x02\x02\x02\u03AF\u03B1\x03\x02\x02\x02", "\u03B0\u03AE\x03\x02\x02\x02\u03B1\u03B3\x07\x1A\x02\x02", "\u03B2\u03A6\x03\x02\x02\x02\u03B2\u03B3\x03\x02\x02\x02", "\u03B3\x91\x03\x02\x02\x02\u03B4\u03B5\x07Y\x02\x02", "\u03B5\u03B8\x05\x96L\x02\u03B6\u03B7\x07Z\x02\x02\u03B7", "\u03B9\x05\x8CG\x02\u03B8\u03B6\x03\x02\x02\x02\u03B8", "\u03B9\x03\x02\x02\x02\u03B9\x93\x03\x02\x02\x02\u03BA", "\u03BB\x05\x96L\x02\u03BB\u03BC\x07Z\x02\x02\u03BC\u03BD", "\x05\x8CG\x02\u03BD\x95\x03\x02\x02\x02\u03BE\u03C5", "\x05\xB4[\x02\u03BF\u03C5\x05\x8EH\x02\u03C0\u03C1\x07", "\x19\x02\x02\u03C1\u03C2\x05\x98M\x02\u03C2\u03C3\x07", "\x1A\x02\x02\u03C3\u03C5\x03\x02\x02\x02\u03C4\u03BE\x03", "\x02\x02\x02\u03C4\u03BF\x03\x02\x02\x02\u03C4\u03C0\x03", "\x02\x02\x02\u03C5\x97\x03\x02\x02\x02\u03C6\u03CB\x05", "\xB4[\x02\u03C7\u03C8\x07\x12\x02\x02\u03C8\u03CA\x05", "\xB4[\x02\u03C9\u03C7\x03\x02\x02\x02\u03CA\u03CD\x03", "\x02\x02\x02\u03CB\u03C9\x03\x02\x02\x02\u03CB\u03CC\x03", "\x02\x02\x02\u03CC\x99\x03\x02\x02\x02\u03CD\u03CB\x03", "\x02\x02\x02\u03CE\u03CF\x07[\x02\x02\u03CF\u03D0\x05", "\xB4[\x02\u03D0\x9B\x03\x02\x02\x02\u03D1\u03D2\x05", "\xB4[\x02\u03D2\u03D3\x07>\x02\x02\u03D3\x9D\x03\x02", "\x02\x02\u03D4\u03D5\x07\\\x02\x02\u03D5\u03D9\x05\x8C", "G\x02\u03D6\u03D8\x05\xA0Q\x02\u03D7\u03D6\x03\x02\x02", "\x02\u03D8\u03DB\x03\x02\x02\x02\u03D9\u03D7\x03\x02\x02", "\x02\u03D9\u03DA\x03\x02\x02\x02\u03DA\x9F\x03\x02\x02", "\x02\u03DB\u03D9\x03\x02\x02\x02\u03DC\u03DD\x07]\x02", "\x02\u03DD\u03DE\x05\xAAV\x02\u03DE\u03DF\x05\x88E\x02", "\u03DF\u03E3\x03\x02\x02\x02\u03E0\u03E1\x07^\x02\x02", "\u03E1\u03E3\x05\x88E\x02\u03E2\u03DC\x03\x02\x02\x02", "\u03E2\u03E0\x03\x02\x02\x02\u03E3\xA1\x03\x02\x02\x02", "\u03E4\u03E5\x07\x1F\x02\x02\u03E5\u03E6\x05\xB4[\x02", "\u03E6\u03E8\x07\x19\x02\x02\u03E7\u03E9\x05\x98M\x02", "\u03E8\u03E7\x03\x02\x02\x02\u03E8\u03E9\x03\x02\x02\x02", "\u03E9\u03EA\x03\x02\x02\x02\u03EA\u03EC\x07\x1A\x02\x02", "\u03EB\u03ED\x05\xA4S\x02\u03EC\u03EB\x03\x02\x02\x02", "\u03EC\u03ED\x03\x02\x02\x02\u03ED\u03EE\x03\x02\x02\x02", "\u03EE\u03EF\x05\x88E\x02\u03EF\xA3\x03\x02\x02\x02", "\u03F0\u03F1\x07_\x02\x02\u03F1\u03F2\x05\x98M\x02\u03F2", "\xA5\x03\x02\x02\x02\u03F3\u03F6\x07\x1C\x02\x02\u03F4", "\u03F7\x05\x88E\x02\u03F5\u03F7\x05\x8CG\x02\u03F6\u03F4", "\x03\x02\x02\x02\u03F6\u03F5\x03\x02\x02\x02\u03F7\u03F8", "\x03\x02\x02\x02\u03F8\u03FB\x05\x8CG\x02\u03F9\u03FC", "\x05\x88E\x02\u03FA\u03FC\x05\x8CG\x02\u03FB\u03F9\x03", "\x02\x02\x02\u03FB\u03FA\x03\x02\x02\x02\u03FC\u03FD\x03", "\x02\x02\x02\u03FD\u03FE\x05\x88E\x02\u03FE\xA7\x03", "\x02\x02\x02\u03FF\u0400\x07,\x02\x02\u0400\u0401\x05", "\x8CG\x02\u0401\u0402\x05\x88E\x02\u0402\xA9\x03\x02", "\x02\x02\u0403\u0408\x05\xBA^\x02\u0404\u0408\x07h\x02", "\x02\u0405\u0408\x07i\x02\x02\u0406\u0408\x05\xB6\\\x02", "\u0407\u0403\x03\x02\x02\x02\u0407\u0404\x03\x02\x02\x02", "\u0407\u0405\x03\x02\x02\x02\u0407\u0406\x03\x02\x02\x02", "\u0408\xAB\x03\x02\x02\x02\u0409\u040A\x072\x02\x02", "\u040A\u040B\x05\xB4[\x02\u040B\u040C\x05\x88E\x02\u040C", "\xAD\x03\x02\x02\x02\u040D\u040F\x07\x19\x02\x02\u040E", "\u0410\x05z>\x02\u040F\u040E\x03\x02\x02\x02\u040F\u0410", "\x03\x02\x02\x02\u0410\u0417\x03\x02\x02\x02\u0411\u0413", "\x07\x12\x02\x02\u0412\u0414\x05z>\x02\u0413\u0412\x03", "\x02\x02\x02\u0413\u0414\x03\x02\x02\x02\u0414\u0416\x03", "\x02\x02\x02\u0415\u0411\x03\x02\x02\x02\u0416\u0419\x03", "\x02\x02\x02\u0417\u0415\x03\x02\x02\x02\u0417\u0418\x03", "\x02\x02\x02\u0418\u041A\x03\x02\x02\x02\u0419\u0417\x03", "\x02\x02\x02\u041A\u0428\x07\x1A\x02\x02\u041B\u0424\x07", "#\x02\x02\u041C\u0421\x05z>\x02\u041D\u041E\x07\x12\x02", "\x02\u041E\u0420\x05z>\x02\u041F\u041D\x03\x02\x02\x02", "\u0420\u0423\x03\x02\x02\x02\u0421\u041F\x03\x02\x02\x02", "\u0421\u0422\x03\x02\x02\x02\u0422\u0425\x03\x02\x02\x02", "\u0423\u0421\x03\x02\x02\x02\u0424\u041C\x03\x02\x02\x02", "\u0424\u0425\x03\x02\x02\x02\u0425\u0426\x03\x02\x02\x02", "\u0426\u0428\x07$\x02\x02\u0427\u040D\x03\x02\x02\x02", "\u0427\u041B\x03\x02\x02\x02\u0428\xAF\x03\x02\x02\x02", "\u0429\u042C\x05x=\x02\u042A\u042C\x05D#\x02\u042B\u0429\x03", "\x02\x02\x02\u042B\u042A\x03\x02\x02\x02\u042C\xB1\x03", "\x02\x02\x02\u042D\u042F\t\x0F\x02\x02\u042E\u0430\x07", "j\x02\x02\u042F\u042E\x03\x02\x02\x02\u042F\u0430\x03", "\x02\x02\x02\u0430\xB3\x03\x02\x02\x02\u0431\u0432\t", "\x10\x02\x02\u0432\xB5\x03\x02\x02\x02\u0433\u0435\x07", "k\x02\x02\u0434\u0433\x03\x02\x02\x02\u0435\u0436\x03", "\x02\x02\x02\u0436\u0434\x03\x02\x02\x02\u0436\u0437\x03", "\x02\x02\x02\u0437\xB7\x03\x02\x02\x02\u0438\u0444\x07", "a\x02\x02\u0439\u043A\x07\x19\x02\x02\u043A\u043F\x05", "D#\x02\u043B\u043C\x07\x12\x02\x02\u043C\u043E\x05D#\x02", "\u043D\u043B\x03\x02\x02\x02\u043E\u0441\x03\x02\x02\x02", "\u043F\u043D\x03\x02\x02\x02\u043F\u0440\x03\x02\x02\x02", "\u0440\u0442\x03\x02\x02\x02\u0441\u043F\x03\x02\x02\x02", "\u0442\u0443\x07\x1A\x02\x02\u0443\u0445\x03\x02\x02\x02", "\u0444\u0439\x03\x02\x02\x02\u0444\u0445\x03\x02\x02\x02", "\u0445\xB9\x03\x02\x02\x02\u0446\u0448\x07\x81\x02\x02", "\u0447\u0446\x03\x02\x02\x02\u0448\u0449\x03\x02\x02\x02", "\u0449\u0447\x03\x02\x02\x02\u0449\u044A\x03\x02\x02\x02", "\u044A\xBB\x03\x02\x02\x02\x80\xC3\xC5\xD3\xD7\xDC", "\xE2\xE6\xE9\xEE\xF4\xFA\xFE\u010A\u0112\u0115\u011F\u0122", "\u0128\u0130\u0133\u013C\u0145\u0147\u014D\u015D\u016B\u016E\u0175\u0179", "\u017B\u0183\u0186\u018C\u0190\u0194\u0199\u01A6\u01A8\u01AF\u01B9\u01BF", "\u01CA\u01CD\u01D3\u01D6\u01DE\u01E1\u01E7\u01EA\u01F2\u01F5\u01FB\u01FF", "\u020A\u020F\u0214\u021C\u0221\u022F\u0231\u0236\u0240\u0253\u025F\u0264", "\u026A\u026E\u0271\u027D\u0286\u028A\u028D\u0294\u02A8\u02BA\u02BE\u02C3", "\u02C7\u02CB\u02D0\u02D5\u02D9\u02F1\u0322\u0328\u032C\u033C\u033E\u0348", "\u0350\u0352\u0359\u0361\u0365\u036D\u0371\u0373\u037E\u0395\u039A\u03A4", "\u03A8\u03AE\u03B2\u03B8\u03C4\u03CB\u03D9\u03E2\u03E8\u03EC\u03F6\u03FB", "\u0407\u040F\u0413\u0417\u0421\u0424\u0427\u042B\u042F\u0436\u043F\u0444", "\u0449"].join("");
  var atn$3 = new antlr4.atn.ATNDeserializer().deserialize(serializedATN$1);
  var decisionsToDFA$1 = atn$3.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
  });
  var sharedContextCache = new antlr4.PredictionContextCache();

  var SolidityParser = /*#__PURE__*/function (_antlr4$Parser) {
    _inherits(SolidityParser, _antlr4$Parser);

    var _super = _createSuper(SolidityParser);

    function SolidityParser(input) {
      var _this;

      _classCallCheck(this, SolidityParser);

      _this = _super.call(this, input);
      _this._interp = new antlr4.atn.ParserATNSimulator(_assertThisInitialized(_this), atn$3, decisionsToDFA$1, sharedContextCache);
      _this.ruleNames = SolidityParser.ruleNames;
      _this.literalNames = SolidityParser.literalNames;
      _this.symbolicNames = SolidityParser.symbolicNames;
      return _this;
    }

    _createClass(SolidityParser, [{
      key: "sempred",
      value: function sempred(localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
          case 32:
            return this.typeName_sempred(localctx, predIndex);

          case 60:
            return this.expression_sempred(localctx, predIndex);

          default:
            throw "No predicate with index:" + ruleIndex;
        }
      }
    }, {
      key: "typeName_sempred",
      value: function typeName_sempred(localctx, predIndex) {
        switch (predIndex) {
          case 0:
            return this.precpred(this._ctx, 3);

          default:
            throw "No predicate with index:" + predIndex;
        }
      }
    }, {
      key: "expression_sempred",
      value: function expression_sempred(localctx, predIndex) {
        switch (predIndex) {
          case 1:
            return this.precpred(this._ctx, 14);

          case 2:
            return this.precpred(this._ctx, 13);

          case 3:
            return this.precpred(this._ctx, 12);

          case 4:
            return this.precpred(this._ctx, 11);

          case 5:
            return this.precpred(this._ctx, 10);

          case 6:
            return this.precpred(this._ctx, 9);

          case 7:
            return this.precpred(this._ctx, 8);

          case 8:
            return this.precpred(this._ctx, 7);

          case 9:
            return this.precpred(this._ctx, 6);

          case 10:
            return this.precpred(this._ctx, 5);

          case 11:
            return this.precpred(this._ctx, 4);

          case 12:
            return this.precpred(this._ctx, 3);

          case 13:
            return this.precpred(this._ctx, 2);

          case 14:
            return this.precpred(this._ctx, 27);

          case 15:
            return this.precpred(this._ctx, 25);

          case 16:
            return this.precpred(this._ctx, 24);

          case 17:
            return this.precpred(this._ctx, 23);

          case 18:
            return this.precpred(this._ctx, 22);

          case 19:
            return this.precpred(this._ctx, 21);

          default:
            throw "No predicate with index:" + predIndex;
        }
      }
    }, {
      key: "sourceUnit",
      value: function sourceUnit() {
        var localctx = new SourceUnitContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 195;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__0 | 1 << SolidityParser.T__11 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__17 | 1 << SolidityParser.T__18 | 1 << SolidityParser.T__19 | 1 << SolidityParser.T__20 | 1 << SolidityParser.T__26 | 1 << SolidityParser.T__28)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__34 - 32 | 1 << SolidityParser.T__36 - 32 | 1 << SolidityParser.T__40 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.Int - 94 | 1 << SolidityParser.Uint - 94 | 1 << SolidityParser.Byte - 94 | 1 << SolidityParser.Fixed - 94 | 1 << SolidityParser.Ufixed - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ConstructorKeyword - 94 | 1 << SolidityParser.FallbackKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 193;

            this._errHandler.sync(this);

            var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);

            switch (la_) {
              case 1:
                this.state = 186;
                this.pragmaDirective();
                break;

              case 2:
                this.state = 187;
                this.importDirective();
                break;

              case 3:
                this.state = 188;
                this.contractDefinition();
                break;

              case 4:
                this.state = 189;
                this.enumDefinition();
                break;

              case 5:
                this.state = 190;
                this.structDefinition();
                break;

              case 6:
                this.state = 191;
                this.functionDefinition();
                break;

              case 7:
                this.state = 192;
                this.fileLevelConstant();
                break;
            }

            this.state = 197;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 198;
          this.match(SolidityParser.EOF);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "pragmaDirective",
      value: function pragmaDirective() {
        var localctx = new PragmaDirectiveContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 200;
          this.match(SolidityParser.T__0);
          this.state = 201;
          this.pragmaName();
          this.state = 202;
          this.pragmaValue();
          this.state = 203;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "pragmaName",
      value: function pragmaName() {
        var localctx = new PragmaNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, SolidityParser.RULE_pragmaName);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 205;
          this.identifier();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "pragmaValue",
      value: function pragmaValue() {
        var localctx = new PragmaValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, SolidityParser.RULE_pragmaValue);

        try {
          this.state = 209;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);

          switch (la_) {
            case 1:
              this.enterOuterAlt(localctx, 1);
              this.state = 207;
              this.version();
              break;

            case 2:
              this.enterOuterAlt(localctx, 2);
              this.state = 208;
              this.expression(0);
              break;
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "version",
      value: function version() {
        var localctx = new VersionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, SolidityParser.RULE_version);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 211;
          this.versionConstraint();
          this.state = 218;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8 | 1 << SolidityParser.T__9)) !== 0 || _la === SolidityParser.DecimalNumber || _la === SolidityParser.VersionLiteral) {
            this.state = 213;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === SolidityParser.T__2) {
              this.state = 212;
              this.match(SolidityParser.T__2);
            }

            this.state = 215;
            this.versionConstraint();
            this.state = 220;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "versionOperator",
      value: function versionOperator() {
        var localctx = new VersionOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, SolidityParser.RULE_versionOperator);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 221;
          _la = this._input.LA(1);

          if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8 | 1 << SolidityParser.T__9)) !== 0)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);

            this.consume();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "versionConstraint",
      value: function versionConstraint() {
        var localctx = new VersionConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, SolidityParser.RULE_versionConstraint);
        var _la = 0; // Token type

        try {
          this.state = 231;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);

          switch (la_) {
            case 1:
              this.enterOuterAlt(localctx, 1);
              this.state = 224;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8 | 1 << SolidityParser.T__9)) !== 0) {
                this.state = 223;
                this.versionOperator();
              }

              this.state = 226;
              this.match(SolidityParser.VersionLiteral);
              break;

            case 2:
              this.enterOuterAlt(localctx, 2);
              this.state = 228;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8 | 1 << SolidityParser.T__9)) !== 0) {
                this.state = 227;
                this.versionOperator();
              }

              this.state = 230;
              this.match(SolidityParser.DecimalNumber);
              break;
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "importDeclaration",
      value: function importDeclaration() {
        var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 14, SolidityParser.RULE_importDeclaration);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 233;
          this.identifier();
          this.state = 236;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__10) {
            this.state = 234;
            this.match(SolidityParser.T__10);
            this.state = 235;
            this.identifier();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "importDirective",
      value: function importDirective() {
        var localctx = new ImportDirectiveContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, SolidityParser.RULE_importDirective);
        var _la = 0; // Token type

        try {
          this.state = 272;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 13, this._ctx);

          switch (la_) {
            case 1:
              this.enterOuterAlt(localctx, 1);
              this.state = 238;
              this.match(SolidityParser.T__11);
              this.state = 239;
              this.match(SolidityParser.StringLiteralFragment);
              this.state = 242;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === SolidityParser.T__10) {
                this.state = 240;
                this.match(SolidityParser.T__10);
                this.state = 241;
                this.identifier();
              }

              this.state = 244;
              this.match(SolidityParser.T__1);
              break;

            case 2:
              this.enterOuterAlt(localctx, 2);
              this.state = 245;
              this.match(SolidityParser.T__11);
              this.state = 248;

              this._errHandler.sync(this);

              switch (this._input.LA(1)) {
                case SolidityParser.T__12:
                  this.state = 246;
                  this.match(SolidityParser.T__12);
                  break;

                case SolidityParser.T__13:
                case SolidityParser.T__40:
                case SolidityParser.T__93:
                case SolidityParser.LeaveKeyword:
                case SolidityParser.PayableKeyword:
                case SolidityParser.ReceiveKeyword:
                case SolidityParser.Identifier:
                  this.state = 247;
                  this.identifier();
                  break;

                default:
                  throw new antlr4.error.NoViableAltException(this);
              }

              this.state = 252;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === SolidityParser.T__10) {
                this.state = 250;
                this.match(SolidityParser.T__10);
                this.state = 251;
                this.identifier();
              }

              this.state = 254;
              this.match(SolidityParser.T__13);
              this.state = 255;
              this.match(SolidityParser.StringLiteralFragment);
              this.state = 256;
              this.match(SolidityParser.T__1);
              break;

            case 3:
              this.enterOuterAlt(localctx, 3);
              this.state = 257;
              this.match(SolidityParser.T__11);
              this.state = 258;
              this.match(SolidityParser.T__14);
              this.state = 259;
              this.importDeclaration();
              this.state = 264;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              while (_la === SolidityParser.T__15) {
                this.state = 260;
                this.match(SolidityParser.T__15);
                this.state = 261;
                this.importDeclaration();
                this.state = 266;

                this._errHandler.sync(this);

                _la = this._input.LA(1);
              }

              this.state = 267;
              this.match(SolidityParser.T__16);
              this.state = 268;
              this.match(SolidityParser.T__13);
              this.state = 269;
              this.match(SolidityParser.StringLiteralFragment);
              this.state = 270;
              this.match(SolidityParser.T__1);
              break;
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "contractDefinition",
      value: function contractDefinition() {
        var localctx = new ContractDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, SolidityParser.RULE_contractDefinition);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 275;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__17) {
            this.state = 274;
            this.match(SolidityParser.T__17);
          }

          this.state = 277;
          _la = this._input.LA(1);

          if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__18 | 1 << SolidityParser.T__19 | 1 << SolidityParser.T__20)) !== 0)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);

            this.consume();
          }

          this.state = 278;
          this.identifier();
          this.state = 288;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__21) {
            this.state = 279;
            this.match(SolidityParser.T__21);
            this.state = 280;
            this.inheritanceSpecifier();
            this.state = 285;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while (_la === SolidityParser.T__15) {
              this.state = 281;
              this.match(SolidityParser.T__15);
              this.state = 282;
              this.inheritanceSpecifier();
              this.state = 287;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }
          }

          this.state = 290;
          this.match(SolidityParser.T__14);
          this.state = 294;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__13 | 1 << SolidityParser.T__24 | 1 << SolidityParser.T__26 | 1 << SolidityParser.T__27 | 1 << SolidityParser.T__28 | 1 << SolidityParser.T__30)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__34 - 32 | 1 << SolidityParser.T__36 - 32 | 1 << SolidityParser.T__40 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.Int - 94 | 1 << SolidityParser.Uint - 94 | 1 << SolidityParser.Byte - 94 | 1 << SolidityParser.Fixed - 94 | 1 << SolidityParser.Ufixed - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ConstructorKeyword - 94 | 1 << SolidityParser.FallbackKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 291;
            this.contractPart();
            this.state = 296;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 297;
          this.match(SolidityParser.T__16);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "inheritanceSpecifier",
      value: function inheritanceSpecifier() {
        var localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 299;
          this.userDefinedTypeName();
          this.state = 305;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__22) {
            this.state = 300;
            this.match(SolidityParser.T__22);
            this.state = 302;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
              this.state = 301;
              this.expressionList();
            }

            this.state = 304;
            this.match(SolidityParser.T__23);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "contractPart",
      value: function contractPart() {
        var localctx = new ContractPartContext(this, this._ctx, this.state);
        this.enterRule(localctx, 22, SolidityParser.RULE_contractPart);

        try {
          this.state = 314;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);

          switch (la_) {
            case 1:
              this.enterOuterAlt(localctx, 1);
              this.state = 307;
              this.stateVariableDeclaration();
              break;

            case 2:
              this.enterOuterAlt(localctx, 2);
              this.state = 308;
              this.usingForDeclaration();
              break;

            case 3:
              this.enterOuterAlt(localctx, 3);
              this.state = 309;
              this.structDefinition();
              break;

            case 4:
              this.enterOuterAlt(localctx, 4);
              this.state = 310;
              this.modifierDefinition();
              break;

            case 5:
              this.enterOuterAlt(localctx, 5);
              this.state = 311;
              this.functionDefinition();
              break;

            case 6:
              this.enterOuterAlt(localctx, 6);
              this.state = 312;
              this.eventDefinition();
              break;

            case 7:
              this.enterOuterAlt(localctx, 7);
              this.state = 313;
              this.enumDefinition();
              break;
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "stateVariableDeclaration",
      value: function stateVariableDeclaration() {
        var localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 24, SolidityParser.RULE_stateVariableDeclaration);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 316;
          this.typeName(0);
          this.state = 325;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while ((_la - 95 & ~0x1f) == 0 && (1 << _la - 95 & (1 << SolidityParser.T__94 - 95 | 1 << SolidityParser.ConstantKeyword - 95 | 1 << SolidityParser.ImmutableKeyword - 95 | 1 << SolidityParser.InternalKeyword - 95 | 1 << SolidityParser.PrivateKeyword - 95 | 1 << SolidityParser.PublicKeyword - 95)) !== 0) {
            this.state = 323;

            this._errHandler.sync(this);

            switch (this._input.LA(1)) {
              case SolidityParser.PublicKeyword:
                this.state = 317;
                this.match(SolidityParser.PublicKeyword);
                break;

              case SolidityParser.InternalKeyword:
                this.state = 318;
                this.match(SolidityParser.InternalKeyword);
                break;

              case SolidityParser.PrivateKeyword:
                this.state = 319;
                this.match(SolidityParser.PrivateKeyword);
                break;

              case SolidityParser.ConstantKeyword:
                this.state = 320;
                this.match(SolidityParser.ConstantKeyword);
                break;

              case SolidityParser.ImmutableKeyword:
                this.state = 321;
                this.match(SolidityParser.ImmutableKeyword);
                break;

              case SolidityParser.T__94:
                this.state = 322;
                this.overrideSpecifier();
                break;

              default:
                throw new antlr4.error.NoViableAltException(this);
            }

            this.state = 327;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 328;
          this.identifier();
          this.state = 331;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__9) {
            this.state = 329;
            this.match(SolidityParser.T__9);
            this.state = 330;
            this.expression(0);
          }

          this.state = 333;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "fileLevelConstant",
      value: function fileLevelConstant() {
        var localctx = new FileLevelConstantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 26, SolidityParser.RULE_fileLevelConstant);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 335;
          this.typeName(0);
          this.state = 336;
          this.match(SolidityParser.ConstantKeyword);
          this.state = 337;
          this.identifier();
          this.state = 338;
          this.match(SolidityParser.T__9);
          this.state = 339;
          this.expression(0);
          this.state = 340;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "usingForDeclaration",
      value: function usingForDeclaration() {
        var localctx = new UsingForDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 28, SolidityParser.RULE_usingForDeclaration);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 342;
          this.match(SolidityParser.T__24);
          this.state = 343;
          this.identifier();
          this.state = 344;
          this.match(SolidityParser.T__25);
          this.state = 347;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__12:
              this.state = 345;
              this.match(SolidityParser.T__12);
              break;

            case SolidityParser.T__13:
            case SolidityParser.T__28:
            case SolidityParser.T__34:
            case SolidityParser.T__36:
            case SolidityParser.T__40:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.T__93:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
              this.state = 346;
              this.typeName(0);
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }

          this.state = 349;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "structDefinition",
      value: function structDefinition() {
        var localctx = new StructDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 30, SolidityParser.RULE_structDefinition);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 351;
          this.match(SolidityParser.T__26);
          this.state = 352;
          this.identifier();
          this.state = 353;
          this.match(SolidityParser.T__14);
          this.state = 364;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__28 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__36 - 35 | 1 << SolidityParser.T__40 - 35 | 1 << SolidityParser.T__52 - 35 | 1 << SolidityParser.T__53 - 35 | 1 << SolidityParser.T__54 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.Int - 94 | 1 << SolidityParser.Uint - 94 | 1 << SolidityParser.Byte - 94 | 1 << SolidityParser.Fixed - 94 | 1 << SolidityParser.Ufixed - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 354;
            this.variableDeclaration();
            this.state = 355;
            this.match(SolidityParser.T__1);
            this.state = 361;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while (_la === SolidityParser.T__13 || _la === SolidityParser.T__28 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__36 - 35 | 1 << SolidityParser.T__40 - 35 | 1 << SolidityParser.T__52 - 35 | 1 << SolidityParser.T__53 - 35 | 1 << SolidityParser.T__54 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.Int - 94 | 1 << SolidityParser.Uint - 94 | 1 << SolidityParser.Byte - 94 | 1 << SolidityParser.Fixed - 94 | 1 << SolidityParser.Ufixed - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
              this.state = 356;
              this.variableDeclaration();
              this.state = 357;
              this.match(SolidityParser.T__1);
              this.state = 363;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }
          }

          this.state = 366;
          this.match(SolidityParser.T__16);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "modifierDefinition",
      value: function modifierDefinition() {
        var localctx = new ModifierDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 32, SolidityParser.RULE_modifierDefinition);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 368;
          this.match(SolidityParser.T__27);
          this.state = 369;
          this.identifier();
          this.state = 371;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__22) {
            this.state = 370;
            this.parameterList();
          }

          this.state = 377;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__94 || _la === SolidityParser.VirtualKeyword) {
            this.state = 375;

            this._errHandler.sync(this);

            switch (this._input.LA(1)) {
              case SolidityParser.VirtualKeyword:
                this.state = 373;
                this.match(SolidityParser.VirtualKeyword);
                break;

              case SolidityParser.T__94:
                this.state = 374;
                this.overrideSpecifier();
                break;

              default:
                throw new antlr4.error.NoViableAltException(this);
            }

            this.state = 379;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 380;
          this.block();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "modifierInvocation",
      value: function modifierInvocation() {
        var localctx = new ModifierInvocationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 34, SolidityParser.RULE_modifierInvocation);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 382;
          this.identifier();
          this.state = 388;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__22) {
            this.state = 383;
            this.match(SolidityParser.T__22);
            this.state = 385;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
              this.state = 384;
              this.expressionList();
            }

            this.state = 387;
            this.match(SolidityParser.T__23);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "functionDefinition",
      value: function functionDefinition() {
        var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, SolidityParser.RULE_functionDefinition);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 390;
          this.functionDescriptor();
          this.state = 391;
          this.parameterList();
          this.state = 392;
          this.modifierList();
          this.state = 394;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__29) {
            this.state = 393;
            this.returnParameters();
          }

          this.state = 398;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__1:
              this.state = 396;
              this.match(SolidityParser.T__1);
              break;

            case SolidityParser.T__14:
              this.state = 397;
              this.block();
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "functionDescriptor",
      value: function functionDescriptor() {
        var localctx = new FunctionDescriptorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 38, SolidityParser.RULE_functionDescriptor);
        var _la = 0; // Token type

        try {
          this.state = 407;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__28:
              this.enterOuterAlt(localctx, 1);
              this.state = 400;
              this.match(SolidityParser.T__28);
              this.state = 402;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
                this.state = 401;
                this.identifier();
              }

              break;

            case SolidityParser.ConstructorKeyword:
              this.enterOuterAlt(localctx, 2);
              this.state = 404;
              this.match(SolidityParser.ConstructorKeyword);
              break;

            case SolidityParser.FallbackKeyword:
              this.enterOuterAlt(localctx, 3);
              this.state = 405;
              this.match(SolidityParser.FallbackKeyword);
              break;

            case SolidityParser.ReceiveKeyword:
              this.enterOuterAlt(localctx, 4);
              this.state = 406;
              this.match(SolidityParser.ReceiveKeyword);
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "returnParameters",
      value: function returnParameters() {
        var localctx = new ReturnParametersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 40, SolidityParser.RULE_returnParameters);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 409;
          this.match(SolidityParser.T__29);
          this.state = 410;
          this.parameterList();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "modifierList",
      value: function modifierList() {
        var localctx = new ModifierListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 42, SolidityParser.RULE_modifierList);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 422;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.T__94 - 94 | 1 << SolidityParser.ConstantKeyword - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.ExternalKeyword - 94 | 1 << SolidityParser.InternalKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.PrivateKeyword - 94 | 1 << SolidityParser.PublicKeyword - 94 | 1 << SolidityParser.VirtualKeyword - 94 | 1 << SolidityParser.PureKeyword - 94 | 1 << SolidityParser.ViewKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 420;

            this._errHandler.sync(this);

            var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);

            switch (la_) {
              case 1:
                this.state = 412;
                this.match(SolidityParser.ExternalKeyword);
                break;

              case 2:
                this.state = 413;
                this.match(SolidityParser.PublicKeyword);
                break;

              case 3:
                this.state = 414;
                this.match(SolidityParser.InternalKeyword);
                break;

              case 4:
                this.state = 415;
                this.match(SolidityParser.PrivateKeyword);
                break;

              case 5:
                this.state = 416;
                this.match(SolidityParser.VirtualKeyword);
                break;

              case 6:
                this.state = 417;
                this.stateMutability();
                break;

              case 7:
                this.state = 418;
                this.modifierInvocation();
                break;

              case 8:
                this.state = 419;
                this.overrideSpecifier();
                break;
            }

            this.state = 424;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "eventDefinition",
      value: function eventDefinition() {
        var localctx = new EventDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 44, SolidityParser.RULE_eventDefinition);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 425;
          this.match(SolidityParser.T__30);
          this.state = 426;
          this.identifier();
          this.state = 427;
          this.eventParameterList();
          this.state = 429;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.AnonymousKeyword) {
            this.state = 428;
            this.match(SolidityParser.AnonymousKeyword);
          }

          this.state = 431;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "enumValue",
      value: function enumValue() {
        var localctx = new EnumValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 46, SolidityParser.RULE_enumValue);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 433;
          this.identifier();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "enumDefinition",
      value: function enumDefinition() {
        var localctx = new EnumDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 48, SolidityParser.RULE_enumDefinition);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 435;
          this.match(SolidityParser.T__31);
          this.state = 436;
          this.identifier();
          this.state = 437;
          this.match(SolidityParser.T__14);
          this.state = 439;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 438;
            this.enumValue();
          }

          this.state = 445;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__15) {
            this.state = 441;
            this.match(SolidityParser.T__15);
            this.state = 442;
            this.enumValue();
            this.state = 447;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 448;
          this.match(SolidityParser.T__16);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "parameterList",
      value: function parameterList() {
        var localctx = new ParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 50, SolidityParser.RULE_parameterList);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 450;
          this.match(SolidityParser.T__22);
          this.state = 459;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__28 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__36 - 35 | 1 << SolidityParser.T__40 - 35 | 1 << SolidityParser.T__52 - 35 | 1 << SolidityParser.T__53 - 35 | 1 << SolidityParser.T__54 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.Int - 94 | 1 << SolidityParser.Uint - 94 | 1 << SolidityParser.Byte - 94 | 1 << SolidityParser.Fixed - 94 | 1 << SolidityParser.Ufixed - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 451;
            this.parameter();
            this.state = 456;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while (_la === SolidityParser.T__15) {
              this.state = 452;
              this.match(SolidityParser.T__15);
              this.state = 453;
              this.parameter();
              this.state = 458;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }
          }

          this.state = 461;
          this.match(SolidityParser.T__23);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "parameter",
      value: function parameter() {
        var localctx = new ParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 52, SolidityParser.RULE_parameter);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 463;
          this.typeName(0);
          this.state = 465;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 43, this._ctx);

          if (la_ === 1) {
            this.state = 464;
            this.storageLocation();
          }

          this.state = 468;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 467;
            this.identifier();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "eventParameterList",
      value: function eventParameterList() {
        var localctx = new EventParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 54, SolidityParser.RULE_eventParameterList);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 470;
          this.match(SolidityParser.T__22);
          this.state = 479;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__28 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__36 - 35 | 1 << SolidityParser.T__40 - 35 | 1 << SolidityParser.T__52 - 35 | 1 << SolidityParser.T__53 - 35 | 1 << SolidityParser.T__54 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.Int - 94 | 1 << SolidityParser.Uint - 94 | 1 << SolidityParser.Byte - 94 | 1 << SolidityParser.Fixed - 94 | 1 << SolidityParser.Ufixed - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 471;
            this.eventParameter();
            this.state = 476;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while (_la === SolidityParser.T__15) {
              this.state = 472;
              this.match(SolidityParser.T__15);
              this.state = 473;
              this.eventParameter();
              this.state = 478;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }
          }

          this.state = 481;
          this.match(SolidityParser.T__23);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "eventParameter",
      value: function eventParameter() {
        var localctx = new EventParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 56, SolidityParser.RULE_eventParameter);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 483;
          this.typeName(0);
          this.state = 485;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.IndexedKeyword) {
            this.state = 484;
            this.match(SolidityParser.IndexedKeyword);
          }

          this.state = 488;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 487;
            this.identifier();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "functionTypeParameterList",
      value: function functionTypeParameterList() {
        var localctx = new FunctionTypeParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 58, SolidityParser.RULE_functionTypeParameterList);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 490;
          this.match(SolidityParser.T__22);
          this.state = 499;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__28 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__36 - 35 | 1 << SolidityParser.T__40 - 35 | 1 << SolidityParser.T__52 - 35 | 1 << SolidityParser.T__53 - 35 | 1 << SolidityParser.T__54 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.Int - 94 | 1 << SolidityParser.Uint - 94 | 1 << SolidityParser.Byte - 94 | 1 << SolidityParser.Fixed - 94 | 1 << SolidityParser.Ufixed - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 491;
            this.functionTypeParameter();
            this.state = 496;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while (_la === SolidityParser.T__15) {
              this.state = 492;
              this.match(SolidityParser.T__15);
              this.state = 493;
              this.functionTypeParameter();
              this.state = 498;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }
          }

          this.state = 501;
          this.match(SolidityParser.T__23);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "functionTypeParameter",
      value: function functionTypeParameter() {
        var localctx = new FunctionTypeParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 60, SolidityParser.RULE_functionTypeParameter);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 503;
          this.typeName(0);
          this.state = 505;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la - 39 & ~0x1f) == 0 && (1 << _la - 39 & (1 << SolidityParser.T__38 - 39 | 1 << SolidityParser.T__39 - 39 | 1 << SolidityParser.T__40 - 39)) !== 0) {
            this.state = 504;
            this.storageLocation();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "variableDeclaration",
      value: function variableDeclaration() {
        var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 62, SolidityParser.RULE_variableDeclaration);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 507;
          this.typeName(0);
          this.state = 509;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 52, this._ctx);

          if (la_ === 1) {
            this.state = 508;
            this.storageLocation();
          }

          this.state = 511;
          this.identifier();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "typeName",
      value: function typeName(_p) {
        if (_p === undefined) {
          _p = 0;
        }

        var _parentctx = this._ctx;
        var _parentState = this.state;
        var localctx = new TypeNameContext(this, this._ctx, _parentState);
        var _prevctx = localctx;
        var _startState = 64;
        this.enterRecursionRule(localctx, 64, SolidityParser.RULE_typeName, _p);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 520;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 53, this._ctx);

          switch (la_) {
            case 1:
              this.state = 514;
              this.elementaryTypeName();
              break;

            case 2:
              this.state = 515;
              this.userDefinedTypeName();
              break;

            case 3:
              this.state = 516;
              this.mapping();
              break;

            case 4:
              this.state = 517;
              this.functionTypeName();
              break;

            case 5:
              this.state = 518;
              this.match(SolidityParser.T__34);
              this.state = 519;
              this.match(SolidityParser.PayableKeyword);
              break;
          }

          this._ctx.stop = this._input.LT(-1);
          this.state = 530;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);

          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              if (this._parseListeners !== null) {
                this.triggerExitRuleEvent();
              }

              _prevctx = localctx;
              localctx = new TypeNameContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);
              this.state = 522;

              if (!this.precpred(this._ctx, 3)) {
                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
              }

              this.state = 523;
              this.match(SolidityParser.T__32);
              this.state = 525;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
                this.state = 524;
                this.expression(0);
              }

              this.state = 527;
              this.match(SolidityParser.T__33);
            }

            this.state = 532;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
          }
        } catch (error) {
          if (error instanceof antlr4.error.RecognitionException) {
            localctx.exception = error;

            this._errHandler.reportError(this, error);

            this._errHandler.recover(this, error);
          } else {
            throw error;
          }
        } finally {
          this.unrollRecursionContexts(_parentctx);
        }

        return localctx;
      }
    }, {
      key: "userDefinedTypeName",
      value: function userDefinedTypeName() {
        var localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 66, SolidityParser.RULE_userDefinedTypeName);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 533;
          this.identifier();
          this.state = 538;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 56, this._ctx);

          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 534;
              this.match(SolidityParser.T__35);
              this.state = 535;
              this.identifier();
            }

            this.state = 540;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 56, this._ctx);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "mappingKey",
      value: function mappingKey() {
        var localctx = new MappingKeyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 68, SolidityParser.RULE_mappingKey);

        try {
          this.state = 543;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__34:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
              this.enterOuterAlt(localctx, 1);
              this.state = 541;
              this.elementaryTypeName();
              break;

            case SolidityParser.T__13:
            case SolidityParser.T__40:
            case SolidityParser.T__93:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
              this.enterOuterAlt(localctx, 2);
              this.state = 542;
              this.userDefinedTypeName();
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "mapping",
      value: function mapping() {
        var localctx = new MappingContext(this, this._ctx, this.state);
        this.enterRule(localctx, 70, SolidityParser.RULE_mapping);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 545;
          this.match(SolidityParser.T__36);
          this.state = 546;
          this.match(SolidityParser.T__22);
          this.state = 547;
          this.mappingKey();
          this.state = 548;
          this.match(SolidityParser.T__37);
          this.state = 549;
          this.typeName(0);
          this.state = 550;
          this.match(SolidityParser.T__23);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "functionTypeName",
      value: function functionTypeName() {
        var localctx = new FunctionTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 72, SolidityParser.RULE_functionTypeName);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 552;
          this.match(SolidityParser.T__28);
          this.state = 553;
          this.functionTypeParameterList();
          this.state = 559;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);

          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 557;

              this._errHandler.sync(this);

              switch (this._input.LA(1)) {
                case SolidityParser.InternalKeyword:
                  this.state = 554;
                  this.match(SolidityParser.InternalKeyword);
                  break;

                case SolidityParser.ExternalKeyword:
                  this.state = 555;
                  this.match(SolidityParser.ExternalKeyword);
                  break;

                case SolidityParser.ConstantKeyword:
                case SolidityParser.PayableKeyword:
                case SolidityParser.PureKeyword:
                case SolidityParser.ViewKeyword:
                  this.state = 556;
                  this.stateMutability();
                  break;

                default:
                  throw new antlr4.error.NoViableAltException(this);
              }
            }

            this.state = 561;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
          }

          this.state = 564;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 60, this._ctx);

          if (la_ === 1) {
            this.state = 562;
            this.match(SolidityParser.T__29);
            this.state = 563;
            this.functionTypeParameterList();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "storageLocation",
      value: function storageLocation() {
        var localctx = new StorageLocationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 74, SolidityParser.RULE_storageLocation);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 566;
          _la = this._input.LA(1);

          if (!((_la - 39 & ~0x1f) == 0 && (1 << _la - 39 & (1 << SolidityParser.T__38 - 39 | 1 << SolidityParser.T__39 - 39 | 1 << SolidityParser.T__40 - 39)) !== 0)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);

            this.consume();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "stateMutability",
      value: function stateMutability() {
        var localctx = new StateMutabilityContext(this, this._ctx, this.state);
        this.enterRule(localctx, 76, SolidityParser.RULE_stateMutability);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 568;
          _la = this._input.LA(1);

          if (!((_la - 109 & ~0x1f) == 0 && (1 << _la - 109 & (1 << SolidityParser.ConstantKeyword - 109 | 1 << SolidityParser.PayableKeyword - 109 | 1 << SolidityParser.PureKeyword - 109 | 1 << SolidityParser.ViewKeyword - 109)) !== 0)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);

            this.consume();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "block",
      value: function block() {
        var localctx = new BlockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 78, SolidityParser.RULE_block);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 570;
          this.match(SolidityParser.T__14);
          this.state = 574;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__14 | 1 << SolidityParser.T__22 | 1 << SolidityParser.T__25 | 1 << SolidityParser.T__28)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__36 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__41 - 33 | 1 << SolidityParser.T__43 - 33 | 1 << SolidityParser.T__45 - 33 | 1 << SolidityParser.T__46 - 33 | 1 << SolidityParser.T__47 - 33 | 1 << SolidityParser.T__48 - 33 | 1 << SolidityParser.T__49 - 33 | 1 << SolidityParser.T__50 - 33 | 1 << SolidityParser.T__51 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.BreakKeyword - 97 | 1 << SolidityParser.ContinueKeyword - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
            this.state = 571;
            this.statement();
            this.state = 576;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 577;
          this.match(SolidityParser.T__16);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "statement",
      value: function statement() {
        var localctx = new StatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 80, SolidityParser.RULE_statement);

        try {
          this.state = 593;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__41:
              this.enterOuterAlt(localctx, 1);
              this.state = 579;
              this.ifStatement();
              break;

            case SolidityParser.T__43:
              this.enterOuterAlt(localctx, 2);
              this.state = 580;
              this.tryStatement();
              break;

            case SolidityParser.T__45:
              this.enterOuterAlt(localctx, 3);
              this.state = 581;
              this.whileStatement();
              break;

            case SolidityParser.T__25:
              this.enterOuterAlt(localctx, 4);
              this.state = 582;
              this.forStatement();
              break;

            case SolidityParser.T__14:
              this.enterOuterAlt(localctx, 5);
              this.state = 583;
              this.block();
              break;

            case SolidityParser.T__47:
              this.enterOuterAlt(localctx, 6);
              this.state = 584;
              this.inlineAssemblyStatement();
              break;

            case SolidityParser.T__48:
              this.enterOuterAlt(localctx, 7);
              this.state = 585;
              this.doWhileStatement();
              break;

            case SolidityParser.ContinueKeyword:
              this.enterOuterAlt(localctx, 8);
              this.state = 586;
              this.continueStatement();
              break;

            case SolidityParser.BreakKeyword:
              this.enterOuterAlt(localctx, 9);
              this.state = 587;
              this.breakStatement();
              break;

            case SolidityParser.T__49:
              this.enterOuterAlt(localctx, 10);
              this.state = 588;
              this.returnStatement();
              break;

            case SolidityParser.T__50:
              this.enterOuterAlt(localctx, 11);
              this.state = 589;
              this.throwStatement();
              break;

            case SolidityParser.T__51:
              this.enterOuterAlt(localctx, 12);
              this.state = 590;
              this.emitStatement();
              break;

            case SolidityParser.T__4:
            case SolidityParser.T__13:
            case SolidityParser.T__22:
            case SolidityParser.T__28:
            case SolidityParser.T__32:
            case SolidityParser.T__34:
            case SolidityParser.T__36:
            case SolidityParser.T__40:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.T__56:
            case SolidityParser.T__57:
            case SolidityParser.T__58:
            case SolidityParser.T__60:
            case SolidityParser.T__61:
            case SolidityParser.T__62:
            case SolidityParser.T__63:
            case SolidityParser.T__64:
            case SolidityParser.T__93:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.BooleanLiteral:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteralFragment:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.TypeKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
              this.enterOuterAlt(localctx, 13);
              this.state = 591;
              this.simpleStatement();
              break;

            case SolidityParser.T__46:
              this.enterOuterAlt(localctx, 14);
              this.state = 592;
              this.uncheckedStatement();
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "expressionStatement",
      value: function expressionStatement() {
        var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 82, SolidityParser.RULE_expressionStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 595;
          this.expression(0);
          this.state = 596;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "ifStatement",
      value: function ifStatement() {
        var localctx = new IfStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 84, SolidityParser.RULE_ifStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 598;
          this.match(SolidityParser.T__41);
          this.state = 599;
          this.match(SolidityParser.T__22);
          this.state = 600;
          this.expression(0);
          this.state = 601;
          this.match(SolidityParser.T__23);
          this.state = 602;
          this.statement();
          this.state = 605;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);

          if (la_ === 1) {
            this.state = 603;
            this.match(SolidityParser.T__42);
            this.state = 604;
            this.statement();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "tryStatement",
      value: function tryStatement() {
        var localctx = new TryStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 86, SolidityParser.RULE_tryStatement);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 607;
          this.match(SolidityParser.T__43);
          this.state = 608;
          this.expression(0);
          this.state = 610;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__29) {
            this.state = 609;
            this.returnParameters();
          }

          this.state = 612;
          this.block();
          this.state = 614;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          do {
            this.state = 613;
            this.catchClause();
            this.state = 616;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          } while (_la === SolidityParser.T__44);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "catchClause",
      value: function catchClause() {
        var localctx = new CatchClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 88, SolidityParser.RULE_catchClause);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 618;
          this.match(SolidityParser.T__44);
          this.state = 623;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la - 14 & ~0x1f) == 0 && (1 << _la - 14 & (1 << SolidityParser.T__13 - 14 | 1 << SolidityParser.T__22 - 14 | 1 << SolidityParser.T__40 - 14)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 620;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
              this.state = 619;
              this.identifier();
            }

            this.state = 622;
            this.parameterList();
          }

          this.state = 625;
          this.block();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "whileStatement",
      value: function whileStatement() {
        var localctx = new WhileStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 90, SolidityParser.RULE_whileStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 627;
          this.match(SolidityParser.T__45);
          this.state = 628;
          this.match(SolidityParser.T__22);
          this.state = 629;
          this.expression(0);
          this.state = 630;
          this.match(SolidityParser.T__23);
          this.state = 631;
          this.statement();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "simpleStatement",
      value: function simpleStatement() {
        var localctx = new SimpleStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 92, SolidityParser.RULE_simpleStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 635;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);

          switch (la_) {
            case 1:
              this.state = 633;
              this.variableDeclarationStatement();
              break;

            case 2:
              this.state = 634;
              this.expressionStatement();
              break;
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "uncheckedStatement",
      value: function uncheckedStatement() {
        var localctx = new UncheckedStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 94, SolidityParser.RULE_uncheckedStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 637;
          this.match(SolidityParser.T__46);
          this.state = 638;
          this.block();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "forStatement",
      value: function forStatement() {
        var localctx = new ForStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 96, SolidityParser.RULE_forStatement);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 640;
          this.match(SolidityParser.T__25);
          this.state = 641;
          this.match(SolidityParser.T__22);
          this.state = 644;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__4:
            case SolidityParser.T__13:
            case SolidityParser.T__22:
            case SolidityParser.T__28:
            case SolidityParser.T__32:
            case SolidityParser.T__34:
            case SolidityParser.T__36:
            case SolidityParser.T__40:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.T__56:
            case SolidityParser.T__57:
            case SolidityParser.T__58:
            case SolidityParser.T__60:
            case SolidityParser.T__61:
            case SolidityParser.T__62:
            case SolidityParser.T__63:
            case SolidityParser.T__64:
            case SolidityParser.T__93:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.BooleanLiteral:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteralFragment:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.TypeKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
              this.state = 642;
              this.simpleStatement();
              break;

            case SolidityParser.T__1:
              this.state = 643;
              this.match(SolidityParser.T__1);
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }

          this.state = 648;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__4:
            case SolidityParser.T__13:
            case SolidityParser.T__22:
            case SolidityParser.T__32:
            case SolidityParser.T__34:
            case SolidityParser.T__40:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.T__56:
            case SolidityParser.T__57:
            case SolidityParser.T__58:
            case SolidityParser.T__60:
            case SolidityParser.T__61:
            case SolidityParser.T__62:
            case SolidityParser.T__63:
            case SolidityParser.T__64:
            case SolidityParser.T__93:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.BooleanLiteral:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteralFragment:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.TypeKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
              this.state = 646;
              this.expressionStatement();
              break;

            case SolidityParser.T__1:
              this.state = 647;
              this.match(SolidityParser.T__1);
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }

          this.state = 651;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
            this.state = 650;
            this.expression(0);
          }

          this.state = 653;
          this.match(SolidityParser.T__23);
          this.state = 654;
          this.statement();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "inlineAssemblyStatement",
      value: function inlineAssemblyStatement() {
        var localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 98, SolidityParser.RULE_inlineAssemblyStatement);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 656;
          this.match(SolidityParser.T__47);
          this.state = 658;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.StringLiteralFragment) {
            this.state = 657;
            this.match(SolidityParser.StringLiteralFragment);
          }

          this.state = 660;
          this.assemblyBlock();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "doWhileStatement",
      value: function doWhileStatement() {
        var localctx = new DoWhileStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 100, SolidityParser.RULE_doWhileStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 662;
          this.match(SolidityParser.T__48);
          this.state = 663;
          this.statement();
          this.state = 664;
          this.match(SolidityParser.T__45);
          this.state = 665;
          this.match(SolidityParser.T__22);
          this.state = 666;
          this.expression(0);
          this.state = 667;
          this.match(SolidityParser.T__23);
          this.state = 668;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "continueStatement",
      value: function continueStatement() {
        var localctx = new ContinueStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 102, SolidityParser.RULE_continueStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 670;
          this.match(SolidityParser.ContinueKeyword);
          this.state = 671;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "breakStatement",
      value: function breakStatement() {
        var localctx = new BreakStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 104, SolidityParser.RULE_breakStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 673;
          this.match(SolidityParser.BreakKeyword);
          this.state = 674;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "returnStatement",
      value: function returnStatement() {
        var localctx = new ReturnStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 106, SolidityParser.RULE_returnStatement);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 676;
          this.match(SolidityParser.T__49);
          this.state = 678;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
            this.state = 677;
            this.expression(0);
          }

          this.state = 680;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "throwStatement",
      value: function throwStatement() {
        var localctx = new ThrowStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 108, SolidityParser.RULE_throwStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 682;
          this.match(SolidityParser.T__50);
          this.state = 683;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "emitStatement",
      value: function emitStatement() {
        var localctx = new EmitStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 110, SolidityParser.RULE_emitStatement);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 685;
          this.match(SolidityParser.T__51);
          this.state = 686;
          this.functionCall();
          this.state = 687;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "variableDeclarationStatement",
      value: function variableDeclarationStatement() {
        var localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 112, SolidityParser.RULE_variableDeclarationStatement);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 696;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 74, this._ctx);

          switch (la_) {
            case 1:
              this.state = 689;
              this.match(SolidityParser.T__52);
              this.state = 690;
              this.identifierList();
              break;

            case 2:
              this.state = 691;
              this.variableDeclaration();
              break;

            case 3:
              this.state = 692;
              this.match(SolidityParser.T__22);
              this.state = 693;
              this.variableDeclarationList();
              this.state = 694;
              this.match(SolidityParser.T__23);
              break;
          }

          this.state = 700;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__9) {
            this.state = 698;
            this.match(SolidityParser.T__9);
            this.state = 699;
            this.expression(0);
          }

          this.state = 702;
          this.match(SolidityParser.T__1);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "variableDeclarationList",
      value: function variableDeclarationList() {
        var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 114, SolidityParser.RULE_variableDeclarationList);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 705;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__28 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__36 - 35 | 1 << SolidityParser.T__40 - 35 | 1 << SolidityParser.T__52 - 35 | 1 << SolidityParser.T__53 - 35 | 1 << SolidityParser.T__54 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.Int - 94 | 1 << SolidityParser.Uint - 94 | 1 << SolidityParser.Byte - 94 | 1 << SolidityParser.Fixed - 94 | 1 << SolidityParser.Ufixed - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 704;
            this.variableDeclaration();
          }

          this.state = 713;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__15) {
            this.state = 707;
            this.match(SolidityParser.T__15);
            this.state = 709;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === SolidityParser.T__13 || _la === SolidityParser.T__28 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__36 - 35 | 1 << SolidityParser.T__40 - 35 | 1 << SolidityParser.T__52 - 35 | 1 << SolidityParser.T__53 - 35 | 1 << SolidityParser.T__54 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.Int - 94 | 1 << SolidityParser.Uint - 94 | 1 << SolidityParser.Byte - 94 | 1 << SolidityParser.Fixed - 94 | 1 << SolidityParser.Ufixed - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
              this.state = 708;
              this.variableDeclaration();
            }

            this.state = 715;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "identifierList",
      value: function identifierList() {
        var localctx = new IdentifierListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 116, SolidityParser.RULE_identifierList);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 716;
          this.match(SolidityParser.T__22);
          this.state = 723;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 80, this._ctx);

          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 718;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
                this.state = 717;
                this.identifier();
              }

              this.state = 720;
              this.match(SolidityParser.T__15);
            }

            this.state = 725;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 80, this._ctx);
          }

          this.state = 727;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 726;
            this.identifier();
          }

          this.state = 729;
          this.match(SolidityParser.T__23);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "elementaryTypeName",
      value: function elementaryTypeName() {
        var localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 118, SolidityParser.RULE_elementaryTypeName);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 731;
          _la = this._input.LA(1);

          if (!((_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__52 - 35 | 1 << SolidityParser.T__53 - 35 | 1 << SolidityParser.T__54 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 96 & ~0x1f) == 0 && (1 << _la - 96 & (1 << SolidityParser.Int - 96 | 1 << SolidityParser.Uint - 96 | 1 << SolidityParser.Byte - 96 | 1 << SolidityParser.Fixed - 96 | 1 << SolidityParser.Ufixed - 96)) !== 0)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);

            this.consume();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "expression",
      value: function expression(_p) {
        if (_p === undefined) {
          _p = 0;
        }

        var _parentctx = this._ctx;
        var _parentState = this.state;
        var localctx = new ExpressionContext(this, this._ctx, _parentState);
        var _prevctx = localctx;
        var _startState = 120;
        this.enterRecursionRule(localctx, 120, SolidityParser.RULE_expression, _p);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 751;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);

          switch (la_) {
            case 1:
              this.state = 734;
              this.match(SolidityParser.T__58);
              this.state = 735;
              this.typeName(0);
              break;

            case 2:
              this.state = 736;
              this.match(SolidityParser.T__22);
              this.state = 737;
              this.expression(0);
              this.state = 738;
              this.match(SolidityParser.T__23);
              break;

            case 3:
              this.state = 740;
              _la = this._input.LA(1);

              if (!(_la === SolidityParser.T__56 || _la === SolidityParser.T__57)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 741;
              this.expression(19);
              break;

            case 4:
              this.state = 742;
              _la = this._input.LA(1);

              if (!(_la === SolidityParser.T__60 || _la === SolidityParser.T__61)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 743;
              this.expression(18);
              break;

            case 5:
              this.state = 744;
              _la = this._input.LA(1);

              if (!(_la === SolidityParser.T__62 || _la === SolidityParser.T__63)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 745;
              this.expression(17);
              break;

            case 6:
              this.state = 746;
              this.match(SolidityParser.T__64);
              this.state = 747;
              this.expression(16);
              break;

            case 7:
              this.state = 748;
              this.match(SolidityParser.T__4);
              this.state = 749;
              this.expression(15);
              break;

            case 8:
              this.state = 750;
              this.primaryExpression();
              break;
          }

          this._ctx.stop = this._input.LT(-1);
          this.state = 828;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);

          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              if (this._parseListeners !== null) {
                this.triggerExitRuleEvent();
              }

              _prevctx = localctx;
              this.state = 826;

              this._errHandler.sync(this);

              var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);

              switch (la_) {
                case 1:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 753;

                  if (!this.precpred(this._ctx, 14)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                  }

                  this.state = 754;
                  this.match(SolidityParser.T__65);
                  this.state = 755;
                  this.expression(15);
                  break;

                case 2:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 756;

                  if (!this.precpred(this._ctx, 13)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                  }

                  this.state = 757;
                  _la = this._input.LA(1);

                  if (!(_la === SolidityParser.T__12 || _la === SolidityParser.T__66 || _la === SolidityParser.T__67)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);

                    this.consume();
                  }

                  this.state = 758;
                  this.expression(14);
                  break;

                case 3:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 759;

                  if (!this.precpred(this._ctx, 12)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                  }

                  this.state = 760;
                  _la = this._input.LA(1);

                  if (!(_la === SolidityParser.T__60 || _la === SolidityParser.T__61)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);

                    this.consume();
                  }

                  this.state = 761;
                  this.expression(13);
                  break;

                case 4:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 762;

                  if (!this.precpred(this._ctx, 11)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                  }

                  this.state = 763;
                  _la = this._input.LA(1);

                  if (!(_la === SolidityParser.T__68 || _la === SolidityParser.T__69)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);

                    this.consume();
                  }

                  this.state = 764;
                  this.expression(12);
                  break;

                case 5:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 765;

                  if (!this.precpred(this._ctx, 10)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                  }

                  this.state = 766;
                  this.match(SolidityParser.T__70);
                  this.state = 767;
                  this.expression(11);
                  break;

                case 6:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 768;

                  if (!this.precpred(this._ctx, 9)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                  }

                  this.state = 769;
                  this.match(SolidityParser.T__3);
                  this.state = 770;
                  this.expression(10);
                  break;

                case 7:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 771;

                  if (!this.precpred(this._ctx, 8)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                  }

                  this.state = 772;
                  this.match(SolidityParser.T__71);
                  this.state = 773;
                  this.expression(9);
                  break;

                case 8:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 774;

                  if (!this.precpred(this._ctx, 7)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                  }

                  this.state = 775;
                  _la = this._input.LA(1);

                  if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);

                    this.consume();
                  }

                  this.state = 776;
                  this.expression(8);
                  break;

                case 9:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 777;

                  if (!this.precpred(this._ctx, 6)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                  }

                  this.state = 778;
                  _la = this._input.LA(1);

                  if (!(_la === SolidityParser.T__72 || _la === SolidityParser.T__73)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);

                    this.consume();
                  }

                  this.state = 779;
                  this.expression(7);
                  break;

                case 10:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 780;

                  if (!this.precpred(this._ctx, 5)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                  }

                  this.state = 781;
                  this.match(SolidityParser.T__74);
                  this.state = 782;
                  this.expression(6);
                  break;

                case 11:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 783;

                  if (!this.precpred(this._ctx, 4)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                  }

                  this.state = 784;
                  this.match(SolidityParser.T__2);
                  this.state = 785;
                  this.expression(5);
                  break;

                case 12:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 786;

                  if (!this.precpred(this._ctx, 3)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                  }

                  this.state = 787;
                  this.match(SolidityParser.T__75);
                  this.state = 788;
                  this.expression(0);
                  this.state = 789;
                  this.match(SolidityParser.T__59);
                  this.state = 790;
                  this.expression(4);
                  break;

                case 13:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 792;

                  if (!this.precpred(this._ctx, 2)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                  }

                  this.state = 793;
                  _la = this._input.LA(1);

                  if (!(_la === SolidityParser.T__9 || (_la - 77 & ~0x1f) == 0 && (1 << _la - 77 & (1 << SolidityParser.T__76 - 77 | 1 << SolidityParser.T__77 - 77 | 1 << SolidityParser.T__78 - 77 | 1 << SolidityParser.T__79 - 77 | 1 << SolidityParser.T__80 - 77 | 1 << SolidityParser.T__81 - 77 | 1 << SolidityParser.T__82 - 77 | 1 << SolidityParser.T__83 - 77 | 1 << SolidityParser.T__84 - 77 | 1 << SolidityParser.T__85 - 77)) !== 0)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);

                    this.consume();
                  }

                  this.state = 794;
                  this.expression(3);
                  break;

                case 14:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 795;

                  if (!this.precpred(this._ctx, 27)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                  }

                  this.state = 796;
                  _la = this._input.LA(1);

                  if (!(_la === SolidityParser.T__56 || _la === SolidityParser.T__57)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);

                    this.consume();
                  }

                  break;

                case 15:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 797;

                  if (!this.precpred(this._ctx, 25)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                  }

                  this.state = 798;
                  this.match(SolidityParser.T__32);
                  this.state = 800;

                  this._errHandler.sync(this);

                  _la = this._input.LA(1);

                  if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
                    this.state = 799;
                    this.expression(0);
                  }

                  this.state = 802;
                  this.match(SolidityParser.T__33);
                  break;

                case 16:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 803;

                  if (!this.precpred(this._ctx, 24)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                  }

                  this.state = 804;
                  this.match(SolidityParser.T__32);
                  this.state = 806;

                  this._errHandler.sync(this);

                  _la = this._input.LA(1);

                  if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
                    this.state = 805;
                    this.expression(0);
                  }

                  this.state = 808;
                  this.match(SolidityParser.T__59);
                  this.state = 810;

                  this._errHandler.sync(this);

                  _la = this._input.LA(1);

                  if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
                    this.state = 809;
                    this.expression(0);
                  }

                  this.state = 812;
                  this.match(SolidityParser.T__33);
                  break;

                case 17:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 813;

                  if (!this.precpred(this._ctx, 23)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                  }

                  this.state = 814;
                  this.match(SolidityParser.T__35);
                  this.state = 815;
                  this.identifier();
                  break;

                case 18:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 816;

                  if (!this.precpred(this._ctx, 22)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                  }

                  this.state = 817;
                  this.match(SolidityParser.T__14);
                  this.state = 818;
                  this.nameValueList();
                  this.state = 819;
                  this.match(SolidityParser.T__16);
                  break;

                case 19:
                  localctx = new ExpressionContext(this, _parentctx, _parentState);
                  this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                  this.state = 821;

                  if (!this.precpred(this._ctx, 21)) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                  }

                  this.state = 822;
                  this.match(SolidityParser.T__22);
                  this.state = 823;
                  this.functionCallArguments();
                  this.state = 824;
                  this.match(SolidityParser.T__23);
                  break;
              }
            }

            this.state = 830;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
          }
        } catch (error) {
          if (error instanceof antlr4.error.RecognitionException) {
            localctx.exception = error;

            this._errHandler.reportError(this, error);

            this._errHandler.recover(this, error);
          } else {
            throw error;
          }
        } finally {
          this.unrollRecursionContexts(_parentctx);
        }

        return localctx;
      }
    }, {
      key: "primaryExpression",
      value: function primaryExpression() {
        var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 122, SolidityParser.RULE_primaryExpression);

        try {
          this.state = 848;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);

          switch (la_) {
            case 1:
              this.enterOuterAlt(localctx, 1);
              this.state = 831;
              this.match(SolidityParser.BooleanLiteral);
              break;

            case 2:
              this.enterOuterAlt(localctx, 2);
              this.state = 832;
              this.numberLiteral();
              break;

            case 3:
              this.enterOuterAlt(localctx, 3);
              this.state = 833;
              this.hexLiteral();
              break;

            case 4:
              this.enterOuterAlt(localctx, 4);
              this.state = 834;
              this.stringLiteral();
              break;

            case 5:
              this.enterOuterAlt(localctx, 5);
              this.state = 835;
              this.identifier();
              this.state = 838;

              this._errHandler.sync(this);

              var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);

              if (la_ === 1) {
                this.state = 836;
                this.match(SolidityParser.T__32);
                this.state = 837;
                this.match(SolidityParser.T__33);
              }

              break;

            case 6:
              this.enterOuterAlt(localctx, 6);
              this.state = 840;
              this.match(SolidityParser.TypeKeyword);
              break;

            case 7:
              this.enterOuterAlt(localctx, 7);
              this.state = 841;
              this.match(SolidityParser.PayableKeyword);
              break;

            case 8:
              this.enterOuterAlt(localctx, 8);
              this.state = 842;
              this.tupleExpression();
              break;

            case 9:
              this.enterOuterAlt(localctx, 9);
              this.state = 843;
              this.typeNameExpression();
              this.state = 846;

              this._errHandler.sync(this);

              var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);

              if (la_ === 1) {
                this.state = 844;
                this.match(SolidityParser.T__32);
                this.state = 845;
                this.match(SolidityParser.T__33);
              }

              break;
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "expressionList",
      value: function expressionList() {
        var localctx = new ExpressionListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 124, SolidityParser.RULE_expressionList);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 850;
          this.expression(0);
          this.state = 855;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__15) {
            this.state = 851;
            this.match(SolidityParser.T__15);
            this.state = 852;
            this.expression(0);
            this.state = 857;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "nameValueList",
      value: function nameValueList() {
        var localctx = new NameValueListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 126, SolidityParser.RULE_nameValueList);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 858;
          this.nameValue();
          this.state = 863;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);

          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 859;
              this.match(SolidityParser.T__15);
              this.state = 860;
              this.nameValue();
            }

            this.state = 865;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
          }

          this.state = 867;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__15) {
            this.state = 866;
            this.match(SolidityParser.T__15);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "nameValue",
      value: function nameValue() {
        var localctx = new NameValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 128, SolidityParser.RULE_nameValue);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 869;
          this.identifier();
          this.state = 870;
          this.match(SolidityParser.T__59);
          this.state = 871;
          this.expression(0);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "functionCallArguments",
      value: function functionCallArguments() {
        var localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 130, SolidityParser.RULE_functionCallArguments);
        var _la = 0; // Token type

        try {
          this.state = 881;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__14:
              this.enterOuterAlt(localctx, 1);
              this.state = 873;
              this.match(SolidityParser.T__14);
              this.state = 875;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
                this.state = 874;
                this.nameValueList();
              }

              this.state = 877;
              this.match(SolidityParser.T__16);
              break;

            case SolidityParser.T__4:
            case SolidityParser.T__13:
            case SolidityParser.T__22:
            case SolidityParser.T__23:
            case SolidityParser.T__32:
            case SolidityParser.T__34:
            case SolidityParser.T__40:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.T__56:
            case SolidityParser.T__57:
            case SolidityParser.T__58:
            case SolidityParser.T__60:
            case SolidityParser.T__61:
            case SolidityParser.T__62:
            case SolidityParser.T__63:
            case SolidityParser.T__64:
            case SolidityParser.T__93:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
            case SolidityParser.BooleanLiteral:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteralFragment:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.TypeKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
              this.enterOuterAlt(localctx, 2);
              this.state = 879;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
                this.state = 878;
                this.expressionList();
              }

              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "functionCall",
      value: function functionCall() {
        var localctx = new FunctionCallContext(this, this._ctx, this.state);
        this.enterRule(localctx, 132, SolidityParser.RULE_functionCall);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 883;
          this.expression(0);
          this.state = 884;
          this.match(SolidityParser.T__22);
          this.state = 885;
          this.functionCallArguments();
          this.state = 886;
          this.match(SolidityParser.T__23);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyBlock",
      value: function assemblyBlock() {
        var localctx = new AssemblyBlockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 134, SolidityParser.RULE_assemblyBlock);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 888;
          this.match(SolidityParser.T__14);
          this.state = 892;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__13 | 1 << SolidityParser.T__14 | 1 << SolidityParser.T__22 | 1 << SolidityParser.T__25 | 1 << SolidityParser.T__28)) !== 0 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__40 - 35 | 1 << SolidityParser.T__41 - 35 | 1 << SolidityParser.T__47 - 35 | 1 << SolidityParser.T__49 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 87 & ~0x1f) == 0 && (1 << _la - 87 & (1 << SolidityParser.T__86 - 87 | 1 << SolidityParser.T__88 - 87 | 1 << SolidityParser.T__89 - 87 | 1 << SolidityParser.T__93 - 87 | 1 << SolidityParser.DecimalNumber - 87 | 1 << SolidityParser.HexNumber - 87 | 1 << SolidityParser.HexLiteralFragment - 87 | 1 << SolidityParser.BreakKeyword - 87 | 1 << SolidityParser.ContinueKeyword - 87 | 1 << SolidityParser.LeaveKeyword - 87 | 1 << SolidityParser.PayableKeyword - 87)) !== 0 || (_la - 125 & ~0x1f) == 0 && (1 << _la - 125 & (1 << SolidityParser.ReceiveKeyword - 125 | 1 << SolidityParser.Identifier - 125 | 1 << SolidityParser.StringLiteralFragment - 125)) !== 0) {
            this.state = 889;
            this.assemblyItem();
            this.state = 894;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 895;
          this.match(SolidityParser.T__16);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyItem",
      value: function assemblyItem() {
        var localctx = new AssemblyItemContext(this, this._ctx, this.state);
        this.enterRule(localctx, 136, SolidityParser.RULE_assemblyItem);

        try {
          this.state = 915;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);

          switch (la_) {
            case 1:
              this.enterOuterAlt(localctx, 1);
              this.state = 897;
              this.identifier();
              break;

            case 2:
              this.enterOuterAlt(localctx, 2);
              this.state = 898;
              this.assemblyBlock();
              break;

            case 3:
              this.enterOuterAlt(localctx, 3);
              this.state = 899;
              this.assemblyExpression();
              break;

            case 4:
              this.enterOuterAlt(localctx, 4);
              this.state = 900;
              this.assemblyLocalDefinition();
              break;

            case 5:
              this.enterOuterAlt(localctx, 5);
              this.state = 901;
              this.assemblyAssignment();
              break;

            case 6:
              this.enterOuterAlt(localctx, 6);
              this.state = 902;
              this.assemblyStackAssignment();
              break;

            case 7:
              this.enterOuterAlt(localctx, 7);
              this.state = 903;
              this.labelDefinition();
              break;

            case 8:
              this.enterOuterAlt(localctx, 8);
              this.state = 904;
              this.assemblySwitch();
              break;

            case 9:
              this.enterOuterAlt(localctx, 9);
              this.state = 905;
              this.assemblyFunctionDefinition();
              break;

            case 10:
              this.enterOuterAlt(localctx, 10);
              this.state = 906;
              this.assemblyFor();
              break;

            case 11:
              this.enterOuterAlt(localctx, 11);
              this.state = 907;
              this.assemblyIf();
              break;

            case 12:
              this.enterOuterAlt(localctx, 12);
              this.state = 908;
              this.match(SolidityParser.BreakKeyword);
              break;

            case 13:
              this.enterOuterAlt(localctx, 13);
              this.state = 909;
              this.match(SolidityParser.ContinueKeyword);
              break;

            case 14:
              this.enterOuterAlt(localctx, 14);
              this.state = 910;
              this.match(SolidityParser.LeaveKeyword);
              break;

            case 15:
              this.enterOuterAlt(localctx, 15);
              this.state = 911;
              this.subAssembly();
              break;

            case 16:
              this.enterOuterAlt(localctx, 16);
              this.state = 912;
              this.numberLiteral();
              break;

            case 17:
              this.enterOuterAlt(localctx, 17);
              this.state = 913;
              this.stringLiteral();
              break;

            case 18:
              this.enterOuterAlt(localctx, 18);
              this.state = 914;
              this.hexLiteral();
              break;
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyExpression",
      value: function assemblyExpression() {
        var localctx = new AssemblyExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 138, SolidityParser.RULE_assemblyExpression);

        try {
          this.state = 920;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 99, this._ctx);

          switch (la_) {
            case 1:
              this.enterOuterAlt(localctx, 1);
              this.state = 917;
              this.assemblyCall();
              break;

            case 2:
              this.enterOuterAlt(localctx, 2);
              this.state = 918;
              this.assemblyLiteral();
              break;

            case 3:
              this.enterOuterAlt(localctx, 3);
              this.state = 919;
              this.assemblyMember();
              break;
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyMember",
      value: function assemblyMember() {
        var localctx = new AssemblyMemberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 140, SolidityParser.RULE_assemblyMember);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 922;
          this.identifier();
          this.state = 923;
          this.match(SolidityParser.T__35);
          this.state = 924;
          this.identifier();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyCall",
      value: function assemblyCall() {
        var localctx = new AssemblyCallContext(this, this._ctx, this.state);
        this.enterRule(localctx, 142, SolidityParser.RULE_assemblyCall);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 930;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__49:
              this.state = 926;
              this.match(SolidityParser.T__49);
              break;

            case SolidityParser.T__34:
              this.state = 927;
              this.match(SolidityParser.T__34);
              break;

            case SolidityParser.T__55:
              this.state = 928;
              this.match(SolidityParser.T__55);
              break;

            case SolidityParser.T__13:
            case SolidityParser.T__40:
            case SolidityParser.T__93:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
              this.state = 929;
              this.identifier();
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }

          this.state = 944;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);

          if (la_ === 1) {
            this.state = 932;
            this.match(SolidityParser.T__22);
            this.state = 934;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === SolidityParser.T__13 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << SolidityParser.T__34 - 35 | 1 << SolidityParser.T__40 - 35 | 1 << SolidityParser.T__49 - 35 | 1 << SolidityParser.T__55 - 35)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.DecimalNumber - 94 | 1 << SolidityParser.HexNumber - 94 | 1 << SolidityParser.HexLiteralFragment - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
              this.state = 933;
              this.assemblyExpression();
            }

            this.state = 940;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while (_la === SolidityParser.T__15) {
              this.state = 936;
              this.match(SolidityParser.T__15);
              this.state = 937;
              this.assemblyExpression();
              this.state = 942;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }

            this.state = 943;
            this.match(SolidityParser.T__23);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyLocalDefinition",
      value: function assemblyLocalDefinition() {
        var localctx = new AssemblyLocalDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 144, SolidityParser.RULE_assemblyLocalDefinition);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 946;
          this.match(SolidityParser.T__86);
          this.state = 947;
          this.assemblyIdentifierOrList();
          this.state = 950;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__87) {
            this.state = 948;
            this.match(SolidityParser.T__87);
            this.state = 949;
            this.assemblyExpression();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyAssignment",
      value: function assemblyAssignment() {
        var localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 146, SolidityParser.RULE_assemblyAssignment);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 952;
          this.assemblyIdentifierOrList();
          this.state = 953;
          this.match(SolidityParser.T__87);
          this.state = 954;
          this.assemblyExpression();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyIdentifierOrList",
      value: function assemblyIdentifierOrList() {
        var localctx = new AssemblyIdentifierOrListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 148, SolidityParser.RULE_assemblyIdentifierOrList);

        try {
          this.state = 962;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 105, this._ctx);

          switch (la_) {
            case 1:
              this.enterOuterAlt(localctx, 1);
              this.state = 956;
              this.identifier();
              break;

            case 2:
              this.enterOuterAlt(localctx, 2);
              this.state = 957;
              this.assemblyMember();
              break;

            case 3:
              this.enterOuterAlt(localctx, 3);
              this.state = 958;
              this.match(SolidityParser.T__22);
              this.state = 959;
              this.assemblyIdentifierList();
              this.state = 960;
              this.match(SolidityParser.T__23);
              break;
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyIdentifierList",
      value: function assemblyIdentifierList() {
        var localctx = new AssemblyIdentifierListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 150, SolidityParser.RULE_assemblyIdentifierList);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 964;
          this.identifier();
          this.state = 969;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__15) {
            this.state = 965;
            this.match(SolidityParser.T__15);
            this.state = 966;
            this.identifier();
            this.state = 971;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyStackAssignment",
      value: function assemblyStackAssignment() {
        var localctx = new AssemblyStackAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 152, SolidityParser.RULE_assemblyStackAssignment);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 972;
          this.match(SolidityParser.T__88);
          this.state = 973;
          this.identifier();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "labelDefinition",
      value: function labelDefinition() {
        var localctx = new LabelDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 154, SolidityParser.RULE_labelDefinition);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 975;
          this.identifier();
          this.state = 976;
          this.match(SolidityParser.T__59);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblySwitch",
      value: function assemblySwitch() {
        var localctx = new AssemblySwitchContext(this, this._ctx, this.state);
        this.enterRule(localctx, 156, SolidityParser.RULE_assemblySwitch);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 978;
          this.match(SolidityParser.T__89);
          this.state = 979;
          this.assemblyExpression();
          this.state = 983;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__90 || _la === SolidityParser.T__91) {
            this.state = 980;
            this.assemblyCase();
            this.state = 985;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyCase",
      value: function assemblyCase() {
        var localctx = new AssemblyCaseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 158, SolidityParser.RULE_assemblyCase);

        try {
          this.state = 992;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__90:
              this.enterOuterAlt(localctx, 1);
              this.state = 986;
              this.match(SolidityParser.T__90);
              this.state = 987;
              this.assemblyLiteral();
              this.state = 988;
              this.assemblyBlock();
              break;

            case SolidityParser.T__91:
              this.enterOuterAlt(localctx, 2);
              this.state = 990;
              this.match(SolidityParser.T__91);
              this.state = 991;
              this.assemblyBlock();
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyFunctionDefinition",
      value: function assemblyFunctionDefinition() {
        var localctx = new AssemblyFunctionDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 160, SolidityParser.RULE_assemblyFunctionDefinition);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 994;
          this.match(SolidityParser.T__28);
          this.state = 995;
          this.identifier();
          this.state = 996;
          this.match(SolidityParser.T__22);
          this.state = 998;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 997;
            this.assemblyIdentifierList();
          }

          this.state = 1000;
          this.match(SolidityParser.T__23);
          this.state = 1002;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__92) {
            this.state = 1001;
            this.assemblyFunctionReturns();
          }

          this.state = 1004;
          this.assemblyBlock();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyFunctionReturns",
      value: function assemblyFunctionReturns() {
        var localctx = new AssemblyFunctionReturnsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 162, SolidityParser.RULE_assemblyFunctionReturns);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 1006;
          this.match(SolidityParser.T__92);
          this.state = 1007;
          this.assemblyIdentifierList();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyFor",
      value: function assemblyFor() {
        var localctx = new AssemblyForContext(this, this._ctx, this.state);
        this.enterRule(localctx, 164, SolidityParser.RULE_assemblyFor);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 1009;
          this.match(SolidityParser.T__25);
          this.state = 1012;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__14:
              this.state = 1010;
              this.assemblyBlock();
              break;

            case SolidityParser.T__13:
            case SolidityParser.T__34:
            case SolidityParser.T__40:
            case SolidityParser.T__49:
            case SolidityParser.T__55:
            case SolidityParser.T__93:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteralFragment:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
              this.state = 1011;
              this.assemblyExpression();
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }

          this.state = 1014;
          this.assemblyExpression();
          this.state = 1017;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__14:
              this.state = 1015;
              this.assemblyBlock();
              break;

            case SolidityParser.T__13:
            case SolidityParser.T__34:
            case SolidityParser.T__40:
            case SolidityParser.T__49:
            case SolidityParser.T__55:
            case SolidityParser.T__93:
            case SolidityParser.DecimalNumber:
            case SolidityParser.HexNumber:
            case SolidityParser.HexLiteralFragment:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
            case SolidityParser.StringLiteralFragment:
              this.state = 1016;
              this.assemblyExpression();
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }

          this.state = 1019;
          this.assemblyBlock();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyIf",
      value: function assemblyIf() {
        var localctx = new AssemblyIfContext(this, this._ctx, this.state);
        this.enterRule(localctx, 166, SolidityParser.RULE_assemblyIf);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 1021;
          this.match(SolidityParser.T__41);
          this.state = 1022;
          this.assemblyExpression();
          this.state = 1023;
          this.assemblyBlock();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "assemblyLiteral",
      value: function assemblyLiteral() {
        var localctx = new AssemblyLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 168, SolidityParser.RULE_assemblyLiteral);

        try {
          this.state = 1029;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.StringLiteralFragment:
              this.enterOuterAlt(localctx, 1);
              this.state = 1025;
              this.stringLiteral();
              break;

            case SolidityParser.DecimalNumber:
              this.enterOuterAlt(localctx, 2);
              this.state = 1026;
              this.match(SolidityParser.DecimalNumber);
              break;

            case SolidityParser.HexNumber:
              this.enterOuterAlt(localctx, 3);
              this.state = 1027;
              this.match(SolidityParser.HexNumber);
              break;

            case SolidityParser.HexLiteralFragment:
              this.enterOuterAlt(localctx, 4);
              this.state = 1028;
              this.hexLiteral();
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "subAssembly",
      value: function subAssembly() {
        var localctx = new SubAssemblyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 170, SolidityParser.RULE_subAssembly);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 1031;
          this.match(SolidityParser.T__47);
          this.state = 1032;
          this.identifier();
          this.state = 1033;
          this.assemblyBlock();
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "tupleExpression",
      value: function tupleExpression() {
        var localctx = new TupleExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 172, SolidityParser.RULE_tupleExpression);
        var _la = 0; // Token type

        try {
          this.state = 1061;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__22:
              this.enterOuterAlt(localctx, 1);
              this.state = 1035;
              this.match(SolidityParser.T__22);
              this.state = 1037;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
                this.state = 1036;
                this.expression(0);
              }

              this.state = 1045;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              while (_la === SolidityParser.T__15) {
                this.state = 1039;
                this.match(SolidityParser.T__15);
                this.state = 1041;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
                  this.state = 1040;
                  this.expression(0);
                }

                this.state = 1047;

                this._errHandler.sync(this);

                _la = this._input.LA(1);
              }

              this.state = 1048;
              this.match(SolidityParser.T__23);
              break;

            case SolidityParser.T__32:
              this.enterOuterAlt(localctx, 2);
              this.state = 1049;
              this.match(SolidityParser.T__32);
              this.state = 1058;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__22)) !== 0 || (_la - 33 & ~0x1f) == 0 && (1 << _la - 33 & (1 << SolidityParser.T__32 - 33 | 1 << SolidityParser.T__34 - 33 | 1 << SolidityParser.T__40 - 33 | 1 << SolidityParser.T__52 - 33 | 1 << SolidityParser.T__53 - 33 | 1 << SolidityParser.T__54 - 33 | 1 << SolidityParser.T__55 - 33 | 1 << SolidityParser.T__56 - 33 | 1 << SolidityParser.T__57 - 33 | 1 << SolidityParser.T__58 - 33 | 1 << SolidityParser.T__60 - 33 | 1 << SolidityParser.T__61 - 33 | 1 << SolidityParser.T__62 - 33 | 1 << SolidityParser.T__63 - 33)) !== 0 || (_la - 65 & ~0x1f) == 0 && (1 << _la - 65 & (1 << SolidityParser.T__64 - 65 | 1 << SolidityParser.T__93 - 65 | 1 << SolidityParser.Int - 65)) !== 0 || (_la - 97 & ~0x1f) == 0 && (1 << _la - 97 & (1 << SolidityParser.Uint - 97 | 1 << SolidityParser.Byte - 97 | 1 << SolidityParser.Fixed - 97 | 1 << SolidityParser.Ufixed - 97 | 1 << SolidityParser.BooleanLiteral - 97 | 1 << SolidityParser.DecimalNumber - 97 | 1 << SolidityParser.HexNumber - 97 | 1 << SolidityParser.HexLiteralFragment - 97 | 1 << SolidityParser.LeaveKeyword - 97 | 1 << SolidityParser.PayableKeyword - 97 | 1 << SolidityParser.TypeKeyword - 97 | 1 << SolidityParser.ReceiveKeyword - 97 | 1 << SolidityParser.Identifier - 97 | 1 << SolidityParser.StringLiteralFragment - 97)) !== 0) {
                this.state = 1050;
                this.expression(0);
                this.state = 1055;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                while (_la === SolidityParser.T__15) {
                  this.state = 1051;
                  this.match(SolidityParser.T__15);
                  this.state = 1052;
                  this.expression(0);
                  this.state = 1057;

                  this._errHandler.sync(this);

                  _la = this._input.LA(1);
                }
              }

              this.state = 1060;
              this.match(SolidityParser.T__33);
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "typeNameExpression",
      value: function typeNameExpression() {
        var localctx = new TypeNameExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 174, SolidityParser.RULE_typeNameExpression);

        try {
          this.state = 1065;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.T__34:
            case SolidityParser.T__52:
            case SolidityParser.T__53:
            case SolidityParser.T__54:
            case SolidityParser.T__55:
            case SolidityParser.Int:
            case SolidityParser.Uint:
            case SolidityParser.Byte:
            case SolidityParser.Fixed:
            case SolidityParser.Ufixed:
              this.enterOuterAlt(localctx, 1);
              this.state = 1063;
              this.elementaryTypeName();
              break;

            case SolidityParser.T__13:
            case SolidityParser.T__40:
            case SolidityParser.T__93:
            case SolidityParser.LeaveKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.ReceiveKeyword:
            case SolidityParser.Identifier:
              this.enterOuterAlt(localctx, 2);
              this.state = 1064;
              this.userDefinedTypeName();
              break;

            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "numberLiteral",
      value: function numberLiteral() {
        var localctx = new NumberLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 176, SolidityParser.RULE_numberLiteral);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 1067;
          _la = this._input.LA(1);

          if (!(_la === SolidityParser.DecimalNumber || _la === SolidityParser.HexNumber)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);

            this.consume();
          }

          this.state = 1069;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 121, this._ctx);

          if (la_ === 1) {
            this.state = 1068;
            this.match(SolidityParser.NumberUnit);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "identifier",
      value: function identifier() {
        var localctx = new IdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 178, SolidityParser.RULE_identifier);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 1071;
          _la = this._input.LA(1);

          if (!(_la === SolidityParser.T__13 || _la === SolidityParser.T__40 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.LeaveKeyword - 94 | 1 << SolidityParser.PayableKeyword - 94 | 1 << SolidityParser.ReceiveKeyword - 94)) !== 0 || _la === SolidityParser.Identifier)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);

            this.consume();
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "hexLiteral",
      value: function hexLiteral() {
        var localctx = new HexLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 180, SolidityParser.RULE_hexLiteral);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 1074;

          this._errHandler.sync(this);

          var _alt = 1;

          do {
            switch (_alt) {
              case 1:
                this.state = 1073;
                this.match(SolidityParser.HexLiteralFragment);
                break;

              default:
                throw new antlr4.error.NoViableAltException(this);
            }

            this.state = 1076;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 122, this._ctx);
          } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "overrideSpecifier",
      value: function overrideSpecifier() {
        var localctx = new OverrideSpecifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 182, SolidityParser.RULE_overrideSpecifier);
        var _la = 0; // Token type

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 1078;
          this.match(SolidityParser.T__94);
          this.state = 1090;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__22) {
            this.state = 1079;
            this.match(SolidityParser.T__22);
            this.state = 1080;
            this.userDefinedTypeName();
            this.state = 1085;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while (_la === SolidityParser.T__15) {
              this.state = 1081;
              this.match(SolidityParser.T__15);
              this.state = 1082;
              this.userDefinedTypeName();
              this.state = 1087;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }

            this.state = 1088;
            this.match(SolidityParser.T__23);
          }
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "stringLiteral",
      value: function stringLiteral() {
        var localctx = new StringLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 184, SolidityParser.RULE_stringLiteral);

        try {
          this.enterOuterAlt(localctx, 1);
          this.state = 1093;

          this._errHandler.sync(this);

          var _alt = 1;

          do {
            switch (_alt) {
              case 1:
                this.state = 1092;
                this.match(SolidityParser.StringLiteralFragment);
                break;

              default:
                throw new antlr4.error.NoViableAltException(this);
            }

            this.state = 1095;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 125, this._ctx);
          } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
        } catch (re) {
          if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;

            this._errHandler.reportError(this, re);

            this._errHandler.recover(this, re);
          } else {
            throw re;
          }
        } finally {
          this.exitRule();
        }

        return localctx;
      }
    }, {
      key: "atn",
      get: function get() {
        return atn$3;
      }
    }]);

    return SolidityParser;
  }(antlr4.Parser);

  _defineProperty(SolidityParser, "grammarFileName", "Solidity.g4");

  _defineProperty(SolidityParser, "literalNames", [null, "'pragma'", "';'", "'||'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", "'interface'", "'library'", "'is'", "'('", "')'", "'using'", "'for'", "'struct'", "'modifier'", "'function'", "'returns'", "'event'", "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'try'", "'catch'", "'while'", "'unchecked'", "'assembly'", "'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", "'&&'", "'?'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", "'->'", "'callback'", "'override'", null, null, null, null, null, null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", "'immutable'", "'continue'", "'leave'", "'external'", "'indexed'", "'internal'", "'payable'", "'private'", "'public'", "'virtual'", "'pure'", "'type'", "'view'", "'constructor'", "'fallback'", "'receive'"]);

  _defineProperty(SolidityParser, "symbolicNames", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Int", "Uint", "Byte", "Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", "HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", "PrivateKeyword", "PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", "Identifier", "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", "LINE_COMMENT"]);

  _defineProperty(SolidityParser, "ruleNames", ["sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", "versionOperator", "versionConstraint", "importDeclaration", "importDirective", "contractDefinition", "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", "fileLevelConstant", "usingForDeclaration", "structDefinition", "modifierDefinition", "modifierInvocation", "functionDefinition", "functionDescriptor", "returnParameters", "modifierList", "eventDefinition", "enumValue", "enumDefinition", "parameterList", "parameter", "eventParameterList", "eventParameter", "functionTypeParameterList", "functionTypeParameter", "variableDeclaration", "typeName", "userDefinedTypeName", "mappingKey", "mapping", "functionTypeName", "storageLocation", "stateMutability", "block", "statement", "expressionStatement", "ifStatement", "tryStatement", "catchClause", "whileStatement", "simpleStatement", "uncheckedStatement", "forStatement", "inlineAssemblyStatement", "doWhileStatement", "continueStatement", "breakStatement", "returnStatement", "throwStatement", "emitStatement", "variableDeclarationStatement", "variableDeclarationList", "identifierList", "elementaryTypeName", "expression", "primaryExpression", "expressionList", "nameValueList", "nameValue", "functionCallArguments", "functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", "assemblyMember", "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition", "assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", "tupleExpression", "typeNameExpression", "numberLiteral", "identifier", "hexLiteral", "overrideSpecifier", "stringLiteral"]);
  SolidityParser.EOF = antlr4.Token.EOF;
  SolidityParser.T__0 = 1;
  SolidityParser.T__1 = 2;
  SolidityParser.T__2 = 3;
  SolidityParser.T__3 = 4;
  SolidityParser.T__4 = 5;
  SolidityParser.T__5 = 6;
  SolidityParser.T__6 = 7;
  SolidityParser.T__7 = 8;
  SolidityParser.T__8 = 9;
  SolidityParser.T__9 = 10;
  SolidityParser.T__10 = 11;
  SolidityParser.T__11 = 12;
  SolidityParser.T__12 = 13;
  SolidityParser.T__13 = 14;
  SolidityParser.T__14 = 15;
  SolidityParser.T__15 = 16;
  SolidityParser.T__16 = 17;
  SolidityParser.T__17 = 18;
  SolidityParser.T__18 = 19;
  SolidityParser.T__19 = 20;
  SolidityParser.T__20 = 21;
  SolidityParser.T__21 = 22;
  SolidityParser.T__22 = 23;
  SolidityParser.T__23 = 24;
  SolidityParser.T__24 = 25;
  SolidityParser.T__25 = 26;
  SolidityParser.T__26 = 27;
  SolidityParser.T__27 = 28;
  SolidityParser.T__28 = 29;
  SolidityParser.T__29 = 30;
  SolidityParser.T__30 = 31;
  SolidityParser.T__31 = 32;
  SolidityParser.T__32 = 33;
  SolidityParser.T__33 = 34;
  SolidityParser.T__34 = 35;
  SolidityParser.T__35 = 36;
  SolidityParser.T__36 = 37;
  SolidityParser.T__37 = 38;
  SolidityParser.T__38 = 39;
  SolidityParser.T__39 = 40;
  SolidityParser.T__40 = 41;
  SolidityParser.T__41 = 42;
  SolidityParser.T__42 = 43;
  SolidityParser.T__43 = 44;
  SolidityParser.T__44 = 45;
  SolidityParser.T__45 = 46;
  SolidityParser.T__46 = 47;
  SolidityParser.T__47 = 48;
  SolidityParser.T__48 = 49;
  SolidityParser.T__49 = 50;
  SolidityParser.T__50 = 51;
  SolidityParser.T__51 = 52;
  SolidityParser.T__52 = 53;
  SolidityParser.T__53 = 54;
  SolidityParser.T__54 = 55;
  SolidityParser.T__55 = 56;
  SolidityParser.T__56 = 57;
  SolidityParser.T__57 = 58;
  SolidityParser.T__58 = 59;
  SolidityParser.T__59 = 60;
  SolidityParser.T__60 = 61;
  SolidityParser.T__61 = 62;
  SolidityParser.T__62 = 63;
  SolidityParser.T__63 = 64;
  SolidityParser.T__64 = 65;
  SolidityParser.T__65 = 66;
  SolidityParser.T__66 = 67;
  SolidityParser.T__67 = 68;
  SolidityParser.T__68 = 69;
  SolidityParser.T__69 = 70;
  SolidityParser.T__70 = 71;
  SolidityParser.T__71 = 72;
  SolidityParser.T__72 = 73;
  SolidityParser.T__73 = 74;
  SolidityParser.T__74 = 75;
  SolidityParser.T__75 = 76;
  SolidityParser.T__76 = 77;
  SolidityParser.T__77 = 78;
  SolidityParser.T__78 = 79;
  SolidityParser.T__79 = 80;
  SolidityParser.T__80 = 81;
  SolidityParser.T__81 = 82;
  SolidityParser.T__82 = 83;
  SolidityParser.T__83 = 84;
  SolidityParser.T__84 = 85;
  SolidityParser.T__85 = 86;
  SolidityParser.T__86 = 87;
  SolidityParser.T__87 = 88;
  SolidityParser.T__88 = 89;
  SolidityParser.T__89 = 90;
  SolidityParser.T__90 = 91;
  SolidityParser.T__91 = 92;
  SolidityParser.T__92 = 93;
  SolidityParser.T__93 = 94;
  SolidityParser.T__94 = 95;
  SolidityParser.Int = 96;
  SolidityParser.Uint = 97;
  SolidityParser.Byte = 98;
  SolidityParser.Fixed = 99;
  SolidityParser.Ufixed = 100;
  SolidityParser.BooleanLiteral = 101;
  SolidityParser.DecimalNumber = 102;
  SolidityParser.HexNumber = 103;
  SolidityParser.NumberUnit = 104;
  SolidityParser.HexLiteralFragment = 105;
  SolidityParser.ReservedKeyword = 106;
  SolidityParser.AnonymousKeyword = 107;
  SolidityParser.BreakKeyword = 108;
  SolidityParser.ConstantKeyword = 109;
  SolidityParser.ImmutableKeyword = 110;
  SolidityParser.ContinueKeyword = 111;
  SolidityParser.LeaveKeyword = 112;
  SolidityParser.ExternalKeyword = 113;
  SolidityParser.IndexedKeyword = 114;
  SolidityParser.InternalKeyword = 115;
  SolidityParser.PayableKeyword = 116;
  SolidityParser.PrivateKeyword = 117;
  SolidityParser.PublicKeyword = 118;
  SolidityParser.VirtualKeyword = 119;
  SolidityParser.PureKeyword = 120;
  SolidityParser.TypeKeyword = 121;
  SolidityParser.ViewKeyword = 122;
  SolidityParser.ConstructorKeyword = 123;
  SolidityParser.FallbackKeyword = 124;
  SolidityParser.ReceiveKeyword = 125;
  SolidityParser.Identifier = 126;
  SolidityParser.StringLiteralFragment = 127;
  SolidityParser.VersionLiteral = 128;
  SolidityParser.WS = 129;
  SolidityParser.COMMENT = 130;
  SolidityParser.LINE_COMMENT = 131;
  SolidityParser.RULE_sourceUnit = 0;
  SolidityParser.RULE_pragmaDirective = 1;
  SolidityParser.RULE_pragmaName = 2;
  SolidityParser.RULE_pragmaValue = 3;
  SolidityParser.RULE_version = 4;
  SolidityParser.RULE_versionOperator = 5;
  SolidityParser.RULE_versionConstraint = 6;
  SolidityParser.RULE_importDeclaration = 7;
  SolidityParser.RULE_importDirective = 8;
  SolidityParser.RULE_contractDefinition = 9;
  SolidityParser.RULE_inheritanceSpecifier = 10;
  SolidityParser.RULE_contractPart = 11;
  SolidityParser.RULE_stateVariableDeclaration = 12;
  SolidityParser.RULE_fileLevelConstant = 13;
  SolidityParser.RULE_usingForDeclaration = 14;
  SolidityParser.RULE_structDefinition = 15;
  SolidityParser.RULE_modifierDefinition = 16;
  SolidityParser.RULE_modifierInvocation = 17;
  SolidityParser.RULE_functionDefinition = 18;
  SolidityParser.RULE_functionDescriptor = 19;
  SolidityParser.RULE_returnParameters = 20;
  SolidityParser.RULE_modifierList = 21;
  SolidityParser.RULE_eventDefinition = 22;
  SolidityParser.RULE_enumValue = 23;
  SolidityParser.RULE_enumDefinition = 24;
  SolidityParser.RULE_parameterList = 25;
  SolidityParser.RULE_parameter = 26;
  SolidityParser.RULE_eventParameterList = 27;
  SolidityParser.RULE_eventParameter = 28;
  SolidityParser.RULE_functionTypeParameterList = 29;
  SolidityParser.RULE_functionTypeParameter = 30;
  SolidityParser.RULE_variableDeclaration = 31;
  SolidityParser.RULE_typeName = 32;
  SolidityParser.RULE_userDefinedTypeName = 33;
  SolidityParser.RULE_mappingKey = 34;
  SolidityParser.RULE_mapping = 35;
  SolidityParser.RULE_functionTypeName = 36;
  SolidityParser.RULE_storageLocation = 37;
  SolidityParser.RULE_stateMutability = 38;
  SolidityParser.RULE_block = 39;
  SolidityParser.RULE_statement = 40;
  SolidityParser.RULE_expressionStatement = 41;
  SolidityParser.RULE_ifStatement = 42;
  SolidityParser.RULE_tryStatement = 43;
  SolidityParser.RULE_catchClause = 44;
  SolidityParser.RULE_whileStatement = 45;
  SolidityParser.RULE_simpleStatement = 46;
  SolidityParser.RULE_uncheckedStatement = 47;
  SolidityParser.RULE_forStatement = 48;
  SolidityParser.RULE_inlineAssemblyStatement = 49;
  SolidityParser.RULE_doWhileStatement = 50;
  SolidityParser.RULE_continueStatement = 51;
  SolidityParser.RULE_breakStatement = 52;
  SolidityParser.RULE_returnStatement = 53;
  SolidityParser.RULE_throwStatement = 54;
  SolidityParser.RULE_emitStatement = 55;
  SolidityParser.RULE_variableDeclarationStatement = 56;
  SolidityParser.RULE_variableDeclarationList = 57;
  SolidityParser.RULE_identifierList = 58;
  SolidityParser.RULE_elementaryTypeName = 59;
  SolidityParser.RULE_expression = 60;
  SolidityParser.RULE_primaryExpression = 61;
  SolidityParser.RULE_expressionList = 62;
  SolidityParser.RULE_nameValueList = 63;
  SolidityParser.RULE_nameValue = 64;
  SolidityParser.RULE_functionCallArguments = 65;
  SolidityParser.RULE_functionCall = 66;
  SolidityParser.RULE_assemblyBlock = 67;
  SolidityParser.RULE_assemblyItem = 68;
  SolidityParser.RULE_assemblyExpression = 69;
  SolidityParser.RULE_assemblyMember = 70;
  SolidityParser.RULE_assemblyCall = 71;
  SolidityParser.RULE_assemblyLocalDefinition = 72;
  SolidityParser.RULE_assemblyAssignment = 73;
  SolidityParser.RULE_assemblyIdentifierOrList = 74;
  SolidityParser.RULE_assemblyIdentifierList = 75;
  SolidityParser.RULE_assemblyStackAssignment = 76;
  SolidityParser.RULE_labelDefinition = 77;
  SolidityParser.RULE_assemblySwitch = 78;
  SolidityParser.RULE_assemblyCase = 79;
  SolidityParser.RULE_assemblyFunctionDefinition = 80;
  SolidityParser.RULE_assemblyFunctionReturns = 81;
  SolidityParser.RULE_assemblyFor = 82;
  SolidityParser.RULE_assemblyIf = 83;
  SolidityParser.RULE_assemblyLiteral = 84;
  SolidityParser.RULE_subAssembly = 85;
  SolidityParser.RULE_tupleExpression = 86;
  SolidityParser.RULE_typeNameExpression = 87;
  SolidityParser.RULE_numberLiteral = 88;
  SolidityParser.RULE_identifier = 89;
  SolidityParser.RULE_hexLiteral = 90;
  SolidityParser.RULE_overrideSpecifier = 91;
  SolidityParser.RULE_stringLiteral = 92;

  var SourceUnitContext = /*#__PURE__*/function (_antlr4$ParserRuleCon) {
    _inherits(SourceUnitContext, _antlr4$ParserRuleCon);

    var _super2 = _createSuper(SourceUnitContext);

    function SourceUnitContext(parser, parent, invokingState) {
      var _this2;

      _classCallCheck(this, SourceUnitContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this2 = _super2.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this2), "pragmaDirective", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(PragmaDirectiveContext);
        } else {
          return this.getTypedRuleContext(PragmaDirectiveContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this2), "importDirective", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(ImportDirectiveContext);
        } else {
          return this.getTypedRuleContext(ImportDirectiveContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this2), "contractDefinition", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(ContractDefinitionContext);
        } else {
          return this.getTypedRuleContext(ContractDefinitionContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this2), "enumDefinition", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(EnumDefinitionContext);
        } else {
          return this.getTypedRuleContext(EnumDefinitionContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this2), "structDefinition", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(StructDefinitionContext);
        } else {
          return this.getTypedRuleContext(StructDefinitionContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this2), "functionDefinition", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(FunctionDefinitionContext);
        } else {
          return this.getTypedRuleContext(FunctionDefinitionContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this2), "fileLevelConstant", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(FileLevelConstantContext);
        } else {
          return this.getTypedRuleContext(FileLevelConstantContext, i);
        }
      });

      _this2.parser = parser;
      _this2.ruleIndex = SolidityParser.RULE_sourceUnit;
      return _this2;
    }

    _createClass(SourceUnitContext, [{
      key: "EOF",
      value: function EOF() {
        return this.getToken(SolidityParser.EOF, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterSourceUnit(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitSourceUnit(this);
        }
      }
    }]);

    return SourceUnitContext;
  }(antlr4.ParserRuleContext);

  var PragmaDirectiveContext = /*#__PURE__*/function (_antlr4$ParserRuleCon2) {
    _inherits(PragmaDirectiveContext, _antlr4$ParserRuleCon2);

    var _super3 = _createSuper(PragmaDirectiveContext);

    function PragmaDirectiveContext(parser, parent, invokingState) {
      var _this3;

      _classCallCheck(this, PragmaDirectiveContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this3 = _super3.call(this, parent, invokingState);
      _this3.parser = parser;
      _this3.ruleIndex = SolidityParser.RULE_pragmaDirective;
      return _this3;
    }

    _createClass(PragmaDirectiveContext, [{
      key: "pragmaName",
      value: function pragmaName() {
        return this.getTypedRuleContext(PragmaNameContext, 0);
      }
    }, {
      key: "pragmaValue",
      value: function pragmaValue() {
        return this.getTypedRuleContext(PragmaValueContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterPragmaDirective(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitPragmaDirective(this);
        }
      }
    }]);

    return PragmaDirectiveContext;
  }(antlr4.ParserRuleContext);

  var PragmaNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon3) {
    _inherits(PragmaNameContext, _antlr4$ParserRuleCon3);

    var _super4 = _createSuper(PragmaNameContext);

    function PragmaNameContext(parser, parent, invokingState) {
      var _this4;

      _classCallCheck(this, PragmaNameContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this4 = _super4.call(this, parent, invokingState);
      _this4.parser = parser;
      _this4.ruleIndex = SolidityParser.RULE_pragmaName;
      return _this4;
    }

    _createClass(PragmaNameContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterPragmaName(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitPragmaName(this);
        }
      }
    }]);

    return PragmaNameContext;
  }(antlr4.ParserRuleContext);

  var PragmaValueContext = /*#__PURE__*/function (_antlr4$ParserRuleCon4) {
    _inherits(PragmaValueContext, _antlr4$ParserRuleCon4);

    var _super5 = _createSuper(PragmaValueContext);

    function PragmaValueContext(parser, parent, invokingState) {
      var _this5;

      _classCallCheck(this, PragmaValueContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this5 = _super5.call(this, parent, invokingState);
      _this5.parser = parser;
      _this5.ruleIndex = SolidityParser.RULE_pragmaValue;
      return _this5;
    }

    _createClass(PragmaValueContext, [{
      key: "version",
      value: function version() {
        return this.getTypedRuleContext(VersionContext, 0);
      }
    }, {
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterPragmaValue(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitPragmaValue(this);
        }
      }
    }]);

    return PragmaValueContext;
  }(antlr4.ParserRuleContext);

  var VersionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon5) {
    _inherits(VersionContext, _antlr4$ParserRuleCon5);

    var _super6 = _createSuper(VersionContext);

    function VersionContext(parser, parent, invokingState) {
      var _this6;

      _classCallCheck(this, VersionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this6 = _super6.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this6), "versionConstraint", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(VersionConstraintContext);
        } else {
          return this.getTypedRuleContext(VersionConstraintContext, i);
        }
      });

      _this6.parser = parser;
      _this6.ruleIndex = SolidityParser.RULE_version;
      return _this6;
    }

    _createClass(VersionContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterVersion(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitVersion(this);
        }
      }
    }]);

    return VersionContext;
  }(antlr4.ParserRuleContext);

  var VersionOperatorContext = /*#__PURE__*/function (_antlr4$ParserRuleCon6) {
    _inherits(VersionOperatorContext, _antlr4$ParserRuleCon6);

    var _super7 = _createSuper(VersionOperatorContext);

    function VersionOperatorContext(parser, parent, invokingState) {
      var _this7;

      _classCallCheck(this, VersionOperatorContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this7 = _super7.call(this, parent, invokingState);
      _this7.parser = parser;
      _this7.ruleIndex = SolidityParser.RULE_versionOperator;
      return _this7;
    }

    _createClass(VersionOperatorContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterVersionOperator(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitVersionOperator(this);
        }
      }
    }]);

    return VersionOperatorContext;
  }(antlr4.ParserRuleContext);

  var VersionConstraintContext = /*#__PURE__*/function (_antlr4$ParserRuleCon7) {
    _inherits(VersionConstraintContext, _antlr4$ParserRuleCon7);

    var _super8 = _createSuper(VersionConstraintContext);

    function VersionConstraintContext(parser, parent, invokingState) {
      var _this8;

      _classCallCheck(this, VersionConstraintContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this8 = _super8.call(this, parent, invokingState);
      _this8.parser = parser;
      _this8.ruleIndex = SolidityParser.RULE_versionConstraint;
      return _this8;
    }

    _createClass(VersionConstraintContext, [{
      key: "VersionLiteral",
      value: function VersionLiteral() {
        return this.getToken(SolidityParser.VersionLiteral, 0);
      }
    }, {
      key: "versionOperator",
      value: function versionOperator() {
        return this.getTypedRuleContext(VersionOperatorContext, 0);
      }
    }, {
      key: "DecimalNumber",
      value: function DecimalNumber() {
        return this.getToken(SolidityParser.DecimalNumber, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterVersionConstraint(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitVersionConstraint(this);
        }
      }
    }]);

    return VersionConstraintContext;
  }(antlr4.ParserRuleContext);

  var ImportDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon8) {
    _inherits(ImportDeclarationContext, _antlr4$ParserRuleCon8);

    var _super9 = _createSuper(ImportDeclarationContext);

    function ImportDeclarationContext(parser, parent, invokingState) {
      var _this9;

      _classCallCheck(this, ImportDeclarationContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this9 = _super9.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this9), "identifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(IdentifierContext);
        } else {
          return this.getTypedRuleContext(IdentifierContext, i);
        }
      });

      _this9.parser = parser;
      _this9.ruleIndex = SolidityParser.RULE_importDeclaration;
      return _this9;
    }

    _createClass(ImportDeclarationContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterImportDeclaration(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitImportDeclaration(this);
        }
      }
    }]);

    return ImportDeclarationContext;
  }(antlr4.ParserRuleContext);

  var ImportDirectiveContext = /*#__PURE__*/function (_antlr4$ParserRuleCon9) {
    _inherits(ImportDirectiveContext, _antlr4$ParserRuleCon9);

    var _super10 = _createSuper(ImportDirectiveContext);

    function ImportDirectiveContext(parser, parent, invokingState) {
      var _this10;

      _classCallCheck(this, ImportDirectiveContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this10 = _super10.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this10), "identifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(IdentifierContext);
        } else {
          return this.getTypedRuleContext(IdentifierContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this10), "importDeclaration", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(ImportDeclarationContext);
        } else {
          return this.getTypedRuleContext(ImportDeclarationContext, i);
        }
      });

      _this10.parser = parser;
      _this10.ruleIndex = SolidityParser.RULE_importDirective;
      return _this10;
    }

    _createClass(ImportDirectiveContext, [{
      key: "StringLiteralFragment",
      value: function StringLiteralFragment() {
        return this.getToken(SolidityParser.StringLiteralFragment, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterImportDirective(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitImportDirective(this);
        }
      }
    }]);

    return ImportDirectiveContext;
  }(antlr4.ParserRuleContext);

  var ContractDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon10) {
    _inherits(ContractDefinitionContext, _antlr4$ParserRuleCon10);

    var _super11 = _createSuper(ContractDefinitionContext);

    function ContractDefinitionContext(parser, parent, invokingState) {
      var _this11;

      _classCallCheck(this, ContractDefinitionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this11 = _super11.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this11), "inheritanceSpecifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(InheritanceSpecifierContext);
        } else {
          return this.getTypedRuleContext(InheritanceSpecifierContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this11), "contractPart", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(ContractPartContext);
        } else {
          return this.getTypedRuleContext(ContractPartContext, i);
        }
      });

      _this11.parser = parser;
      _this11.ruleIndex = SolidityParser.RULE_contractDefinition;
      return _this11;
    }

    _createClass(ContractDefinitionContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterContractDefinition(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitContractDefinition(this);
        }
      }
    }]);

    return ContractDefinitionContext;
  }(antlr4.ParserRuleContext);

  var InheritanceSpecifierContext = /*#__PURE__*/function (_antlr4$ParserRuleCon11) {
    _inherits(InheritanceSpecifierContext, _antlr4$ParserRuleCon11);

    var _super12 = _createSuper(InheritanceSpecifierContext);

    function InheritanceSpecifierContext(parser, parent, invokingState) {
      var _this12;

      _classCallCheck(this, InheritanceSpecifierContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this12 = _super12.call(this, parent, invokingState);
      _this12.parser = parser;
      _this12.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;
      return _this12;
    }

    _createClass(InheritanceSpecifierContext, [{
      key: "userDefinedTypeName",
      value: function userDefinedTypeName() {
        return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
      }
    }, {
      key: "expressionList",
      value: function expressionList() {
        return this.getTypedRuleContext(ExpressionListContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterInheritanceSpecifier(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitInheritanceSpecifier(this);
        }
      }
    }]);

    return InheritanceSpecifierContext;
  }(antlr4.ParserRuleContext);

  var ContractPartContext = /*#__PURE__*/function (_antlr4$ParserRuleCon12) {
    _inherits(ContractPartContext, _antlr4$ParserRuleCon12);

    var _super13 = _createSuper(ContractPartContext);

    function ContractPartContext(parser, parent, invokingState) {
      var _this13;

      _classCallCheck(this, ContractPartContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this13 = _super13.call(this, parent, invokingState);
      _this13.parser = parser;
      _this13.ruleIndex = SolidityParser.RULE_contractPart;
      return _this13;
    }

    _createClass(ContractPartContext, [{
      key: "stateVariableDeclaration",
      value: function stateVariableDeclaration() {
        return this.getTypedRuleContext(StateVariableDeclarationContext, 0);
      }
    }, {
      key: "usingForDeclaration",
      value: function usingForDeclaration() {
        return this.getTypedRuleContext(UsingForDeclarationContext, 0);
      }
    }, {
      key: "structDefinition",
      value: function structDefinition() {
        return this.getTypedRuleContext(StructDefinitionContext, 0);
      }
    }, {
      key: "modifierDefinition",
      value: function modifierDefinition() {
        return this.getTypedRuleContext(ModifierDefinitionContext, 0);
      }
    }, {
      key: "functionDefinition",
      value: function functionDefinition() {
        return this.getTypedRuleContext(FunctionDefinitionContext, 0);
      }
    }, {
      key: "eventDefinition",
      value: function eventDefinition() {
        return this.getTypedRuleContext(EventDefinitionContext, 0);
      }
    }, {
      key: "enumDefinition",
      value: function enumDefinition() {
        return this.getTypedRuleContext(EnumDefinitionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterContractPart(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitContractPart(this);
        }
      }
    }]);

    return ContractPartContext;
  }(antlr4.ParserRuleContext);

  var StateVariableDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon13) {
    _inherits(StateVariableDeclarationContext, _antlr4$ParserRuleCon13);

    var _super14 = _createSuper(StateVariableDeclarationContext);

    function StateVariableDeclarationContext(parser, parent, invokingState) {
      var _this14;

      _classCallCheck(this, StateVariableDeclarationContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this14 = _super14.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this14), "PublicKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.PublicKeyword);
        } else {
          return this.getToken(SolidityParser.PublicKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this14), "InternalKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.InternalKeyword);
        } else {
          return this.getToken(SolidityParser.InternalKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this14), "PrivateKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.PrivateKeyword);
        } else {
          return this.getToken(SolidityParser.PrivateKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this14), "ConstantKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.ConstantKeyword);
        } else {
          return this.getToken(SolidityParser.ConstantKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this14), "ImmutableKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.ImmutableKeyword);
        } else {
          return this.getToken(SolidityParser.ImmutableKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this14), "overrideSpecifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(OverrideSpecifierContext);
        } else {
          return this.getTypedRuleContext(OverrideSpecifierContext, i);
        }
      });

      _this14.parser = parser;
      _this14.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;
      return _this14;
    }

    _createClass(StateVariableDeclarationContext, [{
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterStateVariableDeclaration(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitStateVariableDeclaration(this);
        }
      }
    }]);

    return StateVariableDeclarationContext;
  }(antlr4.ParserRuleContext);

  var FileLevelConstantContext = /*#__PURE__*/function (_antlr4$ParserRuleCon14) {
    _inherits(FileLevelConstantContext, _antlr4$ParserRuleCon14);

    var _super15 = _createSuper(FileLevelConstantContext);

    function FileLevelConstantContext(parser, parent, invokingState) {
      var _this15;

      _classCallCheck(this, FileLevelConstantContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this15 = _super15.call(this, parent, invokingState);
      _this15.parser = parser;
      _this15.ruleIndex = SolidityParser.RULE_fileLevelConstant;
      return _this15;
    }

    _createClass(FileLevelConstantContext, [{
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "ConstantKeyword",
      value: function ConstantKeyword() {
        return this.getToken(SolidityParser.ConstantKeyword, 0);
      }
    }, {
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterFileLevelConstant(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitFileLevelConstant(this);
        }
      }
    }]);

    return FileLevelConstantContext;
  }(antlr4.ParserRuleContext);

  var UsingForDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon15) {
    _inherits(UsingForDeclarationContext, _antlr4$ParserRuleCon15);

    var _super16 = _createSuper(UsingForDeclarationContext);

    function UsingForDeclarationContext(parser, parent, invokingState) {
      var _this16;

      _classCallCheck(this, UsingForDeclarationContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this16 = _super16.call(this, parent, invokingState);
      _this16.parser = parser;
      _this16.ruleIndex = SolidityParser.RULE_usingForDeclaration;
      return _this16;
    }

    _createClass(UsingForDeclarationContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterUsingForDeclaration(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitUsingForDeclaration(this);
        }
      }
    }]);

    return UsingForDeclarationContext;
  }(antlr4.ParserRuleContext);

  var StructDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon16) {
    _inherits(StructDefinitionContext, _antlr4$ParserRuleCon16);

    var _super17 = _createSuper(StructDefinitionContext);

    function StructDefinitionContext(parser, parent, invokingState) {
      var _this17;

      _classCallCheck(this, StructDefinitionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this17 = _super17.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this17), "variableDeclaration", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(VariableDeclarationContext);
        } else {
          return this.getTypedRuleContext(VariableDeclarationContext, i);
        }
      });

      _this17.parser = parser;
      _this17.ruleIndex = SolidityParser.RULE_structDefinition;
      return _this17;
    }

    _createClass(StructDefinitionContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterStructDefinition(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitStructDefinition(this);
        }
      }
    }]);

    return StructDefinitionContext;
  }(antlr4.ParserRuleContext);

  var ModifierDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon17) {
    _inherits(ModifierDefinitionContext, _antlr4$ParserRuleCon17);

    var _super18 = _createSuper(ModifierDefinitionContext);

    function ModifierDefinitionContext(parser, parent, invokingState) {
      var _this18;

      _classCallCheck(this, ModifierDefinitionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this18 = _super18.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this18), "VirtualKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.VirtualKeyword);
        } else {
          return this.getToken(SolidityParser.VirtualKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this18), "overrideSpecifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(OverrideSpecifierContext);
        } else {
          return this.getTypedRuleContext(OverrideSpecifierContext, i);
        }
      });

      _this18.parser = parser;
      _this18.ruleIndex = SolidityParser.RULE_modifierDefinition;
      return _this18;
    }

    _createClass(ModifierDefinitionContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "block",
      value: function block() {
        return this.getTypedRuleContext(BlockContext, 0);
      }
    }, {
      key: "parameterList",
      value: function parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterModifierDefinition(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitModifierDefinition(this);
        }
      }
    }]);

    return ModifierDefinitionContext;
  }(antlr4.ParserRuleContext);

  var ModifierInvocationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon18) {
    _inherits(ModifierInvocationContext, _antlr4$ParserRuleCon18);

    var _super19 = _createSuper(ModifierInvocationContext);

    function ModifierInvocationContext(parser, parent, invokingState) {
      var _this19;

      _classCallCheck(this, ModifierInvocationContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this19 = _super19.call(this, parent, invokingState);
      _this19.parser = parser;
      _this19.ruleIndex = SolidityParser.RULE_modifierInvocation;
      return _this19;
    }

    _createClass(ModifierInvocationContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "expressionList",
      value: function expressionList() {
        return this.getTypedRuleContext(ExpressionListContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterModifierInvocation(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitModifierInvocation(this);
        }
      }
    }]);

    return ModifierInvocationContext;
  }(antlr4.ParserRuleContext);

  var FunctionDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon19) {
    _inherits(FunctionDefinitionContext, _antlr4$ParserRuleCon19);

    var _super20 = _createSuper(FunctionDefinitionContext);

    function FunctionDefinitionContext(parser, parent, invokingState) {
      var _this20;

      _classCallCheck(this, FunctionDefinitionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this20 = _super20.call(this, parent, invokingState);
      _this20.parser = parser;
      _this20.ruleIndex = SolidityParser.RULE_functionDefinition;
      return _this20;
    }

    _createClass(FunctionDefinitionContext, [{
      key: "functionDescriptor",
      value: function functionDescriptor() {
        return this.getTypedRuleContext(FunctionDescriptorContext, 0);
      }
    }, {
      key: "parameterList",
      value: function parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
      }
    }, {
      key: "modifierList",
      value: function modifierList() {
        return this.getTypedRuleContext(ModifierListContext, 0);
      }
    }, {
      key: "block",
      value: function block() {
        return this.getTypedRuleContext(BlockContext, 0);
      }
    }, {
      key: "returnParameters",
      value: function returnParameters() {
        return this.getTypedRuleContext(ReturnParametersContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterFunctionDefinition(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitFunctionDefinition(this);
        }
      }
    }]);

    return FunctionDefinitionContext;
  }(antlr4.ParserRuleContext);

  var FunctionDescriptorContext = /*#__PURE__*/function (_antlr4$ParserRuleCon20) {
    _inherits(FunctionDescriptorContext, _antlr4$ParserRuleCon20);

    var _super21 = _createSuper(FunctionDescriptorContext);

    function FunctionDescriptorContext(parser, parent, invokingState) {
      var _this21;

      _classCallCheck(this, FunctionDescriptorContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this21 = _super21.call(this, parent, invokingState);
      _this21.parser = parser;
      _this21.ruleIndex = SolidityParser.RULE_functionDescriptor;
      return _this21;
    }

    _createClass(FunctionDescriptorContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "ConstructorKeyword",
      value: function ConstructorKeyword() {
        return this.getToken(SolidityParser.ConstructorKeyword, 0);
      }
    }, {
      key: "FallbackKeyword",
      value: function FallbackKeyword() {
        return this.getToken(SolidityParser.FallbackKeyword, 0);
      }
    }, {
      key: "ReceiveKeyword",
      value: function ReceiveKeyword() {
        return this.getToken(SolidityParser.ReceiveKeyword, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterFunctionDescriptor(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitFunctionDescriptor(this);
        }
      }
    }]);

    return FunctionDescriptorContext;
  }(antlr4.ParserRuleContext);

  var ReturnParametersContext = /*#__PURE__*/function (_antlr4$ParserRuleCon21) {
    _inherits(ReturnParametersContext, _antlr4$ParserRuleCon21);

    var _super22 = _createSuper(ReturnParametersContext);

    function ReturnParametersContext(parser, parent, invokingState) {
      var _this22;

      _classCallCheck(this, ReturnParametersContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this22 = _super22.call(this, parent, invokingState);
      _this22.parser = parser;
      _this22.ruleIndex = SolidityParser.RULE_returnParameters;
      return _this22;
    }

    _createClass(ReturnParametersContext, [{
      key: "parameterList",
      value: function parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterReturnParameters(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitReturnParameters(this);
        }
      }
    }]);

    return ReturnParametersContext;
  }(antlr4.ParserRuleContext);

  var ModifierListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon22) {
    _inherits(ModifierListContext, _antlr4$ParserRuleCon22);

    var _super23 = _createSuper(ModifierListContext);

    function ModifierListContext(parser, parent, invokingState) {
      var _this23;

      _classCallCheck(this, ModifierListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this23 = _super23.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this23), "ExternalKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.ExternalKeyword);
        } else {
          return this.getToken(SolidityParser.ExternalKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this23), "PublicKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.PublicKeyword);
        } else {
          return this.getToken(SolidityParser.PublicKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this23), "InternalKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.InternalKeyword);
        } else {
          return this.getToken(SolidityParser.InternalKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this23), "PrivateKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.PrivateKeyword);
        } else {
          return this.getToken(SolidityParser.PrivateKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this23), "VirtualKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.VirtualKeyword);
        } else {
          return this.getToken(SolidityParser.VirtualKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this23), "stateMutability", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(StateMutabilityContext);
        } else {
          return this.getTypedRuleContext(StateMutabilityContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this23), "modifierInvocation", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(ModifierInvocationContext);
        } else {
          return this.getTypedRuleContext(ModifierInvocationContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this23), "overrideSpecifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(OverrideSpecifierContext);
        } else {
          return this.getTypedRuleContext(OverrideSpecifierContext, i);
        }
      });

      _this23.parser = parser;
      _this23.ruleIndex = SolidityParser.RULE_modifierList;
      return _this23;
    }

    _createClass(ModifierListContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterModifierList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitModifierList(this);
        }
      }
    }]);

    return ModifierListContext;
  }(antlr4.ParserRuleContext);

  var EventDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon23) {
    _inherits(EventDefinitionContext, _antlr4$ParserRuleCon23);

    var _super24 = _createSuper(EventDefinitionContext);

    function EventDefinitionContext(parser, parent, invokingState) {
      var _this24;

      _classCallCheck(this, EventDefinitionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this24 = _super24.call(this, parent, invokingState);
      _this24.parser = parser;
      _this24.ruleIndex = SolidityParser.RULE_eventDefinition;
      return _this24;
    }

    _createClass(EventDefinitionContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "eventParameterList",
      value: function eventParameterList() {
        return this.getTypedRuleContext(EventParameterListContext, 0);
      }
    }, {
      key: "AnonymousKeyword",
      value: function AnonymousKeyword() {
        return this.getToken(SolidityParser.AnonymousKeyword, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterEventDefinition(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitEventDefinition(this);
        }
      }
    }]);

    return EventDefinitionContext;
  }(antlr4.ParserRuleContext);

  var EnumValueContext = /*#__PURE__*/function (_antlr4$ParserRuleCon24) {
    _inherits(EnumValueContext, _antlr4$ParserRuleCon24);

    var _super25 = _createSuper(EnumValueContext);

    function EnumValueContext(parser, parent, invokingState) {
      var _this25;

      _classCallCheck(this, EnumValueContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this25 = _super25.call(this, parent, invokingState);
      _this25.parser = parser;
      _this25.ruleIndex = SolidityParser.RULE_enumValue;
      return _this25;
    }

    _createClass(EnumValueContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterEnumValue(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitEnumValue(this);
        }
      }
    }]);

    return EnumValueContext;
  }(antlr4.ParserRuleContext);

  var EnumDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon25) {
    _inherits(EnumDefinitionContext, _antlr4$ParserRuleCon25);

    var _super26 = _createSuper(EnumDefinitionContext);

    function EnumDefinitionContext(parser, parent, invokingState) {
      var _this26;

      _classCallCheck(this, EnumDefinitionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this26 = _super26.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this26), "enumValue", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(EnumValueContext);
        } else {
          return this.getTypedRuleContext(EnumValueContext, i);
        }
      });

      _this26.parser = parser;
      _this26.ruleIndex = SolidityParser.RULE_enumDefinition;
      return _this26;
    }

    _createClass(EnumDefinitionContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterEnumDefinition(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitEnumDefinition(this);
        }
      }
    }]);

    return EnumDefinitionContext;
  }(antlr4.ParserRuleContext);

  var ParameterListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon26) {
    _inherits(ParameterListContext, _antlr4$ParserRuleCon26);

    var _super27 = _createSuper(ParameterListContext);

    function ParameterListContext(parser, parent, invokingState) {
      var _this27;

      _classCallCheck(this, ParameterListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this27 = _super27.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this27), "parameter", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(ParameterContext);
        } else {
          return this.getTypedRuleContext(ParameterContext, i);
        }
      });

      _this27.parser = parser;
      _this27.ruleIndex = SolidityParser.RULE_parameterList;
      return _this27;
    }

    _createClass(ParameterListContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterParameterList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitParameterList(this);
        }
      }
    }]);

    return ParameterListContext;
  }(antlr4.ParserRuleContext);

  var ParameterContext = /*#__PURE__*/function (_antlr4$ParserRuleCon27) {
    _inherits(ParameterContext, _antlr4$ParserRuleCon27);

    var _super28 = _createSuper(ParameterContext);

    function ParameterContext(parser, parent, invokingState) {
      var _this28;

      _classCallCheck(this, ParameterContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this28 = _super28.call(this, parent, invokingState);
      _this28.parser = parser;
      _this28.ruleIndex = SolidityParser.RULE_parameter;
      return _this28;
    }

    _createClass(ParameterContext, [{
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "storageLocation",
      value: function storageLocation() {
        return this.getTypedRuleContext(StorageLocationContext, 0);
      }
    }, {
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterParameter(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitParameter(this);
        }
      }
    }]);

    return ParameterContext;
  }(antlr4.ParserRuleContext);

  var EventParameterListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon28) {
    _inherits(EventParameterListContext, _antlr4$ParserRuleCon28);

    var _super29 = _createSuper(EventParameterListContext);

    function EventParameterListContext(parser, parent, invokingState) {
      var _this29;

      _classCallCheck(this, EventParameterListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this29 = _super29.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this29), "eventParameter", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(EventParameterContext);
        } else {
          return this.getTypedRuleContext(EventParameterContext, i);
        }
      });

      _this29.parser = parser;
      _this29.ruleIndex = SolidityParser.RULE_eventParameterList;
      return _this29;
    }

    _createClass(EventParameterListContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterEventParameterList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitEventParameterList(this);
        }
      }
    }]);

    return EventParameterListContext;
  }(antlr4.ParserRuleContext);

  var EventParameterContext = /*#__PURE__*/function (_antlr4$ParserRuleCon29) {
    _inherits(EventParameterContext, _antlr4$ParserRuleCon29);

    var _super30 = _createSuper(EventParameterContext);

    function EventParameterContext(parser, parent, invokingState) {
      var _this30;

      _classCallCheck(this, EventParameterContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this30 = _super30.call(this, parent, invokingState);
      _this30.parser = parser;
      _this30.ruleIndex = SolidityParser.RULE_eventParameter;
      return _this30;
    }

    _createClass(EventParameterContext, [{
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "IndexedKeyword",
      value: function IndexedKeyword() {
        return this.getToken(SolidityParser.IndexedKeyword, 0);
      }
    }, {
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterEventParameter(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitEventParameter(this);
        }
      }
    }]);

    return EventParameterContext;
  }(antlr4.ParserRuleContext);

  var FunctionTypeParameterListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon30) {
    _inherits(FunctionTypeParameterListContext, _antlr4$ParserRuleCon30);

    var _super31 = _createSuper(FunctionTypeParameterListContext);

    function FunctionTypeParameterListContext(parser, parent, invokingState) {
      var _this31;

      _classCallCheck(this, FunctionTypeParameterListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this31 = _super31.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this31), "functionTypeParameter", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(FunctionTypeParameterContext);
        } else {
          return this.getTypedRuleContext(FunctionTypeParameterContext, i);
        }
      });

      _this31.parser = parser;
      _this31.ruleIndex = SolidityParser.RULE_functionTypeParameterList;
      return _this31;
    }

    _createClass(FunctionTypeParameterListContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterFunctionTypeParameterList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitFunctionTypeParameterList(this);
        }
      }
    }]);

    return FunctionTypeParameterListContext;
  }(antlr4.ParserRuleContext);

  var FunctionTypeParameterContext = /*#__PURE__*/function (_antlr4$ParserRuleCon31) {
    _inherits(FunctionTypeParameterContext, _antlr4$ParserRuleCon31);

    var _super32 = _createSuper(FunctionTypeParameterContext);

    function FunctionTypeParameterContext(parser, parent, invokingState) {
      var _this32;

      _classCallCheck(this, FunctionTypeParameterContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this32 = _super32.call(this, parent, invokingState);
      _this32.parser = parser;
      _this32.ruleIndex = SolidityParser.RULE_functionTypeParameter;
      return _this32;
    }

    _createClass(FunctionTypeParameterContext, [{
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "storageLocation",
      value: function storageLocation() {
        return this.getTypedRuleContext(StorageLocationContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterFunctionTypeParameter(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitFunctionTypeParameter(this);
        }
      }
    }]);

    return FunctionTypeParameterContext;
  }(antlr4.ParserRuleContext);

  var VariableDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon32) {
    _inherits(VariableDeclarationContext, _antlr4$ParserRuleCon32);

    var _super33 = _createSuper(VariableDeclarationContext);

    function VariableDeclarationContext(parser, parent, invokingState) {
      var _this33;

      _classCallCheck(this, VariableDeclarationContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this33 = _super33.call(this, parent, invokingState);
      _this33.parser = parser;
      _this33.ruleIndex = SolidityParser.RULE_variableDeclaration;
      return _this33;
    }

    _createClass(VariableDeclarationContext, [{
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "storageLocation",
      value: function storageLocation() {
        return this.getTypedRuleContext(StorageLocationContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterVariableDeclaration(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitVariableDeclaration(this);
        }
      }
    }]);

    return VariableDeclarationContext;
  }(antlr4.ParserRuleContext);

  var TypeNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon33) {
    _inherits(TypeNameContext, _antlr4$ParserRuleCon33);

    var _super34 = _createSuper(TypeNameContext);

    function TypeNameContext(parser, parent, invokingState) {
      var _this34;

      _classCallCheck(this, TypeNameContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this34 = _super34.call(this, parent, invokingState);
      _this34.parser = parser;
      _this34.ruleIndex = SolidityParser.RULE_typeName;
      return _this34;
    }

    _createClass(TypeNameContext, [{
      key: "elementaryTypeName",
      value: function elementaryTypeName() {
        return this.getTypedRuleContext(ElementaryTypeNameContext, 0);
      }
    }, {
      key: "userDefinedTypeName",
      value: function userDefinedTypeName() {
        return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
      }
    }, {
      key: "mapping",
      value: function mapping() {
        return this.getTypedRuleContext(MappingContext, 0);
      }
    }, {
      key: "functionTypeName",
      value: function functionTypeName() {
        return this.getTypedRuleContext(FunctionTypeNameContext, 0);
      }
    }, {
      key: "PayableKeyword",
      value: function PayableKeyword() {
        return this.getToken(SolidityParser.PayableKeyword, 0);
      }
    }, {
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterTypeName(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitTypeName(this);
        }
      }
    }]);

    return TypeNameContext;
  }(antlr4.ParserRuleContext);

  var UserDefinedTypeNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon34) {
    _inherits(UserDefinedTypeNameContext, _antlr4$ParserRuleCon34);

    var _super35 = _createSuper(UserDefinedTypeNameContext);

    function UserDefinedTypeNameContext(parser, parent, invokingState) {
      var _this35;

      _classCallCheck(this, UserDefinedTypeNameContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this35 = _super35.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this35), "identifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(IdentifierContext);
        } else {
          return this.getTypedRuleContext(IdentifierContext, i);
        }
      });

      _this35.parser = parser;
      _this35.ruleIndex = SolidityParser.RULE_userDefinedTypeName;
      return _this35;
    }

    _createClass(UserDefinedTypeNameContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterUserDefinedTypeName(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitUserDefinedTypeName(this);
        }
      }
    }]);

    return UserDefinedTypeNameContext;
  }(antlr4.ParserRuleContext);

  var MappingKeyContext = /*#__PURE__*/function (_antlr4$ParserRuleCon35) {
    _inherits(MappingKeyContext, _antlr4$ParserRuleCon35);

    var _super36 = _createSuper(MappingKeyContext);

    function MappingKeyContext(parser, parent, invokingState) {
      var _this36;

      _classCallCheck(this, MappingKeyContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this36 = _super36.call(this, parent, invokingState);
      _this36.parser = parser;
      _this36.ruleIndex = SolidityParser.RULE_mappingKey;
      return _this36;
    }

    _createClass(MappingKeyContext, [{
      key: "elementaryTypeName",
      value: function elementaryTypeName() {
        return this.getTypedRuleContext(ElementaryTypeNameContext, 0);
      }
    }, {
      key: "userDefinedTypeName",
      value: function userDefinedTypeName() {
        return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterMappingKey(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitMappingKey(this);
        }
      }
    }]);

    return MappingKeyContext;
  }(antlr4.ParserRuleContext);

  var MappingContext = /*#__PURE__*/function (_antlr4$ParserRuleCon36) {
    _inherits(MappingContext, _antlr4$ParserRuleCon36);

    var _super37 = _createSuper(MappingContext);

    function MappingContext(parser, parent, invokingState) {
      var _this37;

      _classCallCheck(this, MappingContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this37 = _super37.call(this, parent, invokingState);
      _this37.parser = parser;
      _this37.ruleIndex = SolidityParser.RULE_mapping;
      return _this37;
    }

    _createClass(MappingContext, [{
      key: "mappingKey",
      value: function mappingKey() {
        return this.getTypedRuleContext(MappingKeyContext, 0);
      }
    }, {
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterMapping(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitMapping(this);
        }
      }
    }]);

    return MappingContext;
  }(antlr4.ParserRuleContext);

  var FunctionTypeNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon37) {
    _inherits(FunctionTypeNameContext, _antlr4$ParserRuleCon37);

    var _super38 = _createSuper(FunctionTypeNameContext);

    function FunctionTypeNameContext(parser, parent, invokingState) {
      var _this38;

      _classCallCheck(this, FunctionTypeNameContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this38 = _super38.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this38), "functionTypeParameterList", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(FunctionTypeParameterListContext);
        } else {
          return this.getTypedRuleContext(FunctionTypeParameterListContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this38), "InternalKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.InternalKeyword);
        } else {
          return this.getToken(SolidityParser.InternalKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this38), "ExternalKeyword", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.ExternalKeyword);
        } else {
          return this.getToken(SolidityParser.ExternalKeyword, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this38), "stateMutability", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(StateMutabilityContext);
        } else {
          return this.getTypedRuleContext(StateMutabilityContext, i);
        }
      });

      _this38.parser = parser;
      _this38.ruleIndex = SolidityParser.RULE_functionTypeName;
      return _this38;
    }

    _createClass(FunctionTypeNameContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterFunctionTypeName(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitFunctionTypeName(this);
        }
      }
    }]);

    return FunctionTypeNameContext;
  }(antlr4.ParserRuleContext);

  var StorageLocationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon38) {
    _inherits(StorageLocationContext, _antlr4$ParserRuleCon38);

    var _super39 = _createSuper(StorageLocationContext);

    function StorageLocationContext(parser, parent, invokingState) {
      var _this39;

      _classCallCheck(this, StorageLocationContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this39 = _super39.call(this, parent, invokingState);
      _this39.parser = parser;
      _this39.ruleIndex = SolidityParser.RULE_storageLocation;
      return _this39;
    }

    _createClass(StorageLocationContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterStorageLocation(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitStorageLocation(this);
        }
      }
    }]);

    return StorageLocationContext;
  }(antlr4.ParserRuleContext);

  var StateMutabilityContext = /*#__PURE__*/function (_antlr4$ParserRuleCon39) {
    _inherits(StateMutabilityContext, _antlr4$ParserRuleCon39);

    var _super40 = _createSuper(StateMutabilityContext);

    function StateMutabilityContext(parser, parent, invokingState) {
      var _this40;

      _classCallCheck(this, StateMutabilityContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this40 = _super40.call(this, parent, invokingState);
      _this40.parser = parser;
      _this40.ruleIndex = SolidityParser.RULE_stateMutability;
      return _this40;
    }

    _createClass(StateMutabilityContext, [{
      key: "PureKeyword",
      value: function PureKeyword() {
        return this.getToken(SolidityParser.PureKeyword, 0);
      }
    }, {
      key: "ConstantKeyword",
      value: function ConstantKeyword() {
        return this.getToken(SolidityParser.ConstantKeyword, 0);
      }
    }, {
      key: "ViewKeyword",
      value: function ViewKeyword() {
        return this.getToken(SolidityParser.ViewKeyword, 0);
      }
    }, {
      key: "PayableKeyword",
      value: function PayableKeyword() {
        return this.getToken(SolidityParser.PayableKeyword, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterStateMutability(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitStateMutability(this);
        }
      }
    }]);

    return StateMutabilityContext;
  }(antlr4.ParserRuleContext);

  var BlockContext = /*#__PURE__*/function (_antlr4$ParserRuleCon40) {
    _inherits(BlockContext, _antlr4$ParserRuleCon40);

    var _super41 = _createSuper(BlockContext);

    function BlockContext(parser, parent, invokingState) {
      var _this41;

      _classCallCheck(this, BlockContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this41 = _super41.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this41), "statement", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(StatementContext);
        } else {
          return this.getTypedRuleContext(StatementContext, i);
        }
      });

      _this41.parser = parser;
      _this41.ruleIndex = SolidityParser.RULE_block;
      return _this41;
    }

    _createClass(BlockContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterBlock(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitBlock(this);
        }
      }
    }]);

    return BlockContext;
  }(antlr4.ParserRuleContext);

  var StatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon41) {
    _inherits(StatementContext, _antlr4$ParserRuleCon41);

    var _super42 = _createSuper(StatementContext);

    function StatementContext(parser, parent, invokingState) {
      var _this42;

      _classCallCheck(this, StatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this42 = _super42.call(this, parent, invokingState);
      _this42.parser = parser;
      _this42.ruleIndex = SolidityParser.RULE_statement;
      return _this42;
    }

    _createClass(StatementContext, [{
      key: "ifStatement",
      value: function ifStatement() {
        return this.getTypedRuleContext(IfStatementContext, 0);
      }
    }, {
      key: "tryStatement",
      value: function tryStatement() {
        return this.getTypedRuleContext(TryStatementContext, 0);
      }
    }, {
      key: "whileStatement",
      value: function whileStatement() {
        return this.getTypedRuleContext(WhileStatementContext, 0);
      }
    }, {
      key: "forStatement",
      value: function forStatement() {
        return this.getTypedRuleContext(ForStatementContext, 0);
      }
    }, {
      key: "block",
      value: function block() {
        return this.getTypedRuleContext(BlockContext, 0);
      }
    }, {
      key: "inlineAssemblyStatement",
      value: function inlineAssemblyStatement() {
        return this.getTypedRuleContext(InlineAssemblyStatementContext, 0);
      }
    }, {
      key: "doWhileStatement",
      value: function doWhileStatement() {
        return this.getTypedRuleContext(DoWhileStatementContext, 0);
      }
    }, {
      key: "continueStatement",
      value: function continueStatement() {
        return this.getTypedRuleContext(ContinueStatementContext, 0);
      }
    }, {
      key: "breakStatement",
      value: function breakStatement() {
        return this.getTypedRuleContext(BreakStatementContext, 0);
      }
    }, {
      key: "returnStatement",
      value: function returnStatement() {
        return this.getTypedRuleContext(ReturnStatementContext, 0);
      }
    }, {
      key: "throwStatement",
      value: function throwStatement() {
        return this.getTypedRuleContext(ThrowStatementContext, 0);
      }
    }, {
      key: "emitStatement",
      value: function emitStatement() {
        return this.getTypedRuleContext(EmitStatementContext, 0);
      }
    }, {
      key: "simpleStatement",
      value: function simpleStatement() {
        return this.getTypedRuleContext(SimpleStatementContext, 0);
      }
    }, {
      key: "uncheckedStatement",
      value: function uncheckedStatement() {
        return this.getTypedRuleContext(UncheckedStatementContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitStatement(this);
        }
      }
    }]);

    return StatementContext;
  }(antlr4.ParserRuleContext);

  var ExpressionStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon42) {
    _inherits(ExpressionStatementContext, _antlr4$ParserRuleCon42);

    var _super43 = _createSuper(ExpressionStatementContext);

    function ExpressionStatementContext(parser, parent, invokingState) {
      var _this43;

      _classCallCheck(this, ExpressionStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this43 = _super43.call(this, parent, invokingState);
      _this43.parser = parser;
      _this43.ruleIndex = SolidityParser.RULE_expressionStatement;
      return _this43;
    }

    _createClass(ExpressionStatementContext, [{
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterExpressionStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitExpressionStatement(this);
        }
      }
    }]);

    return ExpressionStatementContext;
  }(antlr4.ParserRuleContext);

  var IfStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon43) {
    _inherits(IfStatementContext, _antlr4$ParserRuleCon43);

    var _super44 = _createSuper(IfStatementContext);

    function IfStatementContext(parser, parent, invokingState) {
      var _this44;

      _classCallCheck(this, IfStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this44 = _super44.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this44), "statement", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(StatementContext);
        } else {
          return this.getTypedRuleContext(StatementContext, i);
        }
      });

      _this44.parser = parser;
      _this44.ruleIndex = SolidityParser.RULE_ifStatement;
      return _this44;
    }

    _createClass(IfStatementContext, [{
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterIfStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitIfStatement(this);
        }
      }
    }]);

    return IfStatementContext;
  }(antlr4.ParserRuleContext);

  var TryStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon44) {
    _inherits(TryStatementContext, _antlr4$ParserRuleCon44);

    var _super45 = _createSuper(TryStatementContext);

    function TryStatementContext(parser, parent, invokingState) {
      var _this45;

      _classCallCheck(this, TryStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this45 = _super45.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this45), "catchClause", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(CatchClauseContext);
        } else {
          return this.getTypedRuleContext(CatchClauseContext, i);
        }
      });

      _this45.parser = parser;
      _this45.ruleIndex = SolidityParser.RULE_tryStatement;
      return _this45;
    }

    _createClass(TryStatementContext, [{
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "block",
      value: function block() {
        return this.getTypedRuleContext(BlockContext, 0);
      }
    }, {
      key: "returnParameters",
      value: function returnParameters() {
        return this.getTypedRuleContext(ReturnParametersContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterTryStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitTryStatement(this);
        }
      }
    }]);

    return TryStatementContext;
  }(antlr4.ParserRuleContext);

  var CatchClauseContext = /*#__PURE__*/function (_antlr4$ParserRuleCon45) {
    _inherits(CatchClauseContext, _antlr4$ParserRuleCon45);

    var _super46 = _createSuper(CatchClauseContext);

    function CatchClauseContext(parser, parent, invokingState) {
      var _this46;

      _classCallCheck(this, CatchClauseContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this46 = _super46.call(this, parent, invokingState);
      _this46.parser = parser;
      _this46.ruleIndex = SolidityParser.RULE_catchClause;
      return _this46;
    }

    _createClass(CatchClauseContext, [{
      key: "block",
      value: function block() {
        return this.getTypedRuleContext(BlockContext, 0);
      }
    }, {
      key: "parameterList",
      value: function parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
      }
    }, {
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterCatchClause(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitCatchClause(this);
        }
      }
    }]);

    return CatchClauseContext;
  }(antlr4.ParserRuleContext);

  var WhileStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon46) {
    _inherits(WhileStatementContext, _antlr4$ParserRuleCon46);

    var _super47 = _createSuper(WhileStatementContext);

    function WhileStatementContext(parser, parent, invokingState) {
      var _this47;

      _classCallCheck(this, WhileStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this47 = _super47.call(this, parent, invokingState);
      _this47.parser = parser;
      _this47.ruleIndex = SolidityParser.RULE_whileStatement;
      return _this47;
    }

    _createClass(WhileStatementContext, [{
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "statement",
      value: function statement() {
        return this.getTypedRuleContext(StatementContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterWhileStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitWhileStatement(this);
        }
      }
    }]);

    return WhileStatementContext;
  }(antlr4.ParserRuleContext);

  var SimpleStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon47) {
    _inherits(SimpleStatementContext, _antlr4$ParserRuleCon47);

    var _super48 = _createSuper(SimpleStatementContext);

    function SimpleStatementContext(parser, parent, invokingState) {
      var _this48;

      _classCallCheck(this, SimpleStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this48 = _super48.call(this, parent, invokingState);
      _this48.parser = parser;
      _this48.ruleIndex = SolidityParser.RULE_simpleStatement;
      return _this48;
    }

    _createClass(SimpleStatementContext, [{
      key: "variableDeclarationStatement",
      value: function variableDeclarationStatement() {
        return this.getTypedRuleContext(VariableDeclarationStatementContext, 0);
      }
    }, {
      key: "expressionStatement",
      value: function expressionStatement() {
        return this.getTypedRuleContext(ExpressionStatementContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterSimpleStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitSimpleStatement(this);
        }
      }
    }]);

    return SimpleStatementContext;
  }(antlr4.ParserRuleContext);

  var UncheckedStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon48) {
    _inherits(UncheckedStatementContext, _antlr4$ParserRuleCon48);

    var _super49 = _createSuper(UncheckedStatementContext);

    function UncheckedStatementContext(parser, parent, invokingState) {
      var _this49;

      _classCallCheck(this, UncheckedStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this49 = _super49.call(this, parent, invokingState);
      _this49.parser = parser;
      _this49.ruleIndex = SolidityParser.RULE_uncheckedStatement;
      return _this49;
    }

    _createClass(UncheckedStatementContext, [{
      key: "block",
      value: function block() {
        return this.getTypedRuleContext(BlockContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterUncheckedStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitUncheckedStatement(this);
        }
      }
    }]);

    return UncheckedStatementContext;
  }(antlr4.ParserRuleContext);

  var ForStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon49) {
    _inherits(ForStatementContext, _antlr4$ParserRuleCon49);

    var _super50 = _createSuper(ForStatementContext);

    function ForStatementContext(parser, parent, invokingState) {
      var _this50;

      _classCallCheck(this, ForStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this50 = _super50.call(this, parent, invokingState);
      _this50.parser = parser;
      _this50.ruleIndex = SolidityParser.RULE_forStatement;
      return _this50;
    }

    _createClass(ForStatementContext, [{
      key: "statement",
      value: function statement() {
        return this.getTypedRuleContext(StatementContext, 0);
      }
    }, {
      key: "simpleStatement",
      value: function simpleStatement() {
        return this.getTypedRuleContext(SimpleStatementContext, 0);
      }
    }, {
      key: "expressionStatement",
      value: function expressionStatement() {
        return this.getTypedRuleContext(ExpressionStatementContext, 0);
      }
    }, {
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterForStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitForStatement(this);
        }
      }
    }]);

    return ForStatementContext;
  }(antlr4.ParserRuleContext);

  var InlineAssemblyStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon50) {
    _inherits(InlineAssemblyStatementContext, _antlr4$ParserRuleCon50);

    var _super51 = _createSuper(InlineAssemblyStatementContext);

    function InlineAssemblyStatementContext(parser, parent, invokingState) {
      var _this51;

      _classCallCheck(this, InlineAssemblyStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this51 = _super51.call(this, parent, invokingState);
      _this51.parser = parser;
      _this51.ruleIndex = SolidityParser.RULE_inlineAssemblyStatement;
      return _this51;
    }

    _createClass(InlineAssemblyStatementContext, [{
      key: "assemblyBlock",
      value: function assemblyBlock() {
        return this.getTypedRuleContext(AssemblyBlockContext, 0);
      }
    }, {
      key: "StringLiteralFragment",
      value: function StringLiteralFragment() {
        return this.getToken(SolidityParser.StringLiteralFragment, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterInlineAssemblyStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitInlineAssemblyStatement(this);
        }
      }
    }]);

    return InlineAssemblyStatementContext;
  }(antlr4.ParserRuleContext);

  var DoWhileStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon51) {
    _inherits(DoWhileStatementContext, _antlr4$ParserRuleCon51);

    var _super52 = _createSuper(DoWhileStatementContext);

    function DoWhileStatementContext(parser, parent, invokingState) {
      var _this52;

      _classCallCheck(this, DoWhileStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this52 = _super52.call(this, parent, invokingState);
      _this52.parser = parser;
      _this52.ruleIndex = SolidityParser.RULE_doWhileStatement;
      return _this52;
    }

    _createClass(DoWhileStatementContext, [{
      key: "statement",
      value: function statement() {
        return this.getTypedRuleContext(StatementContext, 0);
      }
    }, {
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterDoWhileStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitDoWhileStatement(this);
        }
      }
    }]);

    return DoWhileStatementContext;
  }(antlr4.ParserRuleContext);

  var ContinueStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon52) {
    _inherits(ContinueStatementContext, _antlr4$ParserRuleCon52);

    var _super53 = _createSuper(ContinueStatementContext);

    function ContinueStatementContext(parser, parent, invokingState) {
      var _this53;

      _classCallCheck(this, ContinueStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this53 = _super53.call(this, parent, invokingState);
      _this53.parser = parser;
      _this53.ruleIndex = SolidityParser.RULE_continueStatement;
      return _this53;
    }

    _createClass(ContinueStatementContext, [{
      key: "ContinueKeyword",
      value: function ContinueKeyword() {
        return this.getToken(SolidityParser.ContinueKeyword, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterContinueStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitContinueStatement(this);
        }
      }
    }]);

    return ContinueStatementContext;
  }(antlr4.ParserRuleContext);

  var BreakStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon53) {
    _inherits(BreakStatementContext, _antlr4$ParserRuleCon53);

    var _super54 = _createSuper(BreakStatementContext);

    function BreakStatementContext(parser, parent, invokingState) {
      var _this54;

      _classCallCheck(this, BreakStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this54 = _super54.call(this, parent, invokingState);
      _this54.parser = parser;
      _this54.ruleIndex = SolidityParser.RULE_breakStatement;
      return _this54;
    }

    _createClass(BreakStatementContext, [{
      key: "BreakKeyword",
      value: function BreakKeyword() {
        return this.getToken(SolidityParser.BreakKeyword, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterBreakStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitBreakStatement(this);
        }
      }
    }]);

    return BreakStatementContext;
  }(antlr4.ParserRuleContext);

  var ReturnStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon54) {
    _inherits(ReturnStatementContext, _antlr4$ParserRuleCon54);

    var _super55 = _createSuper(ReturnStatementContext);

    function ReturnStatementContext(parser, parent, invokingState) {
      var _this55;

      _classCallCheck(this, ReturnStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this55 = _super55.call(this, parent, invokingState);
      _this55.parser = parser;
      _this55.ruleIndex = SolidityParser.RULE_returnStatement;
      return _this55;
    }

    _createClass(ReturnStatementContext, [{
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterReturnStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitReturnStatement(this);
        }
      }
    }]);

    return ReturnStatementContext;
  }(antlr4.ParserRuleContext);

  var ThrowStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon55) {
    _inherits(ThrowStatementContext, _antlr4$ParserRuleCon55);

    var _super56 = _createSuper(ThrowStatementContext);

    function ThrowStatementContext(parser, parent, invokingState) {
      var _this56;

      _classCallCheck(this, ThrowStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this56 = _super56.call(this, parent, invokingState);
      _this56.parser = parser;
      _this56.ruleIndex = SolidityParser.RULE_throwStatement;
      return _this56;
    }

    _createClass(ThrowStatementContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterThrowStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitThrowStatement(this);
        }
      }
    }]);

    return ThrowStatementContext;
  }(antlr4.ParserRuleContext);

  var EmitStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon56) {
    _inherits(EmitStatementContext, _antlr4$ParserRuleCon56);

    var _super57 = _createSuper(EmitStatementContext);

    function EmitStatementContext(parser, parent, invokingState) {
      var _this57;

      _classCallCheck(this, EmitStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this57 = _super57.call(this, parent, invokingState);
      _this57.parser = parser;
      _this57.ruleIndex = SolidityParser.RULE_emitStatement;
      return _this57;
    }

    _createClass(EmitStatementContext, [{
      key: "functionCall",
      value: function functionCall() {
        return this.getTypedRuleContext(FunctionCallContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterEmitStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitEmitStatement(this);
        }
      }
    }]);

    return EmitStatementContext;
  }(antlr4.ParserRuleContext);

  var VariableDeclarationStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon57) {
    _inherits(VariableDeclarationStatementContext, _antlr4$ParserRuleCon57);

    var _super58 = _createSuper(VariableDeclarationStatementContext);

    function VariableDeclarationStatementContext(parser, parent, invokingState) {
      var _this58;

      _classCallCheck(this, VariableDeclarationStatementContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this58 = _super58.call(this, parent, invokingState);
      _this58.parser = parser;
      _this58.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;
      return _this58;
    }

    _createClass(VariableDeclarationStatementContext, [{
      key: "identifierList",
      value: function identifierList() {
        return this.getTypedRuleContext(IdentifierListContext, 0);
      }
    }, {
      key: "variableDeclaration",
      value: function variableDeclaration() {
        return this.getTypedRuleContext(VariableDeclarationContext, 0);
      }
    }, {
      key: "variableDeclarationList",
      value: function variableDeclarationList() {
        return this.getTypedRuleContext(VariableDeclarationListContext, 0);
      }
    }, {
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterVariableDeclarationStatement(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitVariableDeclarationStatement(this);
        }
      }
    }]);

    return VariableDeclarationStatementContext;
  }(antlr4.ParserRuleContext);

  var VariableDeclarationListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon58) {
    _inherits(VariableDeclarationListContext, _antlr4$ParserRuleCon58);

    var _super59 = _createSuper(VariableDeclarationListContext);

    function VariableDeclarationListContext(parser, parent, invokingState) {
      var _this59;

      _classCallCheck(this, VariableDeclarationListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this59 = _super59.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this59), "variableDeclaration", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(VariableDeclarationContext);
        } else {
          return this.getTypedRuleContext(VariableDeclarationContext, i);
        }
      });

      _this59.parser = parser;
      _this59.ruleIndex = SolidityParser.RULE_variableDeclarationList;
      return _this59;
    }

    _createClass(VariableDeclarationListContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterVariableDeclarationList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitVariableDeclarationList(this);
        }
      }
    }]);

    return VariableDeclarationListContext;
  }(antlr4.ParserRuleContext);

  var IdentifierListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon59) {
    _inherits(IdentifierListContext, _antlr4$ParserRuleCon59);

    var _super60 = _createSuper(IdentifierListContext);

    function IdentifierListContext(parser, parent, invokingState) {
      var _this60;

      _classCallCheck(this, IdentifierListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this60 = _super60.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this60), "identifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(IdentifierContext);
        } else {
          return this.getTypedRuleContext(IdentifierContext, i);
        }
      });

      _this60.parser = parser;
      _this60.ruleIndex = SolidityParser.RULE_identifierList;
      return _this60;
    }

    _createClass(IdentifierListContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterIdentifierList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitIdentifierList(this);
        }
      }
    }]);

    return IdentifierListContext;
  }(antlr4.ParserRuleContext);

  var ElementaryTypeNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon60) {
    _inherits(ElementaryTypeNameContext, _antlr4$ParserRuleCon60);

    var _super61 = _createSuper(ElementaryTypeNameContext);

    function ElementaryTypeNameContext(parser, parent, invokingState) {
      var _this61;

      _classCallCheck(this, ElementaryTypeNameContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this61 = _super61.call(this, parent, invokingState);
      _this61.parser = parser;
      _this61.ruleIndex = SolidityParser.RULE_elementaryTypeName;
      return _this61;
    }

    _createClass(ElementaryTypeNameContext, [{
      key: "Int",
      value: function Int() {
        return this.getToken(SolidityParser.Int, 0);
      }
    }, {
      key: "Uint",
      value: function Uint() {
        return this.getToken(SolidityParser.Uint, 0);
      }
    }, {
      key: "Byte",
      value: function Byte() {
        return this.getToken(SolidityParser.Byte, 0);
      }
    }, {
      key: "Fixed",
      value: function Fixed() {
        return this.getToken(SolidityParser.Fixed, 0);
      }
    }, {
      key: "Ufixed",
      value: function Ufixed() {
        return this.getToken(SolidityParser.Ufixed, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterElementaryTypeName(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitElementaryTypeName(this);
        }
      }
    }]);

    return ElementaryTypeNameContext;
  }(antlr4.ParserRuleContext);

  var ExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon61) {
    _inherits(ExpressionContext, _antlr4$ParserRuleCon61);

    var _super62 = _createSuper(ExpressionContext);

    function ExpressionContext(parser, parent, invokingState) {
      var _this62;

      _classCallCheck(this, ExpressionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this62 = _super62.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this62), "expression", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(ExpressionContext);
        } else {
          return this.getTypedRuleContext(ExpressionContext, i);
        }
      });

      _this62.parser = parser;
      _this62.ruleIndex = SolidityParser.RULE_expression;
      return _this62;
    }

    _createClass(ExpressionContext, [{
      key: "typeName",
      value: function typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
      }
    }, {
      key: "primaryExpression",
      value: function primaryExpression() {
        return this.getTypedRuleContext(PrimaryExpressionContext, 0);
      }
    }, {
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "nameValueList",
      value: function nameValueList() {
        return this.getTypedRuleContext(NameValueListContext, 0);
      }
    }, {
      key: "functionCallArguments",
      value: function functionCallArguments() {
        return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterExpression(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitExpression(this);
        }
      }
    }]);

    return ExpressionContext;
  }(antlr4.ParserRuleContext);

  var PrimaryExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon62) {
    _inherits(PrimaryExpressionContext, _antlr4$ParserRuleCon62);

    var _super63 = _createSuper(PrimaryExpressionContext);

    function PrimaryExpressionContext(parser, parent, invokingState) {
      var _this63;

      _classCallCheck(this, PrimaryExpressionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this63 = _super63.call(this, parent, invokingState);
      _this63.parser = parser;
      _this63.ruleIndex = SolidityParser.RULE_primaryExpression;
      return _this63;
    }

    _createClass(PrimaryExpressionContext, [{
      key: "BooleanLiteral",
      value: function BooleanLiteral() {
        return this.getToken(SolidityParser.BooleanLiteral, 0);
      }
    }, {
      key: "numberLiteral",
      value: function numberLiteral() {
        return this.getTypedRuleContext(NumberLiteralContext, 0);
      }
    }, {
      key: "hexLiteral",
      value: function hexLiteral() {
        return this.getTypedRuleContext(HexLiteralContext, 0);
      }
    }, {
      key: "stringLiteral",
      value: function stringLiteral() {
        return this.getTypedRuleContext(StringLiteralContext, 0);
      }
    }, {
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "TypeKeyword",
      value: function TypeKeyword() {
        return this.getToken(SolidityParser.TypeKeyword, 0);
      }
    }, {
      key: "PayableKeyword",
      value: function PayableKeyword() {
        return this.getToken(SolidityParser.PayableKeyword, 0);
      }
    }, {
      key: "tupleExpression",
      value: function tupleExpression() {
        return this.getTypedRuleContext(TupleExpressionContext, 0);
      }
    }, {
      key: "typeNameExpression",
      value: function typeNameExpression() {
        return this.getTypedRuleContext(TypeNameExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterPrimaryExpression(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitPrimaryExpression(this);
        }
      }
    }]);

    return PrimaryExpressionContext;
  }(antlr4.ParserRuleContext);

  var ExpressionListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon63) {
    _inherits(ExpressionListContext, _antlr4$ParserRuleCon63);

    var _super64 = _createSuper(ExpressionListContext);

    function ExpressionListContext(parser, parent, invokingState) {
      var _this64;

      _classCallCheck(this, ExpressionListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this64 = _super64.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this64), "expression", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(ExpressionContext);
        } else {
          return this.getTypedRuleContext(ExpressionContext, i);
        }
      });

      _this64.parser = parser;
      _this64.ruleIndex = SolidityParser.RULE_expressionList;
      return _this64;
    }

    _createClass(ExpressionListContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterExpressionList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitExpressionList(this);
        }
      }
    }]);

    return ExpressionListContext;
  }(antlr4.ParserRuleContext);

  var NameValueListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon64) {
    _inherits(NameValueListContext, _antlr4$ParserRuleCon64);

    var _super65 = _createSuper(NameValueListContext);

    function NameValueListContext(parser, parent, invokingState) {
      var _this65;

      _classCallCheck(this, NameValueListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this65 = _super65.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this65), "nameValue", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(NameValueContext);
        } else {
          return this.getTypedRuleContext(NameValueContext, i);
        }
      });

      _this65.parser = parser;
      _this65.ruleIndex = SolidityParser.RULE_nameValueList;
      return _this65;
    }

    _createClass(NameValueListContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterNameValueList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitNameValueList(this);
        }
      }
    }]);

    return NameValueListContext;
  }(antlr4.ParserRuleContext);

  var NameValueContext = /*#__PURE__*/function (_antlr4$ParserRuleCon65) {
    _inherits(NameValueContext, _antlr4$ParserRuleCon65);

    var _super66 = _createSuper(NameValueContext);

    function NameValueContext(parser, parent, invokingState) {
      var _this66;

      _classCallCheck(this, NameValueContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this66 = _super66.call(this, parent, invokingState);
      _this66.parser = parser;
      _this66.ruleIndex = SolidityParser.RULE_nameValue;
      return _this66;
    }

    _createClass(NameValueContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterNameValue(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitNameValue(this);
        }
      }
    }]);

    return NameValueContext;
  }(antlr4.ParserRuleContext);

  var FunctionCallArgumentsContext = /*#__PURE__*/function (_antlr4$ParserRuleCon66) {
    _inherits(FunctionCallArgumentsContext, _antlr4$ParserRuleCon66);

    var _super67 = _createSuper(FunctionCallArgumentsContext);

    function FunctionCallArgumentsContext(parser, parent, invokingState) {
      var _this67;

      _classCallCheck(this, FunctionCallArgumentsContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this67 = _super67.call(this, parent, invokingState);
      _this67.parser = parser;
      _this67.ruleIndex = SolidityParser.RULE_functionCallArguments;
      return _this67;
    }

    _createClass(FunctionCallArgumentsContext, [{
      key: "nameValueList",
      value: function nameValueList() {
        return this.getTypedRuleContext(NameValueListContext, 0);
      }
    }, {
      key: "expressionList",
      value: function expressionList() {
        return this.getTypedRuleContext(ExpressionListContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterFunctionCallArguments(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitFunctionCallArguments(this);
        }
      }
    }]);

    return FunctionCallArgumentsContext;
  }(antlr4.ParserRuleContext);

  var FunctionCallContext = /*#__PURE__*/function (_antlr4$ParserRuleCon67) {
    _inherits(FunctionCallContext, _antlr4$ParserRuleCon67);

    var _super68 = _createSuper(FunctionCallContext);

    function FunctionCallContext(parser, parent, invokingState) {
      var _this68;

      _classCallCheck(this, FunctionCallContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this68 = _super68.call(this, parent, invokingState);
      _this68.parser = parser;
      _this68.ruleIndex = SolidityParser.RULE_functionCall;
      return _this68;
    }

    _createClass(FunctionCallContext, [{
      key: "expression",
      value: function expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
      }
    }, {
      key: "functionCallArguments",
      value: function functionCallArguments() {
        return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterFunctionCall(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitFunctionCall(this);
        }
      }
    }]);

    return FunctionCallContext;
  }(antlr4.ParserRuleContext);

  var AssemblyBlockContext = /*#__PURE__*/function (_antlr4$ParserRuleCon68) {
    _inherits(AssemblyBlockContext, _antlr4$ParserRuleCon68);

    var _super69 = _createSuper(AssemblyBlockContext);

    function AssemblyBlockContext(parser, parent, invokingState) {
      var _this69;

      _classCallCheck(this, AssemblyBlockContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this69 = _super69.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this69), "assemblyItem", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(AssemblyItemContext);
        } else {
          return this.getTypedRuleContext(AssemblyItemContext, i);
        }
      });

      _this69.parser = parser;
      _this69.ruleIndex = SolidityParser.RULE_assemblyBlock;
      return _this69;
    }

    _createClass(AssemblyBlockContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyBlock(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyBlock(this);
        }
      }
    }]);

    return AssemblyBlockContext;
  }(antlr4.ParserRuleContext);

  var AssemblyItemContext = /*#__PURE__*/function (_antlr4$ParserRuleCon69) {
    _inherits(AssemblyItemContext, _antlr4$ParserRuleCon69);

    var _super70 = _createSuper(AssemblyItemContext);

    function AssemblyItemContext(parser, parent, invokingState) {
      var _this70;

      _classCallCheck(this, AssemblyItemContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this70 = _super70.call(this, parent, invokingState);
      _this70.parser = parser;
      _this70.ruleIndex = SolidityParser.RULE_assemblyItem;
      return _this70;
    }

    _createClass(AssemblyItemContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "assemblyBlock",
      value: function assemblyBlock() {
        return this.getTypedRuleContext(AssemblyBlockContext, 0);
      }
    }, {
      key: "assemblyExpression",
      value: function assemblyExpression() {
        return this.getTypedRuleContext(AssemblyExpressionContext, 0);
      }
    }, {
      key: "assemblyLocalDefinition",
      value: function assemblyLocalDefinition() {
        return this.getTypedRuleContext(AssemblyLocalDefinitionContext, 0);
      }
    }, {
      key: "assemblyAssignment",
      value: function assemblyAssignment() {
        return this.getTypedRuleContext(AssemblyAssignmentContext, 0);
      }
    }, {
      key: "assemblyStackAssignment",
      value: function assemblyStackAssignment() {
        return this.getTypedRuleContext(AssemblyStackAssignmentContext, 0);
      }
    }, {
      key: "labelDefinition",
      value: function labelDefinition() {
        return this.getTypedRuleContext(LabelDefinitionContext, 0);
      }
    }, {
      key: "assemblySwitch",
      value: function assemblySwitch() {
        return this.getTypedRuleContext(AssemblySwitchContext, 0);
      }
    }, {
      key: "assemblyFunctionDefinition",
      value: function assemblyFunctionDefinition() {
        return this.getTypedRuleContext(AssemblyFunctionDefinitionContext, 0);
      }
    }, {
      key: "assemblyFor",
      value: function assemblyFor() {
        return this.getTypedRuleContext(AssemblyForContext, 0);
      }
    }, {
      key: "assemblyIf",
      value: function assemblyIf() {
        return this.getTypedRuleContext(AssemblyIfContext, 0);
      }
    }, {
      key: "BreakKeyword",
      value: function BreakKeyword() {
        return this.getToken(SolidityParser.BreakKeyword, 0);
      }
    }, {
      key: "ContinueKeyword",
      value: function ContinueKeyword() {
        return this.getToken(SolidityParser.ContinueKeyword, 0);
      }
    }, {
      key: "LeaveKeyword",
      value: function LeaveKeyword() {
        return this.getToken(SolidityParser.LeaveKeyword, 0);
      }
    }, {
      key: "subAssembly",
      value: function subAssembly() {
        return this.getTypedRuleContext(SubAssemblyContext, 0);
      }
    }, {
      key: "numberLiteral",
      value: function numberLiteral() {
        return this.getTypedRuleContext(NumberLiteralContext, 0);
      }
    }, {
      key: "stringLiteral",
      value: function stringLiteral() {
        return this.getTypedRuleContext(StringLiteralContext, 0);
      }
    }, {
      key: "hexLiteral",
      value: function hexLiteral() {
        return this.getTypedRuleContext(HexLiteralContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyItem(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyItem(this);
        }
      }
    }]);

    return AssemblyItemContext;
  }(antlr4.ParserRuleContext);

  var AssemblyExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon70) {
    _inherits(AssemblyExpressionContext, _antlr4$ParserRuleCon70);

    var _super71 = _createSuper(AssemblyExpressionContext);

    function AssemblyExpressionContext(parser, parent, invokingState) {
      var _this71;

      _classCallCheck(this, AssemblyExpressionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this71 = _super71.call(this, parent, invokingState);
      _this71.parser = parser;
      _this71.ruleIndex = SolidityParser.RULE_assemblyExpression;
      return _this71;
    }

    _createClass(AssemblyExpressionContext, [{
      key: "assemblyCall",
      value: function assemblyCall() {
        return this.getTypedRuleContext(AssemblyCallContext, 0);
      }
    }, {
      key: "assemblyLiteral",
      value: function assemblyLiteral() {
        return this.getTypedRuleContext(AssemblyLiteralContext, 0);
      }
    }, {
      key: "assemblyMember",
      value: function assemblyMember() {
        return this.getTypedRuleContext(AssemblyMemberContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyExpression(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyExpression(this);
        }
      }
    }]);

    return AssemblyExpressionContext;
  }(antlr4.ParserRuleContext);

  var AssemblyMemberContext = /*#__PURE__*/function (_antlr4$ParserRuleCon71) {
    _inherits(AssemblyMemberContext, _antlr4$ParserRuleCon71);

    var _super72 = _createSuper(AssemblyMemberContext);

    function AssemblyMemberContext(parser, parent, invokingState) {
      var _this72;

      _classCallCheck(this, AssemblyMemberContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this72 = _super72.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this72), "identifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(IdentifierContext);
        } else {
          return this.getTypedRuleContext(IdentifierContext, i);
        }
      });

      _this72.parser = parser;
      _this72.ruleIndex = SolidityParser.RULE_assemblyMember;
      return _this72;
    }

    _createClass(AssemblyMemberContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyMember(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyMember(this);
        }
      }
    }]);

    return AssemblyMemberContext;
  }(antlr4.ParserRuleContext);

  var AssemblyCallContext = /*#__PURE__*/function (_antlr4$ParserRuleCon72) {
    _inherits(AssemblyCallContext, _antlr4$ParserRuleCon72);

    var _super73 = _createSuper(AssemblyCallContext);

    function AssemblyCallContext(parser, parent, invokingState) {
      var _this73;

      _classCallCheck(this, AssemblyCallContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this73 = _super73.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this73), "assemblyExpression", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(AssemblyExpressionContext);
        } else {
          return this.getTypedRuleContext(AssemblyExpressionContext, i);
        }
      });

      _this73.parser = parser;
      _this73.ruleIndex = SolidityParser.RULE_assemblyCall;
      return _this73;
    }

    _createClass(AssemblyCallContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyCall(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyCall(this);
        }
      }
    }]);

    return AssemblyCallContext;
  }(antlr4.ParserRuleContext);

  var AssemblyLocalDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon73) {
    _inherits(AssemblyLocalDefinitionContext, _antlr4$ParserRuleCon73);

    var _super74 = _createSuper(AssemblyLocalDefinitionContext);

    function AssemblyLocalDefinitionContext(parser, parent, invokingState) {
      var _this74;

      _classCallCheck(this, AssemblyLocalDefinitionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this74 = _super74.call(this, parent, invokingState);
      _this74.parser = parser;
      _this74.ruleIndex = SolidityParser.RULE_assemblyLocalDefinition;
      return _this74;
    }

    _createClass(AssemblyLocalDefinitionContext, [{
      key: "assemblyIdentifierOrList",
      value: function assemblyIdentifierOrList() {
        return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);
      }
    }, {
      key: "assemblyExpression",
      value: function assemblyExpression() {
        return this.getTypedRuleContext(AssemblyExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyLocalDefinition(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyLocalDefinition(this);
        }
      }
    }]);

    return AssemblyLocalDefinitionContext;
  }(antlr4.ParserRuleContext);

  var AssemblyAssignmentContext = /*#__PURE__*/function (_antlr4$ParserRuleCon74) {
    _inherits(AssemblyAssignmentContext, _antlr4$ParserRuleCon74);

    var _super75 = _createSuper(AssemblyAssignmentContext);

    function AssemblyAssignmentContext(parser, parent, invokingState) {
      var _this75;

      _classCallCheck(this, AssemblyAssignmentContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this75 = _super75.call(this, parent, invokingState);
      _this75.parser = parser;
      _this75.ruleIndex = SolidityParser.RULE_assemblyAssignment;
      return _this75;
    }

    _createClass(AssemblyAssignmentContext, [{
      key: "assemblyIdentifierOrList",
      value: function assemblyIdentifierOrList() {
        return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);
      }
    }, {
      key: "assemblyExpression",
      value: function assemblyExpression() {
        return this.getTypedRuleContext(AssemblyExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyAssignment(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyAssignment(this);
        }
      }
    }]);

    return AssemblyAssignmentContext;
  }(antlr4.ParserRuleContext);

  var AssemblyIdentifierOrListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon75) {
    _inherits(AssemblyIdentifierOrListContext, _antlr4$ParserRuleCon75);

    var _super76 = _createSuper(AssemblyIdentifierOrListContext);

    function AssemblyIdentifierOrListContext(parser, parent, invokingState) {
      var _this76;

      _classCallCheck(this, AssemblyIdentifierOrListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this76 = _super76.call(this, parent, invokingState);
      _this76.parser = parser;
      _this76.ruleIndex = SolidityParser.RULE_assemblyIdentifierOrList;
      return _this76;
    }

    _createClass(AssemblyIdentifierOrListContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "assemblyMember",
      value: function assemblyMember() {
        return this.getTypedRuleContext(AssemblyMemberContext, 0);
      }
    }, {
      key: "assemblyIdentifierList",
      value: function assemblyIdentifierList() {
        return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyIdentifierOrList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyIdentifierOrList(this);
        }
      }
    }]);

    return AssemblyIdentifierOrListContext;
  }(antlr4.ParserRuleContext);

  var AssemblyIdentifierListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon76) {
    _inherits(AssemblyIdentifierListContext, _antlr4$ParserRuleCon76);

    var _super77 = _createSuper(AssemblyIdentifierListContext);

    function AssemblyIdentifierListContext(parser, parent, invokingState) {
      var _this77;

      _classCallCheck(this, AssemblyIdentifierListContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this77 = _super77.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this77), "identifier", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(IdentifierContext);
        } else {
          return this.getTypedRuleContext(IdentifierContext, i);
        }
      });

      _this77.parser = parser;
      _this77.ruleIndex = SolidityParser.RULE_assemblyIdentifierList;
      return _this77;
    }

    _createClass(AssemblyIdentifierListContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyIdentifierList(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyIdentifierList(this);
        }
      }
    }]);

    return AssemblyIdentifierListContext;
  }(antlr4.ParserRuleContext);

  var AssemblyStackAssignmentContext = /*#__PURE__*/function (_antlr4$ParserRuleCon77) {
    _inherits(AssemblyStackAssignmentContext, _antlr4$ParserRuleCon77);

    var _super78 = _createSuper(AssemblyStackAssignmentContext);

    function AssemblyStackAssignmentContext(parser, parent, invokingState) {
      var _this78;

      _classCallCheck(this, AssemblyStackAssignmentContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this78 = _super78.call(this, parent, invokingState);
      _this78.parser = parser;
      _this78.ruleIndex = SolidityParser.RULE_assemblyStackAssignment;
      return _this78;
    }

    _createClass(AssemblyStackAssignmentContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyStackAssignment(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyStackAssignment(this);
        }
      }
    }]);

    return AssemblyStackAssignmentContext;
  }(antlr4.ParserRuleContext);

  var LabelDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon78) {
    _inherits(LabelDefinitionContext, _antlr4$ParserRuleCon78);

    var _super79 = _createSuper(LabelDefinitionContext);

    function LabelDefinitionContext(parser, parent, invokingState) {
      var _this79;

      _classCallCheck(this, LabelDefinitionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this79 = _super79.call(this, parent, invokingState);
      _this79.parser = parser;
      _this79.ruleIndex = SolidityParser.RULE_labelDefinition;
      return _this79;
    }

    _createClass(LabelDefinitionContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterLabelDefinition(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitLabelDefinition(this);
        }
      }
    }]);

    return LabelDefinitionContext;
  }(antlr4.ParserRuleContext);

  var AssemblySwitchContext = /*#__PURE__*/function (_antlr4$ParserRuleCon79) {
    _inherits(AssemblySwitchContext, _antlr4$ParserRuleCon79);

    var _super80 = _createSuper(AssemblySwitchContext);

    function AssemblySwitchContext(parser, parent, invokingState) {
      var _this80;

      _classCallCheck(this, AssemblySwitchContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this80 = _super80.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this80), "assemblyCase", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(AssemblyCaseContext);
        } else {
          return this.getTypedRuleContext(AssemblyCaseContext, i);
        }
      });

      _this80.parser = parser;
      _this80.ruleIndex = SolidityParser.RULE_assemblySwitch;
      return _this80;
    }

    _createClass(AssemblySwitchContext, [{
      key: "assemblyExpression",
      value: function assemblyExpression() {
        return this.getTypedRuleContext(AssemblyExpressionContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblySwitch(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblySwitch(this);
        }
      }
    }]);

    return AssemblySwitchContext;
  }(antlr4.ParserRuleContext);

  var AssemblyCaseContext = /*#__PURE__*/function (_antlr4$ParserRuleCon80) {
    _inherits(AssemblyCaseContext, _antlr4$ParserRuleCon80);

    var _super81 = _createSuper(AssemblyCaseContext);

    function AssemblyCaseContext(parser, parent, invokingState) {
      var _this81;

      _classCallCheck(this, AssemblyCaseContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this81 = _super81.call(this, parent, invokingState);
      _this81.parser = parser;
      _this81.ruleIndex = SolidityParser.RULE_assemblyCase;
      return _this81;
    }

    _createClass(AssemblyCaseContext, [{
      key: "assemblyLiteral",
      value: function assemblyLiteral() {
        return this.getTypedRuleContext(AssemblyLiteralContext, 0);
      }
    }, {
      key: "assemblyBlock",
      value: function assemblyBlock() {
        return this.getTypedRuleContext(AssemblyBlockContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyCase(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyCase(this);
        }
      }
    }]);

    return AssemblyCaseContext;
  }(antlr4.ParserRuleContext);

  var AssemblyFunctionDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon81) {
    _inherits(AssemblyFunctionDefinitionContext, _antlr4$ParserRuleCon81);

    var _super82 = _createSuper(AssemblyFunctionDefinitionContext);

    function AssemblyFunctionDefinitionContext(parser, parent, invokingState) {
      var _this82;

      _classCallCheck(this, AssemblyFunctionDefinitionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this82 = _super82.call(this, parent, invokingState);
      _this82.parser = parser;
      _this82.ruleIndex = SolidityParser.RULE_assemblyFunctionDefinition;
      return _this82;
    }

    _createClass(AssemblyFunctionDefinitionContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "assemblyBlock",
      value: function assemblyBlock() {
        return this.getTypedRuleContext(AssemblyBlockContext, 0);
      }
    }, {
      key: "assemblyIdentifierList",
      value: function assemblyIdentifierList() {
        return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);
      }
    }, {
      key: "assemblyFunctionReturns",
      value: function assemblyFunctionReturns() {
        return this.getTypedRuleContext(AssemblyFunctionReturnsContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyFunctionDefinition(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyFunctionDefinition(this);
        }
      }
    }]);

    return AssemblyFunctionDefinitionContext;
  }(antlr4.ParserRuleContext);

  var AssemblyFunctionReturnsContext = /*#__PURE__*/function (_antlr4$ParserRuleCon82) {
    _inherits(AssemblyFunctionReturnsContext, _antlr4$ParserRuleCon82);

    var _super83 = _createSuper(AssemblyFunctionReturnsContext);

    function AssemblyFunctionReturnsContext(parser, parent, invokingState) {
      var _this83;

      _classCallCheck(this, AssemblyFunctionReturnsContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this83 = _super83.call(this, parent, invokingState);
      _this83.parser = parser;
      _this83.ruleIndex = SolidityParser.RULE_assemblyFunctionReturns;
      return _this83;
    }

    _createClass(AssemblyFunctionReturnsContext, [{
      key: "assemblyIdentifierList",
      value: function assemblyIdentifierList() {
        return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyFunctionReturns(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyFunctionReturns(this);
        }
      }
    }]);

    return AssemblyFunctionReturnsContext;
  }(antlr4.ParserRuleContext);

  var AssemblyForContext = /*#__PURE__*/function (_antlr4$ParserRuleCon83) {
    _inherits(AssemblyForContext, _antlr4$ParserRuleCon83);

    var _super84 = _createSuper(AssemblyForContext);

    function AssemblyForContext(parser, parent, invokingState) {
      var _this84;

      _classCallCheck(this, AssemblyForContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this84 = _super84.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this84), "assemblyExpression", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(AssemblyExpressionContext);
        } else {
          return this.getTypedRuleContext(AssemblyExpressionContext, i);
        }
      });

      _defineProperty(_assertThisInitialized(_this84), "assemblyBlock", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(AssemblyBlockContext);
        } else {
          return this.getTypedRuleContext(AssemblyBlockContext, i);
        }
      });

      _this84.parser = parser;
      _this84.ruleIndex = SolidityParser.RULE_assemblyFor;
      return _this84;
    }

    _createClass(AssemblyForContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyFor(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyFor(this);
        }
      }
    }]);

    return AssemblyForContext;
  }(antlr4.ParserRuleContext);

  var AssemblyIfContext = /*#__PURE__*/function (_antlr4$ParserRuleCon84) {
    _inherits(AssemblyIfContext, _antlr4$ParserRuleCon84);

    var _super85 = _createSuper(AssemblyIfContext);

    function AssemblyIfContext(parser, parent, invokingState) {
      var _this85;

      _classCallCheck(this, AssemblyIfContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this85 = _super85.call(this, parent, invokingState);
      _this85.parser = parser;
      _this85.ruleIndex = SolidityParser.RULE_assemblyIf;
      return _this85;
    }

    _createClass(AssemblyIfContext, [{
      key: "assemblyExpression",
      value: function assemblyExpression() {
        return this.getTypedRuleContext(AssemblyExpressionContext, 0);
      }
    }, {
      key: "assemblyBlock",
      value: function assemblyBlock() {
        return this.getTypedRuleContext(AssemblyBlockContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyIf(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyIf(this);
        }
      }
    }]);

    return AssemblyIfContext;
  }(antlr4.ParserRuleContext);

  var AssemblyLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon85) {
    _inherits(AssemblyLiteralContext, _antlr4$ParserRuleCon85);

    var _super86 = _createSuper(AssemblyLiteralContext);

    function AssemblyLiteralContext(parser, parent, invokingState) {
      var _this86;

      _classCallCheck(this, AssemblyLiteralContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this86 = _super86.call(this, parent, invokingState);
      _this86.parser = parser;
      _this86.ruleIndex = SolidityParser.RULE_assemblyLiteral;
      return _this86;
    }

    _createClass(AssemblyLiteralContext, [{
      key: "stringLiteral",
      value: function stringLiteral() {
        return this.getTypedRuleContext(StringLiteralContext, 0);
      }
    }, {
      key: "DecimalNumber",
      value: function DecimalNumber() {
        return this.getToken(SolidityParser.DecimalNumber, 0);
      }
    }, {
      key: "HexNumber",
      value: function HexNumber() {
        return this.getToken(SolidityParser.HexNumber, 0);
      }
    }, {
      key: "hexLiteral",
      value: function hexLiteral() {
        return this.getTypedRuleContext(HexLiteralContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterAssemblyLiteral(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitAssemblyLiteral(this);
        }
      }
    }]);

    return AssemblyLiteralContext;
  }(antlr4.ParserRuleContext);

  var SubAssemblyContext = /*#__PURE__*/function (_antlr4$ParserRuleCon86) {
    _inherits(SubAssemblyContext, _antlr4$ParserRuleCon86);

    var _super87 = _createSuper(SubAssemblyContext);

    function SubAssemblyContext(parser, parent, invokingState) {
      var _this87;

      _classCallCheck(this, SubAssemblyContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this87 = _super87.call(this, parent, invokingState);
      _this87.parser = parser;
      _this87.ruleIndex = SolidityParser.RULE_subAssembly;
      return _this87;
    }

    _createClass(SubAssemblyContext, [{
      key: "identifier",
      value: function identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
      }
    }, {
      key: "assemblyBlock",
      value: function assemblyBlock() {
        return this.getTypedRuleContext(AssemblyBlockContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterSubAssembly(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitSubAssembly(this);
        }
      }
    }]);

    return SubAssemblyContext;
  }(antlr4.ParserRuleContext);

  var TupleExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon87) {
    _inherits(TupleExpressionContext, _antlr4$ParserRuleCon87);

    var _super88 = _createSuper(TupleExpressionContext);

    function TupleExpressionContext(parser, parent, invokingState) {
      var _this88;

      _classCallCheck(this, TupleExpressionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this88 = _super88.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this88), "expression", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(ExpressionContext);
        } else {
          return this.getTypedRuleContext(ExpressionContext, i);
        }
      });

      _this88.parser = parser;
      _this88.ruleIndex = SolidityParser.RULE_tupleExpression;
      return _this88;
    }

    _createClass(TupleExpressionContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterTupleExpression(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitTupleExpression(this);
        }
      }
    }]);

    return TupleExpressionContext;
  }(antlr4.ParserRuleContext);

  var TypeNameExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon88) {
    _inherits(TypeNameExpressionContext, _antlr4$ParserRuleCon88);

    var _super89 = _createSuper(TypeNameExpressionContext);

    function TypeNameExpressionContext(parser, parent, invokingState) {
      var _this89;

      _classCallCheck(this, TypeNameExpressionContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this89 = _super89.call(this, parent, invokingState);
      _this89.parser = parser;
      _this89.ruleIndex = SolidityParser.RULE_typeNameExpression;
      return _this89;
    }

    _createClass(TypeNameExpressionContext, [{
      key: "elementaryTypeName",
      value: function elementaryTypeName() {
        return this.getTypedRuleContext(ElementaryTypeNameContext, 0);
      }
    }, {
      key: "userDefinedTypeName",
      value: function userDefinedTypeName() {
        return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterTypeNameExpression(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitTypeNameExpression(this);
        }
      }
    }]);

    return TypeNameExpressionContext;
  }(antlr4.ParserRuleContext);

  var NumberLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon89) {
    _inherits(NumberLiteralContext, _antlr4$ParserRuleCon89);

    var _super90 = _createSuper(NumberLiteralContext);

    function NumberLiteralContext(parser, parent, invokingState) {
      var _this90;

      _classCallCheck(this, NumberLiteralContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this90 = _super90.call(this, parent, invokingState);
      _this90.parser = parser;
      _this90.ruleIndex = SolidityParser.RULE_numberLiteral;
      return _this90;
    }

    _createClass(NumberLiteralContext, [{
      key: "DecimalNumber",
      value: function DecimalNumber() {
        return this.getToken(SolidityParser.DecimalNumber, 0);
      }
    }, {
      key: "HexNumber",
      value: function HexNumber() {
        return this.getToken(SolidityParser.HexNumber, 0);
      }
    }, {
      key: "NumberUnit",
      value: function NumberUnit() {
        return this.getToken(SolidityParser.NumberUnit, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterNumberLiteral(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitNumberLiteral(this);
        }
      }
    }]);

    return NumberLiteralContext;
  }(antlr4.ParserRuleContext);

  var IdentifierContext = /*#__PURE__*/function (_antlr4$ParserRuleCon90) {
    _inherits(IdentifierContext, _antlr4$ParserRuleCon90);

    var _super91 = _createSuper(IdentifierContext);

    function IdentifierContext(parser, parent, invokingState) {
      var _this91;

      _classCallCheck(this, IdentifierContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this91 = _super91.call(this, parent, invokingState);
      _this91.parser = parser;
      _this91.ruleIndex = SolidityParser.RULE_identifier;
      return _this91;
    }

    _createClass(IdentifierContext, [{
      key: "ReceiveKeyword",
      value: function ReceiveKeyword() {
        return this.getToken(SolidityParser.ReceiveKeyword, 0);
      }
    }, {
      key: "PayableKeyword",
      value: function PayableKeyword() {
        return this.getToken(SolidityParser.PayableKeyword, 0);
      }
    }, {
      key: "LeaveKeyword",
      value: function LeaveKeyword() {
        return this.getToken(SolidityParser.LeaveKeyword, 0);
      }
    }, {
      key: "Identifier",
      value: function Identifier() {
        return this.getToken(SolidityParser.Identifier, 0);
      }
    }, {
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterIdentifier(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitIdentifier(this);
        }
      }
    }]);

    return IdentifierContext;
  }(antlr4.ParserRuleContext);

  var HexLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon91) {
    _inherits(HexLiteralContext, _antlr4$ParserRuleCon91);

    var _super92 = _createSuper(HexLiteralContext);

    function HexLiteralContext(parser, parent, invokingState) {
      var _this92;

      _classCallCheck(this, HexLiteralContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this92 = _super92.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this92), "HexLiteralFragment", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.HexLiteralFragment);
        } else {
          return this.getToken(SolidityParser.HexLiteralFragment, i);
        }
      });

      _this92.parser = parser;
      _this92.ruleIndex = SolidityParser.RULE_hexLiteral;
      return _this92;
    }

    _createClass(HexLiteralContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterHexLiteral(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitHexLiteral(this);
        }
      }
    }]);

    return HexLiteralContext;
  }(antlr4.ParserRuleContext);

  var OverrideSpecifierContext = /*#__PURE__*/function (_antlr4$ParserRuleCon92) {
    _inherits(OverrideSpecifierContext, _antlr4$ParserRuleCon92);

    var _super93 = _createSuper(OverrideSpecifierContext);

    function OverrideSpecifierContext(parser, parent, invokingState) {
      var _this93;

      _classCallCheck(this, OverrideSpecifierContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this93 = _super93.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this93), "userDefinedTypeName", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTypedRuleContexts(UserDefinedTypeNameContext);
        } else {
          return this.getTypedRuleContext(UserDefinedTypeNameContext, i);
        }
      });

      _this93.parser = parser;
      _this93.ruleIndex = SolidityParser.RULE_overrideSpecifier;
      return _this93;
    }

    _createClass(OverrideSpecifierContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterOverrideSpecifier(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitOverrideSpecifier(this);
        }
      }
    }]);

    return OverrideSpecifierContext;
  }(antlr4.ParserRuleContext);

  var StringLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon93) {
    _inherits(StringLiteralContext, _antlr4$ParserRuleCon93);

    var _super94 = _createSuper(StringLiteralContext);

    function StringLiteralContext(parser, parent, invokingState) {
      var _this94;

      _classCallCheck(this, StringLiteralContext);

      if (parent === undefined) {
        parent = null;
      }

      if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
      }

      _this94 = _super94.call(this, parent, invokingState);

      _defineProperty(_assertThisInitialized(_this94), "StringLiteralFragment", function (i) {
        if (i === undefined) {
          i = null;
        }

        if (i === null) {
          return this.getTokens(SolidityParser.StringLiteralFragment);
        } else {
          return this.getToken(SolidityParser.StringLiteralFragment, i);
        }
      });

      _this94.parser = parser;
      _this94.ruleIndex = SolidityParser.RULE_stringLiteral;
      return _this94;
    }

    _createClass(StringLiteralContext, [{
      key: "enterRule",
      value: function enterRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.enterStringLiteral(this);
        }
      }
    }, {
      key: "exitRule",
      value: function exitRule(listener) {
        if (listener instanceof SolidityListener) {
          listener.exitStringLiteral(this);
        }
      }
    }]);

    return StringLiteralContext;
  }(antlr4.ParserRuleContext);

  SolidityParser.SourceUnitContext = SourceUnitContext;
  SolidityParser.PragmaDirectiveContext = PragmaDirectiveContext;
  SolidityParser.PragmaNameContext = PragmaNameContext;
  SolidityParser.PragmaValueContext = PragmaValueContext;
  SolidityParser.VersionContext = VersionContext;
  SolidityParser.VersionOperatorContext = VersionOperatorContext;
  SolidityParser.VersionConstraintContext = VersionConstraintContext;
  SolidityParser.ImportDeclarationContext = ImportDeclarationContext;
  SolidityParser.ImportDirectiveContext = ImportDirectiveContext;
  SolidityParser.ContractDefinitionContext = ContractDefinitionContext;
  SolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext;
  SolidityParser.ContractPartContext = ContractPartContext;
  SolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext;
  SolidityParser.FileLevelConstantContext = FileLevelConstantContext;
  SolidityParser.UsingForDeclarationContext = UsingForDeclarationContext;
  SolidityParser.StructDefinitionContext = StructDefinitionContext;
  SolidityParser.ModifierDefinitionContext = ModifierDefinitionContext;
  SolidityParser.ModifierInvocationContext = ModifierInvocationContext;
  SolidityParser.FunctionDefinitionContext = FunctionDefinitionContext;
  SolidityParser.FunctionDescriptorContext = FunctionDescriptorContext;
  SolidityParser.ReturnParametersContext = ReturnParametersContext;
  SolidityParser.ModifierListContext = ModifierListContext;
  SolidityParser.EventDefinitionContext = EventDefinitionContext;
  SolidityParser.EnumValueContext = EnumValueContext;
  SolidityParser.EnumDefinitionContext = EnumDefinitionContext;
  SolidityParser.ParameterListContext = ParameterListContext;
  SolidityParser.ParameterContext = ParameterContext;
  SolidityParser.EventParameterListContext = EventParameterListContext;
  SolidityParser.EventParameterContext = EventParameterContext;
  SolidityParser.FunctionTypeParameterListContext = FunctionTypeParameterListContext;
  SolidityParser.FunctionTypeParameterContext = FunctionTypeParameterContext;
  SolidityParser.VariableDeclarationContext = VariableDeclarationContext;
  SolidityParser.TypeNameContext = TypeNameContext;
  SolidityParser.UserDefinedTypeNameContext = UserDefinedTypeNameContext;
  SolidityParser.MappingKeyContext = MappingKeyContext;
  SolidityParser.MappingContext = MappingContext;
  SolidityParser.FunctionTypeNameContext = FunctionTypeNameContext;
  SolidityParser.StorageLocationContext = StorageLocationContext;
  SolidityParser.StateMutabilityContext = StateMutabilityContext;
  SolidityParser.BlockContext = BlockContext;
  SolidityParser.StatementContext = StatementContext;
  SolidityParser.ExpressionStatementContext = ExpressionStatementContext;
  SolidityParser.IfStatementContext = IfStatementContext;
  SolidityParser.TryStatementContext = TryStatementContext;
  SolidityParser.CatchClauseContext = CatchClauseContext;
  SolidityParser.WhileStatementContext = WhileStatementContext;
  SolidityParser.SimpleStatementContext = SimpleStatementContext;
  SolidityParser.UncheckedStatementContext = UncheckedStatementContext;
  SolidityParser.ForStatementContext = ForStatementContext;
  SolidityParser.InlineAssemblyStatementContext = InlineAssemblyStatementContext;
  SolidityParser.DoWhileStatementContext = DoWhileStatementContext;
  SolidityParser.ContinueStatementContext = ContinueStatementContext;
  SolidityParser.BreakStatementContext = BreakStatementContext;
  SolidityParser.ReturnStatementContext = ReturnStatementContext;
  SolidityParser.ThrowStatementContext = ThrowStatementContext;
  SolidityParser.EmitStatementContext = EmitStatementContext;
  SolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext;
  SolidityParser.VariableDeclarationListContext = VariableDeclarationListContext;
  SolidityParser.IdentifierListContext = IdentifierListContext;
  SolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext;
  SolidityParser.ExpressionContext = ExpressionContext;
  SolidityParser.PrimaryExpressionContext = PrimaryExpressionContext;
  SolidityParser.ExpressionListContext = ExpressionListContext;
  SolidityParser.NameValueListContext = NameValueListContext;
  SolidityParser.NameValueContext = NameValueContext;
  SolidityParser.FunctionCallArgumentsContext = FunctionCallArgumentsContext;
  SolidityParser.FunctionCallContext = FunctionCallContext;
  SolidityParser.AssemblyBlockContext = AssemblyBlockContext;
  SolidityParser.AssemblyItemContext = AssemblyItemContext;
  SolidityParser.AssemblyExpressionContext = AssemblyExpressionContext;
  SolidityParser.AssemblyMemberContext = AssemblyMemberContext;
  SolidityParser.AssemblyCallContext = AssemblyCallContext;
  SolidityParser.AssemblyLocalDefinitionContext = AssemblyLocalDefinitionContext;
  SolidityParser.AssemblyAssignmentContext = AssemblyAssignmentContext;
  SolidityParser.AssemblyIdentifierOrListContext = AssemblyIdentifierOrListContext;
  SolidityParser.AssemblyIdentifierListContext = AssemblyIdentifierListContext;
  SolidityParser.AssemblyStackAssignmentContext = AssemblyStackAssignmentContext;
  SolidityParser.LabelDefinitionContext = LabelDefinitionContext;
  SolidityParser.AssemblySwitchContext = AssemblySwitchContext;
  SolidityParser.AssemblyCaseContext = AssemblyCaseContext;
  SolidityParser.AssemblyFunctionDefinitionContext = AssemblyFunctionDefinitionContext;
  SolidityParser.AssemblyFunctionReturnsContext = AssemblyFunctionReturnsContext;
  SolidityParser.AssemblyForContext = AssemblyForContext;
  SolidityParser.AssemblyIfContext = AssemblyIfContext;
  SolidityParser.AssemblyLiteralContext = AssemblyLiteralContext;
  SolidityParser.SubAssemblyContext = SubAssemblyContext;
  SolidityParser.TupleExpressionContext = TupleExpressionContext;
  SolidityParser.TypeNameExpressionContext = TypeNameExpressionContext;
  SolidityParser.NumberLiteralContext = NumberLiteralContext;
  SolidityParser.IdentifierContext = IdentifierContext;
  SolidityParser.HexLiteralContext = HexLiteralContext;
  SolidityParser.OverrideSpecifierContext = OverrideSpecifierContext;
  SolidityParser.StringLiteralContext = StringLiteralContext;

  /* babel-plugin-inline-import './lib/Solidity.tokens' */
  // This is an indirect file to import the tokens string
  // It needs to be a js file so that tsc doesn't complain
  var tokens = "T__0=1\nT__1=2\nT__2=3\nT__3=4\nT__4=5\nT__5=6\nT__6=7\nT__7=8\nT__8=9\nT__9=10\nT__10=11\nT__11=12\nT__12=13\nT__13=14\nT__14=15\nT__15=16\nT__16=17\nT__17=18\nT__18=19\nT__19=20\nT__20=21\nT__21=22\nT__22=23\nT__23=24\nT__24=25\nT__25=26\nT__26=27\nT__27=28\nT__28=29\nT__29=30\nT__30=31\nT__31=32\nT__32=33\nT__33=34\nT__34=35\nT__35=36\nT__36=37\nT__37=38\nT__38=39\nT__39=40\nT__40=41\nT__41=42\nT__42=43\nT__43=44\nT__44=45\nT__45=46\nT__46=47\nT__47=48\nT__48=49\nT__49=50\nT__50=51\nT__51=52\nT__52=53\nT__53=54\nT__54=55\nT__55=56\nT__56=57\nT__57=58\nT__58=59\nT__59=60\nT__60=61\nT__61=62\nT__62=63\nT__63=64\nT__64=65\nT__65=66\nT__66=67\nT__67=68\nT__68=69\nT__69=70\nT__70=71\nT__71=72\nT__72=73\nT__73=74\nT__74=75\nT__75=76\nT__76=77\nT__77=78\nT__78=79\nT__79=80\nT__80=81\nT__81=82\nT__82=83\nT__83=84\nT__84=85\nT__85=86\nT__86=87\nT__87=88\nT__88=89\nT__89=90\nT__90=91\nT__91=92\nT__92=93\nT__93=94\nT__94=95\nInt=96\nUint=97\nByte=98\nFixed=99\nUfixed=100\nBooleanLiteral=101\nDecimalNumber=102\nHexNumber=103\nNumberUnit=104\nHexLiteralFragment=105\nReservedKeyword=106\nAnonymousKeyword=107\nBreakKeyword=108\nConstantKeyword=109\nImmutableKeyword=110\nContinueKeyword=111\nLeaveKeyword=112\nExternalKeyword=113\nIndexedKeyword=114\nInternalKeyword=115\nPayableKeyword=116\nPrivateKeyword=117\nPublicKeyword=118\nVirtualKeyword=119\nPureKeyword=120\nTypeKeyword=121\nViewKeyword=122\nConstructorKeyword=123\nFallbackKeyword=124\nReceiveKeyword=125\nIdentifier=126\nStringLiteralFragment=127\nVersionLiteral=128\nWS=129\nCOMMENT=130\nLINE_COMMENT=131\n'pragma'=1\n';'=2\n'||'=3\n'^'=4\n'~'=5\n'>='=6\n'>'=7\n'<'=8\n'<='=9\n'='=10\n'as'=11\n'import'=12\n'*'=13\n'from'=14\n'{'=15\n','=16\n'}'=17\n'abstract'=18\n'contract'=19\n'interface'=20\n'library'=21\n'is'=22\n'('=23\n')'=24\n'using'=25\n'for'=26\n'struct'=27\n'modifier'=28\n'function'=29\n'returns'=30\n'event'=31\n'enum'=32\n'['=33\n']'=34\n'address'=35\n'.'=36\n'mapping'=37\n'=>'=38\n'memory'=39\n'storage'=40\n'calldata'=41\n'if'=42\n'else'=43\n'try'=44\n'catch'=45\n'while'=46\n'unchecked'=47\n'assembly'=48\n'do'=49\n'return'=50\n'throw'=51\n'emit'=52\n'var'=53\n'bool'=54\n'string'=55\n'byte'=56\n'++'=57\n'--'=58\n'new'=59\n':'=60\n'+'=61\n'-'=62\n'after'=63\n'delete'=64\n'!'=65\n'**'=66\n'/'=67\n'%'=68\n'<<'=69\n'>>'=70\n'&'=71\n'|'=72\n'=='=73\n'!='=74\n'&&'=75\n'?'=76\n'|='=77\n'^='=78\n'&='=79\n'<<='=80\n'>>='=81\n'+='=82\n'-='=83\n'*='=84\n'/='=85\n'%='=86\n'let'=87\n':='=88\n'=:'=89\n'switch'=90\n'case'=91\n'default'=92\n'->'=93\n'callback'=94\n'override'=95\n'anonymous'=107\n'break'=108\n'constant'=109\n'immutable'=110\n'continue'=111\n'leave'=112\n'external'=113\n'indexed'=114\n'internal'=115\n'payable'=116\n'private'=117\n'public'=118\n'virtual'=119\n'pure'=120\n'type'=121\n'view'=122\n'constructor'=123\n'fallback'=124\n'receive'=125\n";

  var tokens$1 = tokens;
  var TYPE_TOKENS = ['var', 'bool', 'address', 'string', 'Int', 'Uint', 'Byte', 'Fixed', 'UFixed'];

  function rsplit(str, value) {
    var index = str.lastIndexOf(value);
    return [str.substring(0, index), str.substring(index + 1, str.length)];
  }

  function normalizeTokenType(value) {
    if (value.endsWith("'")) {
      value = value.substring(0, value.length - 1);
    }

    if (value.startsWith("'")) {
      value = value.substring(1, value.length);
    }

    return value;
  }

  function getTokenType(value) {
    if (value === 'Identifier' || value === 'from') {
      return 'Identifier';
    } else if (value === 'TrueLiteral' || value === 'FalseLiteral') {
      return 'Boolean';
    } else if (value === 'VersionLiteral') {
      return 'Version';
    } else if (value === 'StringLiteral') {
      return 'String';
    } else if (TYPE_TOKENS.includes(value)) {
      return 'Type';
    } else if (value === 'NumberUnit') {
      return 'Subdenomination';
    } else if (value === 'DecimalNumber') {
      return 'Numeric';
    } else if (value === 'HexLiteral') {
      return 'Hex';
    } else if (value === 'ReservedKeyword') {
      return 'Reserved';
    } else if (/^\W+$/.test(value)) {
      return 'Punctuator';
    } else {
      return 'Keyword';
    }
  }

  function getTokenTypeMap() {
    return tokens$1.split('\n').map(function (line) {
      return rsplit(line, '=');
    }).reduce(function (acum, _ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          value = _ref2[0],
          key = _ref2[1];

      acum[parseInt(key, 10)] = normalizeTokenType(value);
      return acum;
    }, {});
  }

  function buildTokenList(tokens, options) {
    var tokenTypes = getTokenTypeMap();
    var result = tokens.map(function (token) {
      var type = getTokenType(tokenTypes[token.type]);
      var node = {
        type: type,
        value: token.text
      };

      if (options.range === true) {
        node.range = [token.start, token.stop + 1];
      }

      if (options.loc === true) {
        node.loc = {
          start: {
            line: token.line,
            column: token.column
          },
          end: {
            line: token.line,
            column: token.column + token.text.length
          }
        };
      }

      return node;
    });
    return result;
  }

  function toText(ctx) {
    if (ctx !== null) {
      return ctx.getText();
    }

    return null;
  }

  function mapCommasToNulls(children) {
    if (children.length === 0) {
      return [];
    }

    var values = [];
    var comma = true;

    var _iterator = _createForOfIteratorHelper(children),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var el = _step.value;

        if (comma) {
          if (toText(el) === ',') {
            values.push(null);
          } else {
            values.push(el);
            comma = false;
          }
        } else {
          if (toText(el) !== ',') {
            throw new Error('expected comma');
          }

          comma = true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (comma) {
      values.push(null);
    }

    return values;
  }

  function isBinOp(op) {
    var binOps = ['+', '-', '*', '/', '**', '%', '<<', '>>', '&&', '||', '&', '|', '^', '<', '>', '<=', '>=', '==', '!=', '=', '|=', '^=', '&=', '<<=', '>>=', '+=', '-=', '*=', '/=', '%='];
    return binOps.includes(op);
  }

  var transformAST = {
    SourceUnit: function SourceUnit(ctx) {
      // last element is EOF terminal node
      return {
        type: 'SourceUnit',
        children: this.visit(ctx.children.slice(0, -1))
      };
    },
    EnumDefinition: function EnumDefinition(ctx) {
      return {
        type: 'EnumDefinition',
        name: toText(ctx.identifier()),
        members: this.visit(ctx.enumValue())
      };
    },
    EnumValue: function EnumValue(ctx) {
      return {
        name: toText(ctx.identifier())
      };
    },
    UsingForDeclaration: function UsingForDeclaration(ctx) {
      var typeName = null;

      if (toText(ctx.getChild(3)) !== '*') {
        typeName = this.visit(ctx.getChild(3));
      }

      return {
        typeName: typeName,
        libraryName: toText(ctx.identifier())
      };
    },
    PragmaDirective: function PragmaDirective(ctx) {
      // this converts something like >= 0.5.0  <0.7.0
      // in >=0.5.0 <0.7.0
      var value = ctx.pragmaValue().children[0].children.map(function (x) {
        return toText(x);
      }).join(' ');
      return {
        name: toText(ctx.pragmaName()),
        value: value
      };
    },
    ContractDefinition: function ContractDefinition(ctx) {
      var name = toText(ctx.identifier());
      var kind = toText(ctx.getChild(0));
      this._currentContract = name;
      return {
        name: name,
        baseContracts: this.visit(ctx.inheritanceSpecifier()),
        subNodes: this.visit(ctx.contractPart()),
        kind: kind
      };
    },
    InheritanceSpecifier: function InheritanceSpecifier(ctx) {
      var exprList = ctx.expressionList();
      var args = exprList != null ? this.visit(exprList.expression()) : [];
      return {
        baseName: this.visit(ctx.userDefinedTypeName()),
        arguments: args
      };
    },
    ContractPart: function ContractPart(ctx) {
      return this.visit(ctx.children[0]);
    },
    FunctionDefinition: function FunctionDefinition(ctx) {
      var _this = this;

      var isConstructor = false;
      var isFallback = false;
      var isReceiveEther = false;
      var isVirtual = false;
      var name = null;
      var parameters = [];
      var returnParameters = null;
      var visibility = 'default';
      var block = null;

      if (ctx.block()) {
        block = this.visit(ctx.block());
      }

      var modifiers = ctx.modifierList().modifierInvocation().map(function (mod) {
        return _this.visit(mod);
      });
      var stateMutability = null;

      if (ctx.modifierList().stateMutability(0)) {
        stateMutability = toText(ctx.modifierList().stateMutability(0));
      } // see what type of function we're dealing with


      switch (toText(ctx.functionDescriptor().getChild(0))) {
        case 'constructor':
          parameters = this.visit(ctx.parameterList());

          if (ctx.returnParameters() && ctx.returnParameters().parameterList().parameter().length > 0) {
            throw new Error('Constructors cannot have return parameters');
          } // error out on incorrect function visibility


          if (ctx.modifierList().InternalKeyword(0)) {
            visibility = 'internal';
          } else if (ctx.modifierList().PublicKeyword(0)) {
            visibility = 'public';
          } else {
            visibility = 'default';
          }

          isConstructor = true;
          break;

        case 'fallback':
          if (ctx.parameterList().parameter().length > 0) {
            throw new Error('Fallback functions cannot have parameters');
          }

          if (ctx.returnParameters() && ctx.returnParameters().parameterList().parameter().length > 0) {
            throw new Error('Fallback functions cannot have return parameters');
          } // error out on incorrect function visibility


          if (!ctx.modifierList().ExternalKeyword(0)) {
            throw new Error('Fallback functions have to be declared "external"');
          }

          visibility = 'external';
          isFallback = true;
          break;

        case 'receive':
          if (ctx.parameterList().parameter().length > 0) {
            throw new Error('Receive Ether functions cannot have parameters');
          }

          if (ctx.returnParameters() && ctx.returnParameters().parameterList().parameter().length > 0) {
            throw new Error('Receive Ether functions cannot have return parameters');
          } // error out on incorrect function visibility


          if (!ctx.modifierList().ExternalKeyword(0)) {
            throw new Error('Receive Ether functions have to be declared "external"');
          }

          visibility = 'external'; // error out on incorrect function payability

          if (!ctx.modifierList().stateMutability(0) || !ctx.modifierList().stateMutability(0).PayableKeyword(0)) {
            throw new Error('Receive Ether functions have to be declared "payable"');
          }

          isReceiveEther = true;
          break;

        case 'function':
          name = ctx.functionDescriptor().identifier(0) ? toText(ctx.functionDescriptor().identifier(0)) : '';
          parameters = this.visit(ctx.parameterList());
          returnParameters = this.visit(ctx.returnParameters()); // parse function visibility

          if (ctx.modifierList().ExternalKeyword(0)) {
            visibility = 'external';
          } else if (ctx.modifierList().InternalKeyword(0)) {
            visibility = 'internal';
          } else if (ctx.modifierList().PublicKeyword(0)) {
            visibility = 'public';
          } else if (ctx.modifierList().PrivateKeyword(0)) {
            visibility = 'private';
          } // check if function is virtual


          if (ctx.modifierList().VirtualKeyword(0)) {
            isVirtual = true;
          }

          isConstructor = name === this._currentContract;
          isFallback = name === '';
          break;
      }

      var override;
      var overrideSpecifier = ctx.modifierList().overrideSpecifier();

      if (overrideSpecifier.length === 0) {
        override = null;
      } else {
        override = this.visit(overrideSpecifier[0].userDefinedTypeName());
      }

      return {
        name: name,
        parameters: parameters,
        returnParameters: returnParameters,
        body: block,
        visibility: visibility,
        modifiers: modifiers,
        override: override,
        isConstructor: isConstructor,
        isReceiveEther: isReceiveEther,
        isFallback: isFallback,
        isVirtual: isVirtual,
        stateMutability: stateMutability
      };
    },
    ModifierInvocation: function ModifierInvocation(ctx) {
      var exprList = ctx.expressionList();
      var args;

      if (exprList != null) {
        args = this.visit(exprList.expression());
      } else if (ctx.children.length > 1) {
        args = [];
      } else {
        args = null;
      }

      return {
        name: toText(ctx.identifier()),
        arguments: args
      };
    },
    TypeNameExpression: function TypeNameExpression(ctx) {
      var typeName = ctx.elementaryTypeName();

      if (!typeName) {
        typeName = ctx.userDefinedTypeName();
      }

      return {
        typeName: this.visit(typeName)
      };
    },
    TypeName: function TypeName(ctx) {
      if (ctx.children.length > 2) {
        var length = null;

        if (ctx.children.length === 4) {
          length = this.visit(ctx.getChild(2));
        }

        return {
          type: 'ArrayTypeName',
          baseTypeName: this.visit(ctx.typeName()),
          length: length
        };
      }

      if (ctx.children.length === 2) {
        return {
          type: 'ElementaryTypeName',
          name: toText(ctx.getChild(0)),
          stateMutability: toText(ctx.getChild(1))
        };
      }

      return this.visit(ctx.getChild(0));
    },
    FunctionTypeName: function FunctionTypeName(ctx) {
      var _this2 = this;

      var parameterTypes = ctx.functionTypeParameterList(0).functionTypeParameter().map(function (typeCtx) {
        return _this2.visit(typeCtx);
      });
      var returnTypes = [];

      if (ctx.functionTypeParameterList(1)) {
        returnTypes = ctx.functionTypeParameterList(1).functionTypeParameter().map(function (typeCtx) {
          return _this2.visit(typeCtx);
        });
      }

      var visibility = 'default';

      if (ctx.InternalKeyword(0)) {
        visibility = 'internal';
      } else if (ctx.ExternalKeyword(0)) {
        visibility = 'external';
      }

      var stateMutability = null;

      if (ctx.stateMutability(0)) {
        stateMutability = toText(ctx.stateMutability(0));
      }

      return {
        parameterTypes: parameterTypes,
        returnTypes: returnTypes,
        visibility: visibility,
        stateMutability: stateMutability
      };
    },
    ReturnStatement: function ReturnStatement(ctx) {
      var expression = null;

      if (ctx.expression()) {
        expression = this.visit(ctx.expression());
      }

      return {
        expression: expression
      };
    },
    EmitStatement: function EmitStatement(ctx) {
      return {
        eventCall: this.visit(ctx.functionCall())
      };
    },
    FunctionCall: function FunctionCall(ctx) {
      var _this3 = this;

      var args = [];
      var names = [];
      var ctxArgs = ctx.functionCallArguments();

      if (ctxArgs.expressionList()) {
        args = ctxArgs.expressionList().expression().map(function (exprCtx) {
          return _this3.visit(exprCtx);
        });
      } else if (ctxArgs.nameValueList()) {
        var _iterator2 = _createForOfIteratorHelper(ctxArgs.nameValueList().nameValue()),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var nameValue = _step2.value;
            args.push(this.visit(nameValue.expression()));
            names.push(toText(nameValue.identifier()));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return {
        expression: this.visit(ctx.expression()),
        arguments: args,
        names: names
      };
    },
    StructDefinition: function StructDefinition(ctx) {
      return {
        name: toText(ctx.identifier()),
        members: this.visit(ctx.variableDeclaration())
      };
    },
    VariableDeclaration: function VariableDeclaration(ctx) {
      var storageLocation = null;

      if (ctx.storageLocation()) {
        storageLocation = toText(ctx.storageLocation());
      }

      return {
        typeName: this.visit(ctx.typeName()),
        name: toText(ctx.identifier()),
        storageLocation: storageLocation,
        isStateVar: false,
        isIndexed: false
      };
    },
    EventParameter: function EventParameter(ctx) {
      var storageLocation = null;

      if (ctx.storageLocation(0)) {
        storageLocation = toText(ctx.storageLocation(0));
      }

      return {
        type: 'VariableDeclaration',
        typeName: this.visit(ctx.typeName()),
        name: toText(ctx.identifier()),
        storageLocation: storageLocation,
        isStateVar: false,
        isIndexed: !!ctx.IndexedKeyword(0)
      };
    },
    FunctionTypeParameter: function FunctionTypeParameter(ctx) {
      var storageLocation = null;

      if (ctx.storageLocation()) {
        storageLocation = toText(ctx.storageLocation());
      }

      return {
        type: 'VariableDeclaration',
        typeName: this.visit(ctx.typeName()),
        name: null,
        storageLocation: storageLocation,
        isStateVar: false,
        isIndexed: false
      };
    },
    WhileStatement: function WhileStatement(ctx) {
      return {
        condition: this.visit(ctx.expression()),
        body: this.visit(ctx.statement())
      };
    },
    DoWhileStatement: function DoWhileStatement(ctx) {
      return {
        condition: this.visit(ctx.expression()),
        body: this.visit(ctx.statement())
      };
    },
    IfStatement: function IfStatement(ctx) {
      var trueBody = this.visit(ctx.statement(0));
      var falseBody = null;

      if (ctx.statement().length > 1) {
        falseBody = this.visit(ctx.statement(1));
      }

      return {
        condition: this.visit(ctx.expression()),
        trueBody: trueBody,
        falseBody: falseBody
      };
    },
    TryStatement: function TryStatement(ctx) {
      var _this4 = this;

      var returnParameters = null;

      if (ctx.returnParameters()) {
        returnParameters = this.visit(ctx.returnParameters());
      }

      var catchClauses = ctx.catchClause().map(function (exprCtx) {
        return _this4.visit(exprCtx);
      });
      return {
        expression: this.visit(ctx.expression()),
        returnParameters: returnParameters,
        body: this.visit(ctx.block()),
        catchClauses: catchClauses
      };
    },
    CatchClause: function CatchClause(ctx) {
      var parameters = null;

      if (ctx.parameterList()) {
        parameters = this.visit(ctx.parameterList());
      }

      if (ctx.identifier() && toText(ctx.identifier()) !== 'Error') {
        throw new Error('Expected "Error" identifier in catch clause');
      }

      return {
        isReasonStringType: !!ctx.identifier() && toText(ctx.identifier()) === 'Error',
        parameters: parameters,
        body: this.visit(ctx.block())
      };
    },
    UserDefinedTypeName: function UserDefinedTypeName(ctx) {
      return {
        namePath: toText(ctx)
      };
    },
    ElementaryTypeName: function ElementaryTypeName(ctx) {
      return {
        name: toText(ctx)
      };
    },
    Block: function Block(ctx) {
      return {
        statements: this.visit(ctx.statement())
      };
    },
    ExpressionStatement: function ExpressionStatement(ctx) {
      return {
        expression: this.visit(ctx.expression())
      };
    },
    NumberLiteral: function NumberLiteral(ctx) {
      var number = toText(ctx.getChild(0));
      var subdenomination = null;

      if (ctx.children.length === 2) {
        subdenomination = toText(ctx.getChild(1));
      }

      return {
        number: number,
        subdenomination: subdenomination
      };
    },
    MappingKey: function MappingKey(ctx) {
      if (ctx.elementaryTypeName()) {
        return this.visit(ctx.elementaryTypeName());
      } else if (ctx.userDefinedTypeName()) {
        return this.visit(ctx.userDefinedTypeName());
      } else {
        throw new Error('Expected MappingKey to have either ' + 'elementaryTypeName or userDefinedTypeName');
      }
    },
    Mapping: function Mapping(ctx) {
      return {
        keyType: this.visit(ctx.mappingKey()),
        valueType: this.visit(ctx.typeName())
      };
    },
    ModifierDefinition: function ModifierDefinition(ctx) {
      var parameters = null;

      if (ctx.parameterList()) {
        parameters = this.visit(ctx.parameterList());
      }

      var isVirtual = false;

      if (ctx.VirtualKeyword(0)) {
        isVirtual = true;
      }

      var override;
      var overrideSpecifier = ctx.overrideSpecifier();

      if (overrideSpecifier.length === 0) {
        override = null;
      } else {
        override = this.visit(overrideSpecifier[0].userDefinedTypeName());
      }

      return {
        name: toText(ctx.identifier()),
        parameters: parameters,
        body: this.visit(ctx.block()),
        isVirtual: isVirtual,
        override: override
      };
    },
    Statement: function Statement(ctx) {
      return this.visit(ctx.getChild(0));
    },
    SimpleStatement: function SimpleStatement(ctx) {
      return this.visit(ctx.getChild(0));
    },
    UncheckedStatement: function UncheckedStatement(ctx) {
      return {
        block: this.visit(ctx.block())
      };
    },
    Expression: function Expression(ctx) {
      var _this5 = this;

      var op;

      switch (ctx.children.length) {
        case 1:
          // primary expression
          return this.visit(ctx.getChild(0));

        case 2:
          op = toText(ctx.getChild(0)); // new expression

          if (op === 'new') {
            return {
              type: 'NewExpression',
              typeName: this.visit(ctx.typeName())
            };
          } // prefix operators


          if (['+', '-', '++', '--', '!', '~', 'after', 'delete'].includes(op)) {
            return {
              type: 'UnaryOperation',
              operator: op,
              subExpression: this.visit(ctx.getChild(1)),
              isPrefix: true
            };
          }

          op = toText(ctx.getChild(1)); // postfix operators

          if (['++', '--'].includes(op)) {
            return {
              type: 'UnaryOperation',
              operator: op,
              subExpression: this.visit(ctx.getChild(0)),
              isPrefix: false
            };
          }

          break;

        case 3:
          // treat parenthesis as no-op
          if (toText(ctx.getChild(0)) === '(' && toText(ctx.getChild(2)) === ')') {
            return {
              type: 'TupleExpression',
              components: [this.visit(ctx.getChild(1))],
              isArray: false
            };
          } // if square parenthesis are present it can only be
          // a typename expression


          if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(2)) === ']') {
            return {
              type: 'TypeNameExpression',
              typeName: {
                type: 'ArrayTypeName',
                baseTypeName: this.visit(ctx.getChild(0)),
                length: null
              }
            };
          }

          op = toText(ctx.getChild(1)); // tuple separator

          if (op === ',') {
            return {
              type: 'TupleExpression',
              components: [this.visit(ctx.getChild(0)), this.visit(ctx.getChild(2))],
              isArray: false
            };
          } // member access


          if (op === '.') {
            return {
              type: 'MemberAccess',
              expression: this.visit(ctx.getChild(0)),
              memberName: toText(ctx.getChild(2))
            };
          }

          if (isBinOp(op)) {
            return {
              type: 'BinaryOperation',
              operator: op,
              left: this.visit(ctx.getChild(0)),
              right: this.visit(ctx.getChild(2))
            };
          }

          break;

        case 4:
          // function call
          if (toText(ctx.getChild(1)) === '(' && toText(ctx.getChild(3)) === ')') {
            var args = [];
            var names = [];
            var ctxArgs = ctx.functionCallArguments();

            if (ctxArgs.expressionList()) {
              args = ctxArgs.expressionList().expression().map(function (exprCtx) {
                return _this5.visit(exprCtx);
              });
            } else if (ctxArgs.nameValueList()) {
              var _iterator3 = _createForOfIteratorHelper(ctxArgs.nameValueList().nameValue()),
                  _step3;

              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var nameValue = _step3.value;
                  args.push(this.visit(nameValue.expression()));
                  names.push(toText(nameValue.identifier()));
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
            }

            return {
              type: 'FunctionCall',
              expression: this.visit(ctx.getChild(0)),
              arguments: args,
              names: names
            };
          } // index access


          if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(3)) === ']') {
            return {
              type: 'IndexAccess',
              base: this.visit(ctx.getChild(0)),
              index: this.visit(ctx.getChild(2))
            };
          } // expression with nameValueList


          if (toText(ctx.getChild(1)) === '{' && toText(ctx.getChild(3)) === '}') {
            return {
              type: 'NameValueExpression',
              expression: this.visit(ctx.getChild(0)),
              arguments: this.visit(ctx.getChild(2))
            };
          }

          break;

        case 5:
          // ternary operator
          if (toText(ctx.getChild(1)) === '?' && toText(ctx.getChild(3)) === ':') {
            return {
              type: 'Conditional',
              condition: this.visit(ctx.getChild(0)),
              trueExpression: this.visit(ctx.getChild(2)),
              falseExpression: this.visit(ctx.getChild(4))
            };
          } // index range access


          if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(2)) === ':' && toText(ctx.getChild(4)) === ']') {
            return {
              type: 'IndexRangeAccess',
              base: this.visit(ctx.getChild(0)),
              indexEnd: this.visit(ctx.getChild(3))
            };
          } else if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(3)) === ':' && toText(ctx.getChild(4)) === ']') {
            return {
              type: 'IndexRangeAccess',
              base: this.visit(ctx.getChild(0)),
              indexStart: this.visit(ctx.getChild(2))
            };
          }

          break;

        case 6:
          // index range access
          if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(3)) === ':' && toText(ctx.getChild(5)) === ']') {
            return {
              type: 'IndexRangeAccess',
              base: this.visit(ctx.getChild(0)),
              indexStart: this.visit(ctx.getChild(2)),
              indexEnd: this.visit(ctx.getChild(4))
            };
          }

          break;
      }

      throw new Error('Unrecognized expression');
    },
    NameValueList: function NameValueList(ctx) {
      var names = [];
      var args = [];

      var _iterator4 = _createForOfIteratorHelper(ctx.nameValue()),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var nameValue = _step4.value;
          names.push(toText(nameValue.identifier()));
          args.push(this.visit(nameValue.expression()));
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return {
        type: 'NameValueList',
        names: names,
        arguments: args
      };
    },
    StateVariableDeclaration: function StateVariableDeclaration(ctx) {
      var type = this.visit(ctx.typeName());
      var iden = ctx.identifier();
      var name = toText(iden);
      var expression = null;

      if (ctx.expression()) {
        expression = this.visit(ctx.expression());
      }

      var visibility = 'default';

      if (ctx.InternalKeyword(0)) {
        visibility = 'internal';
      } else if (ctx.PublicKeyword(0)) {
        visibility = 'public';
      } else if (ctx.PrivateKeyword(0)) {
        visibility = 'private';
      }

      var isDeclaredConst = false;

      if (ctx.ConstantKeyword(0)) {
        isDeclaredConst = true;
      }

      var override;
      var overrideSpecifier = ctx.overrideSpecifier();

      if (overrideSpecifier.length === 0) {
        override = null;
      } else {
        override = this.visit(overrideSpecifier[0].userDefinedTypeName());
      }

      var isImmutable = false;

      if (ctx.ImmutableKeyword(0)) {
        isImmutable = true;
      }

      var decl = this.createNode({
        type: 'VariableDeclaration',
        typeName: type,
        name: name,
        expression: expression,
        visibility: visibility,
        isStateVar: true,
        isDeclaredConst: isDeclaredConst,
        isIndexed: false,
        isImmutable: isImmutable,
        override: override
      }, iden);
      return {
        variables: [decl],
        initialValue: expression
      };
    },
    FileLevelConstant: function FileLevelConstant(ctx) {
      var type = this.visit(ctx.typeName());
      var iden = ctx.identifier();
      var name = toText(iden);
      var expression = null;

      if (ctx.expression()) {
        expression = this.visit(ctx.expression());
      }

      return {
        typeName: type,
        name: name,
        initialValue: expression
      };
    },
    ForStatement: function ForStatement(ctx) {
      var conditionExpression = this.visit(ctx.expressionStatement());

      if (conditionExpression) {
        conditionExpression = conditionExpression.expression;
      }

      return {
        initExpression: this.visit(ctx.simpleStatement()),
        conditionExpression: conditionExpression,
        loopExpression: {
          type: 'ExpressionStatement',
          expression: this.visit(ctx.expression())
        },
        body: this.visit(ctx.statement())
      };
    },
    HexLiteral: function HexLiteral(ctx) {
      var parts = ctx.HexLiteralFragment().map(toText).map(function (x) {
        return x.substring(4, x.length - 1);
      });
      return {
        type: 'HexLiteral',
        value: parts.join(''),
        parts: parts
      };
    },
    PrimaryExpression: function PrimaryExpression(ctx) {
      if (ctx.BooleanLiteral()) {
        return {
          type: 'BooleanLiteral',
          value: toText(ctx.BooleanLiteral()) === 'true'
        };
      }

      if (ctx.hexLiteral()) {
        return this.visit(ctx.hexLiteral());
      }

      if (ctx.stringLiteral()) {
        var parts = ctx.stringLiteral().StringLiteralFragment().map(function (stringLiteralFragmentCtx) {
          var text = toText(stringLiteralFragmentCtx);
          var singleQuotes = text[0] === "'";
          var textWithoutQuotes = text.substring(1, text.length - 1);
          var value = singleQuotes ? textWithoutQuotes.replace(new RegExp("\\\\'", 'g'), "'") : textWithoutQuotes.replace(new RegExp('\\\\"', 'g'), '"');
          return value;
        });
        return {
          type: 'StringLiteral',
          value: parts.join(''),
          parts: parts
        };
      }

      if (ctx.TypeKeyword()) {
        return {
          type: 'Identifier',
          name: 'type'
        };
      }

      if (ctx.children.length == 3 && toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(2)) === ']') {
        var node = this.visit(ctx.getChild(0));

        if (node.type === 'Identifier') {
          node = {
            type: 'UserDefinedTypeName',
            namePath: node.name
          };
        } else if (node.type == 'TypeNameExpression') {
          node = node.typeName;
        } else {
          node = {
            type: 'ElementaryTypeName',
            name: toText(ctx.getChild(0))
          };
        }

        var typeName = {
          type: 'ArrayTypeName',
          baseTypeName: node,
          length: null
        };
        return {
          type: 'TypeNameExpression',
          typeName: typeName
        };
      }

      return this.visit(ctx.getChild(0));
    },
    Identifier: function Identifier(ctx) {
      return {
        name: toText(ctx)
      };
    },
    TupleExpression: function TupleExpression(ctx) {
      var _this6 = this;

      // remove parentheses
      var children = ctx.children.slice(1, -1);
      var components = mapCommasToNulls(children).map(function (expr) {
        // add a null for each empty value
        if (!expr) {
          return null;
        }

        return _this6.visit(expr);
      });
      return {
        components: components,
        isArray: toText(ctx.getChild(0)) === '['
      };
    },
    IdentifierList: function IdentifierList(ctx) {
      var _this7 = this;

      // remove parentheses
      var children = ctx.children.slice(1, -1);
      return mapCommasToNulls(children).map(function (iden) {
        // add a null for each empty value
        if (!iden) {
          return null;
        }

        return _this7.createNode({
          type: 'VariableDeclaration',
          name: toText(iden),
          storageLocation: null,
          typeName: null,
          isStateVar: false,
          isIndexed: false
        }, iden);
      });
    },
    VariableDeclarationList: function VariableDeclarationList(ctx) {
      var _this8 = this;

      // remove parentheses
      return mapCommasToNulls(ctx.children).map(function (decl) {
        // add a null for each empty value
        if (!decl) {
          return null;
        }

        var storageLocation = null;

        if (decl.storageLocation()) {
          storageLocation = toText(decl.storageLocation());
        }

        return _this8.createNode({
          type: 'VariableDeclaration',
          name: toText(decl.identifier()),
          typeName: _this8.visit(decl.typeName()),
          storageLocation: storageLocation,
          isStateVar: false,
          isIndexed: false
        }, decl);
      });
    },
    VariableDeclarationStatement: function VariableDeclarationStatement(ctx) {
      var variables;

      if (ctx.variableDeclaration()) {
        variables = [this.visit(ctx.variableDeclaration())];
      } else if (ctx.identifierList()) {
        variables = this.visit(ctx.identifierList());
      } else if (ctx.variableDeclarationList()) {
        variables = this.visit(ctx.variableDeclarationList());
      }

      var initialValue = null;

      if (ctx.expression()) {
        initialValue = this.visit(ctx.expression());
      }

      return {
        variables: variables,
        initialValue: initialValue
      };
    },
    ImportDirective: function ImportDirective(ctx) {
      var pathString = toText(ctx.StringLiteralFragment());
      var unitAlias = null;
      var symbolAliases = null;

      if (ctx.importDeclaration().length > 0) {
        symbolAliases = ctx.importDeclaration().map(function (decl) {
          var symbol = toText(decl.identifier(0));
          var alias = null;

          if (decl.identifier(1)) {
            alias = toText(decl.identifier(1));
          }

          return [symbol, alias];
        });
      } else if (ctx.children.length === 7) {
        unitAlias = toText(ctx.getChild(3));
      } else if (ctx.children.length === 5) {
        unitAlias = toText(ctx.getChild(3));
      }

      return {
        path: pathString.substring(1, pathString.length - 1),
        unitAlias: unitAlias,
        symbolAliases: symbolAliases
      };
    },
    EventDefinition: function EventDefinition(ctx) {
      return {
        name: toText(ctx.identifier()),
        parameters: this.visit(ctx.eventParameterList()),
        isAnonymous: !!ctx.AnonymousKeyword()
      };
    },
    EventParameterList: function EventParameterList(ctx) {
      var _this9 = this;

      return ctx.eventParameter().map(function (paramCtx) {
        var type = _this9.visit(paramCtx.typeName());

        var name = null;

        if (paramCtx.identifier()) {
          name = toText(paramCtx.identifier());
        }

        return _this9.createNode({
          type: 'VariableDeclaration',
          typeName: type,
          name: name,
          isStateVar: false,
          isIndexed: !!paramCtx.IndexedKeyword(0)
        }, paramCtx);
      }, this);
    },
    ReturnParameters: function ReturnParameters(ctx) {
      return this.visit(ctx.parameterList());
    },
    ParameterList: function ParameterList(ctx) {
      var _this10 = this;

      return ctx.parameter().map(function (paramCtx) {
        return _this10.visit(paramCtx);
      });
    },
    Parameter: function Parameter(ctx) {
      var storageLocation = null;

      if (ctx.storageLocation()) {
        storageLocation = toText(ctx.storageLocation());
      }

      var name = null;

      if (ctx.identifier()) {
        name = toText(ctx.identifier());
      }

      return {
        type: 'VariableDeclaration',
        typeName: this.visit(ctx.typeName()),
        name: name,
        storageLocation: storageLocation,
        isStateVar: false,
        isIndexed: false
      };
    },
    InlineAssemblyStatement: function InlineAssemblyStatement(ctx) {
      var language = null;

      if (ctx.StringLiteralFragment()) {
        language = toText(ctx.StringLiteralFragment());
        language = language.substring(1, language.length - 1);
      }

      return {
        language: language,
        body: this.visit(ctx.assemblyBlock())
      };
    },
    AssemblyBlock: function AssemblyBlock(ctx) {
      var _this11 = this;

      var operations = ctx.assemblyItem().map(function (it) {
        return _this11.visit(it);
      });
      return {
        operations: operations
      };
    },
    AssemblyItem: function AssemblyItem(ctx) {
      var text;

      if (ctx.hexLiteral()) {
        return this.visit(ctx.hexLiteral());
      }

      if (ctx.stringLiteral()) {
        text = toText(ctx.stringLiteral());
        var value = text.substring(1, text.length - 1);
        return {
          type: 'StringLiteral',
          value: value,
          parts: [value]
        };
      }

      if (ctx.BreakKeyword()) {
        return {
          type: 'Break'
        };
      }

      if (ctx.ContinueKeyword()) {
        return {
          type: 'Continue'
        };
      }

      return this.visit(ctx.getChild(0));
    },
    AssemblyExpression: function AssemblyExpression(ctx) {
      return this.visit(ctx.getChild(0));
    },
    AssemblyCall: function AssemblyCall(ctx) {
      var _this12 = this;

      var functionName = toText(ctx.getChild(0));
      var args = ctx.assemblyExpression().map(function (arg) {
        return _this12.visit(arg);
      });
      return {
        functionName: functionName,
        arguments: args
      };
    },
    AssemblyLiteral: function AssemblyLiteral(ctx) {
      var text;

      if (ctx.stringLiteral()) {
        text = toText(ctx);
        var value = text.substring(1, text.length - 1);
        return {
          type: 'StringLiteral',
          value: value,
          parts: [value]
        };
      }

      if (ctx.DecimalNumber()) {
        return {
          type: 'DecimalNumber',
          value: toText(ctx)
        };
      }

      if (ctx.HexNumber()) {
        return {
          type: 'HexNumber',
          value: toText(ctx)
        };
      }

      if (ctx.hexLiteral()) {
        return this.visit(ctx.hexLiteral());
      }
    },
    AssemblySwitch: function AssemblySwitch(ctx) {
      var _this13 = this;

      return {
        expression: this.visit(ctx.assemblyExpression()),
        cases: ctx.assemblyCase().map(function (c) {
          return _this13.visit(c);
        })
      };
    },
    AssemblyCase: function AssemblyCase(ctx) {
      var value = null;

      if (toText(ctx.getChild(0)) === 'case') {
        value = this.visit(ctx.assemblyLiteral());
      }

      var node = {
        block: this.visit(ctx.assemblyBlock())
      };

      if (value) {
        node.value = value;
      } else {
        node["default"] = true;
      }

      return node;
    },
    AssemblyLocalDefinition: function AssemblyLocalDefinition(ctx) {
      var names = ctx.assemblyIdentifierOrList();

      if (names.identifier()) {
        names = [this.visit(names.identifier())];
      } else if (names.assemblyMember()) {
        names = [this.visit(names.assemblyMember())];
      } else {
        names = this.visit(names.assemblyIdentifierList().identifier());
      }

      return {
        names: names,
        expression: this.visit(ctx.assemblyExpression())
      };
    },
    AssemblyFunctionDefinition: function AssemblyFunctionDefinition(ctx) {
      var args = ctx.assemblyIdentifierList();
      args = args ? this.visit(args.identifier()) : [];
      var returnArgs = ctx.assemblyFunctionReturns();
      returnArgs = returnArgs ? this.visit(returnArgs.assemblyIdentifierList().identifier()) : [];
      return {
        name: toText(ctx.identifier()),
        arguments: args,
        returnArguments: returnArgs,
        body: this.visit(ctx.assemblyBlock())
      };
    },
    AssemblyAssignment: function AssemblyAssignment(ctx) {
      var names = ctx.assemblyIdentifierOrList();

      if (names.identifier()) {
        names = [this.visit(names.identifier())];
      } else if (names.assemblyMember()) {
        names = [this.visit(names.assemblyMember())];
      } else {
        names = this.visit(names.assemblyIdentifierList().identifier());
      }

      return {
        names: names,
        expression: this.visit(ctx.assemblyExpression())
      };
    },
    AssemblyMember: function AssemblyMember(ctx) {
      var _ctx$identifier = ctx.identifier(),
          _ctx$identifier2 = _slicedToArray(_ctx$identifier, 2),
          accessed = _ctx$identifier2[0],
          member = _ctx$identifier2[1];

      return {
        type: 'AssemblyMemberAccess',
        expression: this.visit(accessed),
        memberName: this.visit(member)
      };
    },
    LabelDefinition: function LabelDefinition(ctx) {
      return {
        name: toText(ctx.identifier())
      };
    },
    AssemblyStackAssignment: function AssemblyStackAssignment(ctx) {
      return {
        name: toText(ctx.identifier())
      };
    },
    AssemblyFor: function AssemblyFor(ctx) {
      return {
        pre: this.visit(ctx.getChild(1)),
        condition: this.visit(ctx.getChild(2)),
        post: this.visit(ctx.getChild(3)),
        body: this.visit(ctx.getChild(4))
      };
    },
    AssemblyIf: function AssemblyIf(ctx) {
      return {
        condition: this.visit(ctx.assemblyExpression()),
        body: this.visit(ctx.assemblyBlock())
      };
    }
  };

  var ASTBuilder = /*#__PURE__*/function (_antlr4$tree$ParseTre) {
    _inherits(ASTBuilder, _antlr4$tree$ParseTre);

    var _super = _createSuper(ASTBuilder);

    function ASTBuilder(options) {
      var _this14;

      _classCallCheck(this, ASTBuilder);

      _this14 = _super.call(this, options);

      _defineProperty(_assertThisInitialized(_this14), "options", void 0);

      _this14.options = options;
      return _this14;
    }

    _createClass(ASTBuilder, [{
      key: "_loc",
      value: function _loc(ctx) {
        var sourceLocation = {
          start: {
            line: ctx.start.line,
            column: ctx.start.column
          },
          end: {
            line: ctx.stop ? ctx.stop.line : ctx.start.line,
            column: ctx.stop ? ctx.stop.column : ctx.start.column
          }
        };
        return {
          loc: sourceLocation
        };
      }
    }, {
      key: "_range",
      value: function _range(ctx) {
        return {
          range: [ctx.start.start, ctx.stop.stop]
        };
      }
    }, {
      key: "meta",
      value: function meta(ctx) {
        var ret = {};

        if (this.options.loc === true) {
          Object.assign(ret, this._loc(ctx));
        }

        if (this.options.range === true) {
          Object.assign(ret, this._range(ctx));
        }

        return ret;
      }
    }, {
      key: "createNode",
      value: function createNode(obj, ctx) {
        return Object.assign(obj, this.meta(ctx));
      }
    }, {
      key: "visit",
      value: function visit(ctx) {
        var _this15 = this;

        if (!ctx) {
          return null;
        }

        if (Array.isArray(ctx)) {
          return ctx.map(function (child) {
            return _this15.visit(child);
          }, this);
        }

        var name = ctx.constructor.name;

        if (name.endsWith('Context')) {
          name = name.substring(0, name.length - 'Context'.length);
        }

        var node = {
          type: name
        };

        if (name in transformAST) {
          var visited = transformAST[name].call(this, ctx);

          if (Array.isArray(visited)) {
            return visited;
          }

          Object.assign(node, visited);
        }

        return this.createNode(node, ctx);
      }
    }]);

    return ASTBuilder;
  }(antlr4.tree.ParseTreeVisitor);

  var ErrorListener$3 = /*#__PURE__*/function (_antlr4$error$ErrorLi) {
    _inherits(ErrorListener, _antlr4$error$ErrorLi);

    var _super = _createSuper(ErrorListener);

    function ErrorListener() {
      var _this;

      _classCallCheck(this, ErrorListener);

      _this = _super.call(this);

      _defineProperty(_assertThisInitialized(_this), "_errors", void 0);

      _this._errors = [];
      return _this;
    }

    _createClass(ErrorListener, [{
      key: "syntaxError",
      value: function syntaxError(recognizer, offendingSymbol, line, column, message) {
        this._errors.push({
          message: message,
          line: line,
          column: column
        });
      }
    }, {
      key: "getErrors",
      value: function getErrors() {
        return this._errors;
      }
    }, {
      key: "hasErrors",
      value: function hasErrors() {
        return this._errors.length > 0;
      }
    }]);

    return ErrorListener;
  }(antlr4.error.ErrorListener);

  var ParserError = /*#__PURE__*/function (_Error) {
    _inherits(ParserError, _Error);

    var _super = _createSuper(ParserError);

    function ParserError(args) {
      var _this;

      _classCallCheck(this, ParserError);

      _this = _super.call(this);

      _defineProperty(_assertThisInitialized(_this), "errors", void 0);

      var _args$errors$ = args.errors[0],
          message = _args$errors$.message,
          line = _args$errors$.line,
          column = _args$errors$.column;
      _this.message = "".concat(message, " (").concat(line, ":").concat(column, ")");
      _this.errors = args.errors;

      if (Error.captureStackTrace !== undefined) {
        Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
      } else {
        _this.stack = new Error().stack;
      }

      return _this;
    }

    return ParserError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  function tokenize(input) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var chars = new antlr4.InputStream(input);
    var lexer = new SolidityLexer(chars);
    var tokens = new antlr4.CommonTokenStream(lexer);
    return buildTokenList(tokens.tokenSource.getAllTokens(), options);
  }
  function parse(input) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var chars = new antlr4.InputStream(input);
    var listener = new ErrorListener$3();
    var lexer = new SolidityLexer(chars);
    lexer.removeErrorListeners();
    lexer.addErrorListener(listener);
    var tokens = new antlr4.CommonTokenStream(lexer);
    var parser = new SolidityParser(tokens);
    parser.removeErrorListeners();
    parser.addErrorListener(listener);
    parser.buildParseTrees = true;
    var tree = parser.sourceUnit();
    var tokenList = [];

    if (options.tokens === true) {
      var tokenSource = tokens.tokenSource;
      tokenSource.reset();
      tokenList = buildTokenList(tokenSource.getAllTokens(), options);
    }

    if (options.tolerant !== true && listener.hasErrors()) {
      throw new ParserError({
        errors: listener.getErrors()
      });
    }

    var visitor = new ASTBuilder(options);
    var ast = visitor.visit(tree);

    if (options.tolerant === true && listener.hasErrors()) {
      ast.errors = listener.getErrors();
    }

    if (options.tokens === true) {
      ast.tokens = tokenList;
    }

    return ast;
  }

  function _isASTNode(node) {
    return node !== null && _typeof(node) === 'object' && Object.prototype.hasOwnProperty.call(node, 'type');
  }

  function visit(node, visitor) {
    if (Array.isArray(node)) {
      node.forEach(function (child) {
        return visit(child, visitor);
      });
    }

    if (!_isASTNode(node)) return;
    var cont = true;

    if (visitor[node.type] !== undefined) {
      cont = visitor[node.type](node);
    }

    if (cont === false) return;

    for (var prop in node) {
      if (Object.prototype.hasOwnProperty.call(node, prop)) {
        visit(node[prop], visitor);
      }
    }

    var selector = node.type + ':exit';

    if (visitor[selector] !== undefined) {
      visitor[selector](node);
    }
  }

  exports.ParserError = ParserError;
  exports.parse = parse;
  exports.tokenize = tokenize;
  exports.visit = visit;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
//# sourceMappingURL=index.iife.js.map


/***/ }),
/* 268 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(69);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.importProfiler = importProfiler;
exports.resolveImportPath = resolveImportPath;
var fs = __webpack_require__(5);
var path = __webpack_require__(4);
var parser = __webpack_require__(267);

/**
 * Given a list of solidity files, returns a list of imports to those files, and all files imported
 * by those files.  For security, this function throws if a path is resolved to a higher level than 
 * projectDir, and it not a file name ending in .sol 
 *
 * @param      {Array}   files          files to parse for imports
 * @param      {string}  projectDir     the highest level directory accessible
 * @param      {Set}     importedFiles  files already parsed 
 * @return     {Array}   importPaths    A list of importPaths 
 */
function importProfiler(files) {
  var projectDir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.cwd();
  var importedFiles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();

  var _loop = function _loop(_file) {
    // Checks for a valid solidity file
    _file = path.resolve(projectDir, _file);
    if (_file.indexOf(projectDir) != 0) {
      throw new Error('\nImports must be found in sub dirs of the project directory.\n      project dir: ' + projectDir + '\n      path: ' + _file + '\n');
    }
    var content = void 0;
    try {
      content = fs.readFileSync(_file).toString('utf-8');
    } catch (e) {
      if (e.code === 'EISDIR') {
        console.error('Skipping directory ' + _file);
        return {
          v: importedFiles
        }; // empty Set
      } else {
        throw e;
      }
    }
    // Having verified that it indeed is a solidity file, add it to set of importedFiles
    importedFiles.add(_file);
    var ast = function () {
      try {
        return parser.parse(content, { tolerant: true });
      } catch (err) {
        console.error('\nError found while parsing the following file: ' + _file + '\n');
        throw err;
      }
    }();

    // create an array to hold the imported files
    var newFiles = [];
    parser.visit(ast, {
      ImportDirective: function ImportDirective(node) {
        var newFile = resolveImportPath(_file, node.path, projectDir);
        if (!importedFiles.has(newFile)) newFiles.push(newFile);
      }
    });
    // Run through the array of files found in this file
    module.exports.importProfiler(newFiles, projectDir, importedFiles);
    file = _file;
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;

      var _ret = _loop(file);

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }
    // Convert the set to an array for easy consumption
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var importedFilesArray = Array.from(importedFiles);
  return importedFilesArray;
}

/// Takes a filepath, and an import path found within it, and finds the corresponding source code
/// file. Throws an error if the resolved path is not a file.
///
/// @param      {string}  baseFilePath      The base file path
/// @param      {string}  importedFilePath  The imported file path
/// @param      {string}  projectDir        The top-most directory we will search in
///
function resolveImportPath(baseFilePath, importedFilePath) {
  var projectDir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.cwd();

  var topmostDirArray = projectDir.split(path.sep);
  var resolvedPath = void 0;
  var baseDirPath = path.dirname(baseFilePath);
  // if it's a relative or absolute path:
  if (importedFilePath.slice(0, 1) === '.' || importedFilePath.slice(0, 1) === '/') {
    resolvedPath = path.resolve(baseDirPath, importedFilePath);
    // else it's most likely a special case using a remapping to node_modules dir in Truffle
  } else {
    // we use a string and not the array alone because of different windows and UNIX path roots
    var currentDir = path.resolve(baseDirPath, '..');
    var currentDirArray = baseDirPath.split(path.sep);
    var currentDirName = currentDirArray.pop();
    var nodeModulesDir = '';

    // while (currentDirName != 'contracts') {
    while (!fs.readdirSync(currentDir).includes('node_modules') && !nodeModulesDir) {
      // since we already know the current file is inside the project dir we can check if the
      // folder array length for the current dir is smaller than the top-most one, i.e. we are 
      // still inside the project dir. If not, throw
      if (topmostDirArray.length >= currentDirArray.length) {
        throw new Error('Import statement seems to be a Truffle "\'node_modules\' remapping" but no \'contracts\' truffle dir could be found in the project\'s child dirs. Have you ran \'npm install\', already?\n        project dir: ' + projectDir + '\n        path: ' + currentDir);
      }
      // if we still aren't in a folder containing 'node_modules' go up one level
      currentDirName = currentDirArray.pop();
      currentDir = path.resolve(currentDir, '..');
    }
    // if we've reached this point, then we have found the dir containing node_modules
    nodeModulesDir = path.join(currentDir, 'node_modules');

    // join it all to get the file path
    resolvedPath = path.join(nodeModulesDir, importedFilePath);
  }

  // verify that the resolved path is actually a file
  if (!fs.existsSync(resolvedPath) || !fs.statSync(resolvedPath).isFile()) {
    throw new Error('Import path (' + resolvedPath + ') not resolved to a file');
  }
  return resolvedPath;
}

/***/ }),
/* 269 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.graph = graph;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var parserHelpers = __webpack_require__(270);
var utils = __webpack_require__(271);
var fs = __webpack_require__(5);
var parser = __webpack_require__(267);
var graphviz = __webpack_require__(272);

var _require = __webpack_require__(285),
    linearize = _require.linearize;

var importer = __webpack_require__(268);

var _require2 = __webpack_require__(286),
    defaultColorScheme = _require2.defaultColorScheme,
    defaultColorSchemeDark = _require2.defaultColorSchemeDark;

function graph(files) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (files.length === 0) {
    throw new Error('\nNo files were specified for analysis in the arguments. Bailing...\n');
  }

  var colorScheme = options.hasOwnProperty('colorScheme') ? options.colorScheme : defaultColorScheme;

  var digraph = graphviz.digraph('G');
  digraph.set('ratio', 'auto');
  digraph.set('page', '100');
  digraph.set('compound', 'true');
  colorScheme.digraph.bgcolor && digraph.set('bgcolor', colorScheme.digraph.bgcolor);
  for (var i in colorScheme.digraph.nodeAttribs) {
    digraph.setNodeAttribut(i, colorScheme.digraph.nodeAttribs[i]);
  }
  for (var _i in colorScheme.digraph.edgeAttribs) {
    digraph.setEdgeAttribut(_i, colorScheme.digraph.edgeAttribs[_i]);
  }

  // make the files array unique by typecasting them to a Set and back
  // this is not needed in case the importer flag is on, because the 
  // importer module already filters the array internally
  if (!options.contentsInFilePath && options.importer) {
    files = importer.importProfiler(files);
  } else {
    files = [].concat(_toConsumableArray(new Set(files)));
  }

  // initialize vars that persist over file parsing loops
  var userDefinedStateVars = {};
  var stateVars = {};
  var dependencies = {};
  var fileASTs = [];
  var functionsPerContract = {};
  var eventsPerContract = {};
  var structsPerContract = {};
  var contractUsingFor = {};
  var contractNames = [];

  var _loop = function _loop(file) {

    var content = void 0;
    if (!options.contentsInFilePath) {
      try {
        content = fs.readFileSync(file).toString('utf-8');
      } catch (e) {
        if (e.code === 'EISDIR') {
          console.error('Skipping directory ' + file);
          return 'continue';
        } else {
          throw e;
        }
      }
    } else {
      content = file;
    }

    var ast = function () {
      try {
        return parser.parse(content);
      } catch (err) {
        if (!options.contentsInFilePath) {
          console.error('\nError found while parsing the following file: ' + file + '\n');
        } else {
          console.error('\nError found while parsing one of the provided files\n');
        }
        throw err;
      }
    }();

    fileASTs.push(ast);

    var contractName = null;
    var cluster = null;

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        contractName = node.name;
        contractNames.push(contractName);

        var kind = "";
        if (node.kind == "interface") {
          kind = "  (iface)";
        } else if (node.kind == "library") {
          kind = "  (lib)";
        }

        userDefinedStateVars[contractName] = {};
        stateVars[contractName] = {};
        functionsPerContract[contractName] = [];
        eventsPerContract[contractName] = [];
        structsPerContract[contractName] = [];
        contractUsingFor[contractName] = {};

        if (!(cluster = digraph.getCluster('"cluster' + contractName + '"'))) {
          cluster = digraph.addCluster('"cluster' + contractName + '"');

          cluster.set('label', contractName + kind);
          cluster.set('color', colorScheme.contract.defined.color);
          if (colorScheme.contract.defined.fontcolor) {
            cluster.set('fontcolor', colorScheme.contract.undefined.fontcolor);
          }

          if (colorScheme.contract.defined.style) {
            cluster.set('style', colorScheme.contract.defined.style || "filled");
            cluster.set('bgcolor', colorScheme.contract.defined.color);
          } else {
            cluster.set('style', 'filled');
          }

          colorScheme.contract.defined.bgcolor && cluster.set('bgcolor', colorScheme.contract.defined.bgcolor);
        } else {
          if (colorScheme.contract.defined.style) {
            cluster.set('style', colorScheme.contract.defined.style);
          } else {
            cluster.set('style', 'filled');
          }
        }

        dependencies[contractName] = node.baseContracts.map(function (spec) {
          return spec.baseName.namePath;
        });
      },
      StateVariableDeclaration: function StateVariableDeclaration(node) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = node.variables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var variable = _step3.value;

            if (parserHelpers.isUserDefinedDeclaration(variable)) {
              userDefinedStateVars[contractName][variable.name] = variable.typeName.namePath;
            } else if (parserHelpers.isElementaryTypeDeclaration(variable)) {
              stateVars[contractName][variable.name] = variable.typeName.name;
            } else if (parserHelpers.isArrayDeclaration(variable)) {
              stateVars[contractName][variable.name] = variable.typeName.baseTypeName.namePath;
            } else if (parserHelpers.isMappingDeclaration(variable)) {
              stateVars[contractName][variable.name] = variable.typeName.valueType.name;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      },
      FunctionDefinition: function FunctionDefinition(node) {
        functionsPerContract[contractName].push(node.name);
      },
      EventDefinition: function EventDefinition(node) {
        eventsPerContract[contractName].push(node.name);
      },
      StructDefinition: function StructDefinition(node) {
        structsPerContract[contractName].push(node.name);
      },
      UsingForDeclaration: function UsingForDeclaration(node) {
        // Check if the using for declaration is targeting a specific type or all types with "*"
        var typeNameName = node.typeName != null ? node.typeName.name : '*';

        if (!contractUsingFor[contractName][typeNameName]) {
          contractUsingFor[contractName][typeNameName] = new Set([]);
        }
        contractUsingFor[contractName][typeNameName].add(node.libraryName);
      }
    });
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;

      var _ret = _loop(file);

      if (_ret === 'continue') continue;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  dependencies = linearize(dependencies, { reverse: true });

  var _loop2 = function _loop2(ast) {

    var contractName = null;
    var cluster = null;

    function nodeName(functionName, contractName) {
      if (dependencies.hasOwnProperty(contractName)) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = dependencies[contractName][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var dep = _step4.value;

            var name = dep + '.' + functionName;
            if (digraph.getNode(name)) {
              return name;
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      return contractName + '.' + functionName;
    }

    function functionName(node) {
      var name = void 0;
      if (node.isConstructor) {
        name = '<Constructor>';
      } else if (node.isFallback) {
        name = '<Fallback>';
      } else if (node.isReceiveEther) {
        name = '<Receive Ether>';
      } else {
        name = node.name;
      }

      return name;
    }

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        contractName = node.name;

        cluster = digraph.getCluster('"cluster' + contractName + '"');
      },
      FunctionDefinition: function FunctionDefinition(node) {
        var name = functionName(node);

        var opts = { label: name };

        if (node.visibility === 'public' || node.visibility === 'default') {
          opts.color = colorScheme.visibility.public;
        } else if (node.visibility === 'external') {
          opts.color = colorScheme.visibility.external;
        } else if (node.visibility === 'private') {
          opts.color = colorScheme.visibility.private;
        } else if (node.visibility === 'internal') {
          opts.color = colorScheme.visibility.internal;
        }

        if (colorScheme.visibility.isFilled) {
          if (node.stateMutability === "payable") {
            opts.fillcolor = opts.color;
            opts.color = colorScheme.nodeType.payable;
          } else {
            opts.fillcolor = opts.color;
          }
        }

        cluster.addNode(nodeName(name, contractName), opts);
      },
      ModifierDefinition: function ModifierDefinition(node) {
        var name = node.name;

        var opts = {
          label: name,
          color: colorScheme.nodeType.modifier
        };
        if (colorScheme.nodeType.isFilled) {
          opts.fillcolor = opts.color;
        }
        if (colorScheme.nodeType.shape) {
          opts.shape = colorScheme.nodeType.shape;
        }

        cluster.addNode(nodeName(name, contractName), opts);
      }
    });

    var callingScope = null;
    var userDefinedLocalVars = {};
    var localVars = {};
    var tempUserDefinedStateVars = {};
    var tempStateVars = {};
    var eventDefinitions = [];

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        contractName = node.name;

        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = dependencies[contractName][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var dep = _step5.value;

            Object.assign(tempUserDefinedStateVars, userDefinedStateVars[dep]);
            Object.assign(tempStateVars, stateVars[dep]);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        Object.assign(tempUserDefinedStateVars, userDefinedStateVars[contractName]);
        Object.assign(tempStateVars, stateVars[contractName]);
      },
      EventDefinition: function EventDefinition(node) {
        eventDefinitions.push(node.name);
      },


      'ContractDefinition:exit': function ContractDefinitionExit(node) {
        contractName = null;
        tempUserDefinedStateVars = {};
        tempStateVars = {};
      },

      FunctionDefinition: function FunctionDefinition(node) {
        var name = functionName(node);

        callingScope = nodeName(name, contractName);
      },


      'FunctionDefinition:exit': function FunctionDefinitionExit(node) {
        callingScope = null;
        userDefinedLocalVars = {};
        localVars = {};
      },

      ModifierDefinition: function ModifierDefinition(node) {
        callingScope = nodeName(node.name, contractName);
      },


      'ModifierDefinition:exit': function ModifierDefinitionExit(node) {
        callingScope = null;
      },

      ParameterList: function ParameterList(node) {
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = node.parameters[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var parameter = _step6.value;

            if (parameter.name === null) {
              return;
            } else if (parserHelpers.isUserDefinedDeclaration(parameter)) {
              userDefinedLocalVars[parameter.name] = parameter.typeName.namePath;
            } else if (callingScope) {
              localVars[parameter.name] = parameter.typeName.name;
            }
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }
      },
      VariableDeclaration: function VariableDeclaration(node) {
        if (callingScope && node.name === null) {
          return;
        } else if (callingScope && parserHelpers.isUserDefinedDeclaration(node)) {
          userDefinedLocalVars[node.name] = node.typeName.namePath;
        } else if (callingScope && parserHelpers.isElementaryTypeDeclaration(node)) {
          localVars[node.name] = node.typeName.name;
        } else if (callingScope && parserHelpers.isArrayDeclaration(node)) {
          localVars[node.name] = node.typeName.baseTypeName.namePath;
        } else if (callingScope && parserHelpers.isMappingDeclaration(node)) {
          localVars[node.name] = node.typeName.valueType.name;
        }
      },
      ModifierInvocation: function ModifierInvocation(node) {
        if (options.enableModifierEdges && callingScope) {
          digraph.addEdge(callingScope, nodeName(node.name, contractName), { color: 'yellow' });
        }
      },
      FunctionCall: function FunctionCall(node) {
        if (!callingScope) {
          // this is a function call outside of functions and modifiers, ignore for now
          return;
        }

        var expr = node.expression;

        var name = void 0;
        var localContractName = contractName;
        var opts = {
          color: colorScheme.call.default
        };

        // Construct an array with the event and struct names in the whole dependencies tree of the current contract
        var eventsOfDependencies = [];
        var structsOfDependencies = [];
        if (dependencies.hasOwnProperty(contractName)) {
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;

          try {
            for (var _iterator7 = dependencies[contractName][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var dep = _step7.value;

              eventsOfDependencies = eventsOfDependencies.concat(eventsPerContract[dep]);
              structsOfDependencies = structsOfDependencies.concat(structsPerContract[dep]);
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7.return) {
                _iterator7.return();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }
        }

        if (parserHelpers.isRegularFunctionCall(node, contractNames, eventsOfDependencies, structsOfDependencies)) {
          opts.color = colorScheme.call.regular;
          name = expr.name;
        } else if (parserHelpers.isMemberAccess(node)) {
          var object = null;
          var variableType = null;

          name = expr.memberName;

          // checking if the member expression is a simple identifier
          if (expr.expression.hasOwnProperty('name')) {
            object = expr.expression.name;

            // checking if it is a member of `address` and pass along it's contents
          } else if (parserHelpers.isMemberAccessOfAddress(node)) {
            if (expr.expression.arguments[0].hasOwnProperty('name')) {
              object = expr.expression.arguments[0].name;
            } else if (expr.expression.arguments[0].type === 'NumberLiteral') {
              object = 'address(' + expr.expression.arguments[0].number + ')';
            } else {
              object = JSON.stringify(expr.expression.arguments).replace(/"/g, "");
            }

            // checking if it is a typecasting to a user-defined contract type
          } else if (parserHelpers.isAContractTypecast(node, contractNames)) {
            object = expr.expression.expression.name;
          }

          // check if member expression is a special var and get its canonical type
          if (parserHelpers.isSpecialVariable(expr.expression)) {
            variableType = parserHelpers.getSpecialVariableType(expr.expression);

            // check if member expression is a typecast for a canonical type
          } else if (parserHelpers.isElementaryTypecast(expr.expression)) {
            variableType = expr.expression.expression.typeName.name;

            // else check for vars in defined the contract
          } else {
            // check if member access is a function of a "using for" declaration
            // START
            if (localVars.hasOwnProperty(object)) {
              variableType = localVars[object];
            } else if (userDefinedLocalVars.hasOwnProperty(object)) {
              variableType = userDefinedLocalVars[object];
            } else if (tempUserDefinedStateVars.hasOwnProperty(object)) {
              variableType = tempUserDefinedStateVars[object];
            } else if (tempStateVars.hasOwnProperty(object)) {
              variableType = tempStateVars[object];
            }
          }

          // convert to canonical elementary type: uint -> uint256
          variableType = variableType === 'uint' ? 'uint256' : variableType;

          // if variable type is not null let's replace "object" for the actual library name
          if (variableType !== null) {
            // Incase there is a "using for" declaration for this specific variable type we get its definition
            if (contractUsingFor[contractName].hasOwnProperty(variableType) && functionsPerContract.hasOwnProperty(contractUsingFor[contractName][variableType])) {

              // If there were any library declarations done to all the types with "*"
              // we will add them to the list of matching contracts
              var contractUsingForDefinitions = new (Function.prototype.bind.apply(Set, [null].concat(_toConsumableArray(contractUsingFor[contractName][variableType]))))();
              if (contractUsingFor[contractName].hasOwnProperty('*') && functionsPerContract.hasOwnProperty(contractUsingFor[contractName]['*'])) {
                contractUsingForDefinitions = new (Function.prototype.bind.apply(Set, [null].concat(_toConsumableArray(contractUsingFor[contractName][variableType]), _toConsumableArray(contractUsingFor[contractName]['*']))))();
              }

              // check which usingFor contract the method resolves to (best effort first match)
              var matchingContracts = [].concat(_toConsumableArray(contractUsingForDefinitions)).filter(function (contract) {
                return functionsPerContract[contract].includes(name);
              });

              if (matchingContracts.length > 0) {
                // we found at least one matching contract. use the first. don't know what to do if multiple are matching :/
                if (!options.libraries) {
                  object = matchingContracts[0];
                } else {
                  return;
                }
              }
            }
            // In case there is not, we can just shortcircuit the search to only the "*" variable type, incase it exists
          } else if (contractUsingFor[contractName].hasOwnProperty('*') && functionsPerContract.hasOwnProperty(contractUsingFor[contractName]['*'])) {
            // check which usingFor contract the method resolves to (best effort first match)
            var _matchingContracts = [].concat(_toConsumableArray(contractUsingFor[contractName]['*'])).filter(function (contract) {
              return functionsPerContract[contract].includes(name);
            });

            if (_matchingContracts.length > 0) {
              // we found at least one matching contract. use the first. don't know what to do if multiple are matching :/
              if (!options.libraries) {
                object = _matchingContracts[0];
              } else {
                return;
              }
            }
          }
          // END

          // if we have found nothing so far then create no node
          if (object === null) {
            return;
          } else if (object === 'this') {
            opts.color = colorScheme.call.this;
          } else if (object === 'super') {
            // "super" in this context is gonna be the 2nd element of the dependencies array
            // since the first is the contract itself
            localContractName = dependencies[contractName][1];
          } else if (tempUserDefinedStateVars[object] !== undefined) {
            localContractName = tempUserDefinedStateVars[object];
          } else if (userDefinedLocalVars[object] !== undefined) {
            localContractName = userDefinedLocalVars[object];
          } else {
            localContractName = object;
          }
        } else {
          return;
        }

        var externalCluster = void 0;

        if (!(externalCluster = digraph.getCluster('"cluster' + localContractName + '"'))) {
          externalCluster = digraph.addCluster('"cluster' + localContractName + '"');

          externalCluster.set('label', localContractName);
          externalCluster.set('color', colorScheme.contract.undefined.color);
          if (colorScheme.contract.undefined.fontcolor) {
            externalCluster.set('fontcolor', colorScheme.contract.undefined.fontcolor);
          }
          if (colorScheme.contract.undefined.style) {
            externalCluster.set('style', colorScheme.contract.undefined.style || "filled");
            colorScheme.contract.undefined.bgcolor && externalCluster.set('bgcolor', colorScheme.contract.undefined.bgcolor);
          }
        }

        var localNodeName = nodeName(name, localContractName);

        if (!digraph.getNode(localNodeName) && externalCluster) {
          var _opts = {
            label: name
          };
          if (colorScheme.event && eventDefinitions.includes(name)) {
            //emit event
            _opts.color = colorScheme.event.color;
            _opts.shape = colorScheme.event.shape;
            _opts.style = colorScheme.event.style;
          }
          externalCluster.addNode(localNodeName, _opts);
        }

        digraph.addEdge(callingScope, localNodeName, opts);
      }
    });
  };

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = fileASTs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var ast = _step2.value;

      _loop2(ast);
    }

    // This next block's purpose is to create a legend on the lower left corner
    // of the graph with color information.
    // We'll do it in dot, by hand, because it's overkill to do it programatically.
    // 
    // We'll have to paste this subgraph before the last curly bracket of the diagram
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var legendDotString = '\n\nrankdir=LR\nnode [shape=plaintext]\nsubgraph cluster_01 { \nlabel = "Legend";\nkey [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">\n  <tr><td align="right" port="i1">Internal Call</td></tr>\n  <tr><td align="right" port="i2">External Call</td></tr>\n  <tr><td align="right" port="i3">Defined Contract</td></tr>\n  <tr><td align="right" port="i4">Undefined Contract</td></tr>\n  </table>>]\nkey2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">\n  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>\n  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>\n  <tr><td port="i3" bgcolor="' + colorScheme.contract.defined.bgcolor + '">&nbsp;&nbsp;&nbsp;</td></tr>\n  <tr><td port="i4">\n    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="' + colorScheme.contract.undefined.color + '">\n      <tr>\n       <td></td>\n      </tr>\n     </table>\n  </td></tr>\n  </table>>]\nkey:i1:e -> key2:i1:w [color="' + colorScheme.call.regular + '"]\nkey:i2:e -> key2:i2:w [color="' + colorScheme.call.default + '"]\n}\n';
  var finalDigraph = utils.insertBeforeLastOccurrence(digraph.to_dot(), '}', legendDotString);

  return finalDigraph;
}

/***/ }),
/* 270 */
/***/ ((module) => {

"use strict";


var BUILTINS = ['gasleft', 'require', 'assert', 'revert', 'addmod', 'mulmod', 'keccak256', 'sha256', 'sha3', 'ripemd160', 'ecrecover'];

function isLowerCase(str) {
  return str === str.toLowerCase();
}

var parserHelpers = {
  isRegularFunctionCall: function isRegularFunctionCall(node, contractNames, eventNames, structNames) {
    var expr = node.expression;
    return expr && expr.type === 'Identifier' && !contractNames.includes(expr.name) && !eventNames.includes(expr.name) && !structNames.includes(expr.name) && !BUILTINS.includes(expr.name);
  },

  isMemberAccess: function isMemberAccess(node) {
    var expr = node.expression;
    return expr.type === 'MemberAccess' && !['push', 'pop', 'encode', 'encodePacked', 'encodeWithSelector', 'encodeWithSignature', 'decode'].includes(expr.memberName);
  },

  isIndexAccess: function isIndexAccess(node) {
    var expr = node.expression;
    return expr.type === 'IndexAccess';
  },

  isMemberAccessOfAddress: function isMemberAccessOfAddress(node) {
    var expr = node.expression.expression;
    return expr.type === 'FunctionCall' && expr.expression.hasOwnProperty('typeName') && expr.expression.typeName.name === 'address';
  },

  isAContractTypecast: function isAContractTypecast(node, contractNames) {
    var expr = node.expression.expression;
    // @TODO: replace lowercase for better filtering
    return expr.type === 'FunctionCall' && expr.expression.hasOwnProperty('name') && contractNames.includes(expr.expression.name[0]);
  },

  isUserDefinedDeclaration: function isUserDefinedDeclaration(node) {
    return node.hasOwnProperty('typeName') && node.typeName.type === 'UserDefinedTypeName';
  },

  isElementaryTypeDeclaration: function isElementaryTypeDeclaration(node) {
    return node.hasOwnProperty('typeName') && node.typeName.type === 'ElementaryTypeName';
  },

  isArrayDeclaration: function isArrayDeclaration(node) {
    return node.hasOwnProperty('typeName') && node.typeName.type === 'ArrayTypeName';
  },

  isMappingDeclaration: function isMappingDeclaration(node) {
    return node.hasOwnProperty('typeName') && node.typeName.type === 'Mapping';
  },

  isAddressDeclaration: function isAddressDeclaration(node) {
    return node.hasOwnProperty('typeName') && node.typeName.type === 'ElementaryTypeName' && node.typeName.name === 'address';
  },

  isElementaryTypecast: function isElementaryTypecast(node) {
    return node.hasOwnProperty('type') && node.type === 'FunctionCall' && node.hasOwnProperty('expression') && node.expression.type === 'TypeNameExpression' && node.expression.typeName.type === 'ElementaryTypeName';
  },

  isSpecialVariable: function isSpecialVariable(node) {
    // now (same as block.timestamp)
    if (node.hasOwnProperty('type') && node.type === 'Identifier' && node.name === 'now') {
      return true;
      // any block.<x> special variable
    } else if (node.hasOwnProperty('type') && node.type === 'MemberAccess' && node.hasOwnProperty('expression') && node.expression.type === 'Identifier' && node.expression.name === 'block') {
      return true;
      // any msg.<x> special variable
    } else if (node.hasOwnProperty('type') && node.type === 'MemberAccess' && node.hasOwnProperty('expression') && node.expression.type === 'Identifier' && node.expression.name === 'msg') {
      return true;
      // any tx.<x> special variable
    } else if (node.hasOwnProperty('type') && node.type === 'MemberAccess' && node.hasOwnProperty('expression') && node.expression.type === 'Identifier' && node.expression.name === 'tx') {
      return true;
      // if not then... return false
    } else {
      return false;
    }
  },

  getSpecialVariableType: function getSpecialVariableType(node) {
    // now (same as block.timestamp)
    if (node.hasOwnProperty('type') && node.type === 'Identifier' && node.name === 'now') {
      return 'uint256';
    } else if (node.hasOwnProperty('type') && node.type === 'MemberAccess' && node.hasOwnProperty('expression') && node.expression.hasOwnProperty('type') && node.expression.type === 'Identifier') {
      // in case it is block.<x> special variable
      if (node.expression.name === 'block') {
        if (node.memberName === 'coinbase') {
          return 'address';
        } else {
          return 'uint256';
        }
      }

      // or msg.<x> special variable
      else if (node.expression.name === 'msg') {
          if (node.memberName === 'data') {
            return 'bytes';
          } else if (node.memberName === 'sender') {
            return 'address';
          } else if (node.memberName === 'sig') {
            return 'bytes4';
          } else if (node.memberName === 'value') {
            return 'uint256';
          }
        }

        // or tx.<x> special variable
        else if (node.expression.name === 'tx') {
            if (node.memberName === 'origin') {
              return 'address';
            } else if (node.memberName === 'gasprice') {
              return 'uint256';
            }
          }
    } else {
      // if not a special variable, return false
      return null;
    }
  }
};

module.exports = parserHelpers;

/***/ }),
/* 271 */
/***/ ((module) => {

"use strict";


var utils = {
  insertBeforeLastOccurrence: function insertBeforeLastOccurrence(strToSearch, strToFind, strToInsert) {
    var n = strToSearch.lastIndexOf(strToFind);
    if (n < 0) {
      return strToSearch;
    }
    return strToSearch.substring(0, n) + strToInsert + strToSearch.substring(n);
  }
};

module.exports = utils;

/***/ }),
/* 272 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __dirname = "/";
/**
 * Module dependencies.
 */
var path = __webpack_require__(4),
  spawn  = __webpack_require__(273).spawn,
  temp = __webpack_require__(274),
  fs = __webpack_require__(5),
  fsExt = __webpack_require__(275),
  Graph = __webpack_require__(276).Graph;

/**
 * Create a new undirected graph
 * @constructor
 * @param {String} id The graphID
 * @return {Graph}
 * @api public
 */
exports.graph = function(id) {
  var graph = new Graph(null, id);
  graph.type = 'graph';
  return graph;
};

/**
 * Create a new directed graph
 * @constructor
 * @param {String} id The graphID
 * @return {Graph}
 * @api public
 */
exports.digraph = function(id) {
  var graph = new Graph(null, id);
  graph.type = 'digraph';
  return graph;
};

function _parse(file, callback, errback) {
  var gvprScript = path.join(__dirname, "ext", "gvpr", "dot2js.g"),
    parameters = ["-f" + gvprScript, file],
    cmd = "gvpr",
    __graph_eval,
    err = '',
    out = '',
    graphviz = spawn(cmd, parameters);

  graphviz.stdout.on('data', function(data) {
    out += data;
    eval(data.toString());
  });
  graphviz.stderr.on('data', function(data) {
    err += data;
  });
  graphviz.stdin.end();
  graphviz.on('exit', function(code) {
    if(code !== 0 || __graph_eval === undefined) {
      if(errback) {
        errback(code, out, err);
      }
    } else {
      callback(__graph_eval);
    }
  });
}
/**
 * Create a new graph from a dot script
 * @constructor
 * @param {String} file_or_script The DOT script or file
 * @param {Function} callback
 * @param {Function} errback
 * @api public
 */
exports.parse = function(file_or_script, callback, errback) {
  if(fsExt.exist(file_or_script)) {
    _parse(file_or_script, callback, errback);
  } else {
    temp.open('node-graphviz', function(err, info) {
      if(err) {
        return errback(err);
      }
      fs.write(info.fd, file_or_script, function(err) {
        if(err) {
          return errback(err);
        }
        fs.close(info.fd, function(err) {
          if(err) {
            return errback(err);
          }
          _parse(info.path, callback, errback);
        });
      });
    });
  }
};


/***/ }),
/* 273 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 274 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(69);
var fs   = __webpack_require__(5),
    path = __webpack_require__(4);

/* HELPERS */

var defaultDirectory = '/tmp';
var environmentVariables = ['TMPDIR', 'TMP', 'TEMP'];

var getTempDirPath = function() {
  for(var i = 0; i < environmentVariables.length; i++) {
    var value = process.env[environmentVariables[i]];
    if(value)
      return fs.realpathSync(value);
  }
  return fs.realpathSync(defaultDirectory);
}

var generateName = function(rawAffixes, defaultPrefix) {
  var affixes = parseAffixes(rawAffixes, defaultPrefix);
  var now = new Date();
  var name = [affixes.prefix,
              now.getYear(), now.getMonth(), now.getDay(),
              '-',
              process.pid,
              '-',
              (Math.random() * 0x100000000 + 1).toString(36),
              affixes.suffix].join('');
  return path.join(exports.dir, name);
}

var parseAffixes = function(rawAffixes, defaultPrefix) {
  var affixes = {prefix: null, suffix: null};
  if(rawAffixes) {
    switch (typeof(rawAffixes)) {
    case 'string':
      affixes.prefix = rawAffixes;
      break;
    case 'object':
      affixes = rawAffixes;
      break
    default:
      throw("Unknown affix declaration: " + affixes);
    }
  } else {
    affixes.prefix = defaultPrefix;
  }
  return affixes;
}

/* EXIT HANDLERS */

/*
 * When any temp file or directory is created, it is added to filesToDelete
 * or dirsToDelete. The first time any temp file is created, a listener is
 * added to remove all temp files and directories at exit.
 */
var exitListenerAttached = false;
var filesToDelete = [];
var dirsToDelete = [];

var deleteFileOnExit = function(filePath) {
  attachExitListener();
  filesToDelete.push(filePath);
};

var deleteDirOnExit = function(dirPath) {
  attachExitListener();
  dirsToDelete.push(dirPath);
};

var attachExitListener = function() {
  if (!exitListenerAttached) {
    process.addListener('exit', cleanup);
    exitListenerAttached = true;
  }
};

var cleanupFiles = function() {
  for (var i=0; i < filesToDelete.length; i++) {
    try { fs.unlinkSync(filesToDelete[i]); }
    catch (rmErr) { /* removed normally */ }
  }
};

var cleanupDirs = function() {
  for (var i=0; i < dirsToDelete.length; i++) {
    try { fs.rmdirSync(dirsToDelete[i]); }
    catch (rmErr) { /* removed normally */ }
  }
};

var cleanup = function() {
  cleanupFiles();
  cleanupDirs();
}

/* DIRECTORIES */

var mkdir = function(affixes, callback) {
  var dirPath = generateName(affixes, 'd-');
  fs.mkdir(dirPath, 0700, function(err) {
    if (!err) {
      deleteDirOnExit(dirPath);
    }
    if (callback)
      callback(err, dirPath);
  });
}
var mkdirSync = function(affixes) {
  var dirPath = generateName(affixes, 'd-');
  fs.mkdirSync(dirPath, 0700);
  deleteDirOnExit(dirPath);
  return dirPath;
}

/* FILES */

var open = function(affixes, callback) {
  var filePath = generateName(affixes, 'f-')
  fs.open(filePath, 'w+', 0600, function(err, fd) {
    if (!err)
      deleteFileOnExit(filePath);
    if (callback)
      callback(err, {path: filePath, fd: fd});
  });
}

var openSync = function(affixes) {
  var filePath = generateName(affixes, 'f-')
  var fd = fs.openSync(filePath, "w+", 0600);
  deleteFileOnExit(filePath);
  return {path: filePath, fd: fd};
}


/* EXPORTS */
exports.dir = getTempDirPath();
exports.mkdir = mkdir;
exports.mkdirSync = mkdirSync;
exports.open = open;
exports.openSync = openSync;
exports.path = generateName;
exports.cleanup = cleanup;



/***/ }),
/* 275 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var fs = __webpack_require__(5);

exports.exist = function(path) {
  try {
    fs.statSync( path );
  }
  catch(e) {
    return( false );
  }
  return( true );
}


/***/ }),
/* 276 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * Module dependencies
 */
var Hash = __webpack_require__(277).Hash,
  Node = __webpack_require__(278).Node,
  Edge = __webpack_require__(283).Edge,
  gvattrs = __webpack_require__( 279 ),
  Attributs = gvattrs.Attributs,
  util = __webpack_require__(280),
  path = __webpack_require__(4),
  spawn  = __webpack_require__(284).spawn;

/**
 * Create a new graph
 * @constructor
 * @param {Graph} graph Parent Graph
 * @param {String} id The graphID
 * @return {Graph}
 * @api public
 */
var Graph = exports.Graph = function(graph, id) {
  this.relativeGraph = graph;
  this.id = id;
  this.type = 'graph';
  this.gvPath = '';
  this.nodes = new Hash();
  this.edges = new Array();
  this.clusters = new Hash();
  if( this.relativeGraph == null ) {
    this.graphAttributs = new Attributs("G");
  } else {
    this.graphAttributs = new Attributs("C");
  }
  this.nodesAttributs = new Attributs("N");
  this.edgesAttributs = new Attributs("E");
  this.use = 'dot';
};

/**
 * Create a new node
 *
 * @param {String} id The node ID
 * @param {Object} attrs Node attributs
 * @return {Node}
 * @api public
 */
Graph.prototype.addNode = function(id, attrs) {
  this.nodes.setItem(id, new Node(this, id));
  if( attrs ) {
    for( k in attrs ) {
      this.nodes.items[id].set( k, attrs[k] );
    }
  }

  return this.nodes.items[id];
}

/**
 * Return a node for a given ID
 *
 * @param {String} id The node ID
 * @return {Node}
 * @api public
 */
Graph.prototype.getNode = function(id) {
  return this.nodes.items[id];
}

Graph.prototype.from = function(id) {
	if( this.nodes.items[id] == undefined ) {
		this.addNode(id);
	}
	return this.nodes.items[id];
}

/**
 * Return the number of nodes in the current graph
 *
 * @return {Integer}
 * @api public
 */
Graph.prototype.nodeCount = function() {
  return this.nodes.length;
}

/**
 * Create a new edge
 *
 * @param {String|Node} nodeOne
 * @param {String|Node} nodeTwo
 * @param {Object} attrs Node attributs
 * @return {Edge}
 * @api public
 */
Graph.prototype.addEdge = function(nodeOne, nodeTwo, attrs) {
  var _nodeOne = nodeOne;
  var _nodeTwo = nodeTwo;
  if( typeof(nodeOne) == 'string' ) {
    _nodeOne = this.nodes.items[nodeOne];
    if( _nodeOne == null ) {
      _nodeOne = this.addNode( nodeOne );
    }
  }
  if( typeof(nodeTwo) == 'string' ) {
    _nodeTwo = this.nodes.items[nodeTwo];
    if( _nodeTwo == null ) {
      _nodeTwo = this.addNode( nodeTwo );
    }
  }
  
  var edge = new Edge(this, _nodeOne, _nodeTwo);
  if( attrs ) {
    for( k in attrs ) {
      edge.set( k, attrs[k] );
    }
  }
  this.edges.push( edge );
  
  return edge;
}

/**
 * Return the number of edges in the current graph
 *
 * @return {Integer}
 * @api public
 */
Graph.prototype.edgeCount = function() {
  return this.edges.length;
};

/**
 * Create a new subgraph
 *
 * @param {String} id The subgraph ID
 * @return {Graph}
 * @api public
 */
Graph.prototype.addCluster = function(id) {
  var cluster = new Graph(this, id);
  cluster.type = this.type;
  this.clusters.setItem(id, cluster);
  return cluster;
}

/**
 * Return a subgraph for a given ID
 *
 * @param {String} id The subgraph ID
 * @return {Graph}
 * @api public
 */
Graph.prototype.getCluster = function(id) {
  return this.clusters.items[id];
}

/**
 * Return the number of subgraphs in the current graph
 *
 * @return {Integer}
 * @api public
 */
Graph.prototype.clusterCount = function() {
  return this.clusters.length;
}

/**
 * Set a graph attribut
 *
 * @param {String} name The attribut name
 * @param {Void} value The attribut value
 * @api public
 */
Graph.prototype.set = function(name, value) {
  this.graphAttributs.set(name, value);
}

/**
 * Get a graph attribut
 *
 * @param {String} name The attribut name
 * @return {Void}
 * @api public
 */
Graph.prototype.get = function(name) {
  return this.graphAttributs.get(name);
}

/**
 * Set a global node attribut
 *
 * @param {String} name The attribut name
 * @param {Void} value The attribut value
 * @api public
 */
Graph.prototype.setNodeAttribut = function(name, value) {
  this.nodesAttributs.set(name, value);
}

/**
 * Get a global node attribut
 *
 * @param {String} name The attribut name
 * @return {Void}
 * @api public
 */
Graph.prototype.getNodeAttribut = function(name) {
  return this.nodesAttributs.get(name);
}

/**
 * Set a global edge attribut
 *
 * @param {String} name The attribut name
 * @param {Void} value The attribut value
 * @api public
 */
Graph.prototype.setEdgeAttribut = function(name, value) {
  this.edgesAttributs.set(name, value);
}

/**
 * Get a global edge attribut
 *
 * @param {String} name The attribut name
 * @return {Void}
 * @api public
 */
Graph.prototype.getEdgeAttribut = function(name) {
  return this.edgesAttributs.get(name);
}

/**
 * Generate the GraphViz script
 *
 * @return {String}
 * @api public
 */
Graph.prototype.to_dot = function() {
  var dotScript = '';
  if( this.relativeGraph == null ) {
    dotScript = this.type + ' ' + this.id + ' {\n'
  } else {
    dotScript = 'subgraph ' + this.id + ' {\n'
  }
  
  // Graph attributs
  if( this.graphAttributs.length() > 0 ) {
    dotScript = dotScript + "  graph" + this.graphAttributs.to_dot() + ";\n";
  }
  
  // Nodes attributs
  if( this.nodesAttributs.length() > 0 ) {
    dotScript = dotScript + "  node" + this.nodesAttributs.to_dot() + ";\n";
  }
  
  // Edges attributs
  if( this.edgesAttributs.length() > 0 ) {
    dotScript = dotScript + "  edge" + this.edgesAttributs.to_dot() + ";\n";
  }
  
  // Each clusters
  for( var id in this.clusters.items ) {
    if (this.clusters.items.hasOwnProperty(id)) {
      dotScript = dotScript + this.clusters.items[id].to_dot() + '\n';
    }
  }
  
  // Each nodes
  for( var id in this.nodes.items ) {
    if (this.nodes.items.hasOwnProperty(id)) {
      dotScript = dotScript + '  ' + this.nodes.items[id].to_dot() + ';\n'
    }
  }
  
  // Each edges
  for( var i in this.edges ) {
    if (this.edges.hasOwnProperty(i)) {
      dotScript = dotScript + '  ' + this.edges[i].to_dot() + ';\n'
    }
  }
  
  dotScript = dotScript + '}\n'
  
  return dotScript;
}

/**
 * Generate an output in file or memory
 *
 * @param {String|Object} type The output file type (png, jpeg, ps, ...) or options
 * @param {String|Function} name_or_callback The output file name or callback
 * @param {Function} errback Error callback
 * @api public
 *
 * Options :
 *   - type : output file type (png, jpeg, ps, ...)
 *   - use : Graphviz command to use (dot, neato, ...)
 *   - path : GraphViz path
 *   - G : 
 *   - N :
 *   - E :
 */
Graph.prototype.render = function(type_or_options, name_or_callback, errback) {
	var parameters = [];
	
	// Get output type
	var type = type_or_options;
	if( typeof(type_or_options) == 'object' ) {
		type = type_or_options.type;

		// Get use
		if( type_or_options.use != undefined ) { this.use = type_or_options.use; }
		
		// Get path
		if( type_or_options.path != undefined ) { this.gvPath = type_or_options.path; }
		
		// Get extra Graph Options
		if( type_or_options.G != undefined ) {
			for( attr in type_or_options.G ) {
				if( gvattrs.isValid( attr, "G" ) == false ) {
					util.debug( "Warning : Invalid attribut `"+attr+"' for a graph" );
				}
	      parameters.push( "-G"+attr+"="+type_or_options.G[attr] )
	    }
		}
		// Get extra Node Options
		if( type_or_options.N != undefined ) {
			for( attr in type_or_options.N ) {
				if( gvattrs.isValid( attr, "N" ) == false ) {
					util.debug( "Warning : Invalid attribut `"+attr+"' for a node" );
				}
	      parameters.push( "-N"+attr+"="+type_or_options.N[attr] )
	    }			
		}
		// Get extra Edge Options
		if( type_or_options.E != undefined ) {
			for( attr in type_or_options.E ) {
				if( gvattrs.isValid( attr, "E" ) == false ) {
					util.debug( "Warning : Invalid attribut `"+attr+"' for an edge" );
				}
	      parameters.push( "-E"+attr+"="+type_or_options.E[attr] )
	    }			
		}
	}
	parameters.push( '-T' + type );
	
  var dotScript = this.to_dot();
  
  var cmd = this.use;
  if( this.gvPath != '' ) {
    cmd = path.join( this.gvPath, this.use )
  }
  
  var rendered = null;
  var out = ''
  var err = ''
  var outcallback = function(data) { 
    if( rendered == null ) {
      rendered = data; 
    } else {
      __b = new Buffer( rendered.length + data.length )
      rendered.copy(__b, 0, 0)
      data.copy(__b, rendered.length, 0)
      rendered = __b
    }
  };
  
  if( typeof(name_or_callback) == 'string' ) {
    parameters.push( '-o' + name_or_callback )
    outcallback = function(data) { out += data; }
  }
  
  graphviz = spawn(cmd, parameters);
  graphviz.stdout.on('data', outcallback);
  graphviz.stderr.on('data', function(data) {
    err += data;
  });
  graphviz.on('exit', function(code) {
    if(code !== 0) {
      if(errback) { errback(code, out, err) }
    } else {
      if( typeof(name_or_callback) == 'function' ) name_or_callback(rendered);
    }
  });
  graphviz.stdin.write(this.to_dot());
  graphviz.stdin.end();
}
// Compatibility
Graph.prototype.output = function(type, name_or_callback, errback) {
  this.render(type, name_or_callback, errback);
}

/**
 * Set the GraphViz path
 *
 * @param {String} path The GraphViz path
 * @api public
 */
Graph.prototype.setGraphVizPath = function(path) {
  this.gvPath = path;
}


/***/ }),
/* 277 */
/***/ ((__unused_webpack_module, exports) => {

var Hash = exports.Hash = function() {
  this.length = 0;
  this.items = new Array();
  for (var i = 0; i < arguments.length; i += 2) {
    if (typeof(arguments[i + 1]) != 'undefined') {
      this.items[arguments[i]] = arguments[i + 1];
      this.length++;
    }
  }
}

Hash.prototype.removeItem = function(in_key) {
  var tmp_previous;
  if (typeof(this.items[in_key]) != 'undefined') {
    this.length--;
    var tmp_previous = this.items[in_key];
    delete this.items[in_key];
  }
   
  return tmp_previous;
}

Hash.prototype.getItem = function(in_key) {
  return this.items[in_key];
}

Hash.prototype.setItem = function(in_key, in_value) {
  var tmp_previous;
  if (typeof(in_value) != 'undefined') {
    if (typeof(this.items[in_key]) == 'undefined') {
      this.length++;
    }
    else {
      tmp_previous = this.items[in_key];
    }

    this.items[in_key] = in_value;
  }
   
  return tmp_previous;
}

Hash.prototype.hasItem = function(in_key) {
  return typeof(this.items[in_key]) != 'undefined';
}

Hash.prototype.clear = function() {
  for (var i in this.items) {
    delete this.items[i];
  }

  this.length = 0;
}


/***/ }),
/* 278 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * Module dependencies
 */
var Hash = __webpack_require__(277).Hash,
  Attributs = __webpack_require__(279).Attributs;

/**
 * Create a new node
 * @constructor
 * @param {Graph} graph Parent Graph
 * @param {String} id The node ID
 * @return {Node}
 * @api public
 */
var Node = exports.Node = function(graph, id) {
  this.relativeGraph = graph;
  this.id = id;
  this.attributs = new Attributs("N");
};

/**
 *
 */
Node.prototype.to = function(id, attrs) {
	this.relativeGraph.addEdge(this, id, attrs);
	return this.relativeGraph.from(id);
};

/**
 * Set a node attribut
 *
 * @param {String} name The attribut name
 * @param {Void} value The attribut value
 * @api public
 */
Node.prototype.set = function(name, value) {
  this.attributs.set(name, value);
  return this;
};

/**
 * Get a node attribut
 *
 * @param {String} name The attribut name
 * @return {Void}
 * @api public
 */
Node.prototype.get = function(name) {
  return this.attributs.get(name);
};

/**
 * @api private
 */
Node.prototype.to_dot = function() {
  var nodeOutput = '"' + this.id + '"' + this.attributs.to_dot();
  return nodeOutput;
};


/***/ }),
/* 279 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var Hash = __webpack_require__(277).Hash,
    util = __webpack_require__(280);

var attrs = {
  "Damping" :            { "usage" : "G",    "type" : "double" },
  "K" :                  { "usage" : "GC",   "type" : "double" },
  "URL" :                { "usage" : "ENGC", "type" : "escString" },
  "area" :               { "usage" : "NC",   "type" : "double" },
  "arrowhead" :          { "usage" : "E",    "type" : "arrowType" },
  "arrowsize" :          { "usage" : "E",    "type" : "double" },
  "arrowtail" :          { "usage" : "E",    "type" : "arrowType" },
  "aspect" :             { "usage" : "G",    "type" : "aspectType" },
  "bb" :                 { "usage" : "G",    "type" : "rect" },
  "bgcolor" :            { "usage" : "GC",   "type" : "color" },
  "center" :             { "usage" : "G",    "type" : "bool" },
  "charset" :            { "usage" : "G",    "type" : "string" },
  "clusterrank" :        { "usage" : "G",    "type" : "clusterMode" },
  "color" :              { "usage" : "ENC",  "type" : "color" },
  "colorscheme" :        { "usage" : "ENCG", "type" : "string" },
  "comment" :            { "usage" : "ENG",  "type" : "string" },
  "compound" :           { "usage" : "G",    "type" : "bool" },
  "concentrate" :        { "usage" : "G",    "type" : "bool" },
  "constraint" :         { "usage" : "E",    "type" : "bool" },
  "decorate" :           { "usage" : "E",    "type" : "bool" },
  "defaultdist" :        { "usage" : "G",    "type" : "double" },
  "dim" :                { "usage" : "G",    "type" : "int" },
  "dimen" :              { "usage" : "G",    "type" : "int" },
  "dir" :                { "usage" : "E",    "type" : "dirType" },
  "diredgeconstraints" : { "usage" : "G",    "type" : "string" },
  "distortion" :         { "usage" : "N",    "type" : "double" },
  "dpi" :                { "usage" : "G",    "type" : "double" },
  "edgeURL" :            { "usage" : "E",    "type" : "escString" },
  "edgehref" :           { "usage" : "E",    "type" : "escString" },
  "edgetarget" :         { "usage" : "E",    "type" : "escString" },
  "edgetooltip" :        { "usage" : "E",    "type" : "escString" },
  "epsilon" :            { "usage" : "G",    "type" : "double" },
  "esep" :               { "usage" : "G",    "type" : "double" },
  "fillcolor" :          { "usage" : "NEC",  "type" : "color" },
  "fixedsize" :          { "usage" : "N",    "type" : "bool" },
  "fontcolor" :          { "usage" : "ENGC", "type" : "color" },
  "fontname" :           { "usage" : "ENGC", "type" : "string" },
  "fontnames" :          { "usage" : "G",    "type" : "string" },
  "fontpath" :           { "usage" : "G",    "type" : "string" },
  "fontsize" :           { "usage" : "ENGC", "type" : "double" },
  "group" :              { "usage" : "N",    "type" : "string" },
  "headURL" :            { "usage" : "E",    "type" : "escString" },
  "headclip" :           { "usage" : "E",    "type" : "bool" },
  "headhref" :           { "usage" : "E",    "type" : "escString" },
  "headlabel" :          { "usage" : "E",    "type" : "lblString" },
  "headport" :           { "usage" : "E",    "type" : "portPos" },
  "headtarget" :         { "usage" : "E",    "type" : "escString" },
  "headtooltip" :        { "usage" : "E",    "type" : "escString" },
  "height" :             { "usage" : "N",    "type" : "double" },
  "href" :               { "usage" : "ENGC", "type" : "escString" },
  "id" :                 { "usage" : "GNE",  "type" : "lblString" },
  "image" :              { "usage" : "N",    "type" : "string" },
  "imagepath" :          { "usage" : "G",    "type" : "string" },
  "imagescale" :         { "usage" : "N",    "type" : "string" },
  "label" :              { "usage" : "ENGC", "type" : "lblString" },
  "labelURL" :           { "usage" : "E",    "type" : "escString" },
  "labelangle" :         { "usage" : "E",    "type" : "double" },
  "labeldistance" :      { "usage" : "E",    "type" : "double" },
  "labelfloat" :         { "usage" : "E",    "type" : "bool" },
  "labelfontcolor" :     { "usage" : "E",    "type" : "color" },
  "labelfontname" :      { "usage" : "E",    "type" : "string" },
  "labelfontsize" :      { "usage" : "E",    "type" : "double" },
  "labelhref" :          { "usage" : "E",    "type" : "escString" },
  "labeljust" :          { "usage" : "GC",   "type" : "string" },
  "labelloc" :           { "usage" : "NGC",  "type" : "string" },
  "labeltarget" :        { "usage" : "E",    "type" : "escString" },
  "labeltooltip" :       { "usage" : "E",    "type" : "escString" },
  "landscape" :          { "usage" : "G",    "type" : "bool" },
  "layer" :              { "usage" : "ENC",  "type" : "layerRange" },
  "layerlistsep" :       { "usage" : "G",    "type" : "string" },
  "layers" :             { "usage" : "G",    "type" : "layerList" },
  "layerselect" :        { "usage" : "G",    "type" : "layerRange" },
  "layersep" :           { "usage" : "G",    "type" : "string" },
  "layout" :             { "usage" : "G",    "type" : "string" },
  "len" :                { "usage" : "E",    "type" : "double" },
  "levels" :             { "usage" : "G",    "type" : "int" },
  "levelsgap" :          { "usage" : "G",    "type" : "double" },
  "lhead" :              { "usage" : "E",    "type" : "string" },
  "lheight" :            { "usage" : "GC",   "type" : "double" },
  "lp" :                 { "usage" : "EGC",  "type" : "point" },
  "ltail" :              { "usage" : "E",    "type" : "string" },
  "lwidth" :             { "usage" : "GC",   "type" : "double" },
  "margin" :             { "usage" : "NGC",  "type" : "pointf" },
  "maxiter" :            { "usage" : "G",    "type" : "int" },
  "mclimit" :            { "usage" : "G",    "type" : "double" },
  "mindist" :            { "usage" : "G",    "type" : "double" },
  "minlen" :             { "usage" : "E",    "type" : "int" },
  "mode" :               { "usage" : "G",    "type" : "string" },
  "model" :              { "usage" : "G",    "type" : "string" },
  "mosek" :              { "usage" : "G",    "type" : "bool" },
  "nodesep" :            { "usage" : "G",    "type" : "double" },
  "nojustify" :          { "usage" : "GCNE", "type" : "bool" },
  "normalize" :          { "usage" : "G",    "type" : "bool" },
  "nslimit" :            { "usage" : "G",    "type" : "double" },
  "nslimit1" :           { "usage" : "G",    "type" : "double" },
  "ordering" :           { "usage" : "GN",   "type" : "string" },
  "orientation" :        { "usage" : "GN",   "type" : "string" },
  "outputorder" :        { "usage" : "G",    "type" : "outputMode" },
  "overlap" :            { "usage" : "G",    "type" : "string" },
  "overlap_scaling" :    { "usage" : "G",    "type" : "double" },
  "pack" :               { "usage" : "G",    "type" : "int" },
  "packmode" :           { "usage" : "G",    "type" : "packMode" },
  "pad" :                { "usage" : "G",    "type" : "pointf" },
  "page" :               { "usage" : "G",    "type" : "pointf" },
  "pagedir" :            { "usage" : "G",    "type" : "pagedir" },
  "pencolor" :           { "usage" : "C",    "type" : "color" },
  "penwidth" :           { "usage" : "CNE",  "type" : "double" },
  "peripheries" :        { "usage" : "NC",   "type" : "int" },
  "pin" :                { "usage" : "N",    "type" : "bool" },
  "pos" :                { "usage" : "EN",   "type" : "point" },
  "quadtree" :           { "usage" : "G",    "type" : "quadType" },
  "quantum" :            { "usage" : "G",    "type" : "double" },
  "rank" :               { "usage" : "S",    "type" : "rankType" },
  "rankdir" :            { "usage" : "G",    "type" : "rankdir" },
  "ranksep" :            { "usage" : "G",    "type" : "double" },
  "ratio" :              { "usage" : "G",    "type" : "string" },
  "rects" :              { "usage" : "N",    "type" : "rect" },
  "regular" :            { "usage" : "N",    "type" : "bool" },
  "remincross" :         { "usage" : "G",    "type" : "bool" },
  "repulsiveforce" :     { "usage" : "G",    "type" : "double" },
  "resolution" :         { "usage" : "G",    "type" : "double" },
  "root" :               { "usage" : "GN",   "type" : "string" },
  "rotate" :             { "usage" : "G",    "type" : "int" },
  "rotation" :           { "usage" : "G",    "type" : "double" },
  "samehead" :           { "usage" : "E",    "type" : "string" },
  "sametail" :           { "usage" : "E",    "type" : "string" },
  "samplepoints" :       { "usage" : "N",    "type" : "int" },
  "scale" :              { "usage" : "G",    "type" : "double" },
  "searchsize" :         { "usage" : "G",    "type" : "int" },
  "sep" :                { "usage" : "G",    "type" : "double" },
  "shape" :              { "usage" : "N",    "type" : "shape" },
  "shapefile" :          { "usage" : "N",    "type" : "string" },
  "showboxes" :          { "usage" : "ENG",  "type" : "int" },
  "sides" :              { "usage" : "N",    "type" : "int" },
  "size" :               { "usage" : "G",    "type" : "pointf" },
  "skew" :               { "usage" : "N",    "type" : "double" },
  "smoothing" :          { "usage" : "G",    "type" : "smoothType" },
  "sortv" :              { "usage" : "GCN",  "type" : "int" },
  "splines" :            { "usage" : "G",    "type" : "string" },
  "start" :              { "usage" : "G",    "type" : "startType" },
  "style" :              { "usage" : "ENCG", "type" : "style" },
  "stylesheet" :         { "usage" : "G",    "type" : "string" },
  "tail_lp" :            { "usage" : "E",    "type" : "pointf" },
  "tailURL" :            { "usage" : "E",    "type" : "escString" },
  "tailclip" :           { "usage" : "E",    "type" : "bool" },
  "tailhref" :           { "usage" : "E",    "type" : "escString" },
  "taillabel" :          { "usage" : "E",    "type" : "lblString" },
  "tailport" :           { "usage" : "E",    "type" : "portPos" },
  "tailtarget" :         { "usage" : "E",    "type" : "escString" },
  "tailtooltip" :        { "usage" : "E",    "type" : "escString" },
  "target" :             { "usage" : "ENGC", "type" : "escString" },
  "tooltip" :            { "usage" : "NEC",  "type" : "escString" },
  "truecolor" :          { "usage" : "G",    "type" : "bool" },
  "vertices" :           { "usage" : "N",    "type" : "pointfList" },
  "viewport" :           { "usage" : "G",    "type" : "viewPort" },
  "voro_margin" :        { "usage" : "G",    "type" : "double" },
  "weight" :             { "usage" : "E",    "type" : "double" },
  "width" :              { "usage" : "N",    "type" : "double" },
  "xlabel" :             { "usage" : "EN",   "type" : "lblString" },
  "z" :                  { "usage" : "N",    "type" : "double" }
};

var gType = {
  "E" : "edge",
  "N" : "node",
  "G" : "graph",
  "C" : "cluster"
};

var quotedTypes = [
  "escString",
  "rect",
  "color",
  "colorList",
  "string",
  "lblString",
  "portPos",
  "point",
  "pointf",
  "pointfList",
  "splineType",
  "style",
  "viewPort"
];

function mustBeQuoted(data) {
  return(quotedTypes.indexOf(attrs[data].type) !== -1);
}

function quoteMe(attr, value) {
  if(value[0] === '!') {
    return ('<' + value.substr(1,1000) + '>');
  }
  else if(mustBeQuoted(attr)) {
    return(' "' + value + '"');
  } else {
    return(value);
  }
}

function validateAttribut(name, type) {
  if(attrs[name]) {
    return(attrs[name].usage.indexOf(type) > -1);
  } else {
    return(false);
  }
}

exports.isValid = function(name, type) {
	return validateAttribut(name, type);
};

var Attributs = exports.Attributs = function(t) {
  this._type = t;
  this.attributs = new Hash();
};

Attributs.prototype.length = function() {
  return(this.attributs.length);
};

Attributs.prototype.set = function(name, value) {
  if(validateAttribut(name, this._type) === false) {
    util.debug("Warning : Invalid attribut `" + name + "' for a " + gType[this._type]);
    // throw "Invalid attribut `"+name+"' for a "+gType[this._type]
  }
  this.attributs.setItem(name, value);
};

Attributs.prototype.get = function(name) {
  return this.attributs.items[name];
};

Attributs.prototype.to_dot = function(link) {
  var attrsOutput = "",
		sep = "";
  
  if(this.attributs.length > 0) {
    attrsOutput = attrsOutput + " [ ";
    for(var name in this.attributs.items) {
      if (this.attributs.items.hasOwnProperty(name)) {
        attrsOutput = attrsOutput + sep + name + " =" + quoteMe(name, this.attributs.items[name]);
        sep = ", ";
      }
    }
    attrsOutput = attrsOutput + " ]";
  }
  
  return attrsOutput;
};


/***/ }),
/* 280 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(69);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(281);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(282);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),
/* 281 */
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 282 */
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 283 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * Module dependencies
 */
var Hash = __webpack_require__(277).Hash,
  Attributs = __webpack_require__(279).Attributs;

/**
 * Create a new edge
 * @constructor
 * @param {Graph} graph Parent Graph
 * @param {String|Node} nodeOne The first node
 * @param {String|Node} nodeTwo The second node
 * @return {Edge}
 * @api public
 */
var Edge = exports.Edge = function(graph, nodeOne, nodeTwo) {
  this.relativeGraph = graph;
  this.nodeOne = nodeOne;
  this.nodeTwo = nodeTwo;
  this.attributs = new Attributs("E");
};

/**
 * Set an edge attribut
 *
 * @param {String} name The attribut name
 * @param {Void} value The attribut value
 * @api public
 */
Edge.prototype.set = function(name, value) {
  this.attributs.set(name, value);
  return this;
};

/**
 * Get an edge attribut
 *
 * @param {String} name The attribut name
 * @return {Void}
 * @api public
 */
Edge.prototype.get = function(name) {
  return this.attributs.get(name);
};

/**
 * @api private
 */
Edge.prototype.to_dot = function() {
  var edgeLink = "->";
  if(this.relativeGraph.type === "graph") {
    edgeLink = "--";
  }
  
  var edgeOutput = '"' + this.nodeOne.id + '"' + " " + edgeLink + " " + '"' + this.nodeTwo.id + '"';
  edgeOutput = edgeOutput + this.attributs.to_dot();
  return edgeOutput;
};


/***/ }),
/* 284 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 285 */
/***/ ((module) => {

"use strict";


const defaultOptions = {
  reverse: false,
  python: false
}

function merge(sequences) {
  let result = [];
  sequences = sequences.map(s => s.slice());

  while (sequences.length > 0) {
    let found = false;
    let head;

    for (let seq of sequences) {
      head = seq[0];

      function isBadHead(s) {
        return s !== seq && s.slice(1).includes(head);
      }

      if (!sequences.find(isBadHead)) {
        found = true;
        result.push(head);

        for (let seq of sequences) {
          const index = seq.indexOf(head);
          if (index > -1) {
            seq.splice(index, 1);
          }
        }

        break;
      }
    }

    sequences = sequences.filter(s => s.length > 0);

    if (!found) {
      throw new Error("cannot find C3-linearization for input");
    }
  }

  return result;
}

function _linearize(graph, head, results, visiting, options) {
  if (results.hasOwnProperty(head)) {
    return results[head];
  }

  if (visiting.has(head)) {
    throw new Error('circular dependency found');
  }
  visiting.add(head);

  let parents = graph[head];

  if (!parents || parents.length === 0) {
    const res = [head];
    results[head] = res;
    return res;
  }

  if (options.reverse === true) {
    parents = parents.slice().reverse();
  }

  let sequences = parents.map(x => _linearize(graph, x, results, visiting, options));

  if (options.python === true) {
    sequences = sequences.concat([parents]);
  }

  const res = [head].concat(merge(sequences));
  results[head] = res;

  visiting.delete(head);

  return res;
}

function linearize(graph, options) {
  options = Object.assign({}, defaultOptions, options)

  const results = {};
  const visiting = new Set();
  const heads = Object.keys(graph);

  for (let head of heads) {
    _linearize(graph, head, results, visiting, options);
  }

  return results;
}

module.exports.linearize = linearize;


/***/ }),
/* 286 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var defaultColorScheme = exports.defaultColorScheme = {
    digraph: {
        bgcolor: undefined,
        nodeAttribs: {},
        edgeAttribs: {}
    },
    visibility: {
        public: "green",
        external: "blue",
        private: "red",
        internal: "white"
    },
    nodeType: {
        modifier: "yellow"
    },
    call: {
        default: "orange",
        regular: "green",
        this: "green"
    },
    event: {
        style: "dotted"
    },
    contract: {
        defined: {
            bgcolor: "lightgray",
            color: "lightgray"
        },
        undefined: {
            bgcolor: undefined,
            color: "lightgray"
        }
    }
};

var defaultColorSchemeDark = exports.defaultColorSchemeDark = {
    digraph: {
        bgcolor: "#2e3e56",
        nodeAttribs: {
            style: "filled",
            fillcolor: "#edad56",
            color: "#edad56",
            penwidth: "3"
        },
        edgeAttribs: {
            color: "#fcfcfc",
            penwidth: "2",
            fontname: "helvetica Neue Ultra Light"
        }
    },
    visibility: {
        isFilled: true,
        public: "#FF9797",
        external: "#ffbdb9",
        private: "#edad56",
        internal: "#f2c383"
    },
    nodeType: {
        isFilled: false,
        shape: "doubleoctagon",
        modifier: "#1bc6a6",
        payable: "brown"
    },
    call: {
        default: "white",
        regular: "#1bc6a6",
        this: "#80e097"
    },
    event: {
        style: "dotted"
    },
    contract: {
        defined: {
            bgcolor: "#445773",
            color: "#445773",
            fontcolor: "#f0f0f0",
            style: "rounded"
        },
        undefined: {
            bgcolor: "#3b4b63",
            color: "#e8726d",
            fontcolor: "#f0f0f0",
            style: "rounded,dashed"
        }
    }

};

/***/ }),
/* 287 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.graphSimple = graphSimple;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var parserHelpers = __webpack_require__(270);
var utils = __webpack_require__(271);
var fs = __webpack_require__(5);
var parser = __webpack_require__(267);
var graphviz = __webpack_require__(272);

var _require = __webpack_require__(285),
    linearize = _require.linearize;

var importer = __webpack_require__(268);

var _require2 = __webpack_require__(286),
    defaultColorScheme = _require2.defaultColorScheme,
    defaultColorSchemeDark = _require2.defaultColorSchemeDark;

function graphSimple(files) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (files.length === 0) {
    throw new Error('\nNo files were specified for analysis in the arguments. Bailing...\n');
  }

  var colorScheme = options.hasOwnProperty('colorScheme') ? options.colorScheme : defaultColorScheme;

  var digraph = graphviz.digraph('G');
  digraph.set('ratio', 'auto');
  digraph.set('page', '100');
  digraph.set('compound', 'true');
  colorScheme.digraph.bgcolor && digraph.set('bgcolor', colorScheme.digraph.bgcolor);
  for (var i in colorScheme.digraph.nodeAttribs) {
    digraph.setNodeAttribut(i, colorScheme.digraph.nodeAttribs[i]);
  }
  for (var _i in colorScheme.digraph.edgeAttribs) {
    digraph.setEdgeAttribut(_i, colorScheme.digraph.edgeAttribs[_i]);
  }

  // make the files array unique by typecasting them to a Set and back
  // this is not needed in case the importer flag is on, because the 
  // importer module already filters the array internally
  if (!options.contentsInFilePath && options.importer) {
    files = importer.importProfiler(files);
  } else {
    files = [].concat(_toConsumableArray(new Set(files)));
  }

  // initialize vars that persist over file parsing loops
  var userDefinedStateVars = {};
  var stateVars = {};
  var dependencies = {};
  var fileASTs = [];
  var functionsPerContract = {};
  var contractUsingFor = {};
  var contractNames = [];

  var _loop = function _loop(file) {

    var content = void 0;
    if (!options.contentsInFilePath) {
      try {
        content = fs.readFileSync(file).toString('utf-8');
      } catch (e) {
        if (e.code === 'EISDIR') {
          console.error('Skipping directory ' + file);
          return 'continue';
        } else {
          throw e;
        }
      }
    } else {
      content = file;
    }

    var ast = function () {
      try {
        return parser.parse(content);
      } catch (err) {
        if (!options.contentsInFilePath) {
          console.error('\nError found while parsing the following file: ' + file + '\n');
        } else {
          console.error('\nError found while parsing one of the provided files\n');
        }
        throw err;
      }
    }();

    fileASTs.push(ast);

    var contractName = null;
    var contractNode = null; // a digraph node representing a contract

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        contractName = node.name;
        contractNames.push(contractName);

        var kind = "";
        if (node.kind == "interface") {
          kind = "  (iface)";
        } else if (node.kind == "library") {
          kind = "  (lib)";
        }

        userDefinedStateVars[contractName] = {};
        stateVars[contractName] = {};
        functionsPerContract[contractName] = [];
        contractUsingFor[contractName] = {};

        if (!(contractNode = digraph.getNode(contractName))) {
          contractNode = digraph.addNode(contractName);
        }

        contractNode.set('label', contractName);
        contractNode.set('color', colorScheme.contract.defined.color);
        if (colorScheme.contract.defined.fontcolor) {
          contractNode.set('fontcolor', colorScheme.contract.undefined.fontcolor);
        }

        if (colorScheme.contract.defined.style) {
          contractNode.set('style', colorScheme.contract.defined.style || "filled");
          // contractNode.set('bgcolor', colorScheme.contract.defined.color);
        } else {
          contractNode.set('style', 'filled');
        }

        // colorScheme.contract.defined.bgcolor && contractNode.set('bgcolor', colorScheme.contract.defined.bgcolor);


        dependencies[contractName] = node.baseContracts.map(function (spec) {
          return spec.baseName.namePath;
        });
      },
      StateVariableDeclaration: function StateVariableDeclaration(node) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = node.variables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var variable = _step3.value;

            if (parserHelpers.isUserDefinedDeclaration(variable)) {
              userDefinedStateVars[contractName][variable.name] = variable.typeName.namePath;
            } else if (parserHelpers.isElementaryTypeDeclaration(variable)) {
              stateVars[contractName][variable.name] = variable.typeName.name;
            } else if (parserHelpers.isArrayDeclaration(variable)) {
              stateVars[contractName][variable.name] = variable.typeName.baseTypeName.namePath;
            } else if (parserHelpers.isMappingDeclaration(variable)) {
              stateVars[contractName][variable.name] = variable.typeName.valueType.name;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      },
      FunctionDefinition: function FunctionDefinition(node) {
        functionsPerContract[contractName].push(node.name);
      },
      UsingForDeclaration: function UsingForDeclaration(node) {
        contractUsingFor[contractName][node.typeName.name] = node.libraryName;
      }
    });
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;

      var _ret = _loop(file);

      if (_ret === 'continue') continue;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  dependencies = linearize(dependencies, { reverse: true });

  var _loop2 = function _loop2(ast) {

    var contractName = null;
    var cluster = null;

    // find all the contracts, and create anode for them
    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        if (!(node = digraph.getNode(node.name))) {
          node = digraph.addNode(node.name);
          node.set('label', contractName);
          node.set('color', colorScheme.contract.defined.color);
          if (colorScheme.contract.defined.fontcolor) {
            contranodectNode.set('fontcolor', colorScheme.contract.undefined.fontcolor);
          }

          if (colorScheme.contract.defined.style) {
            node.set('style', colorScheme.contract.defined.style || "filled");
            // contractNode.set('bgcolor', colorScheme.contract.defined.color);
          } else {
            node.set('style', 'filled');
          }
        }
      }
    });

    var callingScope = null;
    var userDefinedLocalVars = {};
    var localVars = {};
    var tempUserDefinedStateVars = {};
    var tempStateVars = {};

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        contractName = node.name;
        callingScope = contractName;
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = dependencies[contractName][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var dep = _step4.value;

            Object.assign(tempUserDefinedStateVars, userDefinedStateVars[dep]);
            Object.assign(tempStateVars, stateVars[dep]);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        Object.assign(tempUserDefinedStateVars, userDefinedStateVars[contractName]);
        Object.assign(tempStateVars, stateVars[contractName]);
      },


      'ContractDefinition:exit': function ContractDefinitionExit(node) {
        contractName = null;
        tempUserDefinedStateVars = {};
        tempStateVars = {};
      },

      FunctionDefinition: function FunctionDefinition(node) {

        callingScope = contractName;
      },


      'FunctionDefinition:exit': function FunctionDefinitionExit(node) {
        callingScope = null;
        userDefinedLocalVars = {};
        localVars = {};
      },

      ModifierDefinition: function ModifierDefinition(node) {
        callingScope = contractName;
      },


      'ModifierDefinition:exit': function ModifierDefinitionExit(node) {
        callingScope = null;
      },

      // not sure what this is doing
      ParameterList: function ParameterList(node) {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = node.parameters[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var parameter = _step5.value;

            if (parameter.name === null) {
              return;
            } else if (parserHelpers.isUserDefinedDeclaration(parameter)) {
              userDefinedLocalVars[parameter.name] = parameter.typeName.namePath;
            } else if (callingScope) {
              localVars[parameter.name] = parameter.typeName.name;
            }
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      },


      // not sure what this is doing
      VariableDeclaration: function VariableDeclaration(node) {
        if (callingScope && node.name === null) {
          return;
        } else if (callingScope && parserHelpers.isUserDefinedDeclaration(node)) {
          userDefinedLocalVars[node.name] = node.typeName.namePath;
        } else if (callingScope && parserHelpers.isElementaryTypeDeclaration(node)) {
          localVars[node.name] = node.typeName.name;
        } else if (callingScope && parserHelpers.isArrayDeclaration(node)) {
          localVars[node.name] = node.typeName.baseTypeName.namePath;
        } else if (callingScope && parserHelpers.isMappingDeclaration(node)) {
          localVars[node.name] = node.typeName.valueType.name;
        }
      },


      // ModifierInvocation(node) {
      //   if (options.enableModifierEdges && callingScope) {
      //     digraph.addEdge(callingScope, contractName);
      //   }
      // },

      FunctionCall: function FunctionCall(node) {
        if (!callingScope) {
          // this is a function call outside of functions and modifiers, ignore for now
          return;
        }

        var expr = node.expression;

        var name = void 0;
        var localContractName = contractName;
        var opts = {
          color: colorScheme.call.default
        };

        if (parserHelpers.isRegularFunctionCall(node, contractNames)) {
          opts.color = colorScheme.call.regular;
          name = expr.name;
        } else if (parserHelpers.isMemberAccess(node)) {
          var object = null;
          var variableType = null;

          name = expr.memberName;

          // checking if the member expression is a simple identifier
          if (expr.expression.hasOwnProperty('name')) {
            object = expr.expression.name;

            // checking if it is a member of `address` and pass along it's contents
          } else if (parserHelpers.isMemberAccessOfAddress(node)) {
            if (expr.expression.arguments[0].hasOwnProperty('name')) {
              object = expr.expression.arguments[0].name;
            } else if (expr.expression.arguments[0].type === 'NumberLiteral') {
              object = 'address(' + expr.expression.arguments[0].number + ')';
            } else {
              object = JSON.stringify(expr.expression.arguments).replace(/"/g, "");
            }

            // checking if it is a typecasting to a user-defined contract type
          } else if (parserHelpers.isAContractTypecast(node, contractNames)) {
            object = expr.expression.expression.name;
          }

          // check if member expression is a special var and get its canonical type
          if (parserHelpers.isSpecialVariable(expr.expression)) {
            variableType = parserHelpers.getSpecialVariableType(expr.expression);

            // check if member expression is a typecast for a canonical type
          } else if (parserHelpers.isElementaryTypecast(expr.expression)) {
            variableType = expr.expression.expression.typeName.name;

            // else check for vars in defined the contract
          } else {
            // check if member access is a function of a "using for" declaration
            // START
            if (localVars.hasOwnProperty(object)) {
              /** tin: Bail - ignore usingFor BaseType in simpleGraph
              variableType = localVars[object];
              */
              return;
            } else if (userDefinedLocalVars.hasOwnProperty(object)) {
              variableType = userDefinedLocalVars[object];
            } else if (tempUserDefinedStateVars.hasOwnProperty(object)) {
              variableType = tempUserDefinedStateVars[object];
            } else if (tempStateVars.hasOwnProperty(object)) {
              /** tin: Bail - ignore usingFor BaseType in simpleGraph
              variableType = tempStateVars[object];
              */
              return;
            }
          }

          // convert to canonical elementary type: uint -> uint256
          variableType = variableType === 'uint' ? 'uint256' : variableType;

          // if variable type is not null let's replace "object" for the actual library name
          if (variableType !== null && contractUsingFor[contractName].hasOwnProperty(variableType) && functionsPerContract.hasOwnProperty(contractUsingFor[contractName][variableType]) && functionsPerContract[contractUsingFor[contractName][variableType]].includes(name)) {
            if (!options.libraries) {
              object = contractUsingFor[contractName][variableType];
            } else {
              return;
            }
          }
          // END

          // if we have found nothing so far then create no node
          if (object === null) {
            return;
          } else if (object === 'this') {
            opts.color = colorScheme.call.this;
          } else if (object === 'super') {
            // "super" in this context is gonna be the 2nd element of the dependencies array
            // since the first is the contract itself
            localContractName = dependencies[localContractName][1];
          } else if (tempUserDefinedStateVars[object] !== undefined) {
            localContractName = tempUserDefinedStateVars[object];
          } else if (userDefinedLocalVars[object] !== undefined) {
            localContractName = userDefinedLocalVars[object];
          } else {
            localContractName = object;
          }
        } else {
          return;
        }

        var externalNode = void 0;

        if (!(externalNode = digraph.getNode(localContractName))) {
          externalNode = digraph.addNode(localContractName);

          externalNode.set('label', localContractName);
          externalNode.set('color', colorScheme.contract.undefined.color);
          if (colorScheme.contract.undefined.fontcolor) {
            externalNode.set('fontcolor', colorScheme.contract.undefined.fontcolor);
          }
          if (colorScheme.contract.undefined.style) {
            externalNode.set('style', colorScheme.contract.undefined.style || "filled");
            /* tin: node.bgcolor is not allowed */
            //colorScheme.contract.undefined.bgcolor && externalNode.set('bgcolor', colorScheme.contract.undefined.bgcolor );
          }
        }

        if (!digraph.getNode(localContractName) && externalNode) {
          digraph.addNode(localContractName, { label: name });
        }

        var nodeExists = false;
        var edges = digraph.edges;
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = edges[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var edge = _step6.value;

            if (callingScope == edge.nodeOne.id && externalNode.id == edge.nodeTwo.id) {
              nodeExists = true;
              break;
            }
            // debugger;
            // console.log(callingScope, edge.nodeOne.id);
            // console.log(externalNode.id, edge.nodeTwo.id);
            // console.log(nodeExists)
          }
          // digraph.addEdge(callingScope, externalNode, opts);
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        if (!nodeExists) {
          // console.log('adding', callingScope, externalNode.id);
          digraph.addEdge(callingScope, externalNode.id, opts);
        }
      }
    });
  };

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = fileASTs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var ast = _step2.value;

      _loop2(ast);
    }

    // This next block's purpose is to create a legend on the lower left corner
    // of the graph with color information.
    // We'll do it in dot, by hand, because it's overkill to do it programatically.
    // 
    // We'll have to paste this subgraph before the last curly bracket of the diagram
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var legendDotString = '\n\nrankdir=LR\nnode [shape=plaintext]\nsubgraph cluster_01 { \nlabel = "Legend";\nkey [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">\n  <tr><td align="right" port="i1">Internal Call</td></tr>\n  <tr><td align="right" port="i2">External Call</td></tr>\n  <tr><td align="right" port="i3">Defined Contract</td></tr>\n  <tr><td align="right" port="i4">Undefined Contract</td></tr>\n  </table>>]\nkey2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">\n  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>\n  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>\n  <tr><td port="i3" bgcolor="' + colorScheme.contract.defined.bgcolor + '">&nbsp;&nbsp;&nbsp;</td></tr>\n  <tr><td port="i4">\n    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="' + colorScheme.contract.undefined.color + '">\n      <tr>\n       <td></td>\n      </tr>\n     </table>\n  </td></tr>\n  </table>>]\nkey:i1:e -> key2:i1:w [color="' + colorScheme.call.regular + '"]\nkey:i2:e -> key2:i2:w [color="' + colorScheme.call.default + '"]\n}\n';
  debugger;
  var finalDigraph = utils.insertBeforeLastOccurrence(digraph.to_dot(), '}', legendDotString);

  return finalDigraph;
}

/***/ }),
/* 288 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.inheritance = inheritance;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var fs = __webpack_require__(5);
var parser = __webpack_require__(267);
var graphviz = __webpack_require__(272);

var _require = __webpack_require__(285),
    linearize = _require.linearize;

var importer = __webpack_require__(268);

function inheritance(files) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (files.length === 0) {
    throw new Error('\nNo files were specified for analysis in the arguments. Bailing...\n');
  }

  var digraph = graphviz.digraph('G');
  digraph.set('ratio', 'auto');
  digraph.set('page', '40');

  // make the files array unique by typecasting them to a Set and back
  // this is not needed in case the importer flag is on, because the 
  // importer module already filters the array internally
  if (!options.contentsInFilePath && options.importer) {
    files = importer.importProfiler(files);
  } else {
    files = [].concat(_toConsumableArray(new Set(files)));
  }

  var _loop = function _loop(file) {

    var content = void 0;
    if (!options.contentsInFilePath) {
      try {
        content = fs.readFileSync(file).toString('utf-8');
      } catch (e) {
        if (e.code === 'EISDIR') {
          console.error('Skipping directory ' + file);
          return 'continue';
        } else {
          throw e;
        }
      }
    } else {
      content = file;
    }

    var ast = function () {
      try {
        return parser.parse(content);
      } catch (err) {
        if (!options.contentsInFilePath) {
          console.error('\nError found while parsing the following file: ' + file + '\n');
        } else {
          console.error('\nError found while parsing one of the provided files\n');
        }
        throw err;
      }
    }();

    var contractName = null;
    var dependencies = {};

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        contractName = node.name;

        if (!digraph.getNode(contractName)) {

          digraph.addNode(contractName);
        }

        dependencies[contractName] = node.baseContracts.map(function (spec) {
          return spec.baseName.namePath;
        });

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = dependencies[contractName][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var dep = _step2.value;

            if (!digraph.getNode(dep)) {

              digraph.addNode(dep);
            }

            digraph.addEdge(contractName, dep);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    });

    dependencies = linearize(dependencies, { reverse: true });
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;

      var _ret = _loop(file);

      if (_ret === 'continue') continue;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return digraph.to_dot();
}

/***/ }),
/* 289 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dependencies = dependencies;
exports.dependenciesPrint = dependenciesPrint;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var fs = __webpack_require__(5);
var parser = __webpack_require__(267);

var _require = __webpack_require__(285),
    linearize = _require.linearize;

var importer = __webpack_require__(268);

/**
 * @param  {array} files A list of files required to resolve dependency graph
 * @param  {string} childContract The name of the contract to derive
 * @returns {array} A c3-linearized list of the of the dependency graph
 */
function dependencies(files, childContract) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (files.length === 0) {
    throw new Error('\nNo files were specified for analysis in the arguments. Bailing...\n');
  }

  if (!childContract) {
    throw new Error('\nNo target contract specified in the arguments. Bailing...\n');
  }

  // initialize vars that persist over file parsing loops
  var dependencies = {};

  // make the files array unique by typecasting them to a Set and back
  // this is not needed in case the importer flag is on, because the 
  // importer module already filters the array internally
  if (!options.contentsInFilePath && options.importer) {
    files = importer.importProfiler(files);
  } else {
    files = [].concat(_toConsumableArray(new Set(files)));
  }

  var _loop = function _loop(file) {

    var content = void 0;
    if (!options.contentsInFilePath) {
      try {
        content = fs.readFileSync(file).toString('utf-8');
      } catch (e) {
        if (e.code === 'EISDIR') {
          console.error('Skipping directory ' + file);
          return 'continue';
        } else {
          throw e;
        }
      }
    } else {
      content = file;
    }

    var ast = function () {
      try {
        return parser.parse(content);
      } catch (err) {
        if (!options.contentsInFilePath) {
          console.error('\nError found while parsing the following file: ' + file + '\n');
        } else {
          console.error('\nError found while parsing one of the provided files\n');
        }
        throw err;
      }
    }();

    var contractName = null;

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        contractName = node.name;

        dependencies[contractName] = node.baseContracts.map(function (spec) {
          return spec.baseName.namePath;
        });
      }
    });
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;

      var _ret = _loop(file);

      if (_ret === 'continue') continue;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (!dependencies[childContract]) {
    throw new Error('\nSpecified child contract not found. Bailing...\n');
  }

  dependencies = linearize(dependencies, { reverse: true });

  return dependencies[childContract];
}

/**
 * A function designed to return a nicely formatted string to be printed
 * @param  {array} files A list of files required to resolve dependency graph
 * @param  {string} childContract The name of the contract to derive
 * @returns {array} A c3-linearized list of the of the dependency graph
 */
function dependenciesPrint(files, childContract) {
  var noColorOutput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var outputString = '';

  var derivedLinearization = dependencies(files, childContract);

  if (derivedLinearization) {
    outputString += noColorOutput ? derivedLinearization[0] : derivedLinearization[0].yellow;

    if (derivedLinearization.length < 2) {
      outputString += '\nNo Dependencies Found';
      return outputString;
    }
    derivedLinearization.shift();

    var reducer = function reducer(accumulator, currentValue) {
      return accumulator + '\n  \u2196 ' + currentValue;
    };
    outputString += '\n  \u2196 ' + derivedLinearization.reduce(reducer);
  }

  return outputString;
}

/***/ }),
/* 290 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.parse = parse;
var fs = __webpack_require__(5);
var parser = __webpack_require__(267);
var treeify = __webpack_require__(291);

function parse(file) {
    var content = fs.readFileSync(file).toString('utf-8');
    var ast = function () {
        try {
            return parser.parse(content);
        } catch (err) {
            console.log('Error found while parsing the following file: ' + file);
            throw err;
        }
    }();

    return treeify.asTree(ast, true);
}

/***/ }),
/* 291 */
/***/ (function(module) {

//     treeify.js
//     Luke Plaster <notatestuser@gmail.com>
//     https://github.com/notatestuser/treeify.js

// do the universal module definition dance
(function (root, factory) {

  if (true) {
    module.exports = factory();
  } else {}

}(this, function() {

  function makePrefix(key, last) {
    var str = (last ? '└' : '├');
    if (key) {
      str += '─ ';
    } else {
      str += '──┐';
    }
    return str;
  }

  function filterKeys(obj, hideFunctions) {
    var keys = [];
    for (var branch in obj) {
      // always exclude anything in the object's prototype
      if (!obj.hasOwnProperty(branch)) {
        continue;
      }
      // ... and hide any keys mapped to functions if we've been told to
      if (hideFunctions && ((typeof obj[branch])==="function")) {
        continue;
      }
      keys.push(branch);
    }
    return keys;
  }

  function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {
    var line = '', index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);

    if (lastStatesCopy.push([ root, last ]) && lastStates.length > 0) {
      // based on the "was last element" states of whatever we're nested within,
      // we need to append either blankness or a branch to our line
      lastStates.forEach(function(lastState, idx) {
        if (idx > 0) {
          line += (lastState[1] ? ' ' : '│') + '  ';
        }
        if ( ! circular && lastState[0] === root) {
          circular = true;
        }
      });

      // the prefix varies based on whether the key contains something to show and
      // whether we're dealing with the last element in this collection
      line += makePrefix(key, last) + key;

      // append values and the circular reference indicator
      showValues && (typeof root !== 'object' || root instanceof Date) && (line += ': ' + root);
      circular && (line += ' (circular ref.)');

      callback(line);
    }

    // can we descend into the next item?
    if ( ! circular && typeof root === 'object') {
      var keys = filterKeys(root, hideFunctions);
      keys.forEach(function(branch){
        // the last key is always printed with a different prefix, so we'll need to know if we have it
        lastKey = ++index === keys.length;

        // hold your breath for recursive action
        growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);
      });
    }
  };

  // --------------------

  var Treeify = {};

  // Treeify.asLines
  // --------------------
  // Outputs the tree line-by-line, calling the lineCallback when each one is available.

  Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {
    /* hideFunctions and lineCallback are curried, which means we don't break apps using the older form */
    var hideFunctionsArg = typeof hideFunctions !== 'function' ? hideFunctions : false;
    growBranch('.', obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);
  };

  // Treeify.asTree
  // --------------------
  // Outputs the entire tree, returning it as a string with line breaks.

  Treeify.asTree = function(obj, showValues, hideFunctions) {
    var tree = '';
    growBranch('.', obj, false, [], showValues, hideFunctions, function(line) {
      tree += line + '\n';
    });
    return tree;
  };

  // --------------------

  return Treeify;

}));


/***/ }),
/* 292 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.ftrace = ftrace;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var parserHelpers = __webpack_require__(270);
var fs = __webpack_require__(5);
var parser = __webpack_require__(267);

var _require = __webpack_require__(285),
    linearize = _require.linearize;

var treeify = __webpack_require__(291);
var importer = __webpack_require__(268);

function ftrace(functionId, accepted_visibility, files) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var noColorOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  if (files.length === 0) {
    throw new Error('\nNo files were specified for analysis in the arguments. Bailing...\n');
  }

  var _functionId$split = functionId.split('::', 2),
      _functionId$split2 = _slicedToArray(_functionId$split, 2),
      contractToTraverse = _functionId$split2[0],
      functionToTraverse = _functionId$split2[1];

  if (contractToTraverse === undefined || functionToTraverse === undefined) {
    throw new Error('\nYou did not provide the function identifier in the right format "CONTRACT::FUNCTION"\n');
  }

  if (accepted_visibility !== 'all' && accepted_visibility !== 'internal' && accepted_visibility !== 'external') {
    throw new Error('The "' + accepted_visibility + '" type of call to traverse is not known [all|internal|external]');
  }

  if (options.jsonOutput) {
    noColorOutput = true;
  }

  var functionCallsTree = {};

  // initialize vars that persist over file parsing loops
  var userDefinedStateVars = {};
  var stateVars = {};
  var dependencies = {};

  var functionsPerContract = {};
  var eventsPerContract = {};
  var structsPerContract = {};
  var contractUsingFor = {};
  var contractNames = [];

  var modifiers = {};
  var functionDecorators = {};

  var fileASTs = [];
  var contractASTIndex = {};

  // make the files array unique by typecasting them to a Set and back
  // this is not needed in case the importer flag is on, because the 
  // importer module already filters the array internally
  if (!options.contentsInFilePath && options.importer) {
    files = importer.importProfiler(files);
  } else {
    files = [].concat(_toConsumableArray(new Set(files)));
  }

  var _loop = function _loop(file) {

    var content = void 0;
    if (!options.contentsInFilePath) {
      try {
        content = fs.readFileSync(file).toString('utf-8');
      } catch (e) {
        if (e.code === 'EISDIR') {
          console.error('Skipping directory ' + file);
          return 'continue';
        } else {
          throw e;
        }
      }
    } else {
      content = file;
    }

    var ast = function () {
      try {
        return parser.parse(content);
      } catch (err) {
        if (!options.contentsInFilePath) {
          console.error('\nError found while parsing the following file: ' + file + '\n');
        } else {
          console.error('\nError found while parsing one of the provided files\n');
        }
        throw err;
      }
    }();

    fileASTs.push(ast);

    var contractName = null;

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        contractName = node.name;
        contractNames.push(contractName);

        userDefinedStateVars[contractName] = {};
        stateVars[contractName] = {};
        functionsPerContract[contractName] = [];
        eventsPerContract[contractName] = [];
        structsPerContract[contractName] = [];
        contractUsingFor[contractName] = {};

        contractASTIndex[contractName] = fileASTs.length - 1;

        dependencies[contractName] = node.baseContracts.map(function (spec) {
          return spec.baseName.namePath;
        });
      },
      StateVariableDeclaration: function StateVariableDeclaration(node) {
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = node.variables[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var variable = _step9.value;

            if (parserHelpers.isUserDefinedDeclaration(variable)) {
              userDefinedStateVars[contractName][variable.name] = variable.typeName.namePath;
            } else if (parserHelpers.isElementaryTypeDeclaration(variable)) {
              stateVars[contractName][variable.name] = variable.typeName.name;
            } else if (parserHelpers.isArrayDeclaration(variable)) {
              stateVars[contractName][variable.name] = variable.typeName.baseTypeName.namePath;
            } else if (parserHelpers.isMappingDeclaration(variable)) {
              stateVars[contractName][variable.name] = variable.typeName.valueType.name;
            }
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }
      },
      FunctionDefinition: function FunctionDefinition(node) {
        functionsPerContract[contractName].push(node.name);
      },
      EventDefinition: function EventDefinition(node) {
        eventsPerContract[contractName].push(node.name);
      },
      StructDefinition: function StructDefinition(node) {
        structsPerContract[contractName].push(node.name);
      },
      UsingForDeclaration: function UsingForDeclaration(node) {
        // Check if the using for declaration is targeting a specific type or all types with "*"
        var typeNameName = node.typeName != null ? node.typeName.name : '*';

        if (!contractUsingFor[contractName][typeNameName]) {
          contractUsingFor[contractName][typeNameName] = new Set([]);
        }
        contractUsingFor[contractName][typeNameName].add(node.libraryName);
      }
    });
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;

      var _ret = _loop(file);

      if (_ret === 'continue') continue;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  dependencies = linearize(dependencies, { reverse: true });

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = fileASTs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var ast = _step2.value;

      constructPerFileFunctionCallTree(ast);
    }
    // END of file traversing
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var touched = {};
  var callTree = {};

  if (!functionCallsTree.hasOwnProperty(contractToTraverse)) {
    return 'The ' + contractToTraverse + ' contract is not present in the codebase.';
  } else if (!functionCallsTree[contractToTraverse].hasOwnProperty(functionToTraverse)) {
    return 'The ' + functionToTraverse + ' function is not present in ' + contractToTraverse + '.';
  }

  var seedKeyString = contractToTraverse + '::' + functionToTraverse;
  touched[seedKeyString] = true;
  callTree[seedKeyString] = {};

  // Call with seed
  constructCallTree(contractToTraverse, functionToTraverse, callTree[seedKeyString]);

  if (options.jsonOutput) {
    return callTree;
  } else {
    return treeify.asTree(callTree, true);
  }

  /****************************
   * 
   * INTERNAL FUNCTIONS BLOCK
   * 
   ****************************/

  function modifierCalls(modifierName, contractName) {
    if (dependencies.hasOwnProperty(contractName)) {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = dependencies[contractName][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var dep = _step3.value;

          if (!functionCallsTree.hasOwnProperty(dep)) {
            constructPerFileFunctionCallTree(fileASTs[contractASTIndex[dep]]);
          }

          if (!functionCallsTree.hasOwnProperty(dep)) {
            throw new Error('\nA referenced contract was not available in the provided list of contracts. This usually means that some imported file was left out of the files argument.\nYou can try to solve this automatically by using the \'-i\' flag or by including all the imported files manually.\n');
          }

          if (functionCallsTree[dep].hasOwnProperty(modifierName)) {
            return functionCallsTree[dep][modifierName];
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    return functionCallsTree[contractName].hasOwnProperty(modifierName) ? functionCallsTree[contractName][modifierName] : {};
  }

  function constructPerFileFunctionCallTree(ast) {
    var contractName = null;
    var functionName = null;

    var userDefinedLocalVars = {};
    var localVars = {};
    var tempUserDefinedStateVars = {};
    var tempStateVars = {};

    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {
        contractName = node.name;

        functionCallsTree[contractName] = {};
        modifiers[contractName] = {};

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = dependencies[contractName][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var dep = _step4.value;

            Object.assign(tempUserDefinedStateVars, userDefinedStateVars[dep]);
            Object.assign(tempStateVars, stateVars[dep]);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        Object.assign(tempUserDefinedStateVars, userDefinedStateVars[contractName]);
        Object.assign(tempStateVars, stateVars[contractName]);
      },


      'ContractDefinition:exit': function ContractDefinitionExit(node) {
        contractName = null;
        tempUserDefinedStateVars = {};
        tempStateVars = {};
      },

      FunctionDefinition: function FunctionDefinition(node) {
        if (node.isConstructor) {
          functionName = '<Constructor>';
        } else if (node.isFallback) {
          functionName = '<Fallback>';
        } else if (node.isReceiveEther) {
          functionName = '<Receive Ether>';
        } else {
          functionName = node.name;
        }

        var spec = '';
        if (node.visibility === 'public' || node.visibility === 'default') {
          spec += '[Pub] ❗️';
        } else if (node.visibility === 'external') {
          spec += '[Ext] ❗️';
        } else if (node.visibility === 'private') {
          spec += '[Priv] 🔐';
        } else if (node.visibility === 'internal') {
          spec += '[Int] 🔒';
        }

        var payable = '';
        if (node.stateMutability === 'payable') {
          payable = '💵';
        }

        var mutating = '';
        if (!node.stateMutability) {
          mutating = '🛑';
        }

        functionDecorators[functionName] = ' | ' + spec + '  ' + mutating + ' ' + payable;

        functionCallsTree[contractName][functionName] = {};
        modifiers[contractName][functionName] = [];
      },


      'FunctionDefinition:exit': function FunctionDefinitionExit(node) {
        functionName = null;
        userDefinedLocalVars = {};
        localVars = {};
      },

      ModifierDefinition: function ModifierDefinition(node) {
        functionName = node.name;
        functionCallsTree[contractName][functionName] = {};
      },


      'ModifierDefinition:exit': function ModifierDefinitionExit(node) {
        functionName = null;
      },

      ModifierInvocation: function ModifierInvocation(node) {
        modifiers[contractName][functionName].push(node.name);
      },
      ParameterList: function ParameterList(node) {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = node.parameters[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var parameter = _step5.value;

            if (parameter.name === null) {
              return;
            } else if (parserHelpers.isUserDefinedDeclaration(parameter)) {
              userDefinedLocalVars[parameter.name] = parameter.typeName.namePath;
            } else if (functionName) {
              localVars[parameter.name] = parameter.typeName.name;
            }
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      },
      VariableDeclaration: function VariableDeclaration(node) {
        if (functionName && node.name === null) {
          return;
        } else if (functionName && parserHelpers.isUserDefinedDeclaration(node)) {
          userDefinedLocalVars[node.name] = node.typeName.namePath;
        } else if (functionName && parserHelpers.isElementaryTypeDeclaration(node)) {
          localVars[node.name] = node.typeName.name;
        } else if (functionName && parserHelpers.isArrayDeclaration(node)) {
          localVars[node.name] = node.typeName.baseTypeName.namePath;
        } else if (functionName && parserHelpers.isMappingDeclaration(node)) {
          localVars[node.name] = node.typeName.valueType.name;
        }
      },
      FunctionCall: function FunctionCall(node) {
        if (!functionName) {
          // this is a function call outside of functions and modifiers, ignore if exists
          return;
        }

        var expr = node.expression;

        var name = void 0;
        var localContractName = void 0;
        var visibility = void 0;

        // Construct an array with the event and struct names in the whole dependencies tree of the current contract
        var eventsOfDependencies = [];
        var structsOfDependencies = [];
        if (dependencies.hasOwnProperty(contractName)) {
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = dependencies[contractName][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var dep = _step6.value;

              eventsOfDependencies = eventsOfDependencies.concat(eventsPerContract[dep]);
              structsOfDependencies = structsOfDependencies.concat(structsPerContract[dep]);
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        }
        // The following block is a nested switch statement for creation of the call tree
        // START BLOCK
        if (parserHelpers.isRegularFunctionCall(node, contractNames, eventsOfDependencies, structsOfDependencies)) {
          name = expr.name;

          localContractName = contractName;

          // check if function is implemented in this contract or in any of its dependencies
          if (dependencies.hasOwnProperty(contractName)) {
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
              for (var _iterator7 = dependencies[contractName][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var _dep = _step7.value;

                if (!functionCallsTree.hasOwnProperty(_dep)) {
                  constructPerFileFunctionCallTree(fileASTs[contractASTIndex[_dep]]);
                }

                if (!functionCallsTree.hasOwnProperty(_dep)) {
                  throw new Error('\nA referenced contract was not available in the provided list of contracts. This usually means that some imported file was left out of the files argument.\nYou can try to solve this automatically by using the \'-i\' flag or by including all the imported files manually.\n');
                }

                if (functionCallsTree[_dep].hasOwnProperty(name)) {
                  localContractName = _dep;
                }
              }
            } catch (err) {
              _didIteratorError7 = true;
              _iteratorError7 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                  _iterator7.return();
                }
              } finally {
                if (_didIteratorError7) {
                  throw _iteratorError7;
                }
              }
            }
          }

          visibility = 'internal';
        } else if (parserHelpers.isMemberAccess(node)) {
          var object = null;
          var variableType = null;

          visibility = 'external';

          name = expr.memberName;

          // checking if the member expression is a simple identifier
          if (expr.expression.hasOwnProperty('name')) {
            object = expr.expression.name;

            // checking if it is a member of `address` and pass along it's contents
          } else if (parserHelpers.isMemberAccessOfAddress(node)) {
            if (expr.expression.arguments[0].hasOwnProperty('name')) {
              object = expr.expression.arguments[0].name;
            } else if (expr.expression.arguments[0].type === 'NumberLiteral') {
              object = 'address(' + expr.expression.arguments[0].number + ')';
            } else {
              object = JSON.stringify(expr.expression.arguments).replace(/"/g, "");
            }

            // checking if it is a typecasting to a user-defined contract type
          } else if (parserHelpers.isAContractTypecast(node, contractNames)) {
            object = expr.expression.expression.name;
          }

          // check if member expression is a special var and get its canonical type
          if (parserHelpers.isSpecialVariable(expr.expression)) {
            variableType = parserHelpers.getSpecialVariableType(expr.expression);

            // check if member expression is a typecast for a canonical type
          } else if (parserHelpers.isElementaryTypecast(expr.expression)) {
            variableType = expr.expression.expression.typeName.name;

            // else check for vars in defined the contract
          } else {
            // check if member access is a function of a "using for" declaration
            // START
            if (localVars.hasOwnProperty(object)) {
              variableType = localVars[object];
            } else if (userDefinedLocalVars.hasOwnProperty(object)) {
              variableType = userDefinedLocalVars[object];
            } else if (tempUserDefinedStateVars.hasOwnProperty(object)) {
              variableType = tempUserDefinedStateVars[object];
            } else if (tempStateVars.hasOwnProperty(object)) {
              variableType = tempStateVars[object];
            }
          }

          // convert to canonical elementary type: uint -> uint256
          variableType = variableType === 'uint' ? 'uint256' : variableType;

          // if variable type is not null let's replace "object" for the actual library name
          if (variableType !== null) {
            // Incase there is a "using for" declaration for this specific variable type we get its definition
            if (contractUsingFor[contractName].hasOwnProperty(variableType) && functionsPerContract.hasOwnProperty(contractUsingFor[contractName][variableType])) {

              // If there were any library declarations done to all the types with "*"
              // we will add them to the list of matching contracts
              var contractUsingForDefinitions = new (Function.prototype.bind.apply(Set, [null].concat(_toConsumableArray(contractUsingFor[contractName][variableType]))))();
              if (contractUsingFor[contractName].hasOwnProperty('*') && functionsPerContract.hasOwnProperty(contractUsingFor[contractName]['*'])) {
                contractUsingForDefinitions = new (Function.prototype.bind.apply(Set, [null].concat(_toConsumableArray(contractUsingFor[contractName][variableType]), _toConsumableArray(contractUsingFor[contractName]['*']))))();
              }

              // check which usingFor contract the method resolves to (best effort first match)
              var matchingContracts = [].concat(_toConsumableArray(contractUsingForDefinitions)).filter(function (contract) {
                return functionsPerContract[contract].includes(name);
              });

              if (matchingContracts.length > 0) {
                // we found at least one matching contract. use the first. don't know what to do if multiple are matching :/
                if (!options.libraries) {
                  object = matchingContracts[0];
                } else {
                  return;
                }
              }
            }
            // In case there is not, we can just shortcircuit the search to only the "*" variable type, incase it exists
          } else if (contractUsingFor[contractName].hasOwnProperty('*') && functionsPerContract.hasOwnProperty(contractUsingFor[contractName]['*'])) {
            // check which usingFor contract the method resolves to (best effort first match)
            var _matchingContracts = [].concat(_toConsumableArray(contractUsingFor[contractName]['*'])).filter(function (contract) {
              return functionsPerContract[contract].includes(name);
            });

            if (_matchingContracts.length > 0) {
              // we found at least one matching contract. use the first. don't know what to do if multiple are matching :/
              if (!options.libraries) {
                object = _matchingContracts[0];
              } else {
                return;
              }
            }
          }
          // END

          // if we have found nothing so far then create no node
          if (object === null) {
            return;
          } else if (object === 'super') {
            // "super" in this context is gonna be the 2nd element of the dependencies array
            // since the first is the contract itself
            localContractName = dependencies[contractName][1];
          } else if (tempUserDefinedStateVars[object] !== undefined) {
            localContractName = tempUserDefinedStateVars[object];
          } else if (userDefinedLocalVars[object] !== undefined) {
            localContractName = userDefinedLocalVars[object];
          } else {
            localContractName = object;
          }
        } else {
          return;
        }

        if (!functionCallsTree[contractName][functionName].hasOwnProperty(name)) {
          functionCallsTree[contractName][functionName][name] = {
            contract: localContractName,
            numberOfCalls: 1,
            visibility: visibility
          };
        } else {
          functionCallsTree[contractName][functionName][name].numberOfCalls += 1;
        }
      }
    });
  }

  // Function to recursively generate the tree to show in the console
  function constructCallTree(reduceJobContractName, reduceJobFunctionName, parentObject) {
    var tempIterable = void 0;

    if (functionCallsTree[reduceJobContractName] === undefined) {
      //unknown method. do not resolve further
      return;
    }

    if (functionCallsTree[reduceJobContractName][reduceJobFunctionName] === undefined) {
      return;
    }

    tempIterable = functionCallsTree[reduceJobContractName][reduceJobFunctionName];

    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
      for (var _iterator8 = modifiers[reduceJobContractName][reduceJobFunctionName][Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
        var modifier = _step8.value;

        Object.assign(tempIterable, modifierCalls(modifier, reduceJobContractName));
      }
    } catch (err) {
      _didIteratorError8 = true;
      _iteratorError8 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion8 && _iterator8.return) {
          _iterator8.return();
        }
      } finally {
        if (_didIteratorError8) {
          throw _iteratorError8;
        }
      }
    }

    Object.entries(tempIterable).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          functionCallName = _ref2[0],
          functionCallObject = _ref2[1];

      if (functionCallName !== 'undefined' && (accepted_visibility == 'all' || functionCallObject.visibility == accepted_visibility)) {
        var keyString = functionCallObject.contract + '::' + functionCallName;

        keyString += functionDecorators[functionCallName] === undefined ? '' : functionDecorators[functionCallName];

        if (!noColorOutput && functionCallObject.visibility === 'external' && accepted_visibility !== 'external') {
          keyString = keyString.yellow;
        }

        if (touched[keyString] === undefined) {
          parentObject[keyString] = {};
          touched[keyString] = true;

          // Test if the call is really to a contract or rather an address variable member access
          // If it is not a contract we should stop here
          if (functionCallObject.contract.substring(0, 8) !== '#address') {
            constructCallTree(functionCallObject.contract, functionCallName, parentObject[keyString]);
          }
        } else {
          if (functionCallsTree[functionCallObject.contract] === undefined) {
            parentObject[keyString] = {};
          } else {
            parentObject[keyString] = Object.keys(functionCallsTree[functionCallObject.contract][functionCallName]).length === 0 ? {} : noColorOutput ? '..[Repeated Ref]..' : '..[Repeated Ref]..'.red;
          }
        }
      }
    });
  }
}

/***/ }),
/* 293 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mdreport = mdreport;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var fs = __webpack_require__(5);
var parser = __webpack_require__(267);
var sha1File = __webpack_require__(294);
var importer = __webpack_require__(268);

function mdreport(infiles) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var content = '';

  if (infiles.length === 0) {
    throw new Error('\nNo files were specified for analysis in the arguments. Bailing...\n');
  }

  var filesTable = '\n|  File Name  |  SHA-1 Hash  |\n|-------------|--------------|\n';

  var contractsTable = '\n|  Contract  |         Type        |       Bases      |                  |                 |\n|:----------:|:-------------------:|:----------------:|:----------------:|:---------------:|\n|     \u2514      |  **Function Name**  |  **Visibility**  |  **Mutability**  |  **Modifiers**  |\n';

  // make the files array unique by typecasting them to a Set and back
  // this is not needed in case the importer flag is on, because the 
  // importer module already filters the array internally
  if (!options.contentsInFilePath && options.importer) {
    infiles = importer.importProfiler(infiles);
  } else {
    infiles = [].concat(_toConsumableArray(new Set(infiles)));
  }

  var _loop = function _loop(file) {
    filesTable += '| ' + file + ' | ' + sha1File(file) + ' |\n';

    if (!options.contentsInFilePath) {
      try {
        content = fs.readFileSync(file).toString('utf-8');
      } catch (e) {
        if (e.code === 'EISDIR') {
          console.error('Skipping directory ' + file);
          return 'continue';
        } else {
          throw e;
        }
      }
    } else {
      content = file;
    }

    var ast = function () {
      try {
        return parser.parse(content);
      } catch (err) {
        if (!options.contentsInFilePath) {
          console.error('\nError found while parsing the following file: ' + file + '\n');
        } else {
          console.error('\nError found while parsing one of the provided files\n');
        }
        throw err;
      }
    }();

    isPublic = false;
    doesModifierExist = false;
    isConstructor = false;


    parser.visit(ast, {
      ContractDefinition: function ContractDefinition(node) {

        var name = node.name;
        var bases = node.baseContracts.map(function (spec) {
          return spec.baseName.namePath;
        }).join(', ');

        var specs = '';
        if (node.kind === 'library') {
          specs += 'Library';
        } else if (node.kind === 'interface') {
          specs += 'Interface';
        } else {
          specs += 'Implementation';
        }

        contractsTable += '||||||\n| **' + name + '** | ' + specs + ' | ' + bases + ' |||\n';
      },
      FunctionDefinition: function FunctionDefinition(node) {
        var name = void 0;
        isPublic = false;
        doesModifierExist = false;
        isConstructor = false;

        if (node.isConstructor) {
          name = '<Constructor>';
        } else if (node.isFallback) {
          name = '<Fallback>';
        } else if (node.isReceiveEther) {
          name = '<Receive Ether>';
        } else {
          name = node.name;
        }

        var spec = '';
        if (node.visibility === 'public' || node.visibility === 'default') {
          spec += 'Public ❗️';
          isPublic = true;
        } else if (node.visibility === 'external') {
          spec += 'External ❗️';
          isPublic = true;
        } else if (node.visibility === 'private') {
          spec += 'Private 🔐';
        } else if (node.visibility === 'internal') {
          spec += 'Internal 🔒';
        }

        var payable = '';
        if (node.stateMutability === 'payable') {
          payable = '💵';
        }

        var mutating = '';
        if (!node.stateMutability) {
          mutating = '🛑';
        }

        contractsTable += '| \u2514 | ' + name + ' | ' + spec + ' | ' + mutating + ' ' + payable + ' |';
      },


      'FunctionDefinition:exit': function FunctionDefinitionExit(node) {
        if (!isConstructor && isPublic && !doesModifierExist) {
          contractsTable += 'NO❗️';
        }
        contractsTable += ' |\n';
      },

      ModifierInvocation: function ModifierInvocation(node) {
        doesModifierExist = true;
        contractsTable += ' ' + node.name;
      }
    });
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = infiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;
      var isPublic;
      var doesModifierExist;
      var isConstructor;

      var _ret = _loop(file);

      if (_ret === 'continue') continue;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var reportContents = '#'.repeat(options.deepness) + ' S\u016Brya\'s Description Report\n\n' + '#'.repeat(options.deepness + 1) + ' Files Description Table\n\n' + filesTable + '\n\n' + '#'.repeat(options.deepness + 1) + ' Contracts Description Table\n\n' + contractsTable + '\n\n' + '#'.repeat(options.deepness + 1) + ' Legend\n\n|  Symbol  |  Meaning  |\n|:--------:|-----------|\n|    \uD83D\uDED1    | Function can modify state |\n|    \uD83D\uDCB5    | Function is payable |\n';

  return reportContents;
}

/***/ }),
/* 294 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var crypto = __webpack_require__(63)
var fs = __webpack_require__(5)

module.exports = function (filename, callback) {
  var sum = crypto.createHash('sha1')
  if (callback && typeof callback === 'function') {
    var fileStream = fs.createReadStream(filename)
    fileStream.on('error', function (err) {
      return callback(err, null)
    })
    fileStream.on('data', function (chunk) {
      try {
        sum.update(chunk)
      } catch (ex) {
        return callback(ex, null)
      }
    })
    fileStream.on('end', function () {
      return callback(null, sum.digest('hex'))
    })
  } else {
    sum.update(fs.readFileSync(filename))
    return sum.digest('hex')
  }
}


/***/ }),
/* 295 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.flatten = flatten;
var fs = __webpack_require__(5);
var parser = __webpack_require__(267);

var _require = __webpack_require__(268),
    resolveImportPath = _require.resolveImportPath;

function flatten(files) {
  if (files.length === 0) {
    console.log('No files were specified for analysis in the arguments. Bailing...');
    return;
  }

  // create a set of paths already inserted to pass while flattening each file, to avoid duplication
  var visitedPaths = new Set();
  var flat = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;

      if (visitedPaths.has(file)) {
        continue;
      }
      var result = replaceImportsWithSource(file, visitedPaths);
      flat += result.flattenedContent;
      flat += '\n\n';
      visitedPaths.add(result.visitedPaths);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  console.log(flat);
}

/**  
 * Given a solidity file, returns the content with imports replaced by source code
 * 
 * @param      {string}  file  The file
 * @param      {Array}   visitedPaths     Paths already resolved that should be skipped if seen again
 * @return     {object}  { resolvedContent: A string with imports replaced by source code, visitedPaths }
 */
function replaceImportsWithSource(file) {
  var visitedPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();

  var content = void 0;
  try {
    content = fs.readFileSync(file).toString('utf-8');
  } catch (e) {
    if (e.code === 'EISDIR') {
      console.error('Skipping directory ' + file);
    } else {
      throw e;
    }
  }

  // prepend the code with a space and comment helpful for the flattened output
  content = '// The following code is from flattening this file: ' + file + '\n' + content;

  var ast = function () {
    try {
      return parser.parse(content, { loc: true });
    } catch (err) {
      console.error('\nError found while parsing the following file: ' + file + '\n');
      throw err;
    }
  }();

  var importsAndLocations = [];
  parser.visit(ast, {
    ImportDirective: function ImportDirective(node) {
      var importPath = resolveImportPath(file, node.path);
      importsAndLocations.push({ importPath: importPath, location: node.loc });
    }
  });

  var contentLines = content.split('\n');
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = importsAndLocations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var el = _step2.value;

      // arrays are 0-indexed, file lines are 1-indexed so the statement is at `start.line - 1`
      var importStatementText = contentLines[el.location.start.line - 1];

      if (!visitedPaths.has(el.importPath)) {
        // first time handling this import path, comment it out, and replace with flattened source code
        contentLines[el.location.start.line - 1] = '// The following code is from flattening this import statement in: ' + file + '\n// ' + importStatementText + '\n' + replaceImportsWithSource(el.importPath, visitedPaths).flattenedContent;
      } else {
        // we've already visited this path, just comment out the import statement
        contentLines[el.location.start.line - 1] = '// Skipping this already resolved import statement found in ' + file + ' \n// ' + importStatementText;

        visitedPaths.add(el.importPath);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  visitedPaths.add(file);

  return {
    flattenedContent: contentLines.join('\n'),
    visitedPaths: visitedPaths
  };
}

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd define */
/******/ 	(() => {
/******/ 		__webpack_require__.amdD = function () {
/******/ 			throw new Error('define cannot be used indirect');
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;

/** 
 * @author github.com/tintinweb
 * @license MIT
 * 
 * 
 * */

/** imports */
const vscode = __webpack_require__(1);
const settings = __webpack_require__(2);
const {InteractiveWebviewGenerator} = __webpack_require__(3);
const {SolidityMetricsContainer} = __webpack_require__(6);

const path = __webpack_require__(4);
let fs 


if(window) {
    fs = vscode.workspace.fs
} else {
    fs = __webpack_require__(5)
}

/** funcdecs */
function getWsGitInfo(){
    let branch = "unknown_branch";
    let commit = "unknown_commit";
    let remote = "";

    let basePath = vscode.workspace.rootPath; 

    if (fs.existsSync(basePath + "/.git/HEAD")){
        let branchFile = fs.readFileSync(basePath + "/.git/HEAD").toString('utf-8').trim();
        if(branchFile && branchFile.startsWith("ref: ")){
            branchFile = branchFile.replace("ref: ","");

            let branchFileNormalized = path.normalize(basePath + "/.git/" + branchFile);

            if (branchFileNormalized.startsWith(basePath) && fs.existsSync(branchFileNormalized)){
                branch = branchFile.replace("refs/heads/","");
                commit = fs.readFileSync(branchFileNormalized).toString('utf-8').trim(); 
                if(fs.existsSync(basePath + "/.git/FETCH_HEAD")){
                    let fetchHeadData = fs.readFileSync(basePath + "/.git/FETCH_HEAD").toString('utf-8').trim().split("\n");
                    if(fetchHeadData.lenght){
                        let fetchHead = fetchHeadData.find(line => line.startsWith(commit)) || fetchHeadData.find(line => line.includes(`branch '${branch}' of `)) || fetchHeadData[0];
                        remote = fetchHead.trim().split(/[\s]+/).pop();
                    }
                }
            }

            
        }
    }
    return {
        branch: branch,
        commit: commit,
        remote: remote
    };
}


function previewMarkdown(document, content){
    vscode.workspace.openTextDocument({content: content, language: "markdown"})
        .then(doc => vscode.window.showTextDocument(doc, vscode.ViewColumn.Beside));
}

class AnonymousDocument {
    constructor(fileName,uri){
        this.uri = uri || "";
        this.fileName = fileName || "";
    }
}

function previewHtml(webView, document, markdownTemplate, jsonData, dotGraphs){

    webView.revealOrCreatePreview(vscode.ViewColumn.Beside, document)
        .then(webpanel => {
            let data = {
                markdownTemplate:markdownTemplate,
                jsonData:jsonData,
                dotGraphs:dotGraphs
            };
            webpanel.setContextData(data);
            webpanel.getWebView().postMessage({
                    command:"renderReport", 
                    value: data
                });
            //webpanel.renderDot(options.content)
            //handle messages?
            //webpanel.handleMessages = function (message) {} 
        });
}

function exportCurrentAsHtml(context, webView){

    let previewPanels = webView.getActivePanels();

    previewPanels.forEach(p => {
        let msgValue = p.getContextData();

        //export report to workspace

        vscode.window.showSaveDialog({
            defaultUri: vscode.Uri.file(path.join(vscode.workspace.rootPath,"solidity-metrics.html")),
            saveLabel: "Export"
        }).then(fileUri => {
            if (!fileUri) {
                return; //abort, nothing selected
            }

            let result = {'index':'', 'js':[], 'css':[] };
            let srcFiles = [
                'index.html',
                
                path.join('js', 'Chart.bundle.min.js'), 
                path.join('js', 'chartjs-plugin-colorschemes.min.js'), 

                
                path.join('js', 'showdown.min.js'), 
                path.join('js', 'showdown-table.min.js'), 
                path.join('css','github-markdown.css'),
                
                path.join('js', 'd3graphviz', 'viz.js'), 
                path.join('js', 'd3graphviz', 'd3.min.js'), 
                path.join('js', 'd3graphviz', 'd3-graphviz.min.js'), 
                
                'main.js', 
            ];
            
            srcFiles.forEach(f => {
                switch(f.split('.').pop()){
                    case 'js': result.js.push(fs.readFileSync(path.join(context.extensionPath, "content", f), "utf8")); break;
                    case 'html': result.index = fs.readFileSync(path.join(context.extensionPath, "content", f), "utf8"); break;
                    case 'css': result.css.push(fs.readFileSync(path.join(context.extensionPath, "content", f), "utf8")); break;
                }
            });

            result.index = result.index
                .replace(/<script .*?src="(.+)"><\/script>/g,"")
                .replace(/<link.*\/>/g,"")
                .replace(/<!-- .* -->/g, "")
                .replace(/\s{5,}/g,'');

            let staticJsCss = `
        <style>
            ${result.css.join("\n<!-- -->\n")}
        </style>
        <script>
            ${result.js.join("\n</script><script>\n")}
        </script>
        <script>
            let staticMetrics = ${JSON.stringify(msgValue)};

            window.postMessage({"command":"renderReport", value:staticMetrics}, '*')
        </script>`;

            fs.writeFile(fileUri.fsPath, result.index.replace("<!--/*** %%static_metrics%% ***/-->", staticJsCss), function(err) {
                if(err) {
                    vscode.window.showErrorMessage('Export failed:' + err);
                    console.log(err);
                    return;
                }
                vscode.window.showInformationMessage('Export successful → ' + fileUri.fsPath);
            }); 
        });
    });
}

/** event funcs */
function onActivate(context) {
    const webView = new InteractiveWebviewGenerator(context, "content");

    context.subscriptions.push(
        vscode.commands.registerCommand('solidity-metrics.activeFile.report', (args) => {

            let document = vscode.window.activeTextEditor.document;
            let metrics = new SolidityMetricsContainer(vscode.workspace.name, {
                basePath:vscode.workspace.rootPath + "/",
                inputFileGlobExclusions:settings.extensionConfig().file.exclusions.glob,
                inputFileGlob: undefined,
                inputFileGlobLimit: settings.extensionConfig().file.limit,
                debug:settings.extensionConfig().debug,
                repoInfo: getWsGitInfo()
            });
            metrics.inputFileGlob = document.fileName.replace(metrics.basePath,"");

            metrics.analyze(document.fileName);

            if(!metrics.seenFiles.length){
                vscode.window.showWarningMessage("Not a valid solidity source file.");
                return;
            }

            let dotGraphs = {};
            try {
                dotGraphs = metrics.getDotGraphs();
            } catch (error) {
                console.log(error);
            }

            previewHtml(webView, 
                document, 
                metrics.generateReportMarkdown(), 
                metrics.totals(),
                dotGraphs);
        })
    );

    context.subscriptions.push(
        vscode.commands.registerCommand('solidity-metrics.activeFile.exportHtml', (args) => {
            exportCurrentAsHtml(context, webView);
        })
    );

    context.subscriptions.push(
        vscode.commands.registerCommand('solidity-metrics.workspace.report', async (args) => {

            let metrics = new SolidityMetricsContainer(vscode.workspace.name, {
                basePath:vscode.workspace.rootPath + "/",
                inputFileGlobExclusions:settings.extensionConfig().file.exclusions.glob,
                inputFileGlob:"**/*.sol",
                inputFileGlobLimit: settings.extensionConfig().file.limit,
                debug:settings.extensionConfig().debug,
                repoInfo: getWsGitInfo()
            });

            vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: `Solidity-Metrics: analyzing...`,
                cancellable: false
            }, async (progress, token) => {
                token.onCancellationRequested(() => {
                    console.log("User canceled the long running operation");
                });

                await vscode.workspace.findFiles(metrics.inputFileGlob, metrics.inputFileGlobExclusions, metrics.inputFileGlobLimit)
                    .then(uris => {
                        uris.forEach(uri => {
                            metrics.analyze(uri.fsPath);
                            progress.report({ increment: 1 });
                        });
                    });

                await vscode.workspace.findFiles("**/truffle*.js", metrics.inputFileGlobExclusions, metrics.inputFileGlobLimit)
                    .then(uris => {
                        uris.forEach(uri => {
                            if(uri.fsPath.endsWith(".js")){
                                metrics.addTruffleProjectLocation(uri.fsPath);
                                progress.report({ increment: 1 });
                            }
                        });
                    });

                // {**/node_modules,**/mock*,**/test*,**/migrations,**/Migrations.sol}
                let excludeFilesGlobArray = metrics.inputFileGlobExclusions.replace("{","").replace("}","").split(",").map(g => g.endsWith(".sol") ? g : g + "/**/*.sol");

                await vscode.workspace.findFiles("{" + excludeFilesGlobArray.join(",") + "}", undefined, metrics.excludeFileGlobLimit) 
                    .then(uris => {
                        uris.forEach(uri => {
                            metrics.addExcludedFile(uri.fsPath);
                            progress.report({ increment: 1 });
                        });
                    });
                
                if(!metrics.seenFiles.length){
                    vscode.window.showWarningMessage("No valid solidity source files found.");
                    return;
                }

                let dotGraphs = {};
                try {
                    dotGraphs = metrics.getDotGraphs();
                } catch (error) {
                    console.log(error);
                }

                previewHtml(webView, 
                    new AnonymousDocument(vscode.workspace.name, vscode.workspace.name), 
                    metrics.generateReportMarkdown(), 
                    metrics.totals(),
                    dotGraphs);
            });
            
        })
    );

    context.subscriptions.push(
        vscode.commands.registerCommand('solidity-metrics.contextMenu.report', async (clickedFile, selectedFiles) => {

            let metrics = new SolidityMetricsContainer(vscode.workspace.name, {
                basePath:vscode.workspace.rootPath + "/",
                inputFileGlobExclusions:settings.extensionConfig().file.exclusions.glob,
                inputFileGlob: undefined,
                inputFileGlobLimit: settings.extensionConfig().file.limit,
                debug:settings.extensionConfig().debug,
                repoInfo: getWsGitInfo()
            });
            metrics.inputFileGlob = "{" + selectedFiles.map(x => x.fsPath.endsWith(".sol") ? x.fsPath.replace(metrics.basePath,"") : x.fsPath.replace(metrics.basePath,"") + "/**/*.sol").join(",")  + "}";


            vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: `Solidity-Metrics: analyzing...`,
                cancellable: false
            }, async (progress, token) => {
                token.onCancellationRequested(() => {
                    console.log("User canceled the long running operation");
                });
    
                //progress.report({ increment: 0 });
                await vscode.workspace.findFiles(metrics.inputFileGlob, metrics.inputFileGlobExclusions, metrics.inputFileGlobLimit)
                    .then(uris => {
                        uris.forEach(uri => {
                            metrics.analyze(uri.fsPath);
                            progress.report({ increment: 1 });
                        });
                    });

                //discover truffle projects
                let truffleFileGlob = "{" + selectedFiles.map(x => x.fsPath.endsWith(".sol") ? x.fsPath.replace(metrics.basePath,"") : x.fsPath.replace(metrics.basePath,"") + "/**/truffle*.js").join(",")  + "}";

                await vscode.workspace.findFiles(truffleFileGlob, metrics.inputFileGlobExclusions, metrics.inputFileGlobLimit)
                    .then(uris => {
                        uris.forEach(uri => {
                            if(uri.fsPath.endsWith(".js")){
                                metrics.addTruffleProjectLocation(uri.fsPath);
                                progress.report({ increment: 1 });
                            }
                        });
                    });
                //list excluded files

                // {**/node_modules,**/mock*,**/test*,**/migrations,**/Migrations.sol}
                let excludeFilesGlobArray = metrics.inputFileGlobExclusions.replace("{","").replace("}","").split(",");
                let excludeFilesGlob = [];

                for(let sFile of selectedFiles){
                    if(sFile.fsPath.endsWith(".sol")){
                        //ignore explicitly selected files
                        continue;
                    }
                    for(let g of excludeFilesGlobArray) {
                        excludeFilesGlob.push(sFile.fsPath.replace(metrics.basePath,"") + "/" + g + "/**/*.sol");
                    }
                }
                if(excludeFilesGlob.length){
                    await vscode.workspace.findFiles("{" + excludeFilesGlob.join(",") + "}", undefined, metrics.excludeFileGlobLimit) 
                        .then(uris => {
                            uris.forEach(uri => {
                                metrics.addExcludedFile(uri.fsPath);
                                progress.report({ increment: 1 });
                            });
                        });
                }
                
                if(!metrics.seenFiles.length){
                    vscode.window.showWarningMessage("No valid solidity source files found.");
                    return;
                }

                let dotGraphs = {};
                try {
                    dotGraphs = metrics.getDotGraphs();
                } catch (error) {
                    console.log(error);
                }

                previewHtml(webView, 
                    new AnonymousDocument(vscode.workspace.name, vscode.workspace.name), 
                    metrics.generateReportMarkdown(), 
                    metrics.totals(),
                    dotGraphs);
            });


            

        })
    );
}

/* exports */
exports.activate = onActivate;
})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;
//# sourceMappingURL=out.js.map